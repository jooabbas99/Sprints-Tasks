
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fe2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  00001fe2  00002076  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800152  00800152  00002168  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a21  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001622  00000000  00000000  00006fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c1d  00000000  00000000  00008607  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000096c  00000000  00000000  0000b224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000143b  00000000  00000000  0000bb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a63  00000000  00000000  0000cfcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000fa2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__vector_1>
       8:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_2>
       c:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	ed 0b       	sbc	r30, r29
      56:	f8 0b       	sbc	r31, r24
      58:	03 0c       	add	r0, r3
      5a:	13 0d       	add	r17, r3
      5c:	0e 0c       	add	r0, r14
      5e:	13 0d       	add	r17, r3
      60:	19 0c       	add	r1, r9
      62:	24 0c       	add	r2, r4
      64:	2f 0c       	add	r2, r15
      66:	3a 0c       	add	r3, r10
      68:	50 0c       	add	r5, r0
      6a:	5b 0c       	add	r5, r11
      6c:	66 0c       	add	r6, r6
      6e:	15 0d       	add	r17, r5
      70:	71 0c       	add	r7, r1
      72:	15 0d       	add	r17, r5
      74:	7c 0c       	add	r7, r12
      76:	87 0c       	add	r8, r7
      78:	92 0c       	add	r9, r2
      7a:	9d 0c       	add	r9, r13
      7c:	b3 0c       	add	r11, r3
      7e:	be 0c       	add	r11, r14
      80:	c9 0c       	add	r12, r9
      82:	d4 0c       	add	r13, r4
      84:	df 0c       	add	r13, r15
      86:	ea 0c       	add	r14, r10
      88:	f5 0c       	add	r15, r5
      8a:	00 0d       	add	r16, r0

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e2 ee       	ldi	r30, 0xE2	; 226
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a2 35       	cpi	r26, 0x52	; 82
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	a2 e5       	ldi	r26, 0x52	; 82
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a2 38       	cpi	r26, 0x82	; 130
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 ad 08 	call	0x115a	; 0x115a <main>
      c2:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <BUTTON_vidChangeDir>:
/*									Static Function Implementation                				*/
/************************************************************************************************/

void BUTTON_vidChangeDir(void)
{
	u8_g_dirStateCounter ^= 1 ;
      ca:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u8_g_dirStateCounter>
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	89 27       	eor	r24, r25
      d2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <u8_g_dirStateCounter>
      d6:	08 95       	ret

000000d8 <TIMER1_callBackFunc>:
}


void TIMER1_callBackFunc(void)
{
	u8_g_OneSecTicks++;
      d8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_g_OneSecTicks>
      dc:	8f 5f       	subi	r24, 0xFF	; 255
      de:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8_g_OneSecTicks>
	TIMER_Manager_reset(&st_timer1Config);
      e2:	80 e6       	ldi	r24, 0x60	; 96
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <TIMER_Manager_reset>
      ea:	08 95       	ret

000000ec <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
      ec:	0e 94 76 08 	call	0x10ec	; 0x10ec <HULTRASONIC_vidInit>
	HULTRASONIC_vidInterruptEnable();
      f0:	0e 94 90 08 	call	0x1120	; 0x1120 <HULTRASONIC_vidInterruptEnable>
	(void) HLCD_vidInit();
      f4:	0e 94 c9 04 	call	0x992	; 0x992 <HLCD_vidInit>
	(void) KEYPAD_init(&st_gs_keypadConfig);
      f8:	87 e6       	ldi	r24, 0x67	; 103
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 0f 06 	call	0xc1e	; 0xc1e <KEYPAD_init>
	(void) HExtInt_enInit(INT_0, RISE_EDGE);
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0e 94 2b 04 	call	0x856	; 0x856 <HExtInt_enInit>
	(void) TIMER_Manager_init (&st_timer1Config);
     108:	80 e6       	ldi	r24, 0x60	; 96
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 9a 07 	call	0xf34	; 0xf34 <TIMER_Manager_init>
	(void) PWM_init();
     110:	0e 94 4e 07 	call	0xe9c	; 0xe9c <PWM_init>
	(void) CAR_init();
     114:	0e 94 b3 03 	call	0x766	; 0x766 <CAR_init>
	
	HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
     118:	84 ef       	ldi	r24, 0xF4	; 244
     11a:	97 e0       	ldi	r25, 0x07	; 7
     11c:	0e 94 a7 08 	call	0x114e	; 0x114e <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
     120:	88 e0       	ldi	r24, 0x08	; 8
     122:	98 e0       	ldi	r25, 0x08	; 8
     124:	0e 94 aa 08 	call	0x1154	; 0x1154 <HULTRASONIC_vidCBF_INT>
	(void) HExtInt_enCBFInt0(BUTTON_vidChangeDir);
     128:	85 e6       	ldi	r24, 0x65	; 101
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 41 04 	call	0x882	; 0x882 <HExtInt_enCBFInt0>
     130:	08 95       	ret

00000132 <APP_updateDirection>:
	TIMER_Manager_reset(&st_timer1Config);
}

void APP_updateDirection(void)
{
	HULTRASONIC_vidInterruptDisable();
     132:	0e 94 97 08 	call	0x112e	; 0x112e <HULTRASONIC_vidInterruptDisable>
	u8_g_OneSecTicks = 0;
     136:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8_g_OneSecTicks>
	TIMER_Manager_start (&st_timer1Config);
     13a:	80 e6       	ldi	r24, 0x60	; 96
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 ba 07 	call	0xf74	; 0xf74 <TIMER_Manager_start>
	HExtInt0_enIntEnable();
     142:	0e 94 4c 04 	call	0x898	; 0x898 <HExtInt0_enIntEnable>
	while(u8_g_OneSecTicks <= 2)
     146:	1d c0       	rjmp	.+58     	; 0x182 <APP_updateDirection+0x50>
	{
		if (u8_g_dirStateCounter == MOTOR_TURN_LEFT)
     148:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <u8_g_dirStateCounter>
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	79 f4       	brne	.+30     	; 0x16e <APP_updateDirection+0x3c>
		{
			HLCD_gotoXY(1,4);
     150:	64 e0       	ldi	r22, 0x04	; 4
     152:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
			HLCD_vidWriteChar(' ');
     156:	80 e2       	ldi	r24, 0x20	; 32
     158:	0e 94 2a 05 	call	0xa54	; 0xa54 <HLCD_vidWriteChar>
			HLCD_gotoXY(1,0);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
			HLCD_WriteString((uint8_t*)"Left");
     164:	8c e8       	ldi	r24, 0x8C	; 140
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
     16c:	0a c0       	rjmp	.+20     	; 0x182 <APP_updateDirection+0x50>
		}
		else if(u8_g_dirStateCounter == MOTOR_TURN_RIGHT){
     16e:	81 11       	cpse	r24, r1
     170:	08 c0       	rjmp	.+16     	; 0x182 <APP_updateDirection+0x50>
			HLCD_gotoXY(1,0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
			HLCD_WriteString((uint8_t*)"Right");
     17a:	81 e9       	ldi	r24, 0x91	; 145
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
{
	HULTRASONIC_vidInterruptDisable();
	u8_g_OneSecTicks = 0;
	TIMER_Manager_start (&st_timer1Config);
	HExtInt0_enIntEnable();
	while(u8_g_OneSecTicks <= 2)
     182:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_g_OneSecTicks>
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	f8 f2       	brcs	.-66     	; 0x148 <APP_updateDirection+0x16>
		else {
			/* do nothing  */
		}
	}
	//while(u8_g_OneSecTicks <= 7);
	HLCD_ClrDisplay();
     18a:	0e 94 a4 05 	call	0xb48	; 0xb48 <HLCD_ClrDisplay>
	(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     18e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     192:	0e 94 cc 07 	call	0xf98	; 0xf98 <TIMER_Manager_stop>
	HExtInt0_enIntDisable();
     196:	0e 94 49 04 	call	0x892	; 0x892 <HExtInt0_enIntDisable>
	HULTRASONIC_vidInterruptEnable();
     19a:	0e 94 90 08 	call	0x1120	; 0x1120 <HULTRASONIC_vidInterruptEnable>
	HLCD_gotoXY(0,0);
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
	HLCD_WriteString((uint8_t*)"Motor starts in");
     1a6:	87 e9       	ldi	r24, 0x97	; 151
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
	HLCD_gotoXY(1,0);
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
	HLCD_WriteString((uint8_t*)"2 Sec.");
     1b6:	87 ea       	ldi	r24, 0xA7	; 167
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	2f ef       	ldi	r18, 0xFF	; 255
     1c0:	83 ed       	ldi	r24, 0xD3	; 211
     1c2:	90 e3       	ldi	r25, 0x30	; 48
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	80 40       	sbci	r24, 0x00	; 0
     1c8:	90 40       	sbci	r25, 0x00	; 0
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <APP_updateDirection+0x92>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <APP_updateDirection+0x9c>
     1ce:	00 00       	nop
	_delay_ms(2000);
	HLCD_ClrDisplay();
     1d0:	0e 94 a4 05 	call	0xb48	; 0xb48 <HLCD_ClrDisplay>
     1d4:	08 95       	ret

000001d6 <APP_vidStart>:
/*	sei();*/
	//DDRA = 0xFF;
}

void APP_vidStart(void)
{
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
 	//if (en_motorSel == EN_MOTOR_IDLE)
 	//{
		(void) KEYPAD_read(&u8KeyRead);
     1de:	88 e7       	ldi	r24, 0x78	; 120
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0e 94 4c 06 	call	0xc98	; 0xc98 <KEYPAD_read>
		
		if (u8KeyRead != 'N')
     1e6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <u8KeyRead>
     1ea:	8e 34       	cpi	r24, 0x4E	; 78
     1ec:	69 f0       	breq	.+26     	; 0x208 <APP_vidStart+0x32>
		{
			switch(u8KeyRead)
     1ee:	81 33       	cpi	r24, 0x31	; 49
     1f0:	19 f0       	breq	.+6      	; 0x1f8 <APP_vidStart+0x22>
     1f2:	82 33       	cpi	r24, 0x32	; 50
     1f4:	21 f0       	breq	.+8      	; 0x1fe <APP_vidStart+0x28>
     1f6:	08 c0       	rjmp	.+16     	; 0x208 <APP_vidStart+0x32>
			{
				case '1' : {
					en_motorSel = EN_MOTOR_START;
     1f8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
					break;
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <APP_vidStart+0x32>
				}
				case '2' : {
					en_motorSel = EN_MOTOR_STOP;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
					flag2 = 0;
     204:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <flag2>
					break;
				}
			}
		}
	//}
	if (en_motorSel == EN_MOTOR_START)
     208:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <en_motorSel>
     20c:	81 11       	cpse	r24, r1
     20e:	40 c2       	rjmp	.+1152   	; 0x690 <__EEPROM_REGION_LENGTH__+0x290>
	 { 				
		if (en_start_state == EN_UPDATE_DIR)
     210:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <en_start_state>
     214:	81 11       	cpse	r24, r1
     216:	10 c0       	rjmp	.+32     	; 0x238 <APP_vidStart+0x62>
		{
			HLCD_ClrDisplay();
     218:	0e 94 a4 05 	call	0xb48	; 0xb48 <HLCD_ClrDisplay>
			HLCD_gotoXY(0,0);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
			HLCD_WriteString( (uint8_t*) "Set Def. Rot.");
     224:	8e ea       	ldi	r24, 0xAE	; 174
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
			APP_updateDirection();
     22c:	0e 94 99 00 	call	0x132	; 0x132 <APP_updateDirection>
			en_start_state = UPDATE_OBISTICAL_STATE;
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <en_start_state>
     236:	66 c0       	rjmp	.+204    	; 0x304 <APP_vidStart+0x12e>
		}
		else if (en_start_state == UPDATE_OBISTICAL_STATE )
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	09 f0       	breq	.+2      	; 0x23e <APP_vidStart+0x68>
     23c:	63 c0       	rjmp	.+198    	; 0x304 <APP_vidStart+0x12e>
		{
		  global_f64Dist = HULTRASONIC_u8Read();
     23e:	0e 94 9c 08 	call	0x1138	; 0x1138 <HULTRASONIC_u8Read>
     242:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <global_f64Dist>
     246:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <global_f64Dist+0x1>
     24a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <global_f64Dist+0x2>
     24e:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <global_f64Dist+0x3>
     252:	8f e2       	ldi	r24, 0x2F	; 47
     254:	95 e7       	ldi	r25, 0x75	; 117
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <APP_vidStart+0x80>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <APP_vidStart+0x86>
     25c:	00 00       	nop
		  _delay_ms(15);
		  
			if		(global_f64Dist > 70.0 )							{ en_Dist_states = NO_OBISTICALS;  }		
     25e:	c0 90 79 01 	lds	r12, 0x0179	; 0x800179 <global_f64Dist>
     262:	d0 90 7a 01 	lds	r13, 0x017A	; 0x80017a <global_f64Dist+0x1>
     266:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <global_f64Dist+0x2>
     26a:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <global_f64Dist+0x3>
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	4c e8       	ldi	r20, 0x8C	; 140
     274:	52 e4       	ldi	r21, 0x42	; 66
     276:	c7 01       	movw	r24, r14
     278:	b6 01       	movw	r22, r12
     27a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__gesf2>
     27e:	18 16       	cp	r1, r24
     280:	24 f4       	brge	.+8      	; 0x28a <APP_vidStart+0xb4>
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
     288:	3d c0       	rjmp	.+122    	; 0x304 <APP_vidStart+0x12e>
			else if (global_f64Dist > 30.0 && global_f64Dist <= 70.0)	{ en_Dist_states = OBISTICAL_70_30; }	
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 ef       	ldi	r20, 0xF0	; 240
     290:	51 e4       	ldi	r21, 0x41	; 65
     292:	c7 01       	movw	r24, r14
     294:	b6 01       	movw	r22, r12
     296:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__gesf2>
     29a:	18 16       	cp	r1, r24
     29c:	74 f4       	brge	.+28     	; 0x2ba <APP_vidStart+0xe4>
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	4c e8       	ldi	r20, 0x8C	; 140
     2a4:	52 e4       	ldi	r21, 0x42	; 66
     2a6:	c7 01       	movw	r24, r14
     2a8:	b6 01       	movw	r22, r12
     2aa:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__cmpsf2>
     2ae:	18 16       	cp	r1, r24
     2b0:	24 f0       	brlt	.+8      	; 0x2ba <APP_vidStart+0xe4>
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
     2b8:	25 c0       	rjmp	.+74     	; 0x304 <APP_vidStart+0x12e>
			else if (global_f64Dist >= 20.0 && global_f64Dist <= 30)	{ en_Dist_states = OBISTICAL_30_20;}	
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 ea       	ldi	r20, 0xA0	; 160
     2c0:	51 e4       	ldi	r21, 0x41	; 65
     2c2:	c7 01       	movw	r24, r14
     2c4:	b6 01       	movw	r22, r12
     2c6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__gesf2>
     2ca:	88 23       	and	r24, r24
     2cc:	74 f0       	brlt	.+28     	; 0x2ea <APP_vidStart+0x114>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 ef       	ldi	r20, 0xF0	; 240
     2d4:	51 e4       	ldi	r21, 0x41	; 65
     2d6:	c7 01       	movw	r24, r14
     2d8:	b6 01       	movw	r22, r12
     2da:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__cmpsf2>
     2de:	18 16       	cp	r1, r24
     2e0:	24 f0       	brlt	.+8      	; 0x2ea <APP_vidStart+0x114>
     2e2:	83 e0       	ldi	r24, 0x03	; 3
     2e4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
     2e8:	0d c0       	rjmp	.+26     	; 0x304 <APP_vidStart+0x12e>
			else if (global_f64Dist < 20.0)								{ en_Dist_states = OBISTICAL_LESS_20;}	
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	40 ea       	ldi	r20, 0xA0	; 160
     2f0:	51 e4       	ldi	r21, 0x41	; 65
     2f2:	c7 01       	movw	r24, r14
     2f4:	b6 01       	movw	r22, r12
     2f6:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__cmpsf2>
     2fa:	88 23       	and	r24, r24
     2fc:	1c f4       	brge	.+6      	; 0x304 <APP_vidStart+0x12e>
     2fe:	84 e0       	ldi	r24, 0x04	; 4
     300:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
			else{  /* do nothing */ }	
				
			}	else { /*do nothing*/}
				
		if (en_Dist_states == NO_OBISTICALS)
     304:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	09 f0       	breq	.+2      	; 0x30e <APP_vidStart+0x138>
     30c:	6d c0       	rjmp	.+218    	; 0x3e8 <APP_vidStart+0x212>
		{
			if(global_f64Dist>99.0)
     30e:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     312:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     316:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     31a:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	46 ec       	ldi	r20, 0xC6	; 198
     324:	52 e4       	ldi	r21, 0x42	; 66
     326:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__gesf2>
     32a:	18 16       	cp	r1, r24
     32c:	64 f4       	brge	.+24     	; 0x346 <APP_vidStart+0x170>
			{
				global_f64Dist = 99.0;
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	a6 ec       	ldi	r26, 0xC6	; 198
     334:	b2 e4       	ldi	r27, 0x42	; 66
     336:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <global_f64Dist>
     33a:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <global_f64Dist+0x1>
     33e:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <global_f64Dist+0x2>
     342:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <global_f64Dist+0x3>
			}
				HLCD_gotoXY(1,0);
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
				HLCD_WriteString((uint8_t*)"Dist: ");
     34e:	8c eb       	ldi	r24, 0xBC	; 188
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     356:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     35a:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     35e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     362:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     366:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fixunssfsi>
     36a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <HLCD_WriteInt>
				HLCD_WriteString((uint8_t*)" cm");
     36e:	83 ec       	ldi	r24, 0xC3	; 195
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				
				/* Motor move forward with duty cycle 30% for 5 sec */
				u8_g_OneSecTicks = 0;
     376:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8_g_OneSecTicks>
				TIMER_Manager_start (&st_timer1Config);
     37a:	80 e6       	ldi	r24, 0x60	; 96
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 ba 07 	call	0xf74	; 0xf74 <TIMER_Manager_start>
				
				while(u8_g_OneSecTicks <= 5 && flag4 == 0)
     382:	11 c0       	rjmp	.+34     	; 0x3a6 <APP_vidStart+0x1d0>
				{
					HLCD_gotoXY(0,0);
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
					HLCD_WriteString((uint8_t*)"Speed:30% ");
     38c:	87 ec       	ldi	r24, 0xC7	; 199
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
					HLCD_WriteString((uint8_t*)"Dir:F");
     394:	82 ed       	ldi	r24, 0xD2	; 210
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
					PWM_start(30,20,FORWARD);
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	64 e1       	ldi	r22, 0x14	; 20
     3a0:	8e e1       	ldi	r24, 0x1E	; 30
     3a2:	0e 94 5d 07 	call	0xeba	; 0xeba <PWM_start>
				
				/* Motor move forward with duty cycle 30% for 5 sec */
				u8_g_OneSecTicks = 0;
				TIMER_Manager_start (&st_timer1Config);
				
				while(u8_g_OneSecTicks <= 5 && flag4 == 0)
     3a6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_g_OneSecTicks>
     3aa:	86 30       	cpi	r24, 0x06	; 6
     3ac:	20 f4       	brcc	.+8      	; 0x3b6 <APP_vidStart+0x1e0>
     3ae:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <flag4>
     3b2:	88 23       	and	r24, r24
     3b4:	39 f3       	breq	.-50     	; 0x384 <APP_vidStart+0x1ae>
					HLCD_gotoXY(0,0);
					HLCD_WriteString((uint8_t*)"Speed:30% ");
					HLCD_WriteString((uint8_t*)"Dir:F");
					PWM_start(30,20,FORWARD);
				}
				flag4=1;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <flag4>
				(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     3bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3c0:	0e 94 cc 07 	call	0xf98	; 0xf98 <TIMER_Manager_stop>
				/* Motor move forward with duty cycle 50%  */
				HLCD_gotoXY(0,0);
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
				HLCD_WriteString((uint8_t*)"Speed:50% ");
     3cc:	88 ed       	ldi	r24, 0xD8	; 216
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				HLCD_WriteString((uint8_t*)"Dir:F");
     3d4:	82 ed       	ldi	r24, 0xD2	; 210
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				PWM_start(50,20,FORWARD);
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	64 e1       	ldi	r22, 0x14	; 20
     3e0:	82 e3       	ldi	r24, 0x32	; 50
     3e2:	0e 94 5d 07 	call	0xeba	; 0xeba <PWM_start>
     3e6:	ba c1       	rjmp	.+884    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
				
		}
		else if (en_Dist_states == OBISTICAL_70_30)
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	61 f5       	brne	.+88     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		{
				flag4=0;
     3ec:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <flag4>
				HLCD_gotoXY(1,0);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
				HLCD_WriteString((uint8_t*)"Dist: ");
     3f8:	8c eb       	ldi	r24, 0xBC	; 188
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     400:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     404:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     408:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     40c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     410:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fixunssfsi>
     414:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <HLCD_WriteInt>
				HLCD_WriteString((uint8_t*)" cm");
     418:	83 ec       	ldi	r24, 0xC3	; 195
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
				HLCD_WriteString((uint8_t*)"Speed:30% ");
     428:	87 ec       	ldi	r24, 0xC7	; 199
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				HLCD_WriteString((uint8_t*)"Dir:F");
     430:	82 ed       	ldi	r24, 0xD2	; 210
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				/* Motor move forward with duty cycle 30% */		
				PWM_start(30,20,FORWARD);
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	64 e1       	ldi	r22, 0x14	; 20
     43c:	8e e1       	ldi	r24, 0x1E	; 30
     43e:	0e 94 5d 07 	call	0xeba	; 0xeba <PWM_start>
     442:	8c c1       	rjmp	.+792    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
		}
		else if (en_Dist_states == OBISTICAL_30_20)
     444:	83 30       	cpi	r24, 0x03	; 3
     446:	09 f0       	breq	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     448:	a4 c0       	rjmp	.+328    	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
		{
			flag4=0;
     44a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <flag4>
			PWM_stop();
     44e:	0e 94 89 07 	call	0xf12	; 0xf12 <PWM_stop>
				HLCD_gotoXY(1,0);
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
				HLCD_WriteString((uint8_t*)"Dist: ");
     45a:	8c eb       	ldi	r24, 0xBC	; 188
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     462:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     466:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     46a:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     46e:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     472:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fixunssfsi>
     476:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <HLCD_WriteInt>
				HLCD_WriteString((uint8_t*)" cm");
     47a:	83 ec       	ldi	r24, 0xC3	; 195
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
				HLCD_WriteString((uint8_t*)"Speed:0%");
     48a:	83 ee       	ldi	r24, 0xE3	; 227
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				HLCD_WriteString((uint8_t*)"Dir:S");
     492:	8c ee       	ldi	r24, 0xEC	; 236
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				/* Motor Stop Implementation  */
				CAR_stop();
     49a:	0e 94 17 04 	call	0x82e	; 0x82e <CAR_stop>
				//_delay_ms(500);
				HLCD_gotoXY(0,0);
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
				HLCD_WriteString((uint8_t*)"Speed:100%");
     4a6:	82 ef       	ldi	r24, 0xF2	; 242
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				HLCD_WriteString((uint8_t*)"Dir:R");
     4ae:	8d ef       	ldi	r24, 0xFD	; 253
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				u8_g_OneSecTicks = 0;
     4b6:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8_g_OneSecTicks>
				TIMER_Manager_start(&st_timer1Config);
     4ba:	80 e6       	ldi	r24, 0x60	; 96
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 ba 07 	call	0xf74	; 0xf74 <TIMER_Manager_start>
				while (global_f64Dist <= 30.0)
     4c2:	55 c0       	rjmp	.+170    	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
				{
					/* rotate depend on u8_g_dirStateCounter  */
					if (u8_g_OneSecTicks <= 4)
     4c4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_g_OneSecTicks>
     4c8:	85 30       	cpi	r24, 0x05	; 5
     4ca:	60 f4       	brcc	.+24     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
					{
						if (u8_g_dirStateCounter == MOTOR_TURN_LEFT)
     4cc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <u8_g_dirStateCounter>
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	19 f4       	brne	.+6      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
						{
							CAR_reverse_left();
     4d4:	0e 94 03 04 	call	0x806	; 0x806 <CAR_reverse_left>
     4d8:	09 c0       	rjmp	.+18     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
							//_delay_ms(1000);
							//u8_gs_rotate_counter++;
						}
						else if (u8_g_dirStateCounter == MOTOR_TURN_RIGHT)
     4da:	81 11       	cpse	r24, r1
     4dc:	07 c0       	rjmp	.+14     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
						{
							CAR_reverse_right();
     4de:	0e 94 ef 03 	call	0x7de	; 0x7de <CAR_reverse_right>
     4e2:	04 c0       	rjmp	.+8      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
							// do nothing
						}
						/*u8_gs_rotate_counter++;*/
					}
					else{
						en_motorSel = EN_MOTOR_STOP_V2;
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
						break;
     4ea:	38 c1       	rjmp	.+624    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
					}
					(void) KEYPAD_read(&u8KeyRead);
     4ec:	88 e7       	ldi	r24, 0x78	; 120
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 4c 06 	call	0xc98	; 0xc98 <KEYPAD_read>
					if (u8KeyRead == '2')
     4f4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <u8KeyRead>
     4f8:	82 33       	cpi	r24, 0x32	; 50
     4fa:	31 f4       	brne	.+12     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
					{
						en_motorSel = EN_MOTOR_STOP;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
						flag2 = 0;
     502:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <flag2>
						break;
     506:	2a c1       	rjmp	.+596    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
					}
					global_f64Dist = HULTRASONIC_u8Read();
     508:	0e 94 9c 08 	call	0x1138	; 0x1138 <HULTRASONIC_u8Read>
     50c:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <global_f64Dist>
     510:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <global_f64Dist+0x1>
     514:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <global_f64Dist+0x2>
     518:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
					HLCD_WriteString((uint8_t*)"Dist: ");
     524:	8c eb       	ldi	r24, 0xBC	; 188
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     52c:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     530:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     534:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     538:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     53c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fixunssfsi>
     540:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <HLCD_WriteInt>
					HLCD_WriteString((uint8_t*)" cm");
     544:	83 ec       	ldi	r24, 0xC3	; 195
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
					if (global_f64Dist <= 20.0) break;
     54c:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     550:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     554:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     558:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	40 ea       	ldi	r20, 0xA0	; 160
     562:	51 e4       	ldi	r21, 0x41	; 65
     564:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__cmpsf2>
     568:	18 16       	cp	r1, r24
     56a:	0c f0       	brlt	.+2      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
     56c:	f7 c0       	rjmp	.+494    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
				HLCD_gotoXY(0,0);
				HLCD_WriteString((uint8_t*)"Speed:100%");
				HLCD_WriteString((uint8_t*)"Dir:R");
				u8_g_OneSecTicks = 0;
				TIMER_Manager_start(&st_timer1Config);
				while (global_f64Dist <= 30.0)
     56e:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     572:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     576:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     57a:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 ef       	ldi	r20, 0xF0	; 240
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__cmpsf2>
     58a:	18 16       	cp	r1, r24
     58c:	0c f0       	brlt	.+2      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
     58e:	9a cf       	rjmp	.-204    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     590:	e5 c0       	rjmp	.+458    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
					HLCD_WriteString((uint8_t*)" cm");
					if (global_f64Dist <= 20.0) break;
				}

		}
		else if (en_Dist_states == OBISTICAL_LESS_20)
     592:	84 30       	cpi	r24, 0x04	; 4
     594:	09 f0       	breq	.+2      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
     596:	e2 c0       	rjmp	.+452    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
		{
			flag4=0;
     598:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <flag4>
				HLCD_gotoXY(1,0);
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
				HLCD_WriteString((uint8_t*)"Dist: ");
     5a4:	8c eb       	ldi	r24, 0xBC	; 188
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     5ac:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     5b0:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     5b4:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     5b8:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     5bc:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fixunssfsi>
     5c0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <HLCD_WriteInt>
				HLCD_WriteString((uint8_t*)" cm");
     5c4:	83 ec       	ldi	r24, 0xC3	; 195
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
				HLCD_WriteString((uint8_t*)"Speed:0% ");
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				HLCD_WriteString((uint8_t*)"Dir:S");
     5dc:	8c ee       	ldi	r24, 0xEC	; 236
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				/*  Motor Stop Implementation  */
				CAR_stop();
     5e4:	0e 94 17 04 	call	0x82e	; 0x82e <CAR_stop>
				//_delay_ms(500);
				HLCD_gotoXY(0,0);
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
				HLCD_WriteString((uint8_t*)"Speed:30% ");
     5f0:	87 ec       	ldi	r24, 0xC7	; 199
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				HLCD_WriteString((uint8_t*)"Dir:b");
     5f8:	8d e0       	ldi	r24, 0x0D	; 13
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
				while (global_f64Dist <= 20.0)
     600:	35 c0       	rjmp	.+106    	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
				{
					/* Motor move backward with duty cycle 30%  */
					PWM_start(30,20,BACKWARD);
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	64 e1       	ldi	r22, 0x14	; 20
     606:	8e e1       	ldi	r24, 0x1E	; 30
     608:	0e 94 5d 07 	call	0xeba	; 0xeba <PWM_start>
					global_f64Dist = HULTRASONIC_u8Read();
     60c:	0e 94 9c 08 	call	0x1138	; 0x1138 <HULTRASONIC_u8Read>
     610:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <global_f64Dist>
     614:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <global_f64Dist+0x1>
     618:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <global_f64Dist+0x2>
     61c:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
					HLCD_WriteString((uint8_t*)"Dist: ");
     628:	8c eb       	ldi	r24, 0xBC	; 188
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     630:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     634:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     638:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     63c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     640:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fixunssfsi>
     644:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <HLCD_WriteInt>
					HLCD_WriteString((uint8_t*)" cm");	
     648:	83 ec       	ldi	r24, 0xC3	; 195
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
					(void) KEYPAD_read(&u8KeyRead);
     650:	88 e7       	ldi	r24, 0x78	; 120
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 4c 06 	call	0xc98	; 0xc98 <KEYPAD_read>
					if (u8KeyRead == '2')
     658:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <u8KeyRead>
     65c:	82 33       	cpi	r24, 0x32	; 50
     65e:	31 f4       	brne	.+12     	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
					{
						en_motorSel = EN_MOTOR_STOP;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
						flag2 = 0;
     666:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <flag2>
						break;
     66a:	78 c0       	rjmp	.+240    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
				CAR_stop();
				//_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString((uint8_t*)"Speed:30% ");
				HLCD_WriteString((uint8_t*)"Dir:b");
				while (global_f64Dist <= 20.0)
     66c:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     670:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     674:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     678:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 ea       	ldi	r20, 0xA0	; 160
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__cmpsf2>
     688:	18 16       	cp	r1, r24
     68a:	0c f0       	brlt	.+2      	; 0x68e <__EEPROM_REGION_LENGTH__+0x28e>
     68c:	ba cf       	rjmp	.-140    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
     68e:	66 c0       	rjmp	.+204    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
						break;
					}					
				}
		}
	 } 
	else if (en_motorSel == EN_MOTOR_STOP)
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	d1 f4       	brne	.+52     	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
	  {
		  if (flag2 == 0){HLCD_ClrDisplay();  flag1 = 0; flag2 = 1; flag3 = 0; }		  
     694:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <flag2>
     698:	81 11       	cpse	r24, r1
     69a:	09 c0       	rjmp	.+18     	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
     69c:	0e 94 a4 05 	call	0xb48	; 0xb48 <HLCD_ClrDisplay>
     6a0:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <flag1>
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <flag2>
     6aa:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <flag3>
		  //HLCD_ClrDisplay();
		  HLCD_gotoXY(0,0);
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped"); 
     6b6:	83 e1       	ldi	r24, 0x13	; 19
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
		  CAR_stop();
     6be:	0e 94 17 04 	call	0x82e	; 0x82e <CAR_stop>
		  PWM_stop();  
     6c2:	0e 94 89 07 	call	0xf12	; 0xf12 <PWM_stop>
     6c6:	4a c0       	rjmp	.+148    	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
	  }
	  else if (en_motorSel == EN_MOTOR_STOP_V2)
     6c8:	82 30       	cpi	r24, 0x02	; 2
     6ca:	99 f5       	brne	.+102    	; 0x732 <__EEPROM_REGION_LENGTH__+0x332>
	  {
		  
		  HLCD_ClrDisplay();
     6cc:	0e 94 a4 05 	call	0xb48	; 0xb48 <HLCD_ClrDisplay>
		  HLCD_gotoXY(0,0);
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");
     6d8:	83 e1       	ldi	r24, 0x13	; 19
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
		  CAR_stop();
     6e0:	0e 94 17 04 	call	0x82e	; 0x82e <CAR_stop>
     6e4:	9f ef       	ldi	r25, 0xFF	; 255
     6e6:	23 ed       	ldi	r18, 0xD3	; 211
     6e8:	80 e3       	ldi	r24, 0x30	; 48
     6ea:	91 50       	subi	r25, 0x01	; 1
     6ec:	20 40       	sbci	r18, 0x00	; 0
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <__EEPROM_REGION_LENGTH__+0x2ea>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
     6f4:	00 00       	nop
		  _delay_ms(2000);
		  HLCD_ClrDisplay();
     6f6:	0e 94 a4 05 	call	0xb48	; 0xb48 <HLCD_ClrDisplay>
		  HLCD_gotoXY(0,0);
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Trying again in");
     702:	81 e2       	ldi	r24, 0x21	; 33
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
		  HLCD_gotoXY(1,0);
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "1 sec");
     712:	81 e3       	ldi	r24, 0x31	; 49
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
     71a:	9f ef       	ldi	r25, 0xFF	; 255
     71c:	29 e6       	ldi	r18, 0x69	; 105
     71e:	88 e1       	ldi	r24, 0x18	; 24
     720:	91 50       	subi	r25, 0x01	; 1
     722:	20 40       	sbci	r18, 0x00	; 0
     724:	80 40       	sbci	r24, 0x00	; 0
     726:	e1 f7       	brne	.-8      	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
     728:	00 c0       	rjmp	.+0      	; 0x72a <__EEPROM_REGION_LENGTH__+0x32a>
     72a:	00 00       	nop
		  _delay_ms(1000);
		  u8_gs_rotate_counter=0;
		  en_motorSel = EN_MOTOR_START;
     72c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
     730:	15 c0       	rjmp	.+42     	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
	  }
	  else 
	  {
		  if (flag1 == 0) {HLCD_ClrDisplay();  flag1 = 1; flag2 = 0; flag3 = 0; }
     732:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <flag1>
     736:	81 11       	cpse	r24, r1
     738:	09 c0       	rjmp	.+18     	; 0x74c <__EEPROM_REGION_LENGTH__+0x34c>
     73a:	0e 94 a4 05 	call	0xb48	; 0xb48 <HLCD_ClrDisplay>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <flag1>
     744:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <flag2>
     748:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <flag3>
		  HLCD_gotoXY(0,0);
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	0e 94 bb 05 	call	0xb76	; 0xb76 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "MOTOR in IDLE");  
     754:	87 e3       	ldi	r24, 0x37	; 55
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
	  }
}
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	08 95       	ret

00000766 <CAR_init>:
*description : used to initialize the two motor as output 
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK                                                             
************************************************************************/
EN_car_error_t CAR_init(void)
{
     766:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_INIT(&ST_motor_1);
     768:	89 e7       	ldi	r24, 0x79	; 121
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 c9 06 	call	0xd92	; 0xd92 <MOTOR_INIT>
     770:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_INIT(&ST_motor_2);
     772:	86 e7       	ldi	r24, 0x76	; 118
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 c9 06 	call	0xd92	; 0xd92 <MOTOR_INIT>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     77a:	c1 11       	cpse	r28, r1
     77c:	03 c0       	rjmp	.+6      	; 0x784 <CAR_init+0x1e>
     77e:	81 11       	cpse	r24, r1
     780:	03 c0       	rjmp	.+6      	; 0x788 <CAR_init+0x22>
     782:	03 c0       	rjmp	.+6      	; 0x78a <CAR_init+0x24>
	{
		ret_val=CAR_NOK;
     784:	8b e0       	ldi	r24, 0x0B	; 11
     786:	01 c0       	rjmp	.+2      	; 0x78a <CAR_init+0x24>
     788:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <CAR_forward>:
*description : used to move the car forward by specific speed
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_forward(void)
{
     78e:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(&ST_motor_1);
     790:	89 e7       	ldi	r24, 0x79	; 121
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <MOTOR_FORWARD>
     798:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_FORWARD(&ST_motor_2);
     79a:	86 e7       	ldi	r24, 0x76	; 118
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <MOTOR_FORWARD>
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     7a2:	c1 11       	cpse	r28, r1
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <CAR_forward+0x1e>
     7a6:	81 11       	cpse	r24, r1
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <CAR_forward+0x22>
     7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <CAR_forward+0x24>
	{
		ret_val=CAR_NOK;
     7ac:	8b e0       	ldi	r24, 0x0B	; 11
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <CAR_forward+0x24>
     7b0:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <CAR_backword>:
*description : used to move the car backward by specific speed
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_backword(void)
{
     7b6:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_BACKWARD(&ST_motor_1);
     7b8:	89 e7       	ldi	r24, 0x79	; 121
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <MOTOR_BACKWARD>
     7c0:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(&ST_motor_2);
     7c2:	86 e7       	ldi	r24, 0x76	; 118
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     7ca:	c1 11       	cpse	r28, r1
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <CAR_backword+0x1e>
     7ce:	81 11       	cpse	r24, r1
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <CAR_backword+0x22>
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <CAR_backword+0x24>
	{
		ret_val=CAR_NOK;
     7d4:	8b e0       	ldi	r24, 0x0B	; 11
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <CAR_backword+0x24>
     7d8:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <CAR_reverse_right>:
*description : used to reverse the car to the right
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_reverse_right(void)
{
     7de:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(&ST_motor_1);
     7e0:	89 e7       	ldi	r24, 0x79	; 121
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <MOTOR_FORWARD>
     7e8:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(&ST_motor_2);
     7ea:	86 e7       	ldi	r24, 0x76	; 118
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     7f2:	c1 11       	cpse	r28, r1
     7f4:	03 c0       	rjmp	.+6      	; 0x7fc <CAR_reverse_right+0x1e>
     7f6:	81 11       	cpse	r24, r1
     7f8:	03 c0       	rjmp	.+6      	; 0x800 <__DATA_REGION_LENGTH__>
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		ret_val=CAR_NOK;
     7fc:	8b e0       	ldi	r24, 0x0B	; 11
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <CAR_reverse_left>:
*description : used to reverse the car to the left
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_reverse_left(void)
{
     806:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error2=MOTOR_FORWARD(&ST_motor_1);
     808:	89 e7       	ldi	r24, 0x79	; 121
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <MOTOR_FORWARD>
     810:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error1=MOTOR_BACKWARD(&ST_motor_2);
     812:	86 e7       	ldi	r24, 0x76	; 118
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     81a:	81 11       	cpse	r24, r1
     81c:	03 c0       	rjmp	.+6      	; 0x824 <CAR_reverse_left+0x1e>
     81e:	c1 11       	cpse	r28, r1
     820:	03 c0       	rjmp	.+6      	; 0x828 <CAR_reverse_left+0x22>
     822:	03 c0       	rjmp	.+6      	; 0x82a <CAR_reverse_left+0x24>
	{
		ret_val=CAR_NOK;
     824:	8b e0       	ldi	r24, 0x0B	; 11
     826:	01 c0       	rjmp	.+2      	; 0x82a <CAR_reverse_left+0x24>
     828:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <CAR_stop>:
*description : used to stop the car
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_stop(void)
{
     82e:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_STOP(&ST_motor_1);
     830:	89 e7       	ldi	r24, 0x79	; 121
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_STOP>
     838:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_STOP(&ST_motor_2);
     83a:	86 e7       	ldi	r24, 0x76	; 118
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_STOP>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     842:	c1 11       	cpse	r28, r1
     844:	03 c0       	rjmp	.+6      	; 0x84c <CAR_stop+0x1e>
     846:	81 11       	cpse	r24, r1
     848:	03 c0       	rjmp	.+6      	; 0x850 <CAR_stop+0x22>
     84a:	03 c0       	rjmp	.+6      	; 0x852 <CAR_stop+0x24>
	{
		ret_val=CAR_NOK;
     84c:	8b e0       	ldi	r24, 0x0B	; 11
     84e:	01 c0       	rjmp	.+2      	; 0x852 <CAR_stop+0x24>
     850:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <HExtInt_enInit>:
		errorStatus = HEXTINT_NOK;
	}


	return errorStatus;
}
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	c8 2f       	mov	r28, r24
     85c:	d6 2f       	mov	r29, r22
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	62 e0       	ldi	r22, 0x02	; 2
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     872:	6d 2f       	mov	r22, r29
     874:	8c 2f       	mov	r24, r28
     876:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <vidExtInt_init>
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <HExtInt_enCBFInt0>:
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	21 f0       	breq	.+8      	; 0x88e <HExtInt_enCBFInt0+0xc>
     886:	0e 94 4f 0a 	call	0x149e	; 0x149e <MEXTINT_vidCallBackFuncInt0>
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	08 95       	ret
     88e:	85 e0       	ldi	r24, 0x05	; 5
     890:	08 95       	ret

00000892 <HExtInt0_enIntDisable>:

void HExtInt0_enIntDisable(void)
{
	MEXTINT_vidDisableInterrupt();
     892:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <MEXTINT_vidDisableInterrupt>
     896:	08 95       	ret

00000898 <HExtInt0_enIntEnable>:
}

void HExtInt0_enIntEnable(void)
{
	 MEXTINT_vidEnableInterrupt();
     898:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MEXTINT_vidEnableInterrupt>
     89c:	08 95       	ret

0000089e <HLCD_vidWritecmd>:
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	errorStatus = HLCD_vidWritecmd(HLCD_DISPLAY_SHIFT_LEFT);
	_delay_ms(1);
	return errorStatus;

}
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	18 2f       	mov	r17, r24
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	83 e0       	ldi	r24, 0x03	; 3
     8ae:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     8b2:	c8 2f       	mov	r28, r24
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	67 e0       	ldi	r22, 0x07	; 7
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     8be:	c8 2b       	or	r28, r24
     8c0:	01 2f       	mov	r16, r17
     8c2:	02 95       	swap	r16
     8c4:	0f 70       	andi	r16, 0x0F	; 15
     8c6:	d0 e0       	ldi	r29, 0x00	; 0
     8c8:	15 c0       	rjmp	.+42     	; 0x8f4 <HLCD_vidWritecmd+0x56>
     8ca:	ed 2f       	mov	r30, r29
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	40 2f       	mov	r20, r16
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	0d 2e       	mov	r0, r29
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <HLCD_vidWritecmd+0x3c>
     8d6:	55 95       	asr	r21
     8d8:	47 95       	ror	r20
     8da:	0a 94       	dec	r0
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <HLCD_vidWritecmd+0x38>
     8de:	41 70       	andi	r20, 0x01	; 1
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	e4 58       	subi	r30, 0x84	; 132
     8e6:	ff 4f       	sbci	r31, 0xFF	; 255
     8e8:	61 81       	ldd	r22, Z+1	; 0x01
     8ea:	80 81       	ld	r24, Z
     8ec:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     8f0:	c8 2b       	or	r28, r24
     8f2:	df 5f       	subi	r29, 0xFF	; 255
     8f4:	d4 30       	cpi	r29, 0x04	; 4
     8f6:	48 f3       	brcs	.-46     	; 0x8ca <HLCD_vidWritecmd+0x2c>
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     902:	c8 2b       	or	r28, r24
     904:	89 ef       	ldi	r24, 0xF9	; 249
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <HLCD_vidWritecmd+0x6a>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <HLCD_vidWritecmd+0x70>
     90e:	00 00       	nop
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     91a:	c8 2b       	or	r28, r24
     91c:	92 e4       	ldi	r25, 0x42	; 66
     91e:	9a 95       	dec	r25
     920:	f1 f7       	brne	.-4      	; 0x91e <HLCD_vidWritecmd+0x80>
     922:	00 c0       	rjmp	.+0      	; 0x924 <HLCD_vidWritecmd+0x86>
     924:	1f 70       	andi	r17, 0x0F	; 15
     926:	d0 e0       	ldi	r29, 0x00	; 0
     928:	15 c0       	rjmp	.+42     	; 0x954 <HLCD_vidWritecmd+0xb6>
     92a:	ed 2f       	mov	r30, r29
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	41 2f       	mov	r20, r17
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	0d 2e       	mov	r0, r29
     934:	02 c0       	rjmp	.+4      	; 0x93a <HLCD_vidWritecmd+0x9c>
     936:	55 95       	asr	r21
     938:	47 95       	ror	r20
     93a:	0a 94       	dec	r0
     93c:	e2 f7       	brpl	.-8      	; 0x936 <HLCD_vidWritecmd+0x98>
     93e:	41 70       	andi	r20, 0x01	; 1
     940:	ee 0f       	add	r30, r30
     942:	ff 1f       	adc	r31, r31
     944:	e4 58       	subi	r30, 0x84	; 132
     946:	ff 4f       	sbci	r31, 0xFF	; 255
     948:	61 81       	ldd	r22, Z+1	; 0x01
     94a:	80 81       	ld	r24, Z
     94c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     950:	c8 2b       	or	r28, r24
     952:	df 5f       	subi	r29, 0xFF	; 255
     954:	d4 30       	cpi	r29, 0x04	; 4
     956:	48 f3       	brcs	.-46     	; 0x92a <HLCD_vidWritecmd+0x8c>
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     962:	c8 2b       	or	r28, r24
     964:	e9 ef       	ldi	r30, 0xF9	; 249
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	31 97       	sbiw	r30, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <HLCD_vidWritecmd+0xca>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <HLCD_vidWritecmd+0xd0>
     96e:	00 00       	nop
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     97a:	8c 2b       	or	r24, r28
     97c:	e3 ef       	ldi	r30, 0xF3	; 243
     97e:	f1 e0       	ldi	r31, 0x01	; 1
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	f1 f7       	brne	.-4      	; 0x980 <HLCD_vidWritecmd+0xe2>
     984:	00 c0       	rjmp	.+0      	; 0x986 <HLCD_vidWritecmd+0xe8>
     986:	00 00       	nop
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	08 95       	ret

00000992 <HLCD_vidInit>:
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	d0 e0       	ldi	r29, 0x00	; 0
     998:	c0 e0       	ldi	r28, 0x00	; 0
     99a:	0d c0       	rjmp	.+26     	; 0x9b6 <HLCD_vidInit+0x24>
     99c:	ed 2f       	mov	r30, r29
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	e4 58       	subi	r30, 0x84	; 132
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	41 e0       	ldi	r20, 0x01	; 1
     9aa:	61 81       	ldd	r22, Z+1	; 0x01
     9ac:	80 81       	ld	r24, Z
     9ae:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
     9b2:	c8 2b       	or	r28, r24
     9b4:	df 5f       	subi	r29, 0xFF	; 255
     9b6:	d4 30       	cpi	r29, 0x04	; 4
     9b8:	88 f3       	brcs	.-30     	; 0x99c <HLCD_vidInit+0xa>
     9ba:	41 e0       	ldi	r20, 0x01	; 1
     9bc:	67 e0       	ldi	r22, 0x07	; 7
     9be:	82 e0       	ldi	r24, 0x02	; 2
     9c0:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
     9c4:	c8 2b       	or	r28, r24
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
     9d0:	c8 2b       	or	r28, r24
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
     9dc:	c8 2b       	or	r28, r24
     9de:	8f e0       	ldi	r24, 0x0F	; 15
     9e0:	97 e2       	ldi	r25, 0x27	; 39
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <HLCD_vidInit+0x50>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <HLCD_vidInit+0x56>
     9e8:	00 00       	nop
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_vidWritecmd>
     9f0:	c8 2b       	or	r28, r24
     9f2:	e9 ef       	ldi	r30, 0xF9	; 249
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <HLCD_vidInit+0x64>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <HLCD_vidInit+0x6a>
     9fc:	00 00       	nop
     9fe:	88 e2       	ldi	r24, 0x28	; 40
     a00:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_vidWritecmd>
     a04:	c8 2b       	or	r28, r24
     a06:	89 ef       	ldi	r24, 0xF9	; 249
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <HLCD_vidInit+0x78>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <HLCD_vidInit+0x7e>
     a10:	00 00       	nop
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_vidWritecmd>
     a18:	c8 2b       	or	r28, r24
     a1a:	e7 ee       	ldi	r30, 0xE7	; 231
     a1c:	f3 e0       	ldi	r31, 0x03	; 3
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <HLCD_vidInit+0x8c>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <HLCD_vidInit+0x92>
     a24:	00 00       	nop
     a26:	86 e0       	ldi	r24, 0x06	; 6
     a28:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_vidWritecmd>
     a2c:	c8 2b       	or	r28, r24
     a2e:	89 ef       	ldi	r24, 0xF9	; 249
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <HLCD_vidInit+0xa0>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <HLCD_vidInit+0xa6>
     a38:	00 00       	nop
     a3a:	8c e0       	ldi	r24, 0x0C	; 12
     a3c:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_vidWritecmd>
     a40:	8c 2b       	or	r24, r28
     a42:	e9 ef       	ldi	r30, 0xF9	; 249
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	31 97       	sbiw	r30, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <HLCD_vidInit+0xb4>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <HLCD_vidInit+0xba>
     a4c:	00 00       	nop
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <HLCD_vidWriteChar>:
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	18 2f       	mov	r17, r24
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     a68:	c8 2f       	mov	r28, r24
     a6a:	41 e0       	ldi	r20, 0x01	; 1
     a6c:	67 e0       	ldi	r22, 0x07	; 7
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     a74:	c8 2b       	or	r28, r24
     a76:	01 2f       	mov	r16, r17
     a78:	02 95       	swap	r16
     a7a:	0f 70       	andi	r16, 0x0F	; 15
     a7c:	d0 e0       	ldi	r29, 0x00	; 0
     a7e:	15 c0       	rjmp	.+42     	; 0xaaa <HLCD_vidWriteChar+0x56>
     a80:	ed 2f       	mov	r30, r29
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	40 2f       	mov	r20, r16
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	0d 2e       	mov	r0, r29
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <HLCD_vidWriteChar+0x3c>
     a8c:	55 95       	asr	r21
     a8e:	47 95       	ror	r20
     a90:	0a 94       	dec	r0
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <HLCD_vidWriteChar+0x38>
     a94:	41 70       	andi	r20, 0x01	; 1
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	e4 58       	subi	r30, 0x84	; 132
     a9c:	ff 4f       	sbci	r31, 0xFF	; 255
     a9e:	61 81       	ldd	r22, Z+1	; 0x01
     aa0:	80 81       	ld	r24, Z
     aa2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     aa6:	c8 2b       	or	r28, r24
     aa8:	df 5f       	subi	r29, 0xFF	; 255
     aaa:	d4 30       	cpi	r29, 0x04	; 4
     aac:	48 f3       	brcs	.-46     	; 0xa80 <HLCD_vidWriteChar+0x2c>
     aae:	41 e0       	ldi	r20, 0x01	; 1
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     ab8:	c8 2b       	or	r28, r24
     aba:	89 ef       	ldi	r24, 0xF9	; 249
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <HLCD_vidWriteChar+0x6a>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <HLCD_vidWriteChar+0x70>
     ac4:	00 00       	nop
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     ad0:	c8 2b       	or	r28, r24
     ad2:	92 e4       	ldi	r25, 0x42	; 66
     ad4:	9a 95       	dec	r25
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <HLCD_vidWriteChar+0x80>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <HLCD_vidWriteChar+0x86>
     ada:	1f 70       	andi	r17, 0x0F	; 15
     adc:	d0 e0       	ldi	r29, 0x00	; 0
     ade:	15 c0       	rjmp	.+42     	; 0xb0a <HLCD_vidWriteChar+0xb6>
     ae0:	ed 2f       	mov	r30, r29
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	41 2f       	mov	r20, r17
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	0d 2e       	mov	r0, r29
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <HLCD_vidWriteChar+0x9c>
     aec:	55 95       	asr	r21
     aee:	47 95       	ror	r20
     af0:	0a 94       	dec	r0
     af2:	e2 f7       	brpl	.-8      	; 0xaec <HLCD_vidWriteChar+0x98>
     af4:	41 70       	andi	r20, 0x01	; 1
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	e4 58       	subi	r30, 0x84	; 132
     afc:	ff 4f       	sbci	r31, 0xFF	; 255
     afe:	61 81       	ldd	r22, Z+1	; 0x01
     b00:	80 81       	ld	r24, Z
     b02:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     b06:	c8 2b       	or	r28, r24
     b08:	df 5f       	subi	r29, 0xFF	; 255
     b0a:	d4 30       	cpi	r29, 0x04	; 4
     b0c:	48 f3       	brcs	.-46     	; 0xae0 <HLCD_vidWriteChar+0x8c>
     b0e:	41 e0       	ldi	r20, 0x01	; 1
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     b18:	c8 2b       	or	r28, r24
     b1a:	e9 ef       	ldi	r30, 0xF9	; 249
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <HLCD_vidWriteChar+0xca>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <HLCD_vidWriteChar+0xd0>
     b24:	00 00       	nop
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     b30:	8c 2b       	or	r24, r28
     b32:	e3 ef       	ldi	r30, 0xF3	; 243
     b34:	f1 e0       	ldi	r31, 0x01	; 1
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <HLCD_vidWriteChar+0xe2>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <HLCD_vidWriteChar+0xe8>
     b3c:	00 00       	nop
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	08 95       	ret

00000b48 <HLCD_ClrDisplay>:
     b48:	cf 93       	push	r28
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_vidWritecmd>
     b50:	c8 2f       	mov	r28, r24
     b52:	87 ee       	ldi	r24, 0xE7	; 231
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <HLCD_ClrDisplay+0xe>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <HLCD_ClrDisplay+0x14>
     b5c:	00 00       	nop
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_vidWritecmd>
     b64:	8c 2b       	or	r24, r28
     b66:	e7 ee       	ldi	r30, 0xE7	; 231
     b68:	f3 e0       	ldi	r31, 0x03	; 3
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <HLCD_ClrDisplay+0x22>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <HLCD_ClrDisplay+0x28>
     b70:	00 00       	nop
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <HLCD_gotoXY>:
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_gotoXY(uint8_t row, uint8_t pos)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	if (row==0 && pos < 16)
     b76:	81 11       	cpse	r24, r1
     b78:	08 c0       	rjmp	.+16     	; 0xb8a <HLCD_gotoXY+0x14>
     b7a:	60 31       	cpi	r22, 0x10	; 16
     b7c:	30 f4       	brcc	.+12     	; 0xb8a <HLCD_gotoXY+0x14>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     b7e:	86 2f       	mov	r24, r22
     b80:	8f 70       	andi	r24, 0x0F	; 15
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_vidWritecmd>
     b88:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	41 f4       	brne	.+16     	; 0xb9e <HLCD_gotoXY+0x28>
     b8e:	60 31       	cpi	r22, 0x10	; 16
     b90:	40 f4       	brcc	.+16     	; 0xba2 <HLCD_gotoXY+0x2c>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     b92:	86 2f       	mov	r24, r22
     b94:	8f 70       	andi	r24, 0x0F	; 15
     b96:	80 6c       	ori	r24, 0xC0	; 192
     b98:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_vidWritecmd>
     b9c:	08 95       	ret
	}
	else
	{
		errorStatus |= LCD_E_NOT_OK;
     b9e:	88 e0       	ldi	r24, 0x08	; 8
     ba0:	08 95       	ret
     ba2:	88 e0       	ldi	r24, 0x08	; 8
	}
	return errorStatus;
}
     ba4:	08 95       	ret

00000ba6 <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	7c 01       	movw	r14, r24
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 81       	ld	r24, Z
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
     bb6:	c0 e0       	ldi	r28, 0x00	; 0
     bb8:	d0 e0       	ldi	r29, 0x00	; 0
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
     bba:	10 e0       	ldi	r17, 0x00	; 0
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     bbc:	08 c0       	rjmp	.+16     	; 0xbce <HLCD_WriteString+0x28>
	{
		errorStatus |= HLCD_vidWriteChar(string);
     bbe:	0e 94 2a 05 	call	0xa54	; 0xa54 <HLCD_vidWriteChar>
     bc2:	18 2b       	or	r17, r24
		string = str[++count];
     bc4:	21 96       	adiw	r28, 0x01	; 1
     bc6:	f7 01       	movw	r30, r14
     bc8:	ec 0f       	add	r30, r28
     bca:	fd 1f       	adc	r31, r29
     bcc:	80 81       	ld	r24, Z
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     bce:	81 11       	cpse	r24, r1
     bd0:	f6 cf       	rjmp	.-20     	; 0xbbe <HLCD_WriteString+0x18>
	{
		errorStatus |= HLCD_vidWriteChar(string);
		string = str[++count];
	}
	return errorStatus;
}
     bd2:	81 2f       	mov	r24, r17
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	08 95       	ret

00000be0 <HLCD_WriteInt>:
 * description 	: func to write integer number on lcd
 * input param 	: number --> which take number as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteInt(Uint32_t number)
{
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	2a 97       	sbiw	r28, 0x0a	; 10
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     bf8:	4a e0       	ldi	r20, 0x0A	; 10
     bfa:	be 01       	movw	r22, r28
     bfc:	6f 5f       	subi	r22, 0xFF	; 255
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__itoa_ncheck>
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	uint8_t STR[INDEX];
	itoa(number, STR, 10);
	errorStatus |= HLCD_WriteString(STR);
     c04:	ce 01       	movw	r24, r28
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	0e 94 d3 05 	call	0xba6	; 0xba6 <HLCD_WriteString>
	return errorStatus;
}
     c0c:	2a 96       	adiw	r28, 0x0a	; 10
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <KEYPAD_init>:
#define F_CPU 8000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	a9 f1       	breq	.+106    	; 0xc90 <KEYPAD_init+0x72>
     c26:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     c28:	69 81       	ldd	r22, Y+1	; 0x01
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	88 81       	ld	r24, Y
     c2e:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     c32:	6b 81       	ldd	r22, Y+3	; 0x03
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     c3c:	6d 81       	ldd	r22, Y+5	; 0x05
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     c46:	69 81       	ldd	r22, Y+1	; 0x01
     c48:	41 e0       	ldi	r20, 0x01	; 1
     c4a:	88 81       	ld	r24, Y
     c4c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     c50:	6b 81       	ldd	r22, Y+3	; 0x03
     c52:	41 e0       	ldi	r20, 0x01	; 1
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     c5a:	6d 81       	ldd	r22, Y+5	; 0x05
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     c64:	6f 81       	ldd	r22, Y+7	; 0x07
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	8e 81       	ldd	r24, Y+6	; 0x06
     c6a:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     c6e:	69 85       	ldd	r22, Y+9	; 0x09
     c70:	41 e0       	ldi	r20, 0x01	; 1
     c72:	88 85       	ldd	r24, Y+8	; 0x08
     c74:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     c78:	6b 85       	ldd	r22, Y+11	; 0x0b
     c7a:	41 e0       	ldi	r20, 0x01	; 1
     c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c7e:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     c82:	6d 85       	ldd	r22, Y+13	; 0x0d
     c84:	41 e0       	ldi	r20, 0x01	; 1
     c86:	8c 85       	ldd	r24, Y+12	; 0x0c
     c88:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     c90:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	1f 92       	push	r1
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     cae:	07 e6       	ldi	r16, 0x67	; 103
     cb0:	10 e0       	ldi	r17, 0x00	; 0
     cb2:	f8 01       	movw	r30, r16
     cb4:	67 81       	ldd	r22, Z+7	; 0x07
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	86 81       	ldd	r24, Z+6	; 0x06
     cba:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     cbe:	f8 01       	movw	r30, r16
     cc0:	61 85       	ldd	r22, Z+9	; 0x09
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	80 85       	ldd	r24, Z+8	; 0x08
     cc6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     cca:	f8 01       	movw	r30, r16
     ccc:	63 85       	ldd	r22, Z+11	; 0x0b
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	82 85       	ldd	r24, Z+10	; 0x0a
     cd2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     cd6:	f8 01       	movw	r30, r16
     cd8:	65 85       	ldd	r22, Z+13	; 0x0d
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	84 85       	ldd	r24, Z+12	; 0x0c
     cde:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     ce2:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     ce4:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     ce6:	42 c0       	rjmp	.+132    	; 0xd6c <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     ce8:	e7 e6       	ldi	r30, 0x67	; 103
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	67 81       	ldd	r22, Z+7	; 0x07
     cee:	60 0f       	add	r22, r16
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	86 81       	ldd	r24, Z+6	; 0x06
     cf4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
		for(j=0;j<3;j++)
     cf8:	10 e0       	ldi	r17, 0x00	; 0
     cfa:	2d c0       	rjmp	.+90     	; 0xd56 <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     cfc:	e7 e6       	ldi	r30, 0x67	; 103
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	61 81       	ldd	r22, Z+1	; 0x01
     d02:	61 0f       	add	r22, r17
     d04:	ae 01       	movw	r20, r28
     d06:	4f 5f       	subi	r20, 0xFF	; 255
     d08:	5f 4f       	sbci	r21, 0xFF	; 255
     d0a:	80 81       	ld	r24, Z
     d0c:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_readPIN>
			if(value==0)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	81 11       	cpse	r24, r1
     d14:	1f c0       	rjmp	.+62     	; 0xd54 <KEYPAD_read+0xbc>
     d16:	0a c0       	rjmp	.+20     	; 0xd2c <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     d18:	e7 e6       	ldi	r30, 0x67	; 103
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	61 81       	ldd	r22, Z+1	; 0x01
     d1e:	61 0f       	add	r22, r17
     d20:	ae 01       	movw	r20, r28
     d22:	4f 5f       	subi	r20, 0xFF	; 255
     d24:	5f 4f       	sbci	r21, 0xFF	; 255
     d26:	80 81       	ld	r24, Z
     d28:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	88 23       	and	r24, r24
     d30:	99 f3       	breq	.-26     	; 0xd18 <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     d32:	80 2f       	mov	r24, r16
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	fc 01       	movw	r30, r24
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	e8 0f       	add	r30, r24
     d3e:	f9 1f       	adc	r31, r25
     d40:	eb 5b       	subi	r30, 0xBB	; 187
     d42:	fe 4f       	sbci	r31, 0xFE	; 254
     d44:	e1 0f       	add	r30, r17
     d46:	f1 1d       	adc	r31, r1
     d48:	80 81       	ld	r24, Z
     d4a:	f7 01       	movw	r30, r14
     d4c:	80 83       	st	Z, r24
				flag=1;
     d4e:	dd 24       	eor	r13, r13
     d50:	d3 94       	inc	r13
				
				break;
     d52:	03 c0       	rjmp	.+6      	; 0xd5a <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     d54:	1f 5f       	subi	r17, 0xFF	; 255
     d56:	13 30       	cpi	r17, 0x03	; 3
     d58:	88 f2       	brcs	.-94     	; 0xcfc <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     d5a:	e7 e6       	ldi	r30, 0x67	; 103
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	67 81       	ldd	r22, Z+7	; 0x07
     d60:	60 0f       	add	r22, r16
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	86 81       	ldd	r24, Z+6	; 0x06
     d66:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     d6a:	0f 5f       	subi	r16, 0xFF	; 255
     d6c:	04 30       	cpi	r16, 0x04	; 4
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <KEYPAD_read+0xda>
     d70:	bb cf       	rjmp	.-138    	; 0xce8 <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     d72:	f1 e0       	ldi	r31, 0x01	; 1
     d74:	df 16       	cp	r13, r31
     d76:	19 f0       	breq	.+6      	; 0xd7e <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     d78:	8e e4       	ldi	r24, 0x4E	; 78
     d7a:	f7 01       	movw	r30, r14
     d7c:	80 83       	st	Z, r24
		return ret_val;
	}
	
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0f 90       	pop	r0
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	08 95       	ret

00000d92 <MOTOR_INIT>:
/*including sections*/
#include "motor.h"

/* APIs impelementation*/
EN_motor_error_t MOTOR_INIT(const ST_motor_t* motor)
{
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	ec 01       	movw	r28, r24
	if((DIO_init(motor->port,motor->pin_num1,STD_OUTPUT)==DIO_E_OK) && (DIO_init(motor->port,motor->pin_num2,STD_OUTPUT)==DIO_E_OK ))
     d98:	41 e0       	ldi	r20, 0x01	; 1
     d9a:	69 81       	ldd	r22, Y+1	; 0x01
     d9c:	88 81       	ld	r24, Y
     d9e:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
     da2:	81 11       	cpse	r24, r1
     da4:	08 c0       	rjmp	.+16     	; 0xdb6 <MOTOR_INIT+0x24>
     da6:	41 e0       	ldi	r20, 0x01	; 1
     da8:	6a 81       	ldd	r22, Y+2	; 0x02
     daa:	88 81       	ld	r24, Y
     dac:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
     db0:	81 11       	cpse	r24, r1
     db2:	03 c0       	rjmp	.+6      	; 0xdba <MOTOR_INIT+0x28>
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <MOTOR_INIT+0x2a>
	{
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     db6:	89 e0       	ldi	r24, 0x09	; 9
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <MOTOR_INIT+0x2a>
     dba:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <MOTOR_FORWARD>:
EN_motor_error_t MOTOR_FORWARD(const ST_motor_t* motor)
{
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_HIGH)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	69 81       	ldd	r22, Y+1	; 0x01
     dcc:	88 81       	ld	r24, Y
     dce:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     dd2:	81 11       	cpse	r24, r1
     dd4:	08 c0       	rjmp	.+16     	; 0xde6 <MOTOR_FORWARD+0x24>
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	6a 81       	ldd	r22, Y+2	; 0x02
     dda:	88 81       	ld	r24, Y
     ddc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     de0:	81 11       	cpse	r24, r1
     de2:	03 c0       	rjmp	.+6      	; 0xdea <MOTOR_FORWARD+0x28>
     de4:	03 c0       	rjmp	.+6      	; 0xdec <MOTOR_FORWARD+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     de6:	89 e0       	ldi	r24, 0x09	; 9
     de8:	01 c0       	rjmp	.+2      	; 0xdec <MOTOR_FORWARD+0x2a>
     dea:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <MOTOR_BACKWARD>:
EN_motor_error_t MOTOR_BACKWARD(const ST_motor_t* motor)
{
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_HIGH)==DIO_E_OK)
     df8:	40 e0       	ldi	r20, 0x00	; 0
     dfa:	69 81       	ldd	r22, Y+1	; 0x01
     dfc:	88 81       	ld	r24, Y
     dfe:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     e02:	81 11       	cpse	r24, r1
     e04:	08 c0       	rjmp	.+16     	; 0xe16 <MOTOR_BACKWARD+0x24>
     e06:	41 e0       	ldi	r20, 0x01	; 1
     e08:	6a 81       	ldd	r22, Y+2	; 0x02
     e0a:	88 81       	ld	r24, Y
     e0c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     e10:	81 11       	cpse	r24, r1
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <MOTOR_BACKWARD+0x28>
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <MOTOR_BACKWARD+0x2a>
	{    
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     e16:	89 e0       	ldi	r24, 0x09	; 9
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <MOTOR_BACKWARD+0x2a>
     e1a:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <MOTOR_STOP>:
EN_motor_error_t MOTOR_STOP(const ST_motor_t* motor)
{
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	69 81       	ldd	r22, Y+1	; 0x01
     e2c:	88 81       	ld	r24, Y
     e2e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     e32:	81 11       	cpse	r24, r1
     e34:	08 c0       	rjmp	.+16     	; 0xe46 <MOTOR_STOP+0x24>
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	6a 81       	ldd	r22, Y+2	; 0x02
     e3a:	88 81       	ld	r24, Y
     e3c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     e40:	81 11       	cpse	r24, r1
     e42:	03 c0       	rjmp	.+6      	; 0xe4a <MOTOR_STOP+0x28>
     e44:	03 c0       	rjmp	.+6      	; 0xe4c <MOTOR_STOP+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     e46:	89 e0       	ldi	r24, 0x09	; 9
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <MOTOR_STOP+0x2a>
     e4a:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <TIMER0_callBackFunc>:



void TIMER0_callBackFunc(void)
{
	u8_gs_pwm_counter++;
     e52:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <u8_gs_pwm_counter>
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <u8_gs_pwm_counter>
	if (u8_gs_pwm_counter < u8_gs_duty_counter)
     e5c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u8_gs_duty_counter>
     e60:	89 17       	cp	r24, r25
     e62:	60 f4       	brcc	.+24     	; 0xe7c <TIMER0_callBackFunc+0x2a>
	{
		if (u8_gs_dir == FORWARD)
     e64:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <u8_gs_dir>
     e68:	81 11       	cpse	r24, r1
     e6a:	03 c0       	rjmp	.+6      	; 0xe72 <TIMER0_callBackFunc+0x20>
		{
			CAR_forward();
     e6c:	0e 94 c7 03 	call	0x78e	; 0x78e <CAR_forward>
     e70:	10 c0       	rjmp	.+32     	; 0xe92 <TIMER0_callBackFunc+0x40>
		}
		else if (u8_gs_dir == BACKWARD)
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	71 f4       	brne	.+28     	; 0xe92 <TIMER0_callBackFunc+0x40>
		{
			CAR_backword();
     e76:	0e 94 db 03 	call	0x7b6	; 0x7b6 <CAR_backword>
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <TIMER0_callBackFunc+0x40>
		}
		else{
			// do nothing
		}
	}
	else if (u8_gs_pwm_counter < u8_gs_cycle && u8_gs_pwm_counter>= u8_gs_duty_counter)
     e7c:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <u8_gs_cycle>
     e80:	82 17       	cp	r24, r18
     e82:	28 f4       	brcc	.+10     	; 0xe8e <TIMER0_callBackFunc+0x3c>
     e84:	89 17       	cp	r24, r25
     e86:	18 f0       	brcs	.+6      	; 0xe8e <TIMER0_callBackFunc+0x3c>
	{
		CAR_stop();
     e88:	0e 94 17 04 	call	0x82e	; 0x82e <CAR_stop>
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <TIMER0_callBackFunc+0x40>
	}
	else{
		u8_gs_pwm_counter = 0;
     e8e:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u8_gs_pwm_counter>
	}
	TIMER_Manager_reset(&st_timer0Config);
     e92:	84 e8       	ldi	r24, 0x84	; 132
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <TIMER_Manager_reset>
     e9a:	08 95       	ret

00000e9c <PWM_init>:
static uint8_t u8_gs_duty_counter = 0;
static uint8_t u8_gs_cycle = 0;
static uint8_t u8_gs_dir = 0;

u8_pwmErrorType PWM_init(void)
{
     e9c:	cf 93       	push	r28
	//DDRB = 0xff;
	uint8_t u8_retVal = PWM_ERROR_OK;
	u8_retVal = TIMER_Manager_init(&st_timer0Config);
     e9e:	84 e8       	ldi	r24, 0x84	; 132
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 9a 07 	call	0xf34	; 0xf34 <TIMER_Manager_init>
     ea6:	c8 2f       	mov	r28, r24
	u8_retVal |= CAR_init();
     ea8:	0e 94 b3 03 	call	0x766	; 0x766 <CAR_init>
     eac:	8c 2b       	or	r24, r28
	if (u8_retVal == PWM_ERROR_OK)
     eae:	19 f4       	brne	.+6      	; 0xeb6 <PWM_init+0x1a>
	{
		u8_gs_pwm_state = INIT;
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <u8_gs_pwm_state>
	}
	return u8_retVal;
}
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <PWM_start>:
u8_pwmErrorType PWM_start(uint8_t u8_duty , uint8_t u8_cycle , en_motor_dir_t u8_motor_dir)
{
	
	uint8_t u8_retVal = PWM_ERROR_OK;
	if (u8_gs_pwm_state != NOT_INIT)
     eba:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <u8_gs_pwm_state>
     ebe:	99 23       	and	r25, r25
     ec0:	31 f1       	breq	.+76     	; 0xf0e <PWM_start+0x54>
	{
		if (u8_gs_pwm_state == START &&  (u8_gs_duty != u8_duty || u8_gs_cycle != u8_cycle || u8_gs_dir != u8_motor_dir ))
     ec2:	92 30       	cpi	r25, 0x02	; 2
     ec4:	69 f4       	brne	.+26     	; 0xee0 <PWM_start+0x26>
     ec6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <u8_gs_duty>
     eca:	98 13       	cpse	r25, r24
     ecc:	07 c0       	rjmp	.+14     	; 0xedc <PWM_start+0x22>
     ece:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <u8_gs_cycle>
     ed2:	96 13       	cpse	r25, r22
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <PWM_start+0x22>
     ed6:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u8_gs_dir>
     eda:	94 13       	cpse	r25, r20
		{
			u8_gs_pwm_counter = 0;
     edc:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u8_gs_pwm_counter>
		}
		u8_gs_duty = u8_duty;
     ee0:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u8_gs_duty>
		u8_gs_cycle = u8_cycle;
     ee4:	60 93 5b 01 	sts	0x015B, r22	; 0x80015b <u8_gs_cycle>
		u8_gs_dir = u8_motor_dir;
     ee8:	40 93 5a 01 	sts	0x015A, r20	; 0x80015a <u8_gs_dir>
		u8_duty = (u8_cycle * u8_duty) / 100;
     eec:	68 9f       	mul	r22, r24
     eee:	c0 01       	movw	r24, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	64 e6       	ldi	r22, 0x64	; 100
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divmodhi4>
		u8_gs_duty_counter = u8_duty;
     efa:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <u8_gs_duty_counter>
		u8_retVal |= TIMER_Manager_start(&st_timer0Config);
     efe:	84 e8       	ldi	r24, 0x84	; 132
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 ba 07 	call	0xf74	; 0xf74 <TIMER_Manager_start>
		}
		else{
			u8_gs_pwm_counter = 0;
		}
		*/
		u8_gs_pwm_state = START;
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <u8_gs_pwm_state>
     f0c:	08 95       	ret
	}
	else{
		u8_retVal = PWM_ERROR_NOT_OK;
     f0e:	8a e0       	ldi	r24, 0x0A	; 10
	}
	return u8_retVal;
}
     f10:	08 95       	ret

00000f12 <PWM_stop>:
u8_pwmErrorType PWM_stop(void)
{
	uint8_t u8_retVal = PWM_ERROR_OK;
	if (u8_gs_pwm_state == START )
     f12:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u8_gs_pwm_state>
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	59 f4       	brne	.+22     	; 0xf30 <PWM_stop+0x1e>
	{
		TIMER_Manager_stop(st_timer0Config.u8_timerNum);
     f1a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <st_timer0Config>
     f1e:	0e 94 cc 07 	call	0xf98	; 0xf98 <TIMER_Manager_stop>
		u8_gs_pwm_counter = 0;
     f22:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u8_gs_pwm_counter>
		u8_gs_pwm_state = STOP;
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <u8_gs_pwm_state>
	}
	return u8_retVal;
}
u8_pwmErrorType PWM_stop(void)
{
	uint8_t u8_retVal = PWM_ERROR_OK;
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	08 95       	ret
		TIMER_Manager_stop(st_timer0Config.u8_timerNum);
		u8_gs_pwm_counter = 0;
		u8_gs_pwm_state = STOP;
	}
	else{
		u8_retVal = PWM_ERROR_NOT_OK;
     f30:	8a e0       	ldi	r24, 0x0A	; 10
	}
	return u8_retVal;
}
     f32:	08 95       	ret

00000f34 <TIMER_Manager_init>:
#include "timer_manager.h"
#include "../../MCAL/timer/timer.h"


u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	91 f0       	breq	.+36     	; 0xf62 <TIMER_Manager_init+0x2e>
     f3e:	fc 01       	movw	r30, r24
     f40:	20 81       	ld	r18, Z
     f42:	23 30       	cpi	r18, 0x03	; 3
     f44:	80 f4       	brcc	.+32     	; 0xf66 <TIMER_Manager_init+0x32>
     f46:	21 81       	ldd	r18, Z+1	; 0x01
     f48:	2a 30       	cpi	r18, 0x0A	; 10
     f4a:	78 f4       	brcc	.+30     	; 0xf6a <TIMER_Manager_init+0x36>
     f4c:	ec 01       	movw	r28, r24
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret  = TIMER_init(st_config);
     f4e:	0e 94 44 0b 	call	0x1688	; 0x1688 <TIMER_init>
     f52:	18 2f       	mov	r17, r24
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
     f54:	68 81       	ld	r22, Y
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	9e 81       	ldd	r25, Y+6	; 0x06
     f5a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <TIMER_setCallBack>
     f5e:	81 2b       	or	r24, r17
     f60:	05 c0       	rjmp	.+10     	; 0xf6c <TIMER_Manager_init+0x38>
u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <TIMER_Manager_init+0x38>
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <TIMER_Manager_init+0x38>
     f6a:	83 e0       	ldi	r24, 0x03	; 3
	{
		l_ret  = TIMER_init(st_config);
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
	}
	return l_ret;
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	08 95       	ret

00000f74 <TIMER_Manager_start>:
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	51 f0       	breq	.+20     	; 0xf8c <TIMER_Manager_start+0x18>
     f78:	fc 01       	movw	r30, r24
     f7a:	20 81       	ld	r18, Z
     f7c:	23 30       	cpi	r18, 0x03	; 3
     f7e:	40 f4       	brcc	.+16     	; 0xf90 <TIMER_Manager_start+0x1c>
     f80:	21 81       	ldd	r18, Z+1	; 0x01
     f82:	2a 30       	cpi	r18, 0x0A	; 10
     f84:	38 f4       	brcc	.+14     	; 0xf94 <TIMER_Manager_start+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_start(st_config);
     f86:	0e 94 cd 0b 	call	0x179a	; 0x179a <TIMER_start>
     f8a:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     f8c:	83 e0       	ldi	r24, 0x03	; 3
     f8e:	08 95       	ret
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	08 95       	ret
     f94:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_start(st_config);
	}
	return l_ret;
}
     f96:	08 95       	ret

00000f98 <TIMER_Manager_stop>:
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	18 f4       	brcc	.+6      	; 0xfa2 <TIMER_Manager_stop+0xa>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
     f9c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <TIMER_stop>
     fa0:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     fa2:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
     fa4:	08 95       	ret

00000fa6 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	51 f0       	breq	.+20     	; 0xfbe <TIMER_Manager_reset+0x18>
     faa:	fc 01       	movw	r30, r24
     fac:	20 81       	ld	r18, Z
     fae:	23 30       	cpi	r18, 0x03	; 3
     fb0:	40 f4       	brcc	.+16     	; 0xfc2 <TIMER_Manager_reset+0x1c>
     fb2:	21 81       	ldd	r18, Z+1	; 0x01
     fb4:	2a 30       	cpi	r18, 0x0A	; 10
     fb6:	38 f4       	brcc	.+14     	; 0xfc6 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
     fb8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <TIMER_reset>
     fbc:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	08 95       	ret
     fc2:	83 e0       	ldi	r24, 0x03	; 3
     fc4:	08 95       	ret
     fc6:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
     fc8:	08 95       	ret

00000fca <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
     fca:	41 e0       	ldi	r20, 0x01	; 1
     fcc:	63 e0       	ldi	r22, 0x03	; 3
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd4:	8a e1       	ldi	r24, 0x1A	; 26
     fd6:	8a 95       	dec	r24
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <HULTRASONIC_vidTrigger+0xc>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <HULTRASONIC_vidTrigger+0x12>
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	63 e0       	ldi	r22, 0x03	; 3
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>
     fe6:	08 95       	ret

00000fe8 <HULTRASONIC_vidTimerCBF>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
     fe8:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <g_v_u16_ovfCounts>
     fec:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <g_v_u16_ovfCounts+0x1>
     ff0:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <g_v_u16_ovfCounts+0x2>
     ff4:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <g_v_u16_ovfCounts+0x3>
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	a1 1d       	adc	r26, r1
     ffc:	b1 1d       	adc	r27, r1
     ffe:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <g_v_u16_ovfCounts>
    1002:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <g_v_u16_ovfCounts+0x1>
    1006:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <g_v_u16_ovfCounts+0x2>
    100a:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <g_v_u16_ovfCounts+0x3>
    100e:	08 95       	ret

00001010 <HULTRASONIC_vidSigCalc>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
    1010:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <g_v_u8_flag>
    1014:	81 11       	cpse	r24, r1
    1016:	14 c0       	rjmp	.+40     	; 0x1040 <HULTRASONIC_vidSigCalc+0x30>
	{
		MTIMER_vidResetTCNT();
    1018:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <MTIMER_vidResetTCNT>
		(void) vidExtInt_init(INT_2 , FALL_EDGE);
    101c:	62 e0       	ldi	r22, 0x02	; 2
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <vidExtInt_init>
		g_v_u8_flag = 1;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
    102a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <g_v_u16_ovfCounts>
    102e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <g_v_u16_ovfCounts+0x1>
    1032:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <g_v_u16_ovfCounts+0x2>
    1036:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <g_v_u16_ovfCounts+0x3>
		(void) vidTimer2_start();	
    103a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <vidTimer2_start>
    103e:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
    1040:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <g_v_u8_flag>
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	09 f0       	breq	.+2      	; 0x104a <HULTRASONIC_vidSigCalc+0x3a>
    1048:	50 c0       	rjmp	.+160    	; 0x10ea <HULTRASONIC_vidSigCalc+0xda>
	{
		vidTimer2_stop();
    104a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <vidTimer2_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
    104e:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <MTIMER_u8GetTCNT>
    1052:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
    1056:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <g_v_u16_ovfCounts>
    105a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <g_v_u16_ovfCounts+0x1>
    105e:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <g_v_u16_ovfCounts+0x2>
    1062:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <g_v_u16_ovfCounts+0x3>
    1066:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <g_v_u16_ovf>
    106a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <g_v_u16_ovf+0x1>
    106e:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <g_v_u16_ovf+0x2>
    1072:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <g_v_u16_ovf+0x3>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
    1076:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <g_v_u8_cap>
    107a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <g_v_u16_ovf>
    107e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <g_v_u16_ovf+0x1>
    1082:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <g_v_u16_ovf+0x2>
    1086:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <g_v_u16_ovf+0x3>
    108a:	ba 2f       	mov	r27, r26
    108c:	a9 2f       	mov	r26, r25
    108e:	98 2f       	mov	r25, r24
    1090:	88 27       	eor	r24, r24
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	62 0f       	add	r22, r18
    1098:	71 1d       	adc	r23, r1
    109a:	81 1d       	adc	r24, r1
    109c:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */		
		global_f64distance = (float64_t)global_u32Ticks / 932.95;
    109e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__floatunsisf>
    10a2:	2d ec       	ldi	r18, 0xCD	; 205
    10a4:	3c e3       	ldi	r19, 0x3C	; 60
    10a6:	49 e6       	ldi	r20, 0x69	; 105
    10a8:	54 e4       	ldi	r21, 0x44	; 68
    10aa:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__divsf3>
    10ae:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <global_f64distance>
    10b2:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <global_f64distance+0x1>
    10b6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <global_f64distance+0x2>
    10ba:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <global_f64distance+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
    10be:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <g_v_u16_ovf>
    10c2:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <g_v_u16_ovf+0x1>
    10c6:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <g_v_u16_ovf+0x2>
    10ca:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <g_v_u16_ovf+0x3>
    10ce:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <g_v_u16_ovfCounts>
    10d2:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <g_v_u16_ovfCounts+0x1>
    10d6:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <g_v_u16_ovfCounts+0x2>
    10da:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <g_v_u16_ovfCounts+0x3>
    10de:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_2 , RISE_EDGE);
    10e2:	63 e0       	ldi	r22, 0x03	; 3
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <vidExtInt_init>
    10ea:	08 95       	ret

000010ec <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	63 e0       	ldi	r22, 0x03	; 3
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	62 e0       	ldi	r22, 0x02	; 2
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	62 e0       	ldi	r22, 0x02	; 2
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_writePIN>

	(void) vidExtInt_init(INT_2 , RISE_EDGE);
    110a:	63 e0       	ldi	r22, 0x03	; 3
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <vidExtInt_init>

	(void) enuTimer2_init (OVF_MODE);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <enuTimer2_init>
	(void) u8Timer2_setPrescallar(TIMER_PRE_1);
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <u8Timer2_setPrescallar>
    111e:	08 95       	ret

00001120 <HULTRASONIC_vidInterruptEnable>:
}

void HULTRASONIC_vidInterruptEnable(void)
{
	(void) vidTimer2_OvfIrqEnable();
    1120:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <vidTimer2_OvfIrqEnable>
	MEXTINT2_vidEnableInterrupt();
    1124:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <MEXTINT2_vidEnableInterrupt>
	MTIMER_vidEnableGlobalInterrupt();
    1128:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <MTIMER_vidEnableGlobalInterrupt>
    112c:	08 95       	ret

0000112e <HULTRASONIC_vidInterruptDisable>:
}

void HULTRASONIC_vidInterruptDisable(void)
{
	(void) vidTimer2_OvfIrqDisable();
    112e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vidTimer2_OvfIrqDisable>
	MEXTINT2_vidDisableInterrupt();
    1132:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <MEXTINT2_vidDisableInterrupt>
    1136:	08 95       	ret

00001138 <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
    1138:	0e 94 e5 07 	call	0xfca	; 0xfca <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
    113c:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <global_f64distance>
    1140:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <global_f64distance+0x1>
    1144:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <global_f64distance+0x2>
    1148:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <global_f64distance+0x3>
}
    114c:	08 95       	ret

0000114e <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
    114e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <vidTimer2_setcbf_OVF>
    1152:	08 95       	ret

00001154 <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
    1154:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <MEXTINT_vidCallBackFunc>
    1158:	08 95       	ret

0000115a <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
    115a:	0e 94 76 00 	call	0xec	; 0xec <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
    115e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <APP_vidStart>
    1162:	fd cf       	rjmp	.-6      	; 0x115e <main+0x4>

00001164 <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
    1164:	68 30       	cpi	r22, 0x08	; 8
    1166:	a0 f5       	brcc	.+104    	; 0x11d0 <DIO_init+0x6c>
	{
		if (port == porta)
    1168:	81 11       	cpse	r24, r1
    116a:	0b c0       	rjmp	.+22     	; 0x1182 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
    116c:	8a b3       	in	r24, 0x1a	; 26
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_init+0x12>
    1172:	44 0f       	add	r20, r20
    1174:	55 1f       	adc	r21, r21
    1176:	6a 95       	dec	r22
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_init+0xe>
    117a:	48 2b       	or	r20, r24
    117c:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	08 95       	ret
		}
		else if (port == portb)
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	59 f4       	brne	.+22     	; 0x119c <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
    1186:	87 b3       	in	r24, 0x17	; 23
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_init+0x2c>
    118c:	44 0f       	add	r20, r20
    118e:	55 1f       	adc	r21, r21
    1190:	6a 95       	dec	r22
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_init+0x28>
    1194:	48 2b       	or	r20, r24
    1196:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	08 95       	ret
		}
		else if (port == portc)
    119c:	82 30       	cpi	r24, 0x02	; 2
    119e:	59 f4       	brne	.+22     	; 0x11b6 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
    11a0:	84 b3       	in	r24, 0x14	; 20
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_init+0x46>
    11a6:	44 0f       	add	r20, r20
    11a8:	55 1f       	adc	r21, r21
    11aa:	6a 95       	dec	r22
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_init+0x42>
    11ae:	48 2b       	or	r20, r24
    11b0:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	08 95       	ret
		}
		else if (port == portd)
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	69 f4       	brne	.+26     	; 0x11d4 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
    11ba:	81 b3       	in	r24, 0x11	; 17
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_init+0x60>
    11c0:	44 0f       	add	r20, r20
    11c2:	55 1f       	adc	r21, r21
    11c4:	6a 95       	dec	r22
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_init+0x5c>
    11c8:	48 2b       	or	r20, r24
    11ca:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    11d4:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
    11d6:	08 95       	ret

000011d8 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
    11d8:	68 30       	cpi	r22, 0x08	; 8
    11da:	08 f0       	brcs	.+2      	; 0x11de <DIO_writePIN+0x6>
    11dc:	74 c0       	rjmp	.+232    	; 0x12c6 <DIO_writePIN+0xee>
	{
		if (port == porta)
    11de:	81 11       	cpse	r24, r1
    11e0:	1b c0       	rjmp	.+54     	; 0x1218 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
    11e2:	41 30       	cpi	r20, 0x01	; 1
    11e4:	61 f4       	brne	.+24     	; 0x11fe <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
    11e6:	2b b3       	in	r18, 0x1b	; 27
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_writePIN+0x1a>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	6a 95       	dec	r22
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_writePIN+0x16>
    11f6:	82 2b       	or	r24, r18
    11f8:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
    11fe:	2b b3       	in	r18, 0x1b	; 27
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_writePIN+0x32>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	6a 95       	dec	r22
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_writePIN+0x2e>
    120e:	80 95       	com	r24
    1210:	82 23       	and	r24, r18
    1212:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	08 95       	ret
		}
		else if (port == portb)
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	d9 f4       	brne	.+54     	; 0x1252 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
    121c:	41 30       	cpi	r20, 0x01	; 1
    121e:	61 f4       	brne	.+24     	; 0x1238 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
    1220:	28 b3       	in	r18, 0x18	; 24
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_writePIN+0x54>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	6a 95       	dec	r22
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_writePIN+0x50>
    1230:	82 2b       	or	r24, r18
    1232:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
    1238:	28 b3       	in	r18, 0x18	; 24
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_writePIN+0x6c>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	6a 95       	dec	r22
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_writePIN+0x68>
    1248:	80 95       	com	r24
    124a:	82 23       	and	r24, r18
    124c:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	08 95       	ret
		}
		else if (port == portc)
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	d9 f4       	brne	.+54     	; 0x128c <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
    1256:	41 30       	cpi	r20, 0x01	; 1
    1258:	61 f4       	brne	.+24     	; 0x1272 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
    125a:	25 b3       	in	r18, 0x15	; 21
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_writePIN+0x8e>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	6a 95       	dec	r22
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_writePIN+0x8a>
    126a:	82 2b       	or	r24, r18
    126c:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
    1272:	25 b3       	in	r18, 0x15	; 21
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_writePIN+0xa6>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	6a 95       	dec	r22
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_writePIN+0xa2>
    1282:	80 95       	com	r24
    1284:	82 23       	and	r24, r18
    1286:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	08 95       	ret
		}
		else if (port == portd)
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	e9 f4       	brne	.+58     	; 0x12ca <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
    1290:	41 30       	cpi	r20, 0x01	; 1
    1292:	61 f4       	brne	.+24     	; 0x12ac <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
    1294:	22 b3       	in	r18, 0x12	; 18
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_writePIN+0xc8>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	6a 95       	dec	r22
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_writePIN+0xc4>
    12a4:	82 2b       	or	r24, r18
    12a6:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
    12ac:	22 b3       	in	r18, 0x12	; 18
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_writePIN+0xe0>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	6a 95       	dec	r22
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_writePIN+0xdc>
    12bc:	80 95       	com	r24
    12be:	82 23       	and	r24, r18
    12c0:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    12ca:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
    12cc:	08 95       	ret

000012ce <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
    12ce:	68 30       	cpi	r22, 0x08	; 8
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <DIO_readPIN+0x6>
    12d2:	64 c0       	rjmp	.+200    	; 0x139c <DIO_readPIN+0xce>
	{
		if (port == porta)
    12d4:	81 11       	cpse	r24, r1
    12d6:	17 c0       	rjmp	.+46     	; 0x1306 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
    12d8:	79 b3       	in	r23, 0x19	; 25
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9c 01       	movw	r18, r24
    12e0:	06 2e       	mov	r0, r22
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_readPIN+0x1a>
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_readPIN+0x16>
    12ec:	87 2f       	mov	r24, r23
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	82 23       	and	r24, r18
    12f2:	93 23       	and	r25, r19
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_readPIN+0x2c>
    12f6:	96 95       	lsr	r25
    12f8:	87 95       	ror	r24
    12fa:	6a 95       	dec	r22
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_readPIN+0x28>
    12fe:	fa 01       	movw	r30, r20
    1300:	80 83       	st	Z, r24
			return DIO_E_OK;
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	08 95       	ret
		}
		else if (port == portb)
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	b9 f4       	brne	.+46     	; 0x1338 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
    130a:	76 b3       	in	r23, 0x16	; 22
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9c 01       	movw	r18, r24
    1312:	06 2e       	mov	r0, r22
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_readPIN+0x4c>
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_readPIN+0x48>
    131e:	87 2f       	mov	r24, r23
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	82 23       	and	r24, r18
    1324:	93 23       	and	r25, r19
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_readPIN+0x5e>
    1328:	96 95       	lsr	r25
    132a:	87 95       	ror	r24
    132c:	6a 95       	dec	r22
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_readPIN+0x5a>
    1330:	fa 01       	movw	r30, r20
    1332:	80 83       	st	Z, r24
			return DIO_E_OK;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	08 95       	ret
		}
		else if (port == portc)
    1338:	82 30       	cpi	r24, 0x02	; 2
    133a:	b9 f4       	brne	.+46     	; 0x136a <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
    133c:	73 b3       	in	r23, 0x13	; 19
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9c 01       	movw	r18, r24
    1344:	06 2e       	mov	r0, r22
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_readPIN+0x7e>
    1348:	22 0f       	add	r18, r18
    134a:	33 1f       	adc	r19, r19
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_readPIN+0x7a>
    1350:	87 2f       	mov	r24, r23
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	82 23       	and	r24, r18
    1356:	93 23       	and	r25, r19
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_readPIN+0x90>
    135a:	96 95       	lsr	r25
    135c:	87 95       	ror	r24
    135e:	6a 95       	dec	r22
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_readPIN+0x8c>
    1362:	fa 01       	movw	r30, r20
    1364:	80 83       	st	Z, r24
			return DIO_E_OK;
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	08 95       	ret
		}
		else if (port == portd)
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	c9 f4       	brne	.+50     	; 0x13a0 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
    136e:	70 b3       	in	r23, 0x10	; 16
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	9c 01       	movw	r18, r24
    1376:	06 2e       	mov	r0, r22
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_readPIN+0xb0>
    137a:	22 0f       	add	r18, r18
    137c:	33 1f       	adc	r19, r19
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_readPIN+0xac>
    1382:	87 2f       	mov	r24, r23
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	82 23       	and	r24, r18
    1388:	93 23       	and	r25, r19
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_readPIN+0xc2>
    138c:	96 95       	lsr	r25
    138e:	87 95       	ror	r24
    1390:	6a 95       	dec	r22
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_readPIN+0xbe>
    1394:	fa 01       	movw	r30, r20
    1396:	80 83       	st	Z, r24
			return DIO_E_OK;
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    13a0:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
    13a2:	08 95       	ret

000013a4 <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidWaitFlag(void)
{
	while( !( READ_BIT(GIFR_REG, INTF0) ) );
}
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <vidExtInt_init+0x6>
    13a8:	70 c0       	rjmp	.+224    	; 0x148a <vidExtInt_init+0xe6>
    13aa:	64 30       	cpi	r22, 0x04	; 4
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <vidExtInt_init+0xc>
    13ae:	6f c0       	rjmp	.+222    	; 0x148e <vidExtInt_init+0xea>
    13b0:	81 11       	cpse	r24, r1
    13b2:	28 c0       	rjmp	.+80     	; 0x1404 <vidExtInt_init+0x60>
    13b4:	61 30       	cpi	r22, 0x01	; 1
    13b6:	71 f0       	breq	.+28     	; 0x13d4 <vidExtInt_init+0x30>
    13b8:	28 f0       	brcs	.+10     	; 0x13c4 <vidExtInt_init+0x20>
    13ba:	62 30       	cpi	r22, 0x02	; 2
    13bc:	99 f0       	breq	.+38     	; 0x13e4 <vidExtInt_init+0x40>
    13be:	63 30       	cpi	r22, 0x03	; 3
    13c0:	c9 f0       	breq	.+50     	; 0x13f4 <vidExtInt_init+0x50>
    13c2:	67 c0       	rjmp	.+206    	; 0x1492 <vidExtInt_init+0xee>
    13c4:	85 b7       	in	r24, 0x35	; 53
    13c6:	8e 7f       	andi	r24, 0xFE	; 254
    13c8:	85 bf       	out	0x35, r24	; 53
    13ca:	85 b7       	in	r24, 0x35	; 53
    13cc:	8d 7f       	andi	r24, 0xFD	; 253
    13ce:	85 bf       	out	0x35, r24	; 53
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	08 95       	ret
    13d4:	85 b7       	in	r24, 0x35	; 53
    13d6:	81 60       	ori	r24, 0x01	; 1
    13d8:	85 bf       	out	0x35, r24	; 53
    13da:	85 b7       	in	r24, 0x35	; 53
    13dc:	8d 7f       	andi	r24, 0xFD	; 253
    13de:	85 bf       	out	0x35, r24	; 53
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	08 95       	ret
    13e4:	85 b7       	in	r24, 0x35	; 53
    13e6:	8e 7f       	andi	r24, 0xFE	; 254
    13e8:	85 bf       	out	0x35, r24	; 53
    13ea:	85 b7       	in	r24, 0x35	; 53
    13ec:	82 60       	ori	r24, 0x02	; 2
    13ee:	85 bf       	out	0x35, r24	; 53
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	08 95       	ret
    13f4:	85 b7       	in	r24, 0x35	; 53
    13f6:	81 60       	ori	r24, 0x01	; 1
    13f8:	85 bf       	out	0x35, r24	; 53
    13fa:	85 b7       	in	r24, 0x35	; 53
    13fc:	82 60       	ori	r24, 0x02	; 2
    13fe:	85 bf       	out	0x35, r24	; 53
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	08 95       	ret
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	81 f5       	brne	.+96     	; 0x1468 <vidExtInt_init+0xc4>
    1408:	61 30       	cpi	r22, 0x01	; 1
    140a:	71 f0       	breq	.+28     	; 0x1428 <vidExtInt_init+0x84>
    140c:	28 f0       	brcs	.+10     	; 0x1418 <vidExtInt_init+0x74>
    140e:	62 30       	cpi	r22, 0x02	; 2
    1410:	99 f0       	breq	.+38     	; 0x1438 <vidExtInt_init+0x94>
    1412:	63 30       	cpi	r22, 0x03	; 3
    1414:	c9 f0       	breq	.+50     	; 0x1448 <vidExtInt_init+0xa4>
    1416:	20 c0       	rjmp	.+64     	; 0x1458 <vidExtInt_init+0xb4>
    1418:	85 b7       	in	r24, 0x35	; 53
    141a:	8b 7f       	andi	r24, 0xFB	; 251
    141c:	85 bf       	out	0x35, r24	; 53
    141e:	85 b7       	in	r24, 0x35	; 53
    1420:	87 7f       	andi	r24, 0xF7	; 247
    1422:	85 bf       	out	0x35, r24	; 53
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	19 c0       	rjmp	.+50     	; 0x145a <vidExtInt_init+0xb6>
    1428:	85 b7       	in	r24, 0x35	; 53
    142a:	84 60       	ori	r24, 0x04	; 4
    142c:	85 bf       	out	0x35, r24	; 53
    142e:	85 b7       	in	r24, 0x35	; 53
    1430:	87 7f       	andi	r24, 0xF7	; 247
    1432:	85 bf       	out	0x35, r24	; 53
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	11 c0       	rjmp	.+34     	; 0x145a <vidExtInt_init+0xb6>
    1438:	85 b7       	in	r24, 0x35	; 53
    143a:	8b 7f       	andi	r24, 0xFB	; 251
    143c:	85 bf       	out	0x35, r24	; 53
    143e:	85 b7       	in	r24, 0x35	; 53
    1440:	88 60       	ori	r24, 0x08	; 8
    1442:	85 bf       	out	0x35, r24	; 53
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	09 c0       	rjmp	.+18     	; 0x145a <vidExtInt_init+0xb6>
    1448:	85 b7       	in	r24, 0x35	; 53
    144a:	84 60       	ori	r24, 0x04	; 4
    144c:	85 bf       	out	0x35, r24	; 53
    144e:	85 b7       	in	r24, 0x35	; 53
    1450:	88 60       	ori	r24, 0x08	; 8
    1452:	85 bf       	out	0x35, r24	; 53
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	01 c0       	rjmp	.+2      	; 0x145a <vidExtInt_init+0xb6>
    1458:	84 e0       	ldi	r24, 0x04	; 4
    145a:	9b b7       	in	r25, 0x3b	; 59
    145c:	90 68       	ori	r25, 0x80	; 128
    145e:	9b bf       	out	0x3b, r25	; 59
    1460:	9a b7       	in	r25, 0x3a	; 58
    1462:	90 68       	ori	r25, 0x80	; 128
    1464:	9a bf       	out	0x3a, r25	; 58
    1466:	08 95       	ret
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	a9 f4       	brne	.+42     	; 0x1496 <vidExtInt_init+0xf2>
    146c:	62 30       	cpi	r22, 0x02	; 2
    146e:	19 f0       	breq	.+6      	; 0x1476 <vidExtInt_init+0xd2>
    1470:	63 30       	cpi	r22, 0x03	; 3
    1472:	31 f0       	breq	.+12     	; 0x1480 <vidExtInt_init+0xdc>
    1474:	12 c0       	rjmp	.+36     	; 0x149a <vidExtInt_init+0xf6>
    1476:	84 b7       	in	r24, 0x34	; 52
    1478:	8f 7b       	andi	r24, 0xBF	; 191
    147a:	84 bf       	out	0x34, r24	; 52
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	08 95       	ret
    1480:	84 b7       	in	r24, 0x34	; 52
    1482:	80 64       	ori	r24, 0x40	; 64
    1484:	84 bf       	out	0x34, r24	; 52
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	08 95       	ret
    148a:	84 e0       	ldi	r24, 0x04	; 4
    148c:	08 95       	ret
    148e:	84 e0       	ldi	r24, 0x04	; 4
    1490:	08 95       	ret
    1492:	84 e0       	ldi	r24, 0x04	; 4
    1494:	08 95       	ret
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	08 95       	ret
    149a:	84 e0       	ldi	r24, 0x04	; 4
    149c:	08 95       	ret

0000149e <MEXTINT_vidCallBackFuncInt0>:
    149e:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <callBackFuncInt0+0x1>
    14a2:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <callBackFuncInt0>
    14a6:	08 95       	ret

000014a8 <MEXTINT_vidCallBackFunc>:
    14a8:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <callBack+0x1>
    14ac:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <callBack>
    14b0:	08 95       	ret

000014b2 <MEXTINT_vidDisableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT0);
    14b2:	8b b7       	in	r24, 0x3b	; 59
    14b4:	8f 7b       	andi	r24, 0xBF	; 191
    14b6:	8b bf       	out	0x3b, r24	; 59
    14b8:	08 95       	ret

000014ba <MEXTINT_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF0);
    14ba:	8a b7       	in	r24, 0x3a	; 58
    14bc:	80 64       	ori	r24, 0x40	; 64
    14be:	8a bf       	out	0x3a, r24	; 58
	SET_BIT(GICR_REG, INT0);
    14c0:	8b b7       	in	r24, 0x3b	; 59
    14c2:	80 64       	ori	r24, 0x40	; 64
    14c4:	8b bf       	out	0x3b, r24	; 59
    14c6:	08 95       	ret

000014c8 <MEXTINT2_vidDisableInterrupt>:
}

void MEXTINT2_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT2);
    14c8:	8b b7       	in	r24, 0x3b	; 59
    14ca:	8f 7d       	andi	r24, 0xDF	; 223
    14cc:	8b bf       	out	0x3b, r24	; 59
    14ce:	08 95       	ret

000014d0 <MEXTINT2_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT2_vidEnableInterrupt(void)
{
		SET_BIT(GICR_REG, INT2);
    14d0:	8b b7       	in	r24, 0x3b	; 59
    14d2:	80 62       	ori	r24, 0x20	; 32
    14d4:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(GIFR_REG, INTF2);
    14d6:	8a b7       	in	r24, 0x3a	; 58
    14d8:	80 62       	ori	r24, 0x20	; 32
    14da:	8a bf       	out	0x3a, r24	; 58
    14dc:	08 95       	ret

000014de <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
    14de:	1f 92       	push	r1
    14e0:	0f 92       	push	r0
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	0f 92       	push	r0
    14e6:	11 24       	eor	r1, r1
    14e8:	2f 93       	push	r18
    14ea:	3f 93       	push	r19
    14ec:	4f 93       	push	r20
    14ee:	5f 93       	push	r21
    14f0:	6f 93       	push	r22
    14f2:	7f 93       	push	r23
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
    14f8:	af 93       	push	r26
    14fa:	bf 93       	push	r27
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
	callBackFuncInt0();
    1500:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <callBackFuncInt0>
    1504:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <callBackFuncInt0+0x1>
    1508:	09 95       	icall
}
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	bf 91       	pop	r27
    1510:	af 91       	pop	r26
    1512:	9f 91       	pop	r25
    1514:	8f 91       	pop	r24
    1516:	7f 91       	pop	r23
    1518:	6f 91       	pop	r22
    151a:	5f 91       	pop	r21
    151c:	4f 91       	pop	r20
    151e:	3f 91       	pop	r19
    1520:	2f 91       	pop	r18
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <__vector_2>:

ISR(INT1_vect)
{
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	2f 93       	push	r18
    1538:	3f 93       	push	r19
    153a:	4f 93       	push	r20
    153c:	5f 93       	push	r21
    153e:	6f 93       	push	r22
    1540:	7f 93       	push	r23
    1542:	8f 93       	push	r24
    1544:	9f 93       	push	r25
    1546:	af 93       	push	r26
    1548:	bf 93       	push	r27
    154a:	ef 93       	push	r30
    154c:	ff 93       	push	r31
	callBackFunc();
    154e:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <callBackFunc>
    1552:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <callBackFunc+0x1>
    1556:	09 95       	icall
}
    1558:	ff 91       	pop	r31
    155a:	ef 91       	pop	r30
    155c:	bf 91       	pop	r27
    155e:	af 91       	pop	r26
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
    1564:	7f 91       	pop	r23
    1566:	6f 91       	pop	r22
    1568:	5f 91       	pop	r21
    156a:	4f 91       	pop	r20
    156c:	3f 91       	pop	r19
    156e:	2f 91       	pop	r18
    1570:	0f 90       	pop	r0
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	0f 90       	pop	r0
    1576:	1f 90       	pop	r1
    1578:	18 95       	reti

0000157a <__vector_3>:

ISR(INT2_vect)
{
    157a:	1f 92       	push	r1
    157c:	0f 92       	push	r0
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	0f 92       	push	r0
    1582:	11 24       	eor	r1, r1
    1584:	2f 93       	push	r18
    1586:	3f 93       	push	r19
    1588:	4f 93       	push	r20
    158a:	5f 93       	push	r21
    158c:	6f 93       	push	r22
    158e:	7f 93       	push	r23
    1590:	8f 93       	push	r24
    1592:	9f 93       	push	r25
    1594:	af 93       	push	r26
    1596:	bf 93       	push	r27
    1598:	ef 93       	push	r30
    159a:	ff 93       	push	r31
	callBack();
    159c:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <callBack>
    15a0:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <callBack+0x1>
    15a4:	09 95       	icall
}
    15a6:	ff 91       	pop	r31
    15a8:	ef 91       	pop	r30
    15aa:	bf 91       	pop	r27
    15ac:	af 91       	pop	r26
    15ae:	9f 91       	pop	r25
    15b0:	8f 91       	pop	r24
    15b2:	7f 91       	pop	r23
    15b4:	6f 91       	pop	r22
    15b6:	5f 91       	pop	r21
    15b8:	4f 91       	pop	r20
    15ba:	3f 91       	pop	r19
    15bc:	2f 91       	pop	r18
    15be:	0f 90       	pop	r0
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	0f 90       	pop	r0
    15c4:	1f 90       	pop	r1
    15c6:	18 95       	reti

000015c8 <__vector_11>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
    15ea:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <sg_Timer0_callBackPtr>
    15ee:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <sg_Timer0_callBackPtr+0x1>
    15f2:	89 2b       	or	r24, r25
    15f4:	41 f0       	breq	.+16     	; 0x1606 <__vector_11+0x3e>
    15f6:	88 b7       	in	r24, 0x38	; 56
    15f8:	8e 7f       	andi	r24, 0xFE	; 254
    15fa:	88 bf       	out	0x38, r24	; 56
    15fc:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <sg_Timer0_callBackPtr>
    1600:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <sg_Timer0_callBackPtr+0x1>
    1604:	09 95       	icall
    1606:	ff 91       	pop	r31
    1608:	ef 91       	pop	r30
    160a:	bf 91       	pop	r27
    160c:	af 91       	pop	r26
    160e:	9f 91       	pop	r25
    1610:	8f 91       	pop	r24
    1612:	7f 91       	pop	r23
    1614:	6f 91       	pop	r22
    1616:	5f 91       	pop	r21
    1618:	4f 91       	pop	r20
    161a:	3f 91       	pop	r19
    161c:	2f 91       	pop	r18
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	0f 90       	pop	r0
    1624:	1f 90       	pop	r1
    1626:	18 95       	reti

00001628 <__vector_9>:
    1628:	1f 92       	push	r1
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
    1632:	2f 93       	push	r18
    1634:	3f 93       	push	r19
    1636:	4f 93       	push	r20
    1638:	5f 93       	push	r21
    163a:	6f 93       	push	r22
    163c:	7f 93       	push	r23
    163e:	8f 93       	push	r24
    1640:	9f 93       	push	r25
    1642:	af 93       	push	r26
    1644:	bf 93       	push	r27
    1646:	ef 93       	push	r30
    1648:	ff 93       	push	r31
    164a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <sg_Timer1_callBackPtr>
    164e:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <sg_Timer1_callBackPtr+0x1>
    1652:	89 2b       	or	r24, r25
    1654:	41 f0       	breq	.+16     	; 0x1666 <__vector_9+0x3e>
    1656:	88 b7       	in	r24, 0x38	; 56
    1658:	8b 7f       	andi	r24, 0xFB	; 251
    165a:	88 bf       	out	0x38, r24	; 56
    165c:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <sg_Timer1_callBackPtr>
    1660:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <sg_Timer1_callBackPtr+0x1>
    1664:	09 95       	icall
    1666:	ff 91       	pop	r31
    1668:	ef 91       	pop	r30
    166a:	bf 91       	pop	r27
    166c:	af 91       	pop	r26
    166e:	9f 91       	pop	r25
    1670:	8f 91       	pop	r24
    1672:	7f 91       	pop	r23
    1674:	6f 91       	pop	r22
    1676:	5f 91       	pop	r21
    1678:	4f 91       	pop	r20
    167a:	3f 91       	pop	r19
    167c:	2f 91       	pop	r18
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0f 90       	pop	r0
    1684:	1f 90       	pop	r1
    1686:	18 95       	reti

00001688 <TIMER_init>:
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	09 f4       	brne	.+2      	; 0x168e <TIMER_init+0x6>
    168c:	78 c0       	rjmp	.+240    	; 0x177e <TIMER_init+0xf6>
    168e:	fc 01       	movw	r30, r24
    1690:	20 81       	ld	r18, Z
    1692:	23 30       	cpi	r18, 0x03	; 3
    1694:	08 f0       	brcs	.+2      	; 0x1698 <TIMER_init+0x10>
    1696:	75 c0       	rjmp	.+234    	; 0x1782 <TIMER_init+0xfa>
    1698:	31 81       	ldd	r19, Z+1	; 0x01
    169a:	3a 30       	cpi	r19, 0x0A	; 10
    169c:	08 f0       	brcs	.+2      	; 0x16a0 <TIMER_init+0x18>
    169e:	73 c0       	rjmp	.+230    	; 0x1786 <TIMER_init+0xfe>
    16a0:	21 30       	cpi	r18, 0x01	; 1
    16a2:	19 f1       	breq	.+70     	; 0x16ea <TIMER_init+0x62>
    16a4:	20 f0       	brcs	.+8      	; 0x16ae <TIMER_init+0x26>
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	09 f4       	brne	.+2      	; 0x16ac <TIMER_init+0x24>
    16aa:	50 c0       	rjmp	.+160    	; 0x174c <TIMER_init+0xc4>
    16ac:	6e c0       	rjmp	.+220    	; 0x178a <TIMER_init+0x102>
    16ae:	12 be       	out	0x32, r1	; 50
    16b0:	13 be       	out	0x33, r1	; 51
    16b2:	1c be       	out	0x3c, r1	; 60
    16b4:	fc 01       	movw	r30, r24
    16b6:	22 81       	ldd	r18, Z+2	; 0x02
    16b8:	22 bf       	out	0x32, r18	; 50
    16ba:	23 b7       	in	r18, 0x33	; 51
    16bc:	20 68       	ori	r18, 0x80	; 128
    16be:	23 bf       	out	0x33, r18	; 51
    16c0:	23 b7       	in	r18, 0x33	; 51
    16c2:	2f 7b       	andi	r18, 0xBF	; 191
    16c4:	23 bf       	out	0x33, r18	; 51
    16c6:	23 b7       	in	r18, 0x33	; 51
    16c8:	27 7f       	andi	r18, 0xF7	; 247
    16ca:	23 bf       	out	0x33, r18	; 51
    16cc:	23 b7       	in	r18, 0x33	; 51
    16ce:	2f 7e       	andi	r18, 0xEF	; 239
    16d0:	23 bf       	out	0x33, r18	; 51
    16d2:	23 b7       	in	r18, 0x33	; 51
    16d4:	2f 7d       	andi	r18, 0xDF	; 223
    16d6:	23 bf       	out	0x33, r18	; 51
    16d8:	84 81       	ldd	r24, Z+4	; 0x04
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <TIMER_init+0x58>
    16de:	57 c0       	rjmp	.+174    	; 0x178e <TIMER_init+0x106>
    16e0:	89 b7       	in	r24, 0x39	; 57
    16e2:	81 60       	ori	r24, 0x01	; 1
    16e4:	89 bf       	out	0x39, r24	; 57
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	08 95       	ret
    16ea:	1c bc       	out	0x2c, r1	; 44
    16ec:	1d bc       	out	0x2d, r1	; 45
    16ee:	1f bc       	out	0x2f, r1	; 47
    16f0:	1e bc       	out	0x2e, r1	; 46
    16f2:	1b bc       	out	0x2b, r1	; 43
    16f4:	1a bc       	out	0x2a, r1	; 42
    16f6:	fc 01       	movw	r30, r24
    16f8:	22 81       	ldd	r18, Z+2	; 0x02
    16fa:	33 81       	ldd	r19, Z+3	; 0x03
    16fc:	3d bd       	out	0x2d, r19	; 45
    16fe:	2c bd       	out	0x2c, r18	; 44
    1700:	2f b5       	in	r18, 0x2f	; 47
    1702:	28 60       	ori	r18, 0x08	; 8
    1704:	2f bd       	out	0x2f, r18	; 47
    1706:	2f b5       	in	r18, 0x2f	; 47
    1708:	24 60       	ori	r18, 0x04	; 4
    170a:	2f bd       	out	0x2f, r18	; 47
    170c:	2f b5       	in	r18, 0x2f	; 47
    170e:	2e 7f       	andi	r18, 0xFE	; 254
    1710:	2f bd       	out	0x2f, r18	; 47
    1712:	2f b5       	in	r18, 0x2f	; 47
    1714:	2d 7f       	andi	r18, 0xFD	; 253
    1716:	2f bd       	out	0x2f, r18	; 47
    1718:	2e b5       	in	r18, 0x2e	; 46
    171a:	2f 7e       	andi	r18, 0xEF	; 239
    171c:	2e bd       	out	0x2e, r18	; 46
    171e:	2e b5       	in	r18, 0x2e	; 46
    1720:	27 7f       	andi	r18, 0xF7	; 247
    1722:	2e bd       	out	0x2e, r18	; 46
    1724:	2f b5       	in	r18, 0x2f	; 47
    1726:	2f 7b       	andi	r18, 0xBF	; 191
    1728:	2f bd       	out	0x2f, r18	; 47
    172a:	2f b5       	in	r18, 0x2f	; 47
    172c:	2f 77       	andi	r18, 0x7F	; 127
    172e:	2f bd       	out	0x2f, r18	; 47
    1730:	2f b5       	in	r18, 0x2f	; 47
    1732:	2f 7e       	andi	r18, 0xEF	; 239
    1734:	2f bd       	out	0x2f, r18	; 47
    1736:	2f b5       	in	r18, 0x2f	; 47
    1738:	2f 7d       	andi	r18, 0xDF	; 223
    173a:	2f bd       	out	0x2f, r18	; 47
    173c:	84 81       	ldd	r24, Z+4	; 0x04
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	41 f5       	brne	.+80     	; 0x1792 <TIMER_init+0x10a>
    1742:	89 b7       	in	r24, 0x39	; 57
    1744:	84 60       	ori	r24, 0x04	; 4
    1746:	89 bf       	out	0x39, r24	; 57
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	08 95       	ret
    174c:	14 bc       	out	0x24, r1	; 36
    174e:	15 bc       	out	0x25, r1	; 37
    1750:	13 bc       	out	0x23, r1	; 35
    1752:	14 bc       	out	0x24, r1	; 36
    1754:	25 b5       	in	r18, 0x25	; 37
    1756:	2f 7b       	andi	r18, 0xBF	; 191
    1758:	25 bd       	out	0x25, r18	; 37
    175a:	25 b5       	in	r18, 0x25	; 37
    175c:	27 7f       	andi	r18, 0xF7	; 247
    175e:	25 bd       	out	0x25, r18	; 37
    1760:	25 b5       	in	r18, 0x25	; 37
    1762:	2f 7e       	andi	r18, 0xEF	; 239
    1764:	25 bd       	out	0x25, r18	; 37
    1766:	25 b5       	in	r18, 0x25	; 37
    1768:	2f 7d       	andi	r18, 0xDF	; 223
    176a:	25 bd       	out	0x25, r18	; 37
    176c:	fc 01       	movw	r30, r24
    176e:	84 81       	ldd	r24, Z+4	; 0x04
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	89 f4       	brne	.+34     	; 0x1796 <TIMER_init+0x10e>
    1774:	89 b7       	in	r24, 0x39	; 57
    1776:	80 64       	ori	r24, 0x40	; 64
    1778:	89 bf       	out	0x39, r24	; 57
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	08 95       	ret
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	08 95       	ret
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	08 95       	ret
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	08 95       	ret
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	08 95       	ret
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	08 95       	ret
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	08 95       	ret
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	08 95       	ret

0000179a <TIMER_start>:
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	09 f4       	brne	.+2      	; 0x17a0 <TIMER_start+0x6>
    179e:	3b c1       	rjmp	.+630    	; 0x1a16 <TIMER_start+0x27c>
    17a0:	dc 01       	movw	r26, r24
    17a2:	2c 91       	ld	r18, X
    17a4:	23 30       	cpi	r18, 0x03	; 3
    17a6:	08 f0       	brcs	.+2      	; 0x17aa <TIMER_start+0x10>
    17a8:	38 c1       	rjmp	.+624    	; 0x1a1a <TIMER_start+0x280>
    17aa:	11 96       	adiw	r26, 0x01	; 1
    17ac:	ec 91       	ld	r30, X
    17ae:	ea 30       	cpi	r30, 0x0A	; 10
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <TIMER_start+0x1a>
    17b2:	35 c1       	rjmp	.+618    	; 0x1a1e <TIMER_start+0x284>
    17b4:	21 30       	cpi	r18, 0x01	; 1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <TIMER_start+0x20>
    17b8:	68 c0       	rjmp	.+208    	; 0x188a <TIMER_start+0xf0>
    17ba:	20 f0       	brcs	.+8      	; 0x17c4 <TIMER_start+0x2a>
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	09 f4       	brne	.+2      	; 0x17c2 <TIMER_start+0x28>
    17c0:	c7 c0       	rjmp	.+398    	; 0x1950 <TIMER_start+0x1b6>
    17c2:	2f c1       	rjmp	.+606    	; 0x1a22 <TIMER_start+0x288>
    17c4:	8e 2f       	mov	r24, r30
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	8a 30       	cpi	r24, 0x0A	; 10
    17ca:	91 05       	cpc	r25, r1
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <TIMER_start+0x36>
    17ce:	2b c1       	rjmp	.+598    	; 0x1a26 <TIMER_start+0x28c>
    17d0:	fc 01       	movw	r30, r24
    17d2:	e6 5d       	subi	r30, 0xD6	; 214
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__tablejump2__>
    17da:	83 b7       	in	r24, 0x33	; 51
    17dc:	8e 7f       	andi	r24, 0xFE	; 254
    17de:	83 bf       	out	0x33, r24	; 51
    17e0:	83 b7       	in	r24, 0x33	; 51
    17e2:	8d 7f       	andi	r24, 0xFD	; 253
    17e4:	83 bf       	out	0x33, r24	; 51
    17e6:	83 b7       	in	r24, 0x33	; 51
    17e8:	8b 7f       	andi	r24, 0xFB	; 251
    17ea:	83 bf       	out	0x33, r24	; 51
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	08 95       	ret
    17f0:	83 b7       	in	r24, 0x33	; 51
    17f2:	81 60       	ori	r24, 0x01	; 1
    17f4:	83 bf       	out	0x33, r24	; 51
    17f6:	83 b7       	in	r24, 0x33	; 51
    17f8:	8d 7f       	andi	r24, 0xFD	; 253
    17fa:	83 bf       	out	0x33, r24	; 51
    17fc:	83 b7       	in	r24, 0x33	; 51
    17fe:	8b 7f       	andi	r24, 0xFB	; 251
    1800:	83 bf       	out	0x33, r24	; 51
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	08 95       	ret
    1806:	83 b7       	in	r24, 0x33	; 51
    1808:	8e 7f       	andi	r24, 0xFE	; 254
    180a:	83 bf       	out	0x33, r24	; 51
    180c:	83 b7       	in	r24, 0x33	; 51
    180e:	82 60       	ori	r24, 0x02	; 2
    1810:	83 bf       	out	0x33, r24	; 51
    1812:	83 b7       	in	r24, 0x33	; 51
    1814:	8b 7f       	andi	r24, 0xFB	; 251
    1816:	83 bf       	out	0x33, r24	; 51
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	08 95       	ret
    181c:	83 b7       	in	r24, 0x33	; 51
    181e:	81 60       	ori	r24, 0x01	; 1
    1820:	83 bf       	out	0x33, r24	; 51
    1822:	83 b7       	in	r24, 0x33	; 51
    1824:	82 60       	ori	r24, 0x02	; 2
    1826:	83 bf       	out	0x33, r24	; 51
    1828:	83 b7       	in	r24, 0x33	; 51
    182a:	8b 7f       	andi	r24, 0xFB	; 251
    182c:	83 bf       	out	0x33, r24	; 51
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	08 95       	ret
    1832:	83 b7       	in	r24, 0x33	; 51
    1834:	8e 7f       	andi	r24, 0xFE	; 254
    1836:	83 bf       	out	0x33, r24	; 51
    1838:	83 b7       	in	r24, 0x33	; 51
    183a:	8d 7f       	andi	r24, 0xFD	; 253
    183c:	83 bf       	out	0x33, r24	; 51
    183e:	83 b7       	in	r24, 0x33	; 51
    1840:	84 60       	ori	r24, 0x04	; 4
    1842:	83 bf       	out	0x33, r24	; 51
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	08 95       	ret
    1848:	83 b7       	in	r24, 0x33	; 51
    184a:	81 60       	ori	r24, 0x01	; 1
    184c:	83 bf       	out	0x33, r24	; 51
    184e:	83 b7       	in	r24, 0x33	; 51
    1850:	8d 7f       	andi	r24, 0xFD	; 253
    1852:	83 bf       	out	0x33, r24	; 51
    1854:	83 b7       	in	r24, 0x33	; 51
    1856:	84 60       	ori	r24, 0x04	; 4
    1858:	83 bf       	out	0x33, r24	; 51
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	08 95       	ret
    185e:	83 b7       	in	r24, 0x33	; 51
    1860:	8e 7f       	andi	r24, 0xFE	; 254
    1862:	83 bf       	out	0x33, r24	; 51
    1864:	83 b7       	in	r24, 0x33	; 51
    1866:	82 60       	ori	r24, 0x02	; 2
    1868:	83 bf       	out	0x33, r24	; 51
    186a:	83 b7       	in	r24, 0x33	; 51
    186c:	84 60       	ori	r24, 0x04	; 4
    186e:	83 bf       	out	0x33, r24	; 51
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	08 95       	ret
    1874:	83 b7       	in	r24, 0x33	; 51
    1876:	81 60       	ori	r24, 0x01	; 1
    1878:	83 bf       	out	0x33, r24	; 51
    187a:	83 b7       	in	r24, 0x33	; 51
    187c:	82 60       	ori	r24, 0x02	; 2
    187e:	83 bf       	out	0x33, r24	; 51
    1880:	83 b7       	in	r24, 0x33	; 51
    1882:	84 60       	ori	r24, 0x04	; 4
    1884:	83 bf       	out	0x33, r24	; 51
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	08 95       	ret
    188a:	8e 2f       	mov	r24, r30
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	8a 30       	cpi	r24, 0x0A	; 10
    1890:	91 05       	cpc	r25, r1
    1892:	08 f0       	brcs	.+2      	; 0x1896 <TIMER_start+0xfc>
    1894:	ca c0       	rjmp	.+404    	; 0x1a2a <TIMER_start+0x290>
    1896:	fc 01       	movw	r30, r24
    1898:	ec 5c       	subi	r30, 0xCC	; 204
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__tablejump2__>
    18a0:	8e b5       	in	r24, 0x2e	; 46
    18a2:	8e 7f       	andi	r24, 0xFE	; 254
    18a4:	8e bd       	out	0x2e, r24	; 46
    18a6:	8e b5       	in	r24, 0x2e	; 46
    18a8:	8d 7f       	andi	r24, 0xFD	; 253
    18aa:	8e bd       	out	0x2e, r24	; 46
    18ac:	8e b5       	in	r24, 0x2e	; 46
    18ae:	8b 7f       	andi	r24, 0xFB	; 251
    18b0:	8e bd       	out	0x2e, r24	; 46
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	08 95       	ret
    18b6:	8e b5       	in	r24, 0x2e	; 46
    18b8:	81 60       	ori	r24, 0x01	; 1
    18ba:	8e bd       	out	0x2e, r24	; 46
    18bc:	8e b5       	in	r24, 0x2e	; 46
    18be:	8d 7f       	andi	r24, 0xFD	; 253
    18c0:	8e bd       	out	0x2e, r24	; 46
    18c2:	8e b5       	in	r24, 0x2e	; 46
    18c4:	8b 7f       	andi	r24, 0xFB	; 251
    18c6:	8e bd       	out	0x2e, r24	; 46
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	08 95       	ret
    18cc:	8e b5       	in	r24, 0x2e	; 46
    18ce:	8e 7f       	andi	r24, 0xFE	; 254
    18d0:	8e bd       	out	0x2e, r24	; 46
    18d2:	8e b5       	in	r24, 0x2e	; 46
    18d4:	82 60       	ori	r24, 0x02	; 2
    18d6:	8e bd       	out	0x2e, r24	; 46
    18d8:	8e b5       	in	r24, 0x2e	; 46
    18da:	8b 7f       	andi	r24, 0xFB	; 251
    18dc:	8e bd       	out	0x2e, r24	; 46
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	08 95       	ret
    18e2:	8e b5       	in	r24, 0x2e	; 46
    18e4:	81 60       	ori	r24, 0x01	; 1
    18e6:	8e bd       	out	0x2e, r24	; 46
    18e8:	8e b5       	in	r24, 0x2e	; 46
    18ea:	82 60       	ori	r24, 0x02	; 2
    18ec:	8e bd       	out	0x2e, r24	; 46
    18ee:	8e b5       	in	r24, 0x2e	; 46
    18f0:	8b 7f       	andi	r24, 0xFB	; 251
    18f2:	8e bd       	out	0x2e, r24	; 46
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	08 95       	ret
    18f8:	8e b5       	in	r24, 0x2e	; 46
    18fa:	8e 7f       	andi	r24, 0xFE	; 254
    18fc:	8e bd       	out	0x2e, r24	; 46
    18fe:	8e b5       	in	r24, 0x2e	; 46
    1900:	8d 7f       	andi	r24, 0xFD	; 253
    1902:	8e bd       	out	0x2e, r24	; 46
    1904:	8e b5       	in	r24, 0x2e	; 46
    1906:	84 60       	ori	r24, 0x04	; 4
    1908:	8e bd       	out	0x2e, r24	; 46
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	08 95       	ret
    190e:	8e b5       	in	r24, 0x2e	; 46
    1910:	81 60       	ori	r24, 0x01	; 1
    1912:	8e bd       	out	0x2e, r24	; 46
    1914:	8e b5       	in	r24, 0x2e	; 46
    1916:	8d 7f       	andi	r24, 0xFD	; 253
    1918:	8e bd       	out	0x2e, r24	; 46
    191a:	8e b5       	in	r24, 0x2e	; 46
    191c:	84 60       	ori	r24, 0x04	; 4
    191e:	8e bd       	out	0x2e, r24	; 46
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	08 95       	ret
    1924:	8e b5       	in	r24, 0x2e	; 46
    1926:	8e 7f       	andi	r24, 0xFE	; 254
    1928:	8e bd       	out	0x2e, r24	; 46
    192a:	8e b5       	in	r24, 0x2e	; 46
    192c:	82 60       	ori	r24, 0x02	; 2
    192e:	8e bd       	out	0x2e, r24	; 46
    1930:	8e b5       	in	r24, 0x2e	; 46
    1932:	84 60       	ori	r24, 0x04	; 4
    1934:	8e bd       	out	0x2e, r24	; 46
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	08 95       	ret
    193a:	8e b5       	in	r24, 0x2e	; 46
    193c:	81 60       	ori	r24, 0x01	; 1
    193e:	8e bd       	out	0x2e, r24	; 46
    1940:	8e b5       	in	r24, 0x2e	; 46
    1942:	82 60       	ori	r24, 0x02	; 2
    1944:	8e bd       	out	0x2e, r24	; 46
    1946:	8e b5       	in	r24, 0x2e	; 46
    1948:	84 60       	ori	r24, 0x04	; 4
    194a:	8e bd       	out	0x2e, r24	; 46
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	08 95       	ret
    1950:	8e 2f       	mov	r24, r30
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	88 30       	cpi	r24, 0x08	; 8
    1956:	91 05       	cpc	r25, r1
    1958:	08 f0       	brcs	.+2      	; 0x195c <TIMER_start+0x1c2>
    195a:	69 c0       	rjmp	.+210    	; 0x1a2e <TIMER_start+0x294>
    195c:	fc 01       	movw	r30, r24
    195e:	e2 5c       	subi	r30, 0xC2	; 194
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__tablejump2__>
    1966:	85 b5       	in	r24, 0x25	; 37
    1968:	8b 7f       	andi	r24, 0xFB	; 251
    196a:	85 bd       	out	0x25, r24	; 37
    196c:	85 b5       	in	r24, 0x25	; 37
    196e:	8d 7f       	andi	r24, 0xFD	; 253
    1970:	85 bd       	out	0x25, r24	; 37
    1972:	85 b5       	in	r24, 0x25	; 37
    1974:	8e 7f       	andi	r24, 0xFE	; 254
    1976:	85 bd       	out	0x25, r24	; 37
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	08 95       	ret
    197c:	85 b5       	in	r24, 0x25	; 37
    197e:	84 60       	ori	r24, 0x04	; 4
    1980:	85 bd       	out	0x25, r24	; 37
    1982:	85 b5       	in	r24, 0x25	; 37
    1984:	8d 7f       	andi	r24, 0xFD	; 253
    1986:	85 bd       	out	0x25, r24	; 37
    1988:	85 b5       	in	r24, 0x25	; 37
    198a:	8e 7f       	andi	r24, 0xFE	; 254
    198c:	85 bd       	out	0x25, r24	; 37
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	08 95       	ret
    1992:	85 b5       	in	r24, 0x25	; 37
    1994:	8b 7f       	andi	r24, 0xFB	; 251
    1996:	85 bd       	out	0x25, r24	; 37
    1998:	85 b5       	in	r24, 0x25	; 37
    199a:	82 60       	ori	r24, 0x02	; 2
    199c:	85 bd       	out	0x25, r24	; 37
    199e:	85 b5       	in	r24, 0x25	; 37
    19a0:	8e 7f       	andi	r24, 0xFE	; 254
    19a2:	85 bd       	out	0x25, r24	; 37
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	08 95       	ret
    19a8:	85 b5       	in	r24, 0x25	; 37
    19aa:	84 60       	ori	r24, 0x04	; 4
    19ac:	85 bd       	out	0x25, r24	; 37
    19ae:	85 b5       	in	r24, 0x25	; 37
    19b0:	82 60       	ori	r24, 0x02	; 2
    19b2:	85 bd       	out	0x25, r24	; 37
    19b4:	85 b5       	in	r24, 0x25	; 37
    19b6:	8e 7f       	andi	r24, 0xFE	; 254
    19b8:	85 bd       	out	0x25, r24	; 37
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	08 95       	ret
    19be:	85 b5       	in	r24, 0x25	; 37
    19c0:	8b 7f       	andi	r24, 0xFB	; 251
    19c2:	85 bd       	out	0x25, r24	; 37
    19c4:	85 b5       	in	r24, 0x25	; 37
    19c6:	8d 7f       	andi	r24, 0xFD	; 253
    19c8:	85 bd       	out	0x25, r24	; 37
    19ca:	85 b5       	in	r24, 0x25	; 37
    19cc:	81 60       	ori	r24, 0x01	; 1
    19ce:	85 bd       	out	0x25, r24	; 37
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	08 95       	ret
    19d4:	85 b5       	in	r24, 0x25	; 37
    19d6:	84 60       	ori	r24, 0x04	; 4
    19d8:	85 bd       	out	0x25, r24	; 37
    19da:	85 b5       	in	r24, 0x25	; 37
    19dc:	8d 7f       	andi	r24, 0xFD	; 253
    19de:	85 bd       	out	0x25, r24	; 37
    19e0:	85 b5       	in	r24, 0x25	; 37
    19e2:	81 60       	ori	r24, 0x01	; 1
    19e4:	85 bd       	out	0x25, r24	; 37
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	08 95       	ret
    19ea:	85 b5       	in	r24, 0x25	; 37
    19ec:	8b 7f       	andi	r24, 0xFB	; 251
    19ee:	85 bd       	out	0x25, r24	; 37
    19f0:	85 b5       	in	r24, 0x25	; 37
    19f2:	82 60       	ori	r24, 0x02	; 2
    19f4:	85 bd       	out	0x25, r24	; 37
    19f6:	85 b5       	in	r24, 0x25	; 37
    19f8:	81 60       	ori	r24, 0x01	; 1
    19fa:	85 bd       	out	0x25, r24	; 37
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	08 95       	ret
    1a00:	85 b5       	in	r24, 0x25	; 37
    1a02:	84 60       	ori	r24, 0x04	; 4
    1a04:	85 bd       	out	0x25, r24	; 37
    1a06:	85 b5       	in	r24, 0x25	; 37
    1a08:	82 60       	ori	r24, 0x02	; 2
    1a0a:	85 bd       	out	0x25, r24	; 37
    1a0c:	85 b5       	in	r24, 0x25	; 37
    1a0e:	81 60       	ori	r24, 0x01	; 1
    1a10:	85 bd       	out	0x25, r24	; 37
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	08 95       	ret
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	08 95       	ret
    1a1a:	83 e0       	ldi	r24, 0x03	; 3
    1a1c:	08 95       	ret
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	08 95       	ret
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	08 95       	ret
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	08 95       	ret
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	08 95       	ret
    1a2e:	83 e0       	ldi	r24, 0x03	; 3
    1a30:	08 95       	ret

00001a32 <TIMER_stop>:
    1a32:	83 30       	cpi	r24, 0x03	; 3
    1a34:	38 f5       	brcc	.+78     	; 0x1a84 <TIMER_stop+0x52>
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	79 f0       	breq	.+30     	; 0x1a58 <TIMER_stop+0x26>
    1a3a:	18 f0       	brcs	.+6      	; 0x1a42 <TIMER_stop+0x10>
    1a3c:	82 30       	cpi	r24, 0x02	; 2
    1a3e:	b9 f0       	breq	.+46     	; 0x1a6e <TIMER_stop+0x3c>
    1a40:	23 c0       	rjmp	.+70     	; 0x1a88 <TIMER_stop+0x56>
    1a42:	83 b7       	in	r24, 0x33	; 51
    1a44:	8e 7f       	andi	r24, 0xFE	; 254
    1a46:	83 bf       	out	0x33, r24	; 51
    1a48:	83 b7       	in	r24, 0x33	; 51
    1a4a:	8d 7f       	andi	r24, 0xFD	; 253
    1a4c:	83 bf       	out	0x33, r24	; 51
    1a4e:	83 b7       	in	r24, 0x33	; 51
    1a50:	8b 7f       	andi	r24, 0xFB	; 251
    1a52:	83 bf       	out	0x33, r24	; 51
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	08 95       	ret
    1a58:	8e b5       	in	r24, 0x2e	; 46
    1a5a:	8e 7f       	andi	r24, 0xFE	; 254
    1a5c:	8e bd       	out	0x2e, r24	; 46
    1a5e:	8e b5       	in	r24, 0x2e	; 46
    1a60:	8d 7f       	andi	r24, 0xFD	; 253
    1a62:	8e bd       	out	0x2e, r24	; 46
    1a64:	8e b5       	in	r24, 0x2e	; 46
    1a66:	8b 7f       	andi	r24, 0xFB	; 251
    1a68:	8e bd       	out	0x2e, r24	; 46
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	08 95       	ret
    1a6e:	85 b5       	in	r24, 0x25	; 37
    1a70:	8b 7f       	andi	r24, 0xFB	; 251
    1a72:	85 bd       	out	0x25, r24	; 37
    1a74:	85 b5       	in	r24, 0x25	; 37
    1a76:	8d 7f       	andi	r24, 0xFD	; 253
    1a78:	85 bd       	out	0x25, r24	; 37
    1a7a:	85 b5       	in	r24, 0x25	; 37
    1a7c:	8e 7f       	andi	r24, 0xFE	; 254
    1a7e:	85 bd       	out	0x25, r24	; 37
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	08 95       	ret
    1a84:	83 e0       	ldi	r24, 0x03	; 3
    1a86:	08 95       	ret
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	08 95       	ret

00001a8c <TIMER_reset>:
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	f1 f0       	breq	.+60     	; 0x1acc <TIMER_reset+0x40>
    1a90:	fc 01       	movw	r30, r24
    1a92:	20 81       	ld	r18, Z
    1a94:	23 30       	cpi	r18, 0x03	; 3
    1a96:	e0 f4       	brcc	.+56     	; 0x1ad0 <TIMER_reset+0x44>
    1a98:	31 81       	ldd	r19, Z+1	; 0x01
    1a9a:	3a 30       	cpi	r19, 0x0A	; 10
    1a9c:	d8 f4       	brcc	.+54     	; 0x1ad4 <TIMER_reset+0x48>
    1a9e:	21 30       	cpi	r18, 0x01	; 1
    1aa0:	49 f0       	breq	.+18     	; 0x1ab4 <TIMER_reset+0x28>
    1aa2:	18 f0       	brcs	.+6      	; 0x1aaa <TIMER_reset+0x1e>
    1aa4:	22 30       	cpi	r18, 0x02	; 2
    1aa6:	69 f0       	breq	.+26     	; 0x1ac2 <TIMER_reset+0x36>
    1aa8:	17 c0       	rjmp	.+46     	; 0x1ad8 <TIMER_reset+0x4c>
    1aaa:	fc 01       	movw	r30, r24
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	82 bf       	out	0x32, r24	; 50
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	08 95       	ret
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	9d bd       	out	0x2d, r25	; 45
    1abc:	8c bd       	out	0x2c, r24	; 44
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	08 95       	ret
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	84 bd       	out	0x24, r24	; 36
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	08 95       	ret
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	08 95       	ret
    1ad0:	83 e0       	ldi	r24, 0x03	; 3
    1ad2:	08 95       	ret
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	08 95       	ret
    1ad8:	83 e0       	ldi	r24, 0x03	; 3
    1ada:	08 95       	ret

00001adc <TIMER_setCallBack>:
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	a9 f0       	breq	.+42     	; 0x1b0a <TIMER_setCallBack+0x2e>
    1ae0:	63 30       	cpi	r22, 0x03	; 3
    1ae2:	a8 f4       	brcc	.+42     	; 0x1b0e <TIMER_setCallBack+0x32>
    1ae4:	61 30       	cpi	r22, 0x01	; 1
    1ae6:	59 f0       	breq	.+22     	; 0x1afe <TIMER_setCallBack+0x22>
    1ae8:	20 f0       	brcs	.+8      	; 0x1af2 <TIMER_setCallBack+0x16>
    1aea:	62 30       	cpi	r22, 0x02	; 2
    1aec:	91 f0       	breq	.+36     	; 0x1b12 <TIMER_setCallBack+0x36>
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	08 95       	ret
    1af2:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <sg_Timer0_callBackPtr+0x1>
    1af6:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <sg_Timer0_callBackPtr>
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	08 95       	ret
    1afe:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <sg_Timer1_callBackPtr+0x1>
    1b02:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <sg_Timer1_callBackPtr>
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	08 95       	ret
    1b0a:	83 e0       	ldi	r24, 0x03	; 3
    1b0c:	08 95       	ret
    1b0e:	83 e0       	ldi	r24, 0x03	; 3
    1b10:	08 95       	ret
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	08 95       	ret

00001b16 <enuTimer2_init>:
    1b16:	84 30       	cpi	r24, 0x04	; 4
    1b18:	48 f5       	brcc	.+82     	; 0x1b6c <enuTimer2_init+0x56>
    1b1a:	14 bc       	out	0x24, r1	; 36
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	71 f0       	breq	.+28     	; 0x1b3c <enuTimer2_init+0x26>
    1b20:	28 f0       	brcs	.+10     	; 0x1b2c <enuTimer2_init+0x16>
    1b22:	82 30       	cpi	r24, 0x02	; 2
    1b24:	99 f0       	breq	.+38     	; 0x1b4c <enuTimer2_init+0x36>
    1b26:	83 30       	cpi	r24, 0x03	; 3
    1b28:	c9 f0       	breq	.+50     	; 0x1b5c <enuTimer2_init+0x46>
    1b2a:	22 c0       	rjmp	.+68     	; 0x1b70 <enuTimer2_init+0x5a>
    1b2c:	85 b5       	in	r24, 0x25	; 37
    1b2e:	87 7f       	andi	r24, 0xF7	; 247
    1b30:	85 bd       	out	0x25, r24	; 37
    1b32:	85 b5       	in	r24, 0x25	; 37
    1b34:	8f 7b       	andi	r24, 0xBF	; 191
    1b36:	85 bd       	out	0x25, r24	; 37
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	08 95       	ret
    1b3c:	85 b5       	in	r24, 0x25	; 37
    1b3e:	87 7f       	andi	r24, 0xF7	; 247
    1b40:	85 bd       	out	0x25, r24	; 37
    1b42:	85 b5       	in	r24, 0x25	; 37
    1b44:	80 64       	ori	r24, 0x40	; 64
    1b46:	85 bd       	out	0x25, r24	; 37
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	08 95       	ret
    1b4c:	85 b5       	in	r24, 0x25	; 37
    1b4e:	88 60       	ori	r24, 0x08	; 8
    1b50:	85 bd       	out	0x25, r24	; 37
    1b52:	85 b5       	in	r24, 0x25	; 37
    1b54:	8f 7b       	andi	r24, 0xBF	; 191
    1b56:	85 bd       	out	0x25, r24	; 37
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	08 95       	ret
    1b5c:	85 b5       	in	r24, 0x25	; 37
    1b5e:	88 60       	ori	r24, 0x08	; 8
    1b60:	85 bd       	out	0x25, r24	; 37
    1b62:	85 b5       	in	r24, 0x25	; 37
    1b64:	80 64       	ori	r24, 0x40	; 64
    1b66:	85 bd       	out	0x25, r24	; 37
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	08 95       	ret
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	08 95       	ret
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	08 95       	ret

00001b74 <u8Timer2_setPrescallar>:
    1b74:	88 30       	cpi	r24, 0x08	; 8
    1b76:	70 f4       	brcc	.+28     	; 0x1b94 <u8Timer2_setPrescallar+0x20>
    1b78:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <global_prescaller>
    1b7c:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <global_timerStatus>
    1b80:	91 30       	cpi	r25, 0x01	; 1
    1b82:	51 f4       	brne	.+20     	; 0x1b98 <u8Timer2_setPrescallar+0x24>
    1b84:	95 b5       	in	r25, 0x25	; 37
    1b86:	98 7f       	andi	r25, 0xF8	; 248
    1b88:	89 2b       	or	r24, r25
    1b8a:	95 b5       	in	r25, 0x25	; 37
    1b8c:	89 2b       	or	r24, r25
    1b8e:	85 bd       	out	0x25, r24	; 37
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	08 95       	ret
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	08 95       	ret
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	08 95       	ret

00001b9c <vidTimer2_OvfIrqEnable>:
    1b9c:	88 b7       	in	r24, 0x38	; 56
    1b9e:	80 64       	ori	r24, 0x40	; 64
    1ba0:	88 bf       	out	0x38, r24	; 56
    1ba2:	89 b7       	in	r24, 0x39	; 57
    1ba4:	80 64       	ori	r24, 0x40	; 64
    1ba6:	89 bf       	out	0x39, r24	; 57
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	08 95       	ret

00001bac <vidTimer2_OvfIrqDisable>:
    1bac:	89 b7       	in	r24, 0x39	; 57
    1bae:	8f 7b       	andi	r24, 0xBF	; 191
    1bb0:	89 bf       	out	0x39, r24	; 57
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	08 95       	ret

00001bb6 <vidTimer2_start>:
    1bb6:	95 b5       	in	r25, 0x25	; 37
    1bb8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <global_prescaller>
    1bbc:	89 2b       	or	r24, r25
    1bbe:	85 bd       	out	0x25, r24	; 37
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <global_timerStatus>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	08 95       	ret

00001bca <vidTimer2_stop>:
    1bca:	85 b5       	in	r24, 0x25	; 37
    1bcc:	88 7f       	andi	r24, 0xF8	; 248
    1bce:	85 bd       	out	0x25, r24	; 37
    1bd0:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <global_timerStatus>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	08 95       	ret

00001bd8 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	21 f0       	breq	.+8      	; 0x1be4 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    1bdc:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <globalCallFunc+0x1>
    1be0:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <globalCallFunc>
    1be4:	08 95       	ret

00001be6 <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
    1be6:	14 bc       	out	0x24, r1	; 36
    1be8:	08 95       	ret

00001bea <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
    1bea:	84 b5       	in	r24, 0x24	; 36
}
    1bec:	08 95       	ret

00001bee <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
    1bee:	8f b7       	in	r24, 0x3f	; 63
    1bf0:	80 68       	ori	r24, 0x80	; 128
    1bf2:	8f bf       	out	0x3f, r24	; 63
    1bf4:	08 95       	ret

00001bf6 <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
    1bf6:	1f 92       	push	r1
    1bf8:	0f 92       	push	r0
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	0f 92       	push	r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	2f 93       	push	r18
    1c02:	3f 93       	push	r19
    1c04:	4f 93       	push	r20
    1c06:	5f 93       	push	r21
    1c08:	6f 93       	push	r22
    1c0a:	7f 93       	push	r23
    1c0c:	8f 93       	push	r24
    1c0e:	9f 93       	push	r25
    1c10:	af 93       	push	r26
    1c12:	bf 93       	push	r27
    1c14:	ef 93       	push	r30
    1c16:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
    1c18:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <counter.1817>
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <counter.1817>
	if(counter == global_ovf)
    1c22:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <global_ovf>
    1c26:	89 13       	cpse	r24, r25
    1c28:	09 c0       	rjmp	.+18     	; 0x1c3c <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
    1c2a:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <globalCallFunc>
    1c2e:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <globalCallFunc+0x1>
    1c32:	30 97       	sbiw	r30, 0x00	; 0
    1c34:	19 f0       	breq	.+6      	; 0x1c3c <__vector_5+0x46>
		{
			counter = 0;
    1c36:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <counter.1817>

			globalCallFunc();
    1c3a:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1c3c:	ff 91       	pop	r31
    1c3e:	ef 91       	pop	r30
    1c40:	bf 91       	pop	r27
    1c42:	af 91       	pop	r26
    1c44:	9f 91       	pop	r25
    1c46:	8f 91       	pop	r24
    1c48:	7f 91       	pop	r23
    1c4a:	6f 91       	pop	r22
    1c4c:	5f 91       	pop	r21
    1c4e:	4f 91       	pop	r20
    1c50:	3f 91       	pop	r19
    1c52:	2f 91       	pop	r18
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	0f 90       	pop	r0
    1c5a:	1f 90       	pop	r1
    1c5c:	18 95       	reti

00001c5e <__cmpsf2>:
    1c5e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__fp_cmp>
    1c62:	08 f4       	brcc	.+2      	; 0x1c66 <__cmpsf2+0x8>
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	08 95       	ret

00001c68 <__divsf3>:
    1c68:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__divsf3x>
    1c6c:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__fp_round>
    1c70:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fp_pscB>
    1c74:	58 f0       	brcs	.+22     	; 0x1c8c <__divsf3+0x24>
    1c76:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fp_pscA>
    1c7a:	40 f0       	brcs	.+16     	; 0x1c8c <__divsf3+0x24>
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <__divsf3+0x20>
    1c7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c80:	29 f0       	breq	.+10     	; 0x1c8c <__divsf3+0x24>
    1c82:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__fp_inf>
    1c86:	51 11       	cpse	r21, r1
    1c88:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__fp_szero>
    1c8c:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__fp_nan>

00001c90 <__divsf3x>:
    1c90:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__fp_split3>
    1c94:	68 f3       	brcs	.-38     	; 0x1c70 <__divsf3+0x8>

00001c96 <__divsf3_pse>:
    1c96:	99 23       	and	r25, r25
    1c98:	b1 f3       	breq	.-20     	; 0x1c86 <__divsf3+0x1e>
    1c9a:	55 23       	and	r21, r21
    1c9c:	91 f3       	breq	.-28     	; 0x1c82 <__divsf3+0x1a>
    1c9e:	95 1b       	sub	r25, r21
    1ca0:	55 0b       	sbc	r21, r21
    1ca2:	bb 27       	eor	r27, r27
    1ca4:	aa 27       	eor	r26, r26
    1ca6:	62 17       	cp	r22, r18
    1ca8:	73 07       	cpc	r23, r19
    1caa:	84 07       	cpc	r24, r20
    1cac:	38 f0       	brcs	.+14     	; 0x1cbc <__divsf3_pse+0x26>
    1cae:	9f 5f       	subi	r25, 0xFF	; 255
    1cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb2:	22 0f       	add	r18, r18
    1cb4:	33 1f       	adc	r19, r19
    1cb6:	44 1f       	adc	r20, r20
    1cb8:	aa 1f       	adc	r26, r26
    1cba:	a9 f3       	breq	.-22     	; 0x1ca6 <__divsf3_pse+0x10>
    1cbc:	35 d0       	rcall	.+106    	; 0x1d28 <__divsf3_pse+0x92>
    1cbe:	0e 2e       	mov	r0, r30
    1cc0:	3a f0       	brmi	.+14     	; 0x1cd0 <__divsf3_pse+0x3a>
    1cc2:	e0 e8       	ldi	r30, 0x80	; 128
    1cc4:	32 d0       	rcall	.+100    	; 0x1d2a <__divsf3_pse+0x94>
    1cc6:	91 50       	subi	r25, 0x01	; 1
    1cc8:	50 40       	sbci	r21, 0x00	; 0
    1cca:	e6 95       	lsr	r30
    1ccc:	00 1c       	adc	r0, r0
    1cce:	ca f7       	brpl	.-14     	; 0x1cc2 <__divsf3_pse+0x2c>
    1cd0:	2b d0       	rcall	.+86     	; 0x1d28 <__divsf3_pse+0x92>
    1cd2:	fe 2f       	mov	r31, r30
    1cd4:	29 d0       	rcall	.+82     	; 0x1d28 <__divsf3_pse+0x92>
    1cd6:	66 0f       	add	r22, r22
    1cd8:	77 1f       	adc	r23, r23
    1cda:	88 1f       	adc	r24, r24
    1cdc:	bb 1f       	adc	r27, r27
    1cde:	26 17       	cp	r18, r22
    1ce0:	37 07       	cpc	r19, r23
    1ce2:	48 07       	cpc	r20, r24
    1ce4:	ab 07       	cpc	r26, r27
    1ce6:	b0 e8       	ldi	r27, 0x80	; 128
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <__divsf3_pse+0x56>
    1cea:	bb 0b       	sbc	r27, r27
    1cec:	80 2d       	mov	r24, r0
    1cee:	bf 01       	movw	r22, r30
    1cf0:	ff 27       	eor	r31, r31
    1cf2:	93 58       	subi	r25, 0x83	; 131
    1cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf6:	3a f0       	brmi	.+14     	; 0x1d06 <__divsf3_pse+0x70>
    1cf8:	9e 3f       	cpi	r25, 0xFE	; 254
    1cfa:	51 05       	cpc	r21, r1
    1cfc:	78 f0       	brcs	.+30     	; 0x1d1c <__divsf3_pse+0x86>
    1cfe:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__fp_inf>
    1d02:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__fp_szero>
    1d06:	5f 3f       	cpi	r21, 0xFF	; 255
    1d08:	e4 f3       	brlt	.-8      	; 0x1d02 <__divsf3_pse+0x6c>
    1d0a:	98 3e       	cpi	r25, 0xE8	; 232
    1d0c:	d4 f3       	brlt	.-12     	; 0x1d02 <__divsf3_pse+0x6c>
    1d0e:	86 95       	lsr	r24
    1d10:	77 95       	ror	r23
    1d12:	67 95       	ror	r22
    1d14:	b7 95       	ror	r27
    1d16:	f7 95       	ror	r31
    1d18:	9f 5f       	subi	r25, 0xFF	; 255
    1d1a:	c9 f7       	brne	.-14     	; 0x1d0e <__divsf3_pse+0x78>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	91 1d       	adc	r25, r1
    1d20:	96 95       	lsr	r25
    1d22:	87 95       	ror	r24
    1d24:	97 f9       	bld	r25, 7
    1d26:	08 95       	ret
    1d28:	e1 e0       	ldi	r30, 0x01	; 1
    1d2a:	66 0f       	add	r22, r22
    1d2c:	77 1f       	adc	r23, r23
    1d2e:	88 1f       	adc	r24, r24
    1d30:	bb 1f       	adc	r27, r27
    1d32:	62 17       	cp	r22, r18
    1d34:	73 07       	cpc	r23, r19
    1d36:	84 07       	cpc	r24, r20
    1d38:	ba 07       	cpc	r27, r26
    1d3a:	20 f0       	brcs	.+8      	; 0x1d44 <__divsf3_pse+0xae>
    1d3c:	62 1b       	sub	r22, r18
    1d3e:	73 0b       	sbc	r23, r19
    1d40:	84 0b       	sbc	r24, r20
    1d42:	ba 0b       	sbc	r27, r26
    1d44:	ee 1f       	adc	r30, r30
    1d46:	88 f7       	brcc	.-30     	; 0x1d2a <__divsf3_pse+0x94>
    1d48:	e0 95       	com	r30
    1d4a:	08 95       	ret

00001d4c <__fixunssfsi>:
    1d4c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__fp_splitA>
    1d50:	88 f0       	brcs	.+34     	; 0x1d74 <__fixunssfsi+0x28>
    1d52:	9f 57       	subi	r25, 0x7F	; 127
    1d54:	98 f0       	brcs	.+38     	; 0x1d7c <__fixunssfsi+0x30>
    1d56:	b9 2f       	mov	r27, r25
    1d58:	99 27       	eor	r25, r25
    1d5a:	b7 51       	subi	r27, 0x17	; 23
    1d5c:	b0 f0       	brcs	.+44     	; 0x1d8a <__fixunssfsi+0x3e>
    1d5e:	e1 f0       	breq	.+56     	; 0x1d98 <__fixunssfsi+0x4c>
    1d60:	66 0f       	add	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	88 1f       	adc	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	1a f0       	brmi	.+6      	; 0x1d70 <__fixunssfsi+0x24>
    1d6a:	ba 95       	dec	r27
    1d6c:	c9 f7       	brne	.-14     	; 0x1d60 <__fixunssfsi+0x14>
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <__fixunssfsi+0x4c>
    1d70:	b1 30       	cpi	r27, 0x01	; 1
    1d72:	91 f0       	breq	.+36     	; 0x1d98 <__fixunssfsi+0x4c>
    1d74:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__fp_zero>
    1d78:	b1 e0       	ldi	r27, 0x01	; 1
    1d7a:	08 95       	ret
    1d7c:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__fp_zero>
    1d80:	67 2f       	mov	r22, r23
    1d82:	78 2f       	mov	r23, r24
    1d84:	88 27       	eor	r24, r24
    1d86:	b8 5f       	subi	r27, 0xF8	; 248
    1d88:	39 f0       	breq	.+14     	; 0x1d98 <__fixunssfsi+0x4c>
    1d8a:	b9 3f       	cpi	r27, 0xF9	; 249
    1d8c:	cc f3       	brlt	.-14     	; 0x1d80 <__fixunssfsi+0x34>
    1d8e:	86 95       	lsr	r24
    1d90:	77 95       	ror	r23
    1d92:	67 95       	ror	r22
    1d94:	b3 95       	inc	r27
    1d96:	d9 f7       	brne	.-10     	; 0x1d8e <__fixunssfsi+0x42>
    1d98:	3e f4       	brtc	.+14     	; 0x1da8 <__fixunssfsi+0x5c>
    1d9a:	90 95       	com	r25
    1d9c:	80 95       	com	r24
    1d9e:	70 95       	com	r23
    1da0:	61 95       	neg	r22
    1da2:	7f 4f       	sbci	r23, 0xFF	; 255
    1da4:	8f 4f       	sbci	r24, 0xFF	; 255
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	08 95       	ret

00001daa <__floatunsisf>:
    1daa:	e8 94       	clt
    1dac:	09 c0       	rjmp	.+18     	; 0x1dc0 <__floatsisf+0x12>

00001dae <__floatsisf>:
    1dae:	97 fb       	bst	r25, 7
    1db0:	3e f4       	brtc	.+14     	; 0x1dc0 <__floatsisf+0x12>
    1db2:	90 95       	com	r25
    1db4:	80 95       	com	r24
    1db6:	70 95       	com	r23
    1db8:	61 95       	neg	r22
    1dba:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	99 23       	and	r25, r25
    1dc2:	a9 f0       	breq	.+42     	; 0x1dee <__floatsisf+0x40>
    1dc4:	f9 2f       	mov	r31, r25
    1dc6:	96 e9       	ldi	r25, 0x96	; 150
    1dc8:	bb 27       	eor	r27, r27
    1dca:	93 95       	inc	r25
    1dcc:	f6 95       	lsr	r31
    1dce:	87 95       	ror	r24
    1dd0:	77 95       	ror	r23
    1dd2:	67 95       	ror	r22
    1dd4:	b7 95       	ror	r27
    1dd6:	f1 11       	cpse	r31, r1
    1dd8:	f8 cf       	rjmp	.-16     	; 0x1dca <__floatsisf+0x1c>
    1dda:	fa f4       	brpl	.+62     	; 0x1e1a <__floatsisf+0x6c>
    1ddc:	bb 0f       	add	r27, r27
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <__floatsisf+0x36>
    1de0:	60 ff       	sbrs	r22, 0
    1de2:	1b c0       	rjmp	.+54     	; 0x1e1a <__floatsisf+0x6c>
    1de4:	6f 5f       	subi	r22, 0xFF	; 255
    1de6:	7f 4f       	sbci	r23, 0xFF	; 255
    1de8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dea:	9f 4f       	sbci	r25, 0xFF	; 255
    1dec:	16 c0       	rjmp	.+44     	; 0x1e1a <__floatsisf+0x6c>
    1dee:	88 23       	and	r24, r24
    1df0:	11 f0       	breq	.+4      	; 0x1df6 <__floatsisf+0x48>
    1df2:	96 e9       	ldi	r25, 0x96	; 150
    1df4:	11 c0       	rjmp	.+34     	; 0x1e18 <__floatsisf+0x6a>
    1df6:	77 23       	and	r23, r23
    1df8:	21 f0       	breq	.+8      	; 0x1e02 <__floatsisf+0x54>
    1dfa:	9e e8       	ldi	r25, 0x8E	; 142
    1dfc:	87 2f       	mov	r24, r23
    1dfe:	76 2f       	mov	r23, r22
    1e00:	05 c0       	rjmp	.+10     	; 0x1e0c <__floatsisf+0x5e>
    1e02:	66 23       	and	r22, r22
    1e04:	71 f0       	breq	.+28     	; 0x1e22 <__floatsisf+0x74>
    1e06:	96 e8       	ldi	r25, 0x86	; 134
    1e08:	86 2f       	mov	r24, r22
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	2a f0       	brmi	.+10     	; 0x1e1a <__floatsisf+0x6c>
    1e10:	9a 95       	dec	r25
    1e12:	66 0f       	add	r22, r22
    1e14:	77 1f       	adc	r23, r23
    1e16:	88 1f       	adc	r24, r24
    1e18:	da f7       	brpl	.-10     	; 0x1e10 <__floatsisf+0x62>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	96 95       	lsr	r25
    1e1e:	87 95       	ror	r24
    1e20:	97 f9       	bld	r25, 7
    1e22:	08 95       	ret

00001e24 <__fp_cmp>:
    1e24:	99 0f       	add	r25, r25
    1e26:	00 08       	sbc	r0, r0
    1e28:	55 0f       	add	r21, r21
    1e2a:	aa 0b       	sbc	r26, r26
    1e2c:	e0 e8       	ldi	r30, 0x80	; 128
    1e2e:	fe ef       	ldi	r31, 0xFE	; 254
    1e30:	16 16       	cp	r1, r22
    1e32:	17 06       	cpc	r1, r23
    1e34:	e8 07       	cpc	r30, r24
    1e36:	f9 07       	cpc	r31, r25
    1e38:	c0 f0       	brcs	.+48     	; 0x1e6a <__fp_cmp+0x46>
    1e3a:	12 16       	cp	r1, r18
    1e3c:	13 06       	cpc	r1, r19
    1e3e:	e4 07       	cpc	r30, r20
    1e40:	f5 07       	cpc	r31, r21
    1e42:	98 f0       	brcs	.+38     	; 0x1e6a <__fp_cmp+0x46>
    1e44:	62 1b       	sub	r22, r18
    1e46:	73 0b       	sbc	r23, r19
    1e48:	84 0b       	sbc	r24, r20
    1e4a:	95 0b       	sbc	r25, r21
    1e4c:	39 f4       	brne	.+14     	; 0x1e5c <__fp_cmp+0x38>
    1e4e:	0a 26       	eor	r0, r26
    1e50:	61 f0       	breq	.+24     	; 0x1e6a <__fp_cmp+0x46>
    1e52:	23 2b       	or	r18, r19
    1e54:	24 2b       	or	r18, r20
    1e56:	25 2b       	or	r18, r21
    1e58:	21 f4       	brne	.+8      	; 0x1e62 <__fp_cmp+0x3e>
    1e5a:	08 95       	ret
    1e5c:	0a 26       	eor	r0, r26
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <__fp_cmp+0x3e>
    1e60:	a1 40       	sbci	r26, 0x01	; 1
    1e62:	a6 95       	lsr	r26
    1e64:	8f ef       	ldi	r24, 0xFF	; 255
    1e66:	81 1d       	adc	r24, r1
    1e68:	81 1d       	adc	r24, r1
    1e6a:	08 95       	ret

00001e6c <__fp_inf>:
    1e6c:	97 f9       	bld	r25, 7
    1e6e:	9f 67       	ori	r25, 0x7F	; 127
    1e70:	80 e8       	ldi	r24, 0x80	; 128
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	08 95       	ret

00001e78 <__fp_nan>:
    1e78:	9f ef       	ldi	r25, 0xFF	; 255
    1e7a:	80 ec       	ldi	r24, 0xC0	; 192
    1e7c:	08 95       	ret

00001e7e <__fp_pscA>:
    1e7e:	00 24       	eor	r0, r0
    1e80:	0a 94       	dec	r0
    1e82:	16 16       	cp	r1, r22
    1e84:	17 06       	cpc	r1, r23
    1e86:	18 06       	cpc	r1, r24
    1e88:	09 06       	cpc	r0, r25
    1e8a:	08 95       	ret

00001e8c <__fp_pscB>:
    1e8c:	00 24       	eor	r0, r0
    1e8e:	0a 94       	dec	r0
    1e90:	12 16       	cp	r1, r18
    1e92:	13 06       	cpc	r1, r19
    1e94:	14 06       	cpc	r1, r20
    1e96:	05 06       	cpc	r0, r21
    1e98:	08 95       	ret

00001e9a <__fp_round>:
    1e9a:	09 2e       	mov	r0, r25
    1e9c:	03 94       	inc	r0
    1e9e:	00 0c       	add	r0, r0
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <__fp_round+0xc>
    1ea2:	88 23       	and	r24, r24
    1ea4:	52 f0       	brmi	.+20     	; 0x1eba <__fp_round+0x20>
    1ea6:	bb 0f       	add	r27, r27
    1ea8:	40 f4       	brcc	.+16     	; 0x1eba <__fp_round+0x20>
    1eaa:	bf 2b       	or	r27, r31
    1eac:	11 f4       	brne	.+4      	; 0x1eb2 <__fp_round+0x18>
    1eae:	60 ff       	sbrs	r22, 0
    1eb0:	04 c0       	rjmp	.+8      	; 0x1eba <__fp_round+0x20>
    1eb2:	6f 5f       	subi	r22, 0xFF	; 255
    1eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eba:	08 95       	ret

00001ebc <__fp_split3>:
    1ebc:	57 fd       	sbrc	r21, 7
    1ebe:	90 58       	subi	r25, 0x80	; 128
    1ec0:	44 0f       	add	r20, r20
    1ec2:	55 1f       	adc	r21, r21
    1ec4:	59 f0       	breq	.+22     	; 0x1edc <__fp_splitA+0x10>
    1ec6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec8:	71 f0       	breq	.+28     	; 0x1ee6 <__fp_splitA+0x1a>
    1eca:	47 95       	ror	r20

00001ecc <__fp_splitA>:
    1ecc:	88 0f       	add	r24, r24
    1ece:	97 fb       	bst	r25, 7
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	61 f0       	breq	.+24     	; 0x1eec <__fp_splitA+0x20>
    1ed4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ed6:	79 f0       	breq	.+30     	; 0x1ef6 <__fp_splitA+0x2a>
    1ed8:	87 95       	ror	r24
    1eda:	08 95       	ret
    1edc:	12 16       	cp	r1, r18
    1ede:	13 06       	cpc	r1, r19
    1ee0:	14 06       	cpc	r1, r20
    1ee2:	55 1f       	adc	r21, r21
    1ee4:	f2 cf       	rjmp	.-28     	; 0x1eca <__fp_split3+0xe>
    1ee6:	46 95       	lsr	r20
    1ee8:	f1 df       	rcall	.-30     	; 0x1ecc <__fp_splitA>
    1eea:	08 c0       	rjmp	.+16     	; 0x1efc <__fp_splitA+0x30>
    1eec:	16 16       	cp	r1, r22
    1eee:	17 06       	cpc	r1, r23
    1ef0:	18 06       	cpc	r1, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	f1 cf       	rjmp	.-30     	; 0x1ed8 <__fp_splitA+0xc>
    1ef6:	86 95       	lsr	r24
    1ef8:	71 05       	cpc	r23, r1
    1efa:	61 05       	cpc	r22, r1
    1efc:	08 94       	sec
    1efe:	08 95       	ret

00001f00 <__fp_zero>:
    1f00:	e8 94       	clt

00001f02 <__fp_szero>:
    1f02:	bb 27       	eor	r27, r27
    1f04:	66 27       	eor	r22, r22
    1f06:	77 27       	eor	r23, r23
    1f08:	cb 01       	movw	r24, r22
    1f0a:	97 f9       	bld	r25, 7
    1f0c:	08 95       	ret

00001f0e <__gesf2>:
    1f0e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__fp_cmp>
    1f12:	08 f4       	brcc	.+2      	; 0x1f16 <__gesf2+0x8>
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	08 95       	ret

00001f18 <__divmodhi4>:
    1f18:	97 fb       	bst	r25, 7
    1f1a:	07 2e       	mov	r0, r23
    1f1c:	16 f4       	brtc	.+4      	; 0x1f22 <__divmodhi4+0xa>
    1f1e:	00 94       	com	r0
    1f20:	07 d0       	rcall	.+14     	; 0x1f30 <__divmodhi4_neg1>
    1f22:	77 fd       	sbrc	r23, 7
    1f24:	09 d0       	rcall	.+18     	; 0x1f38 <__divmodhi4_neg2>
    1f26:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__udivmodhi4>
    1f2a:	07 fc       	sbrc	r0, 7
    1f2c:	05 d0       	rcall	.+10     	; 0x1f38 <__divmodhi4_neg2>
    1f2e:	3e f4       	brtc	.+14     	; 0x1f3e <__divmodhi4_exit>

00001f30 <__divmodhi4_neg1>:
    1f30:	90 95       	com	r25
    1f32:	81 95       	neg	r24
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	08 95       	ret

00001f38 <__divmodhi4_neg2>:
    1f38:	70 95       	com	r23
    1f3a:	61 95       	neg	r22
    1f3c:	7f 4f       	sbci	r23, 0xFF	; 255

00001f3e <__divmodhi4_exit>:
    1f3e:	08 95       	ret

00001f40 <__tablejump2__>:
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	05 90       	lpm	r0, Z+
    1f46:	f4 91       	lpm	r31, Z
    1f48:	e0 2d       	mov	r30, r0
    1f4a:	09 94       	ijmp

00001f4c <__udivmodhi4>:
    1f4c:	aa 1b       	sub	r26, r26
    1f4e:	bb 1b       	sub	r27, r27
    1f50:	51 e1       	ldi	r21, 0x11	; 17
    1f52:	07 c0       	rjmp	.+14     	; 0x1f62 <__udivmodhi4_ep>

00001f54 <__udivmodhi4_loop>:
    1f54:	aa 1f       	adc	r26, r26
    1f56:	bb 1f       	adc	r27, r27
    1f58:	a6 17       	cp	r26, r22
    1f5a:	b7 07       	cpc	r27, r23
    1f5c:	10 f0       	brcs	.+4      	; 0x1f62 <__udivmodhi4_ep>
    1f5e:	a6 1b       	sub	r26, r22
    1f60:	b7 0b       	sbc	r27, r23

00001f62 <__udivmodhi4_ep>:
    1f62:	88 1f       	adc	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	5a 95       	dec	r21
    1f68:	a9 f7       	brne	.-22     	; 0x1f54 <__udivmodhi4_loop>
    1f6a:	80 95       	com	r24
    1f6c:	90 95       	com	r25
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	08 95       	ret

00001f74 <__itoa_ncheck>:
    1f74:	bb 27       	eor	r27, r27
    1f76:	4a 30       	cpi	r20, 0x0A	; 10
    1f78:	31 f4       	brne	.+12     	; 0x1f86 <__itoa_ncheck+0x12>
    1f7a:	99 23       	and	r25, r25
    1f7c:	22 f4       	brpl	.+8      	; 0x1f86 <__itoa_ncheck+0x12>
    1f7e:	bd e2       	ldi	r27, 0x2D	; 45
    1f80:	90 95       	com	r25
    1f82:	81 95       	neg	r24
    1f84:	9f 4f       	sbci	r25, 0xFF	; 255
    1f86:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__utoa_common>

00001f8a <__utoa_ncheck>:
    1f8a:	bb 27       	eor	r27, r27

00001f8c <__utoa_common>:
    1f8c:	fb 01       	movw	r30, r22
    1f8e:	55 27       	eor	r21, r21
    1f90:	aa 27       	eor	r26, r26
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	aa 1f       	adc	r26, r26
    1f98:	a4 17       	cp	r26, r20
    1f9a:	10 f0       	brcs	.+4      	; 0x1fa0 <__utoa_common+0x14>
    1f9c:	a4 1b       	sub	r26, r20
    1f9e:	83 95       	inc	r24
    1fa0:	50 51       	subi	r21, 0x10	; 16
    1fa2:	b9 f7       	brne	.-18     	; 0x1f92 <__utoa_common+0x6>
    1fa4:	a0 5d       	subi	r26, 0xD0	; 208
    1fa6:	aa 33       	cpi	r26, 0x3A	; 58
    1fa8:	08 f0       	brcs	.+2      	; 0x1fac <__utoa_common+0x20>
    1faa:	a9 5d       	subi	r26, 0xD9	; 217
    1fac:	a1 93       	st	Z+, r26
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	79 f7       	brne	.-34     	; 0x1f90 <__utoa_common+0x4>
    1fb2:	b1 11       	cpse	r27, r1
    1fb4:	b1 93       	st	Z+, r27
    1fb6:	11 92       	st	Z+, r1
    1fb8:	cb 01       	movw	r24, r22
    1fba:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <strrev>

00001fbe <strrev>:
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	67 2f       	mov	r22, r23
    1fc4:	71 91       	ld	r23, Z+
    1fc6:	77 23       	and	r23, r23
    1fc8:	e1 f7       	brne	.-8      	; 0x1fc2 <strrev+0x4>
    1fca:	32 97       	sbiw	r30, 0x02	; 2
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <strrev+0x18>
    1fce:	7c 91       	ld	r23, X
    1fd0:	6d 93       	st	X+, r22
    1fd2:	70 83       	st	Z, r23
    1fd4:	62 91       	ld	r22, -Z
    1fd6:	ae 17       	cp	r26, r30
    1fd8:	bf 07       	cpc	r27, r31
    1fda:	c8 f3       	brcs	.-14     	; 0x1fce <strrev+0x10>
    1fdc:	08 95       	ret

00001fde <_exit>:
    1fde:	f8 94       	cli

00001fe0 <__stop_program>:
    1fe0:	ff cf       	rjmp	.-2      	; 0x1fe0 <__stop_program>
