
ATM_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  000026ca  0000275e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  0080017e  0080017e  0000287c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029bd  00000000  00000000  00002b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eab  00000000  00000000  00005509  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000187f  00000000  00000000  000063b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e8  00000000  00000000  00007c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b0  00000000  00000000  0000841c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cbf  00000000  00000000  00008dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000aa8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__vector_11>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea ec       	ldi	r30, 0xCA	; 202
      a4:	f6 e2       	ldi	r31, 0x26	; 38
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 37       	cpi	r26, 0x7E	; 126
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ae e7       	ldi	r26, 0x7E	; 126
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3b       	cpi	r26, 0xB9	; 185
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <main>
      c6:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <idelMenu>:
	
	}
	
}

void idelMenu(void){
      ce:	8f 92       	push	r8
      d0:	9f 92       	push	r9
      d2:	af 92       	push	r10
      d4:	cf 92       	push	r12
      d6:	df 92       	push	r13
      d8:	ef 92       	push	r14
      da:	ff 92       	push	r15
      dc:	0f 93       	push	r16
      de:	1f 93       	push	r17
	LCD_clearScreen(atm_lcd);
      e0:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
      e4:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
      e8:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
      ec:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
      f0:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
      f4:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
      f8:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
      fc:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     100:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     104:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     108:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     10c:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd,0,5,"WELCOME");
     110:	0f 2e       	mov	r0, r31
     112:	f0 e6       	ldi	r31, 0x60	; 96
     114:	8f 2e       	mov	r8, r31
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	9f 2e       	mov	r9, r31
     11a:	f0 2d       	mov	r31, r0
     11c:	0f 2e       	mov	r0, r31
     11e:	f5 e0       	ldi	r31, 0x05	; 5
     120:	af 2e       	mov	r10, r31
     122:	f0 2d       	mov	r31, r0
     124:	c1 2c       	mov	r12, r1
     126:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     12a:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     12e:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     132:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     136:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     13a:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     13e:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     142:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     146:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     14a:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     14e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     152:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
	// delay 1 second
	Timer0_Delay(1000);
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	8a e7       	ldi	r24, 0x7A	; 122
     15c:	94 e4       	ldi	r25, 0x44	; 68
     15e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	LCD_clearScreen(atm_lcd);
     162:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     166:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     16a:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     16e:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     172:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     176:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     17a:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     17e:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     182:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     186:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     18a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     18e:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
	LCD_displayString(atm_lcd,"Insert a Card");
     192:	0f 2e       	mov	r0, r31
     194:	f8 e6       	ldi	r31, 0x68	; 104
     196:	cf 2e       	mov	r12, r31
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	df 2e       	mov	r13, r31
     19c:	f0 2d       	mov	r31, r0
     19e:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     1a2:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     1a6:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     1aa:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     1ae:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     1b2:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     1b6:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     1ba:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     1be:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     1c2:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     1c6:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     1ca:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_displayString>
	
}
     1ce:	1f 91       	pop	r17
     1d0:	0f 91       	pop	r16
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	df 90       	pop	r13
     1d8:	cf 90       	pop	r12
     1da:	af 90       	pop	r10
     1dc:	9f 90       	pop	r9
     1de:	8f 90       	pop	r8
     1e0:	08 95       	ret

000001e2 <readNumber>:

void readNumber(ST_PBTN_t a_zero_enter_btn,uint8 *a_key){
     1e2:	cf 92       	push	r12
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	1f 92       	push	r1
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	7c 01       	movw	r14, r24
     1f8:	6b 01       	movw	r12, r22
	// read numbers from keypad and zero btn 
	uint8 kpd_value ,btn_value; 
	BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
     1fa:	be 01       	movw	r22, r28
     1fc:	6f 5f       	subi	r22, 0xFF	; 255
     1fe:	7f 4f       	sbci	r23, 0xFF	; 255
     200:	0e 94 74 07 	call	0xee8	; 0xee8 <BUTTON_read_zero_enter>
	Timer0_Delay(10);
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	91 e4       	ldi	r25, 0x41	; 65
     20c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	kpd_value =KEYPAD_getPressedKey();
     210:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KEYPAD_getPressedKey>
     214:	18 2f       	mov	r17, r24
	Timer0_Delay(10);
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	80 e2       	ldi	r24, 0x20	; 32
     21c:	91 e4       	ldi	r25, 0x41	; 65
     21e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	
	while(kpd_value ==KPD_NO_KEY_PRESSED && btn_value==BTN_NO_PRESS){
     222:	15 c0       	rjmp	.+42     	; 0x24e <readNumber+0x6c>
			BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
     224:	be 01       	movw	r22, r28
     226:	6f 5f       	subi	r22, 0xFF	; 255
     228:	7f 4f       	sbci	r23, 0xFF	; 255
     22a:	c7 01       	movw	r24, r14
     22c:	0e 94 74 07 	call	0xee8	; 0xee8 <BUTTON_read_zero_enter>
			Timer0_Delay(10);
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	80 e2       	ldi	r24, 0x20	; 32
     236:	91 e4       	ldi	r25, 0x41	; 65
     238:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
			kpd_value =KEYPAD_getPressedKey();
     23c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KEYPAD_getPressedKey>
     240:	18 2f       	mov	r17, r24
			Timer0_Delay(10);
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	80 e2       	ldi	r24, 0x20	; 32
     248:	91 e4       	ldi	r25, 0x41	; 65
     24a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
	Timer0_Delay(10);
	kpd_value =KEYPAD_getPressedKey();
	Timer0_Delay(10);
	
	while(kpd_value ==KPD_NO_KEY_PRESSED && btn_value==BTN_NO_PRESS){
     24e:	1c 30       	cpi	r17, 0x0C	; 12
     250:	19 f4       	brne	.+6      	; 0x258 <readNumber+0x76>
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	8c 30       	cpi	r24, 0x0C	; 12
     256:	31 f3       	breq	.-52     	; 0x224 <readNumber+0x42>
			Timer0_Delay(10);
			kpd_value =KEYPAD_getPressedKey();
			Timer0_Delay(10);
			
	}
	if (kpd_value != KPD_NO_KEY_PRESSED)
     258:	1c 30       	cpi	r17, 0x0C	; 12
     25a:	19 f0       	breq	.+6      	; 0x262 <readNumber+0x80>
	{
		*a_key=kpd_value;
     25c:	f6 01       	movw	r30, r12
     25e:	10 83       	st	Z, r17
     260:	05 c0       	rjmp	.+10     	; 0x26c <readNumber+0x8a>
	} 
	else if (btn_value != BTN_NO_PRESS)
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	8c 30       	cpi	r24, 0x0C	; 12
     266:	11 f0       	breq	.+4      	; 0x26c <readNumber+0x8a>
	{
		*a_key = btn_value;
     268:	f6 01       	movw	r30, r12
     26a:	80 83       	st	Z, r24
	}
}
     26c:	0f 90       	pop	r0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	08 95       	ret

0000027e <appInit>:
};

#define MAX_AMOUNT 5000

ST_accountsDB_t accountRefrence;
void appInit(void){
     27e:	bf 92       	push	r11
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	1f 92       	push	r1
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
	 atm_mode = FRIST_RUN;
     296:	85 e0       	ldi	r24, 0x05	; 5
     298:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <atm_mode>
	 card_trigger_signal = 0;
     29c:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <card_trigger_signal>
	 ATM_STATUS = ATM_NORMAL_MODE;
     2a0:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <ATM_STATUS>
	// init LCD
	atm_lcd.E_port = PORT_C;
     2a4:	e9 e8       	ldi	r30, 0x89	; 137
     2a6:	f1 e0       	ldi	r31, 0x01	; 1
     2a8:	68 94       	set
     2aa:	dd 24       	eor	r13, r13
     2ac:	d1 f8       	bld	r13, 1
     2ae:	0d 2d       	mov	r16, r13
     2b0:	d2 82       	std	Z+2, r13	; 0x02
	atm_lcd.E_pin = PINC3;
     2b2:	0f 2e       	mov	r0, r31
     2b4:	f3 e0       	ldi	r31, 0x03	; 3
     2b6:	cf 2e       	mov	r12, r31
     2b8:	f0 2d       	mov	r31, r0
     2ba:	3c 2d       	mov	r19, r12
     2bc:	c5 82       	std	Z+5, r12	; 0x05
	atm_lcd.RS_port = PORT_C;
     2be:	ed 2c       	mov	r14, r13
     2c0:	d0 82       	st	Z, r13
	atm_lcd.RS_pin = PINC1;
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	19 2f       	mov	r17, r25
     2c6:	93 83       	std	Z+3, r25	; 0x03
	atm_lcd.RW_port = PORT_C;
     2c8:	fd 2c       	mov	r15, r13
     2ca:	d1 82       	std	Z+1, r13	; 0x01
	atm_lcd.RW_pin = PINC2;
     2cc:	2d 2d       	mov	r18, r13
     2ce:	d4 82       	std	Z+4, r13	; 0x04
	// data pins
	atm_lcd.lcd_data_port = PORT_C;
     2d0:	4d 2d       	mov	r20, r13
     2d2:	d6 82       	std	Z+6, r13	; 0x06
	atm_lcd.lcd_data1_pin = PINC4;
     2d4:	94 e0       	ldi	r25, 0x04	; 4
     2d6:	59 2f       	mov	r21, r25
     2d8:	97 83       	std	Z+7, r25	; 0x07
	atm_lcd.lcd_data2_pin = PINC5;
     2da:	68 2f       	mov	r22, r24
     2dc:	80 87       	std	Z+8, r24	; 0x08
	atm_lcd.lcd_data3_pin = PINC6;
     2de:	86 e0       	ldi	r24, 0x06	; 6
     2e0:	78 2f       	mov	r23, r24
     2e2:	81 87       	std	Z+9, r24	; 0x09
	atm_lcd.lcd_data4_pin = PINC7;
     2e4:	87 e0       	ldi	r24, 0x07	; 7
     2e6:	82 87       	std	Z+10, r24	; 0x0a
	LCD_init(atm_lcd);
     2e8:	0e 94 9e 08 	call	0x113c	; 0x113c <LCD_init>
// 	kpd.cols_first_pin = PINA2;
// 	kpd.rows_first_pin = PINA5;
// 	
// 	KPD_init(kpd);
	// Buzzer
	buzzer.buzzer_port = PORT_D;
     2ec:	e6 e8       	ldi	r30, 0x86	; 134
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	c0 82       	st	Z, r12
	buzzer.buzzer_pin = PIND3;
     2f2:	c1 82       	std	Z+1, r12	; 0x01
	buzzer_init(buzzer);
     2f4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <buzzer>
     2f8:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <buzzer+0x1>
     2fc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <buzzer_init>
	// button 
	zero_enter_btn.button_port = PORT_D;
     300:	e3 e8       	ldi	r30, 0x83	; 131
     302:	f1 e0       	ldi	r31, 0x01	; 1
     304:	c0 82       	st	Z, r12
	zero_enter_btn.button_pin = PIND2;
     306:	d1 82       	std	Z+1, r13	; 0x01
	BUTTON_init(zero_enter_btn);
     308:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <zero_enter_btn>
     30c:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <zero_enter_btn+0x1>
     310:	0e 94 6f 07 	call	0xede	; 0xede <BUTTON_init>
	// init pin as input
	dio_init(PORT_B,PINB2,DIO_IN);
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	62 e0       	ldi	r22, 0x02	; 2
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	
	
	
	// init SPI
	SPI_initSlave();
     31e:	0e 94 4f 0c 	call	0x189e	; 0x189e <SPI_initSlave>
	
	// TODO: MOVE REGISTERS TO EINT FILE
	
	// enable INTERRRUPT 
	// enable interrupt mode 
	SET_BIT(MCUCSR,ISC2);
     322:	84 b7       	in	r24, 0x34	; 52
     324:	80 64       	ori	r24, 0x40	; 64
     326:	84 bf       	out	0x34, r24	; 52
	//enable GICR
	//SET_BIT(GICR,GICR_INT_2);
	SET_BIT(GICR,5);
     328:	8b b7       	in	r24, 0x3b	; 59
     32a:	80 62       	ori	r24, 0x20	; 32
     32c:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(SREG,1);
     32e:	8f b7       	in	r24, 0x3f	; 63
     330:	82 60       	ori	r24, 0x02	; 2
     332:	8f bf       	out	0x3f, r24	; 63
	sei();
     334:	78 94       	sei
	uint8 pin_temp;
	for (uint8 i = 0;i<100;i++ )
     336:	b1 2c       	mov	r11, r1
     338:	2a c0       	rjmp	.+84     	; 0x38e <appInit+0x110>
	{
		readNumber(zero_enter_btn,&pin_temp);
     33a:	be 01       	movw	r22, r28
     33c:	6f 5f       	subi	r22, 0xFF	; 255
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <zero_enter_btn>
     344:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <zero_enter_btn+0x1>
     348:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <readNumber>
		//	LCD_displayStringRowColumn(atm_lcd,1,(5+i),"X");
		LCD_intgerToString(atm_lcd,pin_temp);
     34c:	c9 80       	ldd	r12, Y+1	; 0x01
     34e:	d1 2c       	mov	r13, r1
     350:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     354:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     358:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     35c:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     360:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     364:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     368:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     36c:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     370:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     374:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     378:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     37c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_intgerToString>
		Timer0_Delay(10);
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	80 e2       	ldi	r24, 0x20	; 32
     386:	91 e4       	ldi	r25, 0x41	; 65
     388:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	//SET_BIT(GICR,GICR_INT_2);
	SET_BIT(GICR,5);
	SET_BIT(SREG,1);
	sei();
	uint8 pin_temp;
	for (uint8 i = 0;i<100;i++ )
     38c:	b3 94       	inc	r11
     38e:	83 e6       	ldi	r24, 0x63	; 99
     390:	8b 15       	cp	r24, r11
     392:	98 f6       	brcc	.-90     	; 0x33a <appInit+0xbc>
		LCD_intgerToString(atm_lcd,pin_temp);
		Timer0_Delay(10);
	
	}
	
}
     394:	0f 90       	pop	r0
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	bf 90       	pop	r11
     3a8:	08 95       	ret

000003aa <readPIN>:
}



// read PIN from User
void readPIN(uint8 *pin[]){
     3aa:	6f 92       	push	r6
     3ac:	7f 92       	push	r7
     3ae:	8f 92       	push	r8
     3b0:	9f 92       	push	r9
     3b2:	af 92       	push	r10
     3b4:	bf 92       	push	r11
     3b6:	cf 92       	push	r12
     3b8:	df 92       	push	r13
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <readPIN+0x1e>
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <readPIN+0x20>
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	3c 01       	movw	r6, r24
	uint8 pin_temp [PIN_LENTH];
	// 4 numeric number
	LCD_clearScreen(atm_lcd);
     3d0:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     3d4:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     3d8:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     3dc:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     3e0:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     3e4:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     3e8:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     3ec:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     3f0:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     3f4:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     3f8:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     3fc:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd,0,0,"ENTER YOUR PIN");
     400:	0f 2e       	mov	r0, r31
     402:	f6 e7       	ldi	r31, 0x76	; 118
     404:	8f 2e       	mov	r8, r31
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	9f 2e       	mov	r9, r31
     40a:	f0 2d       	mov	r31, r0
     40c:	a1 2c       	mov	r10, r1
     40e:	c1 2c       	mov	r12, r1
     410:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     414:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     418:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     41c:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     420:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     424:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     428:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     42c:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     430:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     434:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     438:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     43c:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
	
	// read PIN
	for (uint8 i = 0;i<PIN_LENTH;i++ )
     440:	b1 2c       	mov	r11, r1
     442:	4f c0       	rjmp	.+158    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
	{
		readNumber(zero_enter_btn,&pin_temp[i]);
     444:	88 24       	eor	r8, r8
     446:	83 94       	inc	r8
     448:	91 2c       	mov	r9, r1
     44a:	8c 0e       	add	r8, r28
     44c:	9d 1e       	adc	r9, r29
     44e:	8b 0c       	add	r8, r11
     450:	91 1c       	adc	r9, r1
     452:	b4 01       	movw	r22, r8
     454:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <zero_enter_btn>
     458:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <zero_enter_btn+0x1>
     45c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <readNumber>
	//	LCD_displayStringRowColumn(atm_lcd,1,(5+i),"X");
		LCD_moveCursor(atm_lcd,1,(5+i));
     460:	0f 2e       	mov	r0, r31
     462:	f5 e0       	ldi	r31, 0x05	; 5
     464:	af 2e       	mov	r10, r31
     466:	f0 2d       	mov	r31, r0
     468:	ab 0c       	add	r10, r11
     46a:	cc 24       	eor	r12, r12
     46c:	c3 94       	inc	r12
     46e:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     472:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     476:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     47a:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     47e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     482:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     486:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     48a:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     48e:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     492:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     496:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     49a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_moveCursor>
		LCD_intgerToString(atm_lcd,pin_temp[i]);
     49e:	f4 01       	movw	r30, r8
     4a0:	c0 80       	ld	r12, Z
     4a2:	d1 2c       	mov	r13, r1
     4a4:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     4a8:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     4ac:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     4b0:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     4b4:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     4b8:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     4bc:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     4c0:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     4c4:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     4c8:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     4cc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     4d0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_intgerToString>
		Timer0_Delay(10);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e2       	ldi	r24, 0x20	; 32
     4da:	91 e4       	ldi	r25, 0x41	; 65
     4dc:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	// 4 numeric number
	LCD_clearScreen(atm_lcd);
	LCD_displayStringRowColumn(atm_lcd,0,0,"ENTER YOUR PIN");
	
	// read PIN
	for (uint8 i = 0;i<PIN_LENTH;i++ )
     4e0:	b3 94       	inc	r11
     4e2:	f3 e0       	ldi	r31, 0x03	; 3
     4e4:	fb 15       	cp	r31, r11
     4e6:	08 f0       	brcs	.+2      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     4e8:	ad cf       	rjmp	.-166    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		LCD_intgerToString(atm_lcd,pin_temp[i]);
		Timer0_Delay(10);
	}
	
	// wait for enter
	readNumber(zero_enter_btn,&btn_value_temp);
     4ea:	65 eb       	ldi	r22, 0xB5	; 181
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <zero_enter_btn>
     4f2:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <zero_enter_btn+0x1>
     4f6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <readNumber>
	while(btn_value_temp != BTN_ENTER_PRESSED){
     4fa:	08 c0       	rjmp	.+16     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
		readNumber(zero_enter_btn,&btn_value_temp);
     4fc:	65 eb       	ldi	r22, 0xB5	; 181
     4fe:	71 e0       	ldi	r23, 0x01	; 1
     500:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <zero_enter_btn>
     504:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <zero_enter_btn+0x1>
     508:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <readNumber>
		Timer0_Delay(10);
	}
	
	// wait for enter
	readNumber(zero_enter_btn,&btn_value_temp);
	while(btn_value_temp != BTN_ENTER_PRESSED){
     50c:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <btn_value_temp>
     510:	8b 30       	cpi	r24, 0x0B	; 11
     512:	a1 f7       	brne	.-24     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
		readNumber(zero_enter_btn,&btn_value_temp);
	}
	*pin = pin_temp;
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	f3 01       	movw	r30, r6
     51a:	91 83       	std	Z+1, r25	; 0x01
     51c:	80 83       	st	Z, r24
}
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	df 90       	pop	r13
     534:	cf 90       	pop	r12
     536:	bf 90       	pop	r11
     538:	af 90       	pop	r10
     53a:	9f 90       	pop	r9
     53c:	8f 90       	pop	r8
     53e:	7f 90       	pop	r7
     540:	6f 90       	pop	r6
     542:	08 95       	ret

00000544 <checkCardInfo>:

uint8 checkCardInfo(ST_transaction_t *card, uint8 *pin, ST_accountsDB_t *accRef) {
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	ec 01       	movw	r28, r24
     556:	7a 01       	movw	r14, r20
	uint8 count = 0;
	uint8 length;
	
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
     558:	44 96       	adiw	r24, 0x14	; 20
     55a:	0e 94 57 11 	call	0x22ae	; 0x22ae <strcmp>
     55e:	89 2b       	or	r24, r25
     560:	31 f5       	brne	.+76     	; 0x5ae <checkCardInfo+0x6a>
		return INVALID_PIN;
	}
	
	length = strlen((const char *)card->PAN);
     562:	cc 2e       	mov	r12, r28
     564:	dd 2e       	mov	r13, r29
	for (int x = 0; x < ACCOUNTS_DB_SIZE; x++) {
     566:	00 e0       	ldi	r16, 0x00	; 0
     568:	10 e0       	ldi	r17, 0x00	; 0
     56a:	1c c0       	rjmp	.+56     	; 0x5a4 <checkCardInfo+0x60>
		if (strcmp((const char *)card->PAN, (const char *)accRef[x].primaryAccountNumber) == 0) {
     56c:	89 e1       	ldi	r24, 0x19	; 25
     56e:	80 9f       	mul	r24, r16
     570:	e0 01       	movw	r28, r0
     572:	81 9f       	mul	r24, r17
     574:	d0 0d       	add	r29, r0
     576:	11 24       	eor	r1, r1
     578:	ce 0d       	add	r28, r14
     57a:	df 1d       	adc	r29, r15
     57c:	be 01       	movw	r22, r28
     57e:	6b 5f       	subi	r22, 0xFB	; 251
     580:	7f 4f       	sbci	r23, 0xFF	; 255
     582:	8c 2d       	mov	r24, r12
     584:	9d 2d       	mov	r25, r13
     586:	0e 94 57 11 	call	0x22ae	; 0x22ae <strcmp>
     58a:	89 2b       	or	r24, r25
     58c:	49 f4       	brne	.+18     	; 0x5a0 <checkCardInfo+0x5c>
			*accRef = accRef[x];
     58e:	89 e1       	ldi	r24, 0x19	; 25
     590:	fe 01       	movw	r30, r28
     592:	d7 01       	movw	r26, r14
     594:	01 90       	ld	r0, Z+
     596:	0d 92       	st	X+, r0
     598:	8a 95       	dec	r24
     59a:	e1 f7       	brne	.-8      	; 0x594 <checkCardInfo+0x50>
			return ACC_FOUND;
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	08 c0       	rjmp	.+16     	; 0x5b0 <checkCardInfo+0x6c>
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
		return INVALID_PIN;
	}
	
	length = strlen((const char *)card->PAN);
	for (int x = 0; x < ACCOUNTS_DB_SIZE; x++) {
     5a0:	0f 5f       	subi	r16, 0xFF	; 255
     5a2:	1f 4f       	sbci	r17, 0xFF	; 255
     5a4:	0f 3f       	cpi	r16, 0xFF	; 255
     5a6:	11 05       	cpc	r17, r1
     5a8:	0c f3       	brlt	.-62     	; 0x56c <checkCardInfo+0x28>
			*accRef = accRef[x];
			return ACC_FOUND;
		}
	}
	
	return ACC_NOT_FOUNT;
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <checkCardInfo+0x6c>
uint8 checkCardInfo(ST_transaction_t *card, uint8 *pin, ST_accountsDB_t *accRef) {
	uint8 count = 0;
	uint8 length;
	
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
		return INVALID_PIN;
     5ae:	80 e0       	ldi	r24, 0x00	; 0
			return ACC_FOUND;
		}
	}
	
	return ACC_NOT_FOUNT;
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	08 95       	ret

000005c2 <readCardInfo>:
	//}
	//str_pin[i]='\0';
	//strncpy(*card->PAN, str_pan, str_length);
	//strncpy(*card->pin, str_pin, PIN_LENTH);
// 
	strncpy(*card->PAN, "123456789012345678", 18);
     5c2:	fc 01       	movw	r30, r24
     5c4:	a0 81       	ld	r26, Z
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	22 e1       	ldi	r18, 0x12	; 18
     5ca:	e5 e8       	ldi	r30, 0x85	; 133
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	01 90       	ld	r0, Z+
     5d0:	0d 92       	st	X+, r0
     5d2:	2a 95       	dec	r18
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <readCardInfo+0xc>
	strncpy(*card->pin, "1234", PIN_LENTH);
     5d6:	dc 01       	movw	r26, r24
     5d8:	54 96       	adiw	r26, 0x14	; 20
     5da:	ec 91       	ld	r30, X
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	81 e3       	ldi	r24, 0x31	; 49
     5e0:	92 e3       	ldi	r25, 0x32	; 50
     5e2:	91 83       	std	Z+1, r25	; 0x01
     5e4:	80 83       	st	Z, r24
     5e6:	83 e3       	ldi	r24, 0x33	; 51
     5e8:	94 e3       	ldi	r25, 0x34	; 52
     5ea:	93 83       	std	Z+3, r25	; 0x03
     5ec:	82 83       	std	Z+2, r24	; 0x02
     5ee:	08 95       	ret

000005f0 <readAmount>:

}


void readAmount(float *amount){
     5f0:	6f 92       	push	r6
     5f2:	7f 92       	push	r7
     5f4:	8f 92       	push	r8
     5f6:	9f 92       	push	r9
     5f8:	af 92       	push	r10
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	29 97       	sbiw	r28, 0x09	; 9
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	3c 01       	movw	r6, r24
	uint8 amount_display[8] = "0000.00",num;
     61c:	88 e0       	ldi	r24, 0x08	; 8
     61e:	e5 ea       	ldi	r30, 0xA5	; 165
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	de 01       	movw	r26, r28
     624:	11 96       	adiw	r26, 0x01	; 1
     626:	01 90       	ld	r0, Z+
     628:	0d 92       	st	X+, r0
     62a:	8a 95       	dec	r24
     62c:	e1 f7       	brne	.-8      	; 0x626 <readAmount+0x36>
	LCD_clearScreen(atm_lcd);
     62e:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     632:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     636:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     63a:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     63e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     642:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     646:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     64a:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     64e:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     652:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     656:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     65a:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd,0,3,"ENTER AMOUNT");
     65e:	0f 2e       	mov	r0, r31
     660:	f8 e9       	ldi	r31, 0x98	; 152
     662:	8f 2e       	mov	r8, r31
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	9f 2e       	mov	r9, r31
     668:	f0 2d       	mov	r31, r0
     66a:	0f 2e       	mov	r0, r31
     66c:	f3 e0       	ldi	r31, 0x03	; 3
     66e:	af 2e       	mov	r10, r31
     670:	f0 2d       	mov	r31, r0
     672:	c1 2c       	mov	r12, r1
     674:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     678:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     67c:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     680:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     684:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     688:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     68c:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     690:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     694:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     698:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     69c:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     6a0:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(atm_lcd,1,3,amount_display);
     6a4:	ce 01       	movw	r24, r28
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	4c 01       	movw	r8, r24
     6aa:	cc 24       	eor	r12, r12
     6ac:	c3 94       	inc	r12
     6ae:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     6b2:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     6b6:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     6ba:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     6be:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     6c2:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     6c6:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     6ca:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     6ce:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     6d2:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     6d6:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     6da:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
	for(uint8 i = 0 ; i <= 6;i++){
     6de:	d1 2c       	mov	r13, r1
     6e0:	39 c0       	rjmp	.+114    	; 0x754 <readAmount+0x164>
		if (i == 4)
     6e2:	94 e0       	ldi	r25, 0x04	; 4
     6e4:	d9 12       	cpse	r13, r25
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <readAmount+0xfa>
		{
			// skip decimal point 
			i++;
     6e8:	d3 94       	inc	r13
		}
		readNumber(zero_enter_btn,&num);
     6ea:	be 01       	movw	r22, r28
     6ec:	67 5f       	subi	r22, 0xF7	; 247
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <zero_enter_btn>
     6f4:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <zero_enter_btn+0x1>
     6f8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <readNumber>
		amount_display[i] = num +'0' ;
     6fc:	e1 e0       	ldi	r30, 0x01	; 1
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	ec 0f       	add	r30, r28
     702:	fd 1f       	adc	r31, r29
     704:	ed 0d       	add	r30, r13
     706:	f1 1d       	adc	r31, r1
     708:	89 85       	ldd	r24, Y+9	; 0x09
     70a:	80 5d       	subi	r24, 0xD0	; 208
     70c:	80 83       	st	Z, r24
		LCD_displayStringRowColumn(atm_lcd,1,(3+i),amount_display);
     70e:	0f 2e       	mov	r0, r31
     710:	f3 e0       	ldi	r31, 0x03	; 3
     712:	af 2e       	mov	r10, r31
     714:	f0 2d       	mov	r31, r0
     716:	ad 0c       	add	r10, r13
     718:	fe 01       	movw	r30, r28
     71a:	31 96       	adiw	r30, 0x01	; 1
     71c:	4f 01       	movw	r8, r30
     71e:	cc 24       	eor	r12, r12
     720:	c3 94       	inc	r12
     722:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     726:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     72a:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     72e:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     732:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     736:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     73a:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     73e:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     742:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     746:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     74a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     74e:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
void readAmount(float *amount){
	uint8 amount_display[8] = "0000.00",num;
	LCD_clearScreen(atm_lcd);
	LCD_displayStringRowColumn(atm_lcd,0,3,"ENTER AMOUNT");
	LCD_displayStringRowColumn(atm_lcd,1,3,amount_display);
	for(uint8 i = 0 ; i <= 6;i++){
     752:	d3 94       	inc	r13
     754:	f6 e0       	ldi	r31, 0x06	; 6
     756:	fd 15       	cp	r31, r13
     758:	20 f6       	brcc	.-120    	; 0x6e2 <readAmount+0xf2>
		readNumber(zero_enter_btn,&num);
		amount_display[i] = num +'0' ;
		LCD_displayStringRowColumn(atm_lcd,1,(3+i),amount_display);

	}
	*amount = atof((const char *)amount_display);
     75a:	ce 01       	movw	r24, r28
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	0e 94 53 11 	call	0x22a6	; 0x22a6 <atof>
     762:	f3 01       	movw	r30, r6
     764:	60 83       	st	Z, r22
     766:	71 83       	std	Z+1, r23	; 0x01
     768:	82 83       	std	Z+2, r24	; 0x02
     76a:	93 83       	std	Z+3, r25	; 0x03
}
     76c:	29 96       	adiw	r28, 0x09	; 9
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	af 90       	pop	r10
     78a:	9f 90       	pop	r9
     78c:	8f 90       	pop	r8
     78e:	7f 90       	pop	r7
     790:	6f 90       	pop	r6
     792:	08 95       	ret

00000794 <appStart>:

void appStart(void){	
     794:	8f 92       	push	r8
     796:	9f 92       	push	r9
     798:	af 92       	push	r10
     79a:	bf 92       	push	r11
     79c:	cf 92       	push	r12
     79e:	df 92       	push	r13
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	a0 97       	sbiw	r28, 0x20	; 32
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
	uint8 pin_temp[PIN_LENTH],card_status;
	ST_transaction_t card ;
	if (ATM_STATUS == ATM_BLOKED_MODE)
     7bc:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <ATM_STATUS>
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	e1 f5       	brne	.+120    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
	{
		LCD_clearScreen(atm_lcd);
     7c4:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     7c8:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     7cc:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     7d0:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     7d4:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     7d8:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     7dc:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     7e0:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     7e4:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     7e8:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     7ec:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     7f0:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"OUT FOR MENTENANCE");
     7f4:	0f 2e       	mov	r0, r31
     7f6:	fd ea       	ldi	r31, 0xAD	; 173
     7f8:	8f 2e       	mov	r8, r31
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	9f 2e       	mov	r9, r31
     7fe:	f0 2d       	mov	r31, r0
     800:	0f 2e       	mov	r0, r31
     802:	f3 e0       	ldi	r31, 0x03	; 3
     804:	af 2e       	mov	r10, r31
     806:	f0 2d       	mov	r31, r0
     808:	c1 2c       	mov	r12, r1
     80a:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     80e:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     812:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     816:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     81a:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     81e:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     822:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     826:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     82a:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     82e:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     832:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     836:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
		return;	
     83a:	29 c3       	rjmp	.+1618   	; 0xe8e <__stack+0x62f>
	}	
	if (atm_mode == FRIST_RUN)
     83c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <atm_mode>
     840:	85 30       	cpi	r24, 0x05	; 5
     842:	31 f4       	brne	.+12     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	{
		idelMenu();
     844:	0e 94 67 00 	call	0xce	; 0xce <idelMenu>
		atm_mode = NORMAL_MODE;
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <atm_mode>
		return;
     84e:	1f c3       	rjmp	.+1598   	; 0xe8e <__stack+0x62f>
	}
	if (card_trigger_signal == CARD_INSERTED)
     850:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <card_trigger_signal>
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	09 f0       	breq	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	1a c3       	rjmp	.+1588   	; 0xe8e <__stack+0x62f>
	{
		LCD_clearScreen(atm_lcd);
     85a:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     85e:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     862:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     866:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     86a:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     86e:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     872:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     876:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     87a:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     87e:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     882:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     886:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"CARD Detected");
     88a:	0f 2e       	mov	r0, r31
     88c:	f0 ec       	ldi	r31, 0xC0	; 192
     88e:	8f 2e       	mov	r8, r31
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	9f 2e       	mov	r9, r31
     894:	f0 2d       	mov	r31, r0
     896:	0f 2e       	mov	r0, r31
     898:	f3 e0       	ldi	r31, 0x03	; 3
     89a:	af 2e       	mov	r10, r31
     89c:	f0 2d       	mov	r31, r0
     89e:	c1 2c       	mov	r12, r1
     8a0:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     8a4:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     8a8:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     8ac:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     8b0:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     8b4:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     8b8:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     8bc:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     8c0:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     8c4:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     8c8:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     8cc:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
		
		LCD_displayStringRowColumn(atm_lcd,1,0,"READING ...");
     8d0:	0f 2e       	mov	r0, r31
     8d2:	fe ec       	ldi	r31, 0xCE	; 206
     8d4:	8f 2e       	mov	r8, r31
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	9f 2e       	mov	r9, r31
     8da:	f0 2d       	mov	r31, r0
     8dc:	a1 2c       	mov	r10, r1
     8de:	cc 24       	eor	r12, r12
     8e0:	c3 94       	inc	r12
     8e2:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     8e6:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     8ea:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     8ee:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     8f2:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     8f6:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     8fa:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     8fe:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     902:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     906:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     90a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     90e:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
		// read Card info
		readCardInfo(&card);
     912:	ce 01       	movw	r24, r28
     914:	05 96       	adiw	r24, 0x05	; 5
     916:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <readCardInfo>
		LCD_clearScreen(atm_lcd);
     91a:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     91e:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     922:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     926:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     92a:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     92e:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     932:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     936:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     93a:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     93e:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     942:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     946:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"OK...");
     94a:	0f 2e       	mov	r0, r31
     94c:	fa ed       	ldi	r31, 0xDA	; 218
     94e:	8f 2e       	mov	r8, r31
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	9f 2e       	mov	r9, r31
     954:	f0 2d       	mov	r31, r0
     956:	0f 2e       	mov	r0, r31
     958:	f3 e0       	ldi	r31, 0x03	; 3
     95a:	af 2e       	mov	r10, r31
     95c:	f0 2d       	mov	r31, r0
     95e:	c1 2c       	mov	r12, r1
     960:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     964:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     968:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     96c:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     970:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     974:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     978:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     97c:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     980:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     984:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     988:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     98c:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
		Timer0_Delay(1000);
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	8a e7       	ldi	r24, 0x7A	; 122
     996:	94 e4       	ldi	r25, 0x44	; 68
     998:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
		// READ PIN
		counter1 = 0;
     99c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <counter1>
		card_status = VALID_PIN;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
		do{
			if (card_status == INVALID_PIN && counter1 != 0)
     9a2:	81 11       	cpse	r24, r1
     9a4:	42 c0       	rjmp	.+132    	; 0xa2a <__stack+0x1cb>
     9a6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <counter1>
     9aa:	88 23       	and	r24, r24
     9ac:	f1 f1       	breq	.+124    	; 0xa2a <__stack+0x1cb>
			{
				LCD_clearScreen(atm_lcd);
     9ae:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     9b2:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     9b6:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     9ba:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     9be:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     9c2:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     9c6:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     9ca:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     9ce:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     9d2:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     9d6:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     9da:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
				LCD_displayStringRowColumn(atm_lcd,0,0,"INVALID PIN");
     9de:	0f 2e       	mov	r0, r31
     9e0:	f0 ee       	ldi	r31, 0xE0	; 224
     9e2:	8f 2e       	mov	r8, r31
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	9f 2e       	mov	r9, r31
     9e8:	f0 2d       	mov	r31, r0
     9ea:	a1 2c       	mov	r10, r1
     9ec:	c1 2c       	mov	r12, r1
     9ee:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     9f2:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     9f6:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     9fa:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     9fe:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     a02:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     a06:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     a0a:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     a0e:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     a12:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     a16:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     a1a:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
				Timer0_Delay(2000);
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	8a ef       	ldi	r24, 0xFA	; 250
     a24:	94 e4       	ldi	r25, 0x44	; 68
     a26:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
			}
			
			// read PIN			
			readPIN(&pin_temp);
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <readPIN>
			
			
			// check if PIN is correct
			card_status = checkCardInfo(&card,pin_temp,&accountRefrence);
     a32:	44 e9       	ldi	r20, 0x94	; 148
     a34:	51 e0       	ldi	r21, 0x01	; 1
     a36:	be 01       	movw	r22, r28
     a38:	6f 5f       	subi	r22, 0xFF	; 255
     a3a:	7f 4f       	sbci	r23, 0xFF	; 255
     a3c:	ce 01       	movw	r24, r28
     a3e:	05 96       	adiw	r24, 0x05	; 5
     a40:	0e 94 a2 02 	call	0x544	; 0x544 <checkCardInfo>
			counter1++;
     a44:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <counter1>
     a48:	9f 5f       	subi	r25, 0xFF	; 255
     a4a:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <counter1>
			//if (counter1 == 1)
			//{
				//is_pin_correct = 0;
			//}
		}while((counter1<2)&&!card_status);
     a4e:	92 30       	cpi	r25, 0x02	; 2
     a50:	18 f4       	brcc	.+6      	; 0xa58 <__stack+0x1f9>
     a52:	88 23       	and	r24, r24
     a54:	09 f4       	brne	.+2      	; 0xa58 <__stack+0x1f9>
     a56:	a5 cf       	rjmp	.-182    	; 0x9a2 <__stack+0x143>
				
		// check if PIN entered twise wrong
		if (counter1>=2)
     a58:	92 30       	cpi	r25, 0x02	; 2
     a5a:	08 f4       	brcc	.+2      	; 0xa5e <__stack+0x1ff>
     a5c:	6d c0       	rjmp	.+218    	; 0xb38 <__stack+0x2d9>
		{
			// Turn Alarm ON
			LCD_clearScreen(atm_lcd);
     a5e:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     a62:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     a66:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     a6a:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     a6e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     a72:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     a76:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     a7a:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     a7e:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     a82:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     a86:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     a8a:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,3,"ATM BLOCKED");
     a8e:	0f 2e       	mov	r0, r31
     a90:	fc ee       	ldi	r31, 0xEC	; 236
     a92:	8f 2e       	mov	r8, r31
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	9f 2e       	mov	r9, r31
     a98:	f0 2d       	mov	r31, r0
     a9a:	0f 2e       	mov	r0, r31
     a9c:	f3 e0       	ldi	r31, 0x03	; 3
     a9e:	af 2e       	mov	r10, r31
     aa0:	f0 2d       	mov	r31, r0
     aa2:	c1 2c       	mov	r12, r1
     aa4:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     aa8:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     aac:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     ab0:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     ab4:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     ab8:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     abc:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     ac0:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     ac4:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     ac8:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     acc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     ad0:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(atm_lcd,1,0,"INVALIDS TRYS");
     ad4:	0f 2e       	mov	r0, r31
     ad6:	f8 ef       	ldi	r31, 0xF8	; 248
     ad8:	8f 2e       	mov	r8, r31
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	9f 2e       	mov	r9, r31
     ade:	f0 2d       	mov	r31, r0
     ae0:	a1 2c       	mov	r10, r1
     ae2:	cc 24       	eor	r12, r12
     ae4:	c3 94       	inc	r12
     ae6:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     aea:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     aee:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     af2:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     af6:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     afa:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     afe:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     b02:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     b06:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     b0a:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     b0e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     b12:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
			Timer0_Delay(1000);
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	8a e7       	ldi	r24, 0x7A	; 122
     b1c:	94 e4       	ldi	r25, 0x44	; 68
     b1e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
			buzzer_digitalwrite(buzzer,DIO_HIGH);
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <buzzer>
     b28:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <buzzer+0x1>
     b2c:	0e 94 cb 07 	call	0xf96	; 0xf96 <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ATM_STATUS>
			return;
     b36:	ab c1       	rjmp	.+854    	; 0xe8e <__stack+0x62f>
		}
		
		
		
		if(card_status == ACC_NOT_FOUNT){
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	09 f0       	breq	.+2      	; 0xb3e <__stack+0x2df>
     b3c:	43 c0       	rjmp	.+134    	; 0xbc4 <__stack+0x365>
			LCD_clearScreen(atm_lcd);
     b3e:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     b42:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     b46:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     b4a:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     b4e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     b52:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     b56:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     b5a:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     b5e:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     b62:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     b66:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     b6a:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"This is a fraud card");
     b6e:	0f 2e       	mov	r0, r31
     b70:	f6 e0       	ldi	r31, 0x06	; 6
     b72:	8f 2e       	mov	r8, r31
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	9f 2e       	mov	r9, r31
     b78:	f0 2d       	mov	r31, r0
     b7a:	a1 2c       	mov	r10, r1
     b7c:	c1 2c       	mov	r12, r1
     b7e:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     b82:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     b86:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     b8a:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     b8e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     b92:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     b96:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     b9a:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     b9e:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     ba2:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     ba6:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     baa:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
			// start ALARM
			buzzer_digitalwrite(buzzer,DIO_HIGH);
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <buzzer>
     bb4:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <buzzer+0x1>
     bb8:	0e 94 cb 07 	call	0xf96	; 0xf96 <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ATM_STATUS>
			return;
     bc2:	65 c1       	rjmp	.+714    	; 0xe8e <__stack+0x62f>
		}
		if(accountRefrence.en_state == BLOCKED){
     bc4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <accountRefrence+0x4>
     bc8:	81 11       	cpse	r24, r1
     bca:	43 c0       	rjmp	.+134    	; 0xc52 <__stack+0x3f3>
			LCD_clearScreen(atm_lcd);
     bcc:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     bd0:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     bd4:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     bd8:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     bdc:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     be0:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     be4:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     be8:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     bec:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     bf0:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     bf4:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     bf8:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"This card is stolen");
     bfc:	0f 2e       	mov	r0, r31
     bfe:	fb e1       	ldi	r31, 0x1B	; 27
     c00:	8f 2e       	mov	r8, r31
     c02:	f1 e0       	ldi	r31, 0x01	; 1
     c04:	9f 2e       	mov	r9, r31
     c06:	f0 2d       	mov	r31, r0
     c08:	a1 2c       	mov	r10, r1
     c0a:	c1 2c       	mov	r12, r1
     c0c:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     c10:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     c14:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     c18:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     c1c:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     c20:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     c24:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     c28:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     c2c:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     c30:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     c34:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     c38:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
			// start ALARM
			buzzer_digitalwrite(buzzer,DIO_HIGH);
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <buzzer>
     c42:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <buzzer+0x1>
     c46:	0e 94 cb 07 	call	0xf96	; 0xf96 <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ATM_STATUS>
			return;
     c50:	1e c1       	rjmp	.+572    	; 0xe8e <__stack+0x62f>
		}
		
		
		float amount;
		// read amounts 
		readAmount(&amount);
     c52:	ce 01       	movw	r24, r28
     c54:	4d 96       	adiw	r24, 0x1d	; 29
     c56:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <readAmount>
		// if amount 
		if(accountRefrence.balance > amount){
     c5a:	80 90 94 01 	lds	r8, 0x0194	; 0x800194 <accountRefrence>
     c5e:	90 90 95 01 	lds	r9, 0x0195	; 0x800195 <accountRefrence+0x1>
     c62:	a0 90 96 01 	lds	r10, 0x0196	; 0x800196 <accountRefrence+0x2>
     c66:	b0 90 97 01 	lds	r11, 0x0197	; 0x800197 <accountRefrence+0x3>
     c6a:	cd 8c       	ldd	r12, Y+29	; 0x1d
     c6c:	de 8c       	ldd	r13, Y+30	; 0x1e
     c6e:	ef 8c       	ldd	r14, Y+31	; 0x1f
     c70:	f8 a0       	ldd	r15, Y+32	; 0x20
     c72:	a7 01       	movw	r20, r14
     c74:	96 01       	movw	r18, r12
     c76:	c5 01       	movw	r24, r10
     c78:	b4 01       	movw	r22, r8
     c7a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__gesf2>
     c7e:	18 16       	cp	r1, r24
     c80:	cc f5       	brge	.+114    	; 0xcf4 <__stack+0x495>
			LCD_clearScreen(atm_lcd);
     c82:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     c86:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     c8a:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     c8e:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     c92:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     c96:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     c9a:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     c9e:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     ca2:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     ca6:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     caa:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     cae:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"Insufficient fund");
     cb2:	0f 2e       	mov	r0, r31
     cb4:	ff e2       	ldi	r31, 0x2F	; 47
     cb6:	8f 2e       	mov	r8, r31
     cb8:	f1 e0       	ldi	r31, 0x01	; 1
     cba:	9f 2e       	mov	r9, r31
     cbc:	f0 2d       	mov	r31, r0
     cbe:	a1 2c       	mov	r10, r1
     cc0:	c1 2c       	mov	r12, r1
     cc2:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     cc6:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     cca:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     cce:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     cd2:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     cd6:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     cda:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     cde:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     ce2:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     ce6:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     cea:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     cee:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
			return;
     cf2:	cd c0       	rjmp	.+410    	; 0xe8e <__stack+0x62f>
		}
		if(amount > MAX_AMOUNT){
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e4       	ldi	r19, 0x40	; 64
     cf8:	4c e9       	ldi	r20, 0x9C	; 156
     cfa:	55 e4       	ldi	r21, 0x45	; 69
     cfc:	c7 01       	movw	r24, r14
     cfe:	b6 01       	movw	r22, r12
     d00:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__gesf2>
     d04:	18 16       	cp	r1, r24
     d06:	cc f5       	brge	.+114    	; 0xd7a <__stack+0x51b>
			LCD_clearScreen(atm_lcd);
     d08:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     d0c:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     d10:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     d14:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     d18:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     d1c:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     d20:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     d24:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     d28:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     d2c:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     d30:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     d34:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"Maximum limit is exceeded");
     d38:	0f 2e       	mov	r0, r31
     d3a:	f1 e4       	ldi	r31, 0x41	; 65
     d3c:	8f 2e       	mov	r8, r31
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	9f 2e       	mov	r9, r31
     d42:	f0 2d       	mov	r31, r0
     d44:	a1 2c       	mov	r10, r1
     d46:	c1 2c       	mov	r12, r1
     d48:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     d4c:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     d50:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     d54:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     d58:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     d5c:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     d60:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     d64:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     d68:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     d6c:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     d70:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     d74:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
			return;
     d78:	8a c0       	rjmp	.+276    	; 0xe8e <__stack+0x62f>
		}
		
		accountRefrence.balance -= amount;
     d7a:	a7 01       	movw	r20, r14
     d7c:	96 01       	movw	r18, r12
     d7e:	c5 01       	movw	r24, r10
     d80:	b4 01       	movw	r22, r8
     d82:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
     d86:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <accountRefrence>
     d8a:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <accountRefrence+0x1>
     d8e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <accountRefrence+0x2>
     d92:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <accountRefrence+0x3>
		LCD_clearScreen(atm_lcd);
     d96:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     d9a:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     d9e:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     da2:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     da6:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     daa:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     dae:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     db2:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     db6:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     dba:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     dbe:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     dc2:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,0,"Approved Transaction");
     dc6:	0f 2e       	mov	r0, r31
     dc8:	fb e5       	ldi	r31, 0x5B	; 91
     dca:	8f 2e       	mov	r8, r31
     dcc:	f1 e0       	ldi	r31, 0x01	; 1
     dce:	9f 2e       	mov	r9, r31
     dd0:	f0 2d       	mov	r31, r0
     dd2:	a1 2c       	mov	r10, r1
     dd4:	c1 2c       	mov	r12, r1
     dd6:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     dda:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     dde:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     de2:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     de6:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     dea:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     dee:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     df2:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     df6:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     dfa:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     dfe:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     e02:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>

		Timer0_Delay(1000);
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	8a e7       	ldi	r24, 0x7A	; 122
     e0c:	94 e4       	ldi	r25, 0x44	; 68
     e0e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
		LCD_clearScreen(atm_lcd);
     e12:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     e16:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     e1a:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     e1e:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     e22:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     e26:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     e2a:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     e2e:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     e32:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     e36:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     e3a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     e3e:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,0,"Ejecting Card");
     e42:	0f 2e       	mov	r0, r31
     e44:	f0 e7       	ldi	r31, 0x70	; 112
     e46:	8f 2e       	mov	r8, r31
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	9f 2e       	mov	r9, r31
     e4c:	f0 2d       	mov	r31, r0
     e4e:	e0 90 89 01 	lds	r14, 0x0189	; 0x800189 <atm_lcd>
     e52:	f0 90 8a 01 	lds	r15, 0x018A	; 0x80018a <atm_lcd+0x1>
     e56:	00 91 8b 01 	lds	r16, 0x018B	; 0x80018b <atm_lcd+0x2>
     e5a:	10 91 8c 01 	lds	r17, 0x018C	; 0x80018c <atm_lcd+0x3>
     e5e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <atm_lcd+0x4>
     e62:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <atm_lcd+0x5>
     e66:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <atm_lcd+0x6>
     e6a:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <atm_lcd+0x7>
     e6e:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <atm_lcd+0x8>
     e72:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <atm_lcd+0x9>
     e76:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <atm_lcd+0xa>
     e7a:	0e 94 43 0a 	call	0x1486	; 0x1486 <LCD_displayStringRowColumn>
		Timer0_Delay(1000);
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	8a e7       	ldi	r24, 0x7A	; 122
     e84:	94 e4       	ldi	r25, 0x44	; 68
     e86:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
		card_trigger_signal = CARD_REMOVED;
     e8a:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <card_trigger_signal>
	}
}
     e8e:	a0 96       	adiw	r28, 0x20	; 32
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	df 90       	pop	r13
     ea8:	cf 90       	pop	r12
     eaa:	bf 90       	pop	r11
     eac:	af 90       	pop	r10
     eae:	9f 90       	pop	r9
     eb0:	8f 90       	pop	r8
     eb2:	08 95       	ret

00000eb4 <__vector_3>:


ISR(INT2_vect){
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	8f 93       	push	r24
     ec0:	9f 93       	push	r25
	card_trigger_signal = !card_trigger_signal;
     ec2:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <card_trigger_signal>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	91 11       	cpse	r25, r1
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <card_trigger_signal>
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	0f 90       	pop	r0
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	0f 90       	pop	r0
     eda:	1f 90       	pop	r1
     edc:	18 95       	reti

00000ede <BUTTON_init>:

void BUTTON_init(ST_PBTN_t button){
	dio_init(button.button_port,button.button_pin,DIO_IN);
}
void BUTTON_status(ST_PBTN_t button,uint8 *status){
	dio_read_pin(button.button_port,button.button_pin,status);
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	69 2f       	mov	r22, r25
     ee2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
     ee6:	08 95       	ret

00000ee8 <BUTTON_read_zero_enter>:
}


void BUTTON_read_zero_enter(ST_PBTN_t button,uint8 * value){
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <BUTTON_read_zero_enter+0xe>
     ef6:	1f 92       	push	r1
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	8b 01       	movw	r16, r22
	 uint8 button_state = 0;
     efe:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16 timeCounter = 0;
     f00:	1b 82       	std	Y+3, r1	; 0x03
     f02:	1a 82       	std	Y+2, r1	; 0x02
	dio_read_pin(button.button_port,button.button_pin,&button_state);
     f04:	f9 2e       	mov	r15, r25
     f06:	e8 2e       	mov	r14, r24
     f08:	ae 01       	movw	r20, r28
     f0a:	4f 5f       	subi	r20, 0xFF	; 255
     f0c:	5f 4f       	sbci	r21, 0xFF	; 255
     f0e:	69 2f       	mov	r22, r25
     f10:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <dio_read_pin>
	if (button_state == DIO_HIGH)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	61 f5       	brne	.+88     	; 0xf72 <BUTTON_read_zero_enter+0x8a>
     f1a:	27 c0       	rjmp	.+78     	; 0xf6a <BUTTON_read_zero_enter+0x82>
	{
		while(button_state == DIO_HIGH){
			Timer0_Delay(BTN_MIN_SECOND);
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	88 e4       	ldi	r24, 0x48	; 72
     f22:	92 e4       	ldi	r25, 0x42	; 66
     f24:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
			timeCounter += BTN_MIN_SECOND;
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	9b 81       	ldd	r25, Y+3	; 0x03
     f2c:	c2 96       	adiw	r24, 0x32	; 50
     f2e:	9b 83       	std	Y+3, r25	; 0x03
     f30:	8a 83       	std	Y+2, r24	; 0x02
			dio_read_pin(button.button_port,button.button_pin,&button_state);
     f32:	ae 01       	movw	r20, r28
     f34:	4f 5f       	subi	r20, 0xFF	; 255
     f36:	5f 4f       	sbci	r21, 0xFF	; 255
     f38:	6f 2d       	mov	r22, r15
     f3a:	8e 2d       	mov	r24, r14
     f3c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <dio_read_pin>
			if (button_state == DIO_LOW && timeCounter < BTN_2_SECOND)
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	81 11       	cpse	r24, r1
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <BUTTON_read_zero_enter+0x70>
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9b 81       	ldd	r25, Y+3	; 0x03
     f4a:	8c 3d       	cpi	r24, 0xDC	; 220
     f4c:	95 40       	sbci	r25, 0x05	; 5
     f4e:	20 f4       	brcc	.+8      	; 0xf58 <BUTTON_read_zero_enter+0x70>
			{
				*value = BTN_ZERO_PRESSED;
     f50:	8a e0       	ldi	r24, 0x0A	; 10
     f52:	f8 01       	movw	r30, r16
     f54:	80 83       	st	Z, r24
     f56:	09 c0       	rjmp	.+18     	; 0xf6a <BUTTON_read_zero_enter+0x82>
			}
			else if (timeCounter >= BTN_2_SECOND)
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	8c 3d       	cpi	r24, 0xDC	; 220
     f5e:	95 40       	sbci	r25, 0x05	; 5
     f60:	20 f0       	brcs	.+8      	; 0xf6a <BUTTON_read_zero_enter+0x82>
			{
				*value = BTN_ENTER_PRESSED;
     f62:	8b e0       	ldi	r24, 0x0B	; 11
     f64:	f8 01       	movw	r30, r16
     f66:	80 83       	st	Z, r24
				break;
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <BUTTON_read_zero_enter+0x90>
	 uint8 button_state = 0;
	volatile uint16 timeCounter = 0;
	dio_read_pin(button.button_port,button.button_pin,&button_state);
	if (button_state == DIO_HIGH)
	{
		while(button_state == DIO_HIGH){
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	b1 f2       	breq	.-84     	; 0xf1c <BUTTON_read_zero_enter+0x34>
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <BUTTON_read_zero_enter+0x90>
			}
		}
	}
	else
	{
		*value = BTN_NO_PRESS;//NO
     f72:	8c e0       	ldi	r24, 0x0C	; 12
     f74:	f8 01       	movw	r30, r16
     f76:	80 83       	st	Z, r24
	}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	08 95       	ret

00000f8c <buzzer_init>:

/*============= FUNCTION DEFINITION =============*/


void buzzer_init(ST_BUZZER_t buzzer){
	dio_init(buzzer.buzzer_port,buzzer.buzzer_pin,DIO_LOW);
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	69 2f       	mov	r22, r25
     f90:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
     f94:	08 95       	ret

00000f96 <buzzer_digitalwrite>:
}
void buzzer_digitalwrite(ST_BUZZER_t buzzer,uint8 value){
     f96:	46 2f       	mov	r20, r22
	dio_write_pin(buzzer.buzzer_port,buzzer.buzzer_pin,value);
     f98:	69 2f       	mov	r22, r25
     f9a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
     f9e:	08 95       	ret

00000fa0 <KEYPAD_3x3_adjustKeyNumber>:
				break;
		default: keypad_button = button_number;
				break;
	}
	return keypad_button;
}
     fa0:	08 95       	ret

00000fa2 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	1f 92       	push	r1
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row,value;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
     fb0:	00 e0       	ldi	r16, 0x00	; 0
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <KEYPAD_getPressedKey+0x74>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			dio_write_port(KEYPAD_PORT_ID,DIO_IN);
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	0e 94 39 0c 	call	0x1872	; 0x1872 <dio_write_port>
			dio_write_pin(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,DIO_OUT);
     fbc:	41 e0       	ldi	r20, 0x01	; 1
     fbe:	62 e0       	ldi	r22, 0x02	; 2
     fc0:	60 0f       	add	r22, r16
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
#if(KEYPAD_BUTTON_PRESSED == DIO_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
     fc8:	80 2f       	mov	r24, r16
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 96       	adiw	r24, 0x02	; 2
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <KEYPAD_getPressedKey+0x36>
     fd4:	66 0f       	add	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	8a 95       	dec	r24
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <KEYPAD_getPressedKey+0x32>
#endif
			dio_write_port(KEYPAD_PORT_ID,keypad_port_value);
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 39 0c 	call	0x1872	; 0x1872 <dio_write_port>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
     fe2:	10 e0       	ldi	r17, 0x00	; 0
     fe4:	15 c0       	rjmp	.+42     	; 0x1010 <KEYPAD_getPressedKey+0x6e>
			{
				/* Check if the switch is pressed in this row */
				dio_read_pin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID,&value);
     fe6:	ae 01       	movw	r20, r28
     fe8:	4f 5f       	subi	r20, 0xFF	; 255
     fea:	5f 4f       	sbci	r21, 0xFF	; 255
     fec:	65 e0       	ldi	r22, 0x05	; 5
     fee:	61 0f       	add	r22, r17
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <dio_read_pin>
				if(value == KEYPAD_BUTTON_PRESSED)
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	49 f4       	brne	.+18     	; 0x100e <KEYPAD_getPressedKey+0x6c>
				{
					return KEYPAD_3x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     ffc:	81 2f       	mov	r24, r17
     ffe:	88 0f       	add	r24, r24
    1000:	18 0f       	add	r17, r24
    1002:	81 2f       	mov	r24, r17
    1004:	80 0f       	add	r24, r16
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <KEYPAD_3x3_adjustKeyNumber>
    100c:	07 c0       	rjmp	.+14     	; 0x101c <KEYPAD_getPressedKey+0x7a>
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			dio_write_port(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    100e:	1f 5f       	subi	r17, 0xFF	; 255
    1010:	13 30       	cpi	r17, 0x03	; 3
    1012:	48 f3       	brcs	.-46     	; 0xfe6 <KEYPAD_getPressedKey+0x44>
{
	uint8 col,row,value;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1014:	0f 5f       	subi	r16, 0xFF	; 255
    1016:	03 30       	cpi	r16, 0x03	; 3
    1018:	68 f2       	brcs	.-102    	; 0xfb4 <KEYPAD_getPressedKey+0x12>
    101a:	ca cf       	rjmp	.-108    	; 0xfb0 <KEYPAD_getPressedKey+0xe>
				}
			}
		}
	//	return 0;
	}	
}
    101c:	0f 90       	pop	r0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <LCD_sendCommand>:
}
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(ST_LCD_t lcd,uint8 command){
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	2c 97       	sbiw	r28, 0x0c	; 12
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	8e 2d       	mov	r24, r14
    104a:	fb 82       	std	Y+3, r15	; 0x03
    104c:	0c 83       	std	Y+4, r16	; 0x04
    104e:	61 2f       	mov	r22, r17
    1050:	2e 83       	std	Y+6, r18	; 0x06
    1052:	3f 83       	std	Y+7, r19	; 0x07
    1054:	48 87       	std	Y+8, r20	; 0x08
	uint8 lcd_port_value = 0;
    1056:	19 82       	std	Y+1, r1	; 0x01
	dio_write_pin(lcd.RS_port,lcd.RS_pin,DIO_LOW); /* Instruction Mode RS=0 */
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
	dio_write_pin(lcd.RW_port,lcd.RW_pin,DIO_LOW); /* write data to LCD so RW=0 */
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	6e 81       	ldd	r22, Y+6	; 0x06
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
	
	Timer0_Delay(1);
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	80 e8       	ldi	r24, 0x80	; 128
    106e:	9f e3       	ldi	r25, 0x3F	; 63
    1070:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_HIGH); /* write data to LCD so E=1 */
    1074:	0f 81       	ldd	r16, Y+7	; 0x07
    1076:	1c 81       	ldd	r17, Y+4	; 0x04
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	60 2f       	mov	r22, r16
    107c:	81 2f       	mov	r24, r17
    107e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
	Timer0_Delay(1);
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	80 e8       	ldi	r24, 0x80	; 128
    1088:	9f e3       	ldi	r25, 0x3F	; 63
    108a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	
	dio_read_port(lcd.lcd_data_port,&lcd_port_value);
    108e:	f8 84       	ldd	r15, Y+8	; 0x08
    1090:	be 01       	movw	r22, r28
    1092:	6f 5f       	subi	r22, 0xFF	; 255
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8f 2d       	mov	r24, r15
    1098:	0e 94 1b 0c 	call	0x1836	; 0x1836 <dio_read_port>
	
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
    109c:	69 81       	ldd	r22, Y+1	; 0x01
    109e:	6f 70       	andi	r22, 0x0F	; 15
    10a0:	8c 2d       	mov	r24, r12
    10a2:	80 7f       	andi	r24, 0xF0	; 240
    10a4:	68 2b       	or	r22, r24
    10a6:	69 83       	std	Y+1, r22	; 0x01
	
	// write command
	dio_write_port(lcd.lcd_data_port,lcd_port_value);
    10a8:	8f 2d       	mov	r24, r15
    10aa:	0e 94 39 0c 	call	0x1872	; 0x1872 <dio_write_port>
	Timer0_Delay(1);
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	80 e8       	ldi	r24, 0x80	; 128
    10b4:	9f e3       	ldi	r25, 0x3F	; 63
    10b6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_LOW); /* write data to LCD so E=0 */	
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	60 2f       	mov	r22, r16
    10be:	81 2f       	mov	r24, r17
    10c0:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
	Timer0_Delay(1);
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	80 e8       	ldi	r24, 0x80	; 128
    10ca:	9f e3       	ldi	r25, 0x3F	; 63
    10cc:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_HIGH); /* write data to LCD so E=1 */
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	60 2f       	mov	r22, r16
    10d4:	81 2f       	mov	r24, r17
    10d6:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
	
	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	dio_read_port(lcd.lcd_data_port,&lcd_port_value);
    10da:	be 01       	movw	r22, r28
    10dc:	6f 5f       	subi	r22, 0xFF	; 255
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	8f 2d       	mov	r24, r15
    10e2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <dio_read_port>
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
    10e6:	80 e1       	ldi	r24, 0x10	; 16
    10e8:	c8 9e       	mul	r12, r24
    10ea:	60 01       	movw	r12, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	69 81       	ldd	r22, Y+1	; 0x01
    10f0:	6f 70       	andi	r22, 0x0F	; 15
    10f2:	6c 29       	or	r22, r12
    10f4:	69 83       	std	Y+1, r22	; 0x01
	
	dio_write_port(lcd.lcd_data_port,lcd_port_value);
    10f6:	8f 2d       	mov	r24, r15
    10f8:	0e 94 39 0c 	call	0x1872	; 0x1872 <dio_write_port>
	Timer0_Delay(1);
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	80 e8       	ldi	r24, 0x80	; 128
    1102:	9f e3       	ldi	r25, 0x3F	; 63
    1104:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_LOW); /* write data to LCD so E=0 */
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	60 2f       	mov	r22, r16
    110c:	81 2f       	mov	r24, r17
    110e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
	Timer0_Delay(1);
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	80 e8       	ldi	r24, 0x80	; 128
    1118:	9f e3       	ldi	r25, 0x3F	; 63
    111a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>

}
    111e:	2c 96       	adiw	r28, 0x0c	; 12
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	08 95       	ret

0000113c <LCD_init>:
#include "../../mcal/timer0/timer0.h"
#include "../../utilities/bit_math.h"
#include "../../utilities/types.h"


void LCD_init(ST_LCD_t lcd){
    113c:	cf 92       	push	r12
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	2b 97       	sbiw	r28, 0x0b	; 11
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	e9 82       	std	Y+1, r14	; 0x01
    115c:	fa 82       	std	Y+2, r15	; 0x02
    115e:	0b 83       	std	Y+3, r16	; 0x03
    1160:	1c 83       	std	Y+4, r17	; 0x04
    1162:	2d 83       	std	Y+5, r18	; 0x05
    1164:	3e 83       	std	Y+6, r19	; 0x06
    1166:	4f 83       	std	Y+7, r20	; 0x07
    1168:	58 87       	std	Y+8, r21	; 0x08
    116a:	69 87       	std	Y+9, r22	; 0x09
    116c:	7a 87       	std	Y+10, r23	; 0x0a
    116e:	8b 87       	std	Y+11, r24	; 0x0b
	
	dio_init(lcd.E_port,lcd.E_pin,DIO_OUT);
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	63 2f       	mov	r22, r19
    1174:	80 2f       	mov	r24, r16
    1176:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	dio_init(lcd.RS_port,lcd.RS_pin,DIO_OUT);
    117a:	41 e0       	ldi	r20, 0x01	; 1
    117c:	6c 81       	ldd	r22, Y+4	; 0x04
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	dio_init(lcd.RW_port,lcd.RW_pin,DIO_OUT);
    1184:	41 e0       	ldi	r20, 0x01	; 1
    1186:	6d 81       	ldd	r22, Y+5	; 0x05
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	
	dio_init(lcd.lcd_data_port,lcd.lcd_data1_pin,DIO_OUT);
    118e:	1f 81       	ldd	r17, Y+7	; 0x07
    1190:	41 e0       	ldi	r20, 0x01	; 1
    1192:	68 85       	ldd	r22, Y+8	; 0x08
    1194:	81 2f       	mov	r24, r17
    1196:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	dio_init(lcd.lcd_data_port,lcd.lcd_data2_pin,DIO_OUT);
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	69 85       	ldd	r22, Y+9	; 0x09
    119e:	81 2f       	mov	r24, r17
    11a0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	dio_init(lcd.lcd_data_port,lcd.lcd_data3_pin,DIO_OUT);
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	6a 85       	ldd	r22, Y+10	; 0x0a
    11a8:	81 2f       	mov	r24, r17
    11aa:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	dio_init(lcd.lcd_data_port,lcd.lcd_data4_pin,DIO_OUT);
    11ae:	41 e0       	ldi	r20, 0x01	; 1
    11b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b2:	81 2f       	mov	r24, r17
    11b4:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	
	LCD_sendCommand(lcd,LCD_GO_TO_HOME);
    11b8:	68 94       	set
    11ba:	cc 24       	eor	r12, r12
    11bc:	c1 f8       	bld	r12, 1
    11be:	e9 80       	ldd	r14, Y+1	; 0x01
    11c0:	fa 80       	ldd	r15, Y+2	; 0x02
    11c2:	0b 81       	ldd	r16, Y+3	; 0x03
    11c4:	1c 81       	ldd	r17, Y+4	; 0x04
    11c6:	2d 81       	ldd	r18, Y+5	; 0x05
    11c8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ca:	4f 81       	ldd	r20, Y+7	; 0x07
    11cc:	58 85       	ldd	r21, Y+8	; 0x08
    11ce:	69 85       	ldd	r22, Y+9	; 0x09
    11d0:	7a 85       	ldd	r23, Y+10	; 0x0a
    11d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    11d4:	0e 94 14 08 	call	0x1028	; 0x1028 <LCD_sendCommand>
	LCD_sendCommand(lcd,LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    11d8:	0f 2e       	mov	r0, r31
    11da:	f8 e2       	ldi	r31, 0x28	; 40
    11dc:	cf 2e       	mov	r12, r31
    11de:	f0 2d       	mov	r31, r0
    11e0:	e9 80       	ldd	r14, Y+1	; 0x01
    11e2:	fa 80       	ldd	r15, Y+2	; 0x02
    11e4:	0b 81       	ldd	r16, Y+3	; 0x03
    11e6:	1c 81       	ldd	r17, Y+4	; 0x04
    11e8:	2d 81       	ldd	r18, Y+5	; 0x05
    11ea:	3e 81       	ldd	r19, Y+6	; 0x06
    11ec:	4f 81       	ldd	r20, Y+7	; 0x07
    11ee:	58 85       	ldd	r21, Y+8	; 0x08
    11f0:	69 85       	ldd	r22, Y+9	; 0x09
    11f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    11f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f6:	0e 94 14 08 	call	0x1028	; 0x1028 <LCD_sendCommand>
	
	LCD_sendCommand(lcd,LCD_CURSOR_OFF); /* cursor off */
    11fa:	0f 2e       	mov	r0, r31
    11fc:	fc e0       	ldi	r31, 0x0C	; 12
    11fe:	cf 2e       	mov	r12, r31
    1200:	f0 2d       	mov	r31, r0
    1202:	e9 80       	ldd	r14, Y+1	; 0x01
    1204:	fa 80       	ldd	r15, Y+2	; 0x02
    1206:	0b 81       	ldd	r16, Y+3	; 0x03
    1208:	1c 81       	ldd	r17, Y+4	; 0x04
    120a:	2d 81       	ldd	r18, Y+5	; 0x05
    120c:	3e 81       	ldd	r19, Y+6	; 0x06
    120e:	4f 81       	ldd	r20, Y+7	; 0x07
    1210:	58 85       	ldd	r21, Y+8	; 0x08
    1212:	69 85       	ldd	r22, Y+9	; 0x09
    1214:	7a 85       	ldd	r23, Y+10	; 0x0a
    1216:	8b 85       	ldd	r24, Y+11	; 0x0b
    1218:	0e 94 14 08 	call	0x1028	; 0x1028 <LCD_sendCommand>
	LCD_sendCommand(lcd,LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    121c:	cc 24       	eor	r12, r12
    121e:	c3 94       	inc	r12
    1220:	e9 80       	ldd	r14, Y+1	; 0x01
    1222:	fa 80       	ldd	r15, Y+2	; 0x02
    1224:	0b 81       	ldd	r16, Y+3	; 0x03
    1226:	1c 81       	ldd	r17, Y+4	; 0x04
    1228:	2d 81       	ldd	r18, Y+5	; 0x05
    122a:	3e 81       	ldd	r19, Y+6	; 0x06
    122c:	4f 81       	ldd	r20, Y+7	; 0x07
    122e:	58 85       	ldd	r21, Y+8	; 0x08
    1230:	69 85       	ldd	r22, Y+9	; 0x09
    1232:	7a 85       	ldd	r23, Y+10	; 0x0a
    1234:	8b 85       	ldd	r24, Y+11	; 0x0b
    1236:	0e 94 14 08 	call	0x1028	; 0x1028 <LCD_sendCommand>
}
    123a:	2b 96       	adiw	r28, 0x0b	; 11
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	cf 90       	pop	r12
    1254:	08 95       	ret

00001256 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(ST_LCD_t lcd,uint8 data){
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	2c 97       	sbiw	r28, 0x0c	; 12
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	8e 2d       	mov	r24, r14
    1278:	fb 82       	std	Y+3, r15	; 0x03
    127a:	0c 83       	std	Y+4, r16	; 0x04
    127c:	61 2f       	mov	r22, r17
    127e:	2e 83       	std	Y+6, r18	; 0x06
    1280:	3f 83       	std	Y+7, r19	; 0x07
    1282:	48 87       	std	Y+8, r20	; 0x08
	uint8 lcd_port_value = 0;
    1284:	19 82       	std	Y+1, r1	; 0x01
	dio_write_pin(lcd.RS_port,lcd.RS_pin,DIO_HIGH); /* DATA Mode RS=1 */
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
	dio_write_pin(lcd.RW_port,lcd.RW_pin,DIO_LOW); /* write data to LCD so RW=0 */
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	6e 81       	ldd	r22, Y+6	; 0x06
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>

	Timer0_Delay(1);
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	80 e8       	ldi	r24, 0x80	; 128
    129c:	9f e3       	ldi	r25, 0x3F	; 63
    129e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_HIGH); /* write data to LCD so E=1 */
    12a2:	0f 81       	ldd	r16, Y+7	; 0x07
    12a4:	1c 81       	ldd	r17, Y+4	; 0x04
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	60 2f       	mov	r22, r16
    12aa:	81 2f       	mov	r24, r17
    12ac:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
	Timer0_Delay(1);
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	80 e8       	ldi	r24, 0x80	; 128
    12b6:	9f e3       	ldi	r25, 0x3F	; 63
    12b8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>

	dio_read_port(lcd.lcd_data_port,&lcd_port_value);
    12bc:	f8 84       	ldd	r15, Y+8	; 0x08
    12be:	be 01       	movw	r22, r28
    12c0:	6f 5f       	subi	r22, 0xFF	; 255
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	8f 2d       	mov	r24, r15
    12c6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <dio_read_port>

	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
    12ca:	69 81       	ldd	r22, Y+1	; 0x01
    12cc:	6f 70       	andi	r22, 0x0F	; 15
    12ce:	8c 2d       	mov	r24, r12
    12d0:	80 7f       	andi	r24, 0xF0	; 240
    12d2:	68 2b       	or	r22, r24
    12d4:	69 83       	std	Y+1, r22	; 0x01

	// write command
	dio_write_port(lcd.lcd_data_port,lcd_port_value);
    12d6:	8f 2d       	mov	r24, r15
    12d8:	0e 94 39 0c 	call	0x1872	; 0x1872 <dio_write_port>
	Timer0_Delay(1);
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	80 e8       	ldi	r24, 0x80	; 128
    12e2:	9f e3       	ldi	r25, 0x3F	; 63
    12e4:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_LOW); /* write data to LCD so E=0 */
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	60 2f       	mov	r22, r16
    12ec:	81 2f       	mov	r24, r17
    12ee:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
	Timer0_Delay(1);
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	80 e8       	ldi	r24, 0x80	; 128
    12f8:	9f e3       	ldi	r25, 0x3F	; 63
    12fa:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_HIGH); /* write data to LCD so E=1 */
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	60 2f       	mov	r22, r16
    1302:	81 2f       	mov	r24, r17
    1304:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	dio_read_port(lcd.lcd_data_port,&lcd_port_value);
    1308:	be 01       	movw	r22, r28
    130a:	6f 5f       	subi	r22, 0xFF	; 255
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 2d       	mov	r24, r15
    1310:	0e 94 1b 0c 	call	0x1836	; 0x1836 <dio_read_port>
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
    1314:	80 e1       	ldi	r24, 0x10	; 16
    1316:	c8 9e       	mul	r12, r24
    1318:	60 01       	movw	r12, r0
    131a:	11 24       	eor	r1, r1
    131c:	69 81       	ldd	r22, Y+1	; 0x01
    131e:	6f 70       	andi	r22, 0x0F	; 15
    1320:	6c 29       	or	r22, r12
    1322:	69 83       	std	Y+1, r22	; 0x01

	dio_write_port(lcd.lcd_data_port,lcd_port_value);
    1324:	8f 2d       	mov	r24, r15
    1326:	0e 94 39 0c 	call	0x1872	; 0x1872 <dio_write_port>
	Timer0_Delay(1);
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	80 e8       	ldi	r24, 0x80	; 128
    1330:	9f e3       	ldi	r25, 0x3F	; 63
    1332:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_LOW); /* write data to LCD so E=0 */
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	60 2f       	mov	r22, r16
    133a:	81 2f       	mov	r24, r17
    133c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dio_write_pin>
	Timer0_Delay(1);
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	80 e8       	ldi	r24, 0x80	; 128
    1346:	9f e3       	ldi	r25, 0x3F	; 63
    1348:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Timer0_Delay>
}
    134c:	2c 96       	adiw	r28, 0x0c	; 12
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	08 95       	ret

0000136a <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(ST_LCD_t lcd,const char *Str){
    136a:	af 92       	push	r10
    136c:	bf 92       	push	r11
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	2b 97       	sbiw	r28, 0x0b	; 11
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	e9 82       	std	Y+1, r14	; 0x01
    1390:	fa 82       	std	Y+2, r15	; 0x02
    1392:	0b 83       	std	Y+3, r16	; 0x03
    1394:	1c 83       	std	Y+4, r17	; 0x04
    1396:	2d 83       	std	Y+5, r18	; 0x05
    1398:	3e 83       	std	Y+6, r19	; 0x06
    139a:	4f 83       	std	Y+7, r20	; 0x07
    139c:	58 87       	std	Y+8, r21	; 0x08
    139e:	69 87       	std	Y+9, r22	; 0x09
    13a0:	7a 87       	std	Y+10, r23	; 0x0a
    13a2:	8b 87       	std	Y+11, r24	; 0x0b
    13a4:	56 01       	movw	r10, r12
	uint8 i = 0;
    13a6:	d1 2c       	mov	r13, r1
	while(Str[i] != '\0')
    13a8:	0e c0       	rjmp	.+28     	; 0x13c6 <LCD_displayString+0x5c>
	{
		LCD_displayCharacter(lcd,Str[i]);
    13aa:	e9 80       	ldd	r14, Y+1	; 0x01
    13ac:	fa 80       	ldd	r15, Y+2	; 0x02
    13ae:	0b 81       	ldd	r16, Y+3	; 0x03
    13b0:	1c 81       	ldd	r17, Y+4	; 0x04
    13b2:	2d 81       	ldd	r18, Y+5	; 0x05
    13b4:	3e 81       	ldd	r19, Y+6	; 0x06
    13b6:	4f 81       	ldd	r20, Y+7	; 0x07
    13b8:	58 85       	ldd	r21, Y+8	; 0x08
    13ba:	69 85       	ldd	r22, Y+9	; 0x09
    13bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    13be:	8b 85       	ldd	r24, Y+11	; 0x0b
    13c0:	0e 94 2b 09 	call	0x1256	; 0x1256 <LCD_displayCharacter>
		i++;
    13c4:	d3 94       	inc	r13
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(ST_LCD_t lcd,const char *Str){
	uint8 i = 0;
	while(Str[i] != '\0')
    13c6:	f5 01       	movw	r30, r10
    13c8:	ed 0d       	add	r30, r13
    13ca:	f1 1d       	adc	r31, r1
    13cc:	c0 80       	ld	r12, Z
    13ce:	c1 10       	cpse	r12, r1
    13d0:	ec cf       	rjmp	.-40     	; 0x13aa <LCD_displayString+0x40>
	{
		LCD_displayCharacter(lcd,Str[i]);
		i++;
	}
}
    13d2:	2b 96       	adiw	r28, 0x0b	; 11
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	bf 90       	pop	r11
    13f0:	af 90       	pop	r10
    13f2:	08 95       	ret

000013f4 <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(ST_LCD_t lcd,uint8 row,uint8 col){
    13f4:	af 92       	push	r10
    13f6:	cf 92       	push	r12
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	2b 97       	sbiw	r28, 0x0b	; 11
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	e9 82       	std	Y+1, r14	; 0x01
    1416:	fa 82       	std	Y+2, r15	; 0x02
    1418:	0b 83       	std	Y+3, r16	; 0x03
    141a:	1c 83       	std	Y+4, r17	; 0x04
    141c:	2d 83       	std	Y+5, r18	; 0x05
    141e:	3e 83       	std	Y+6, r19	; 0x06
    1420:	4f 83       	std	Y+7, r20	; 0x07
    1422:	58 87       	std	Y+8, r21	; 0x08
    1424:	69 87       	std	Y+9, r22	; 0x09
    1426:	7a 87       	std	Y+10, r23	; 0x0a
    1428:	8b 87       	std	Y+11, r24	; 0x0b
    142a:	9c 2d       	mov	r25, r12
    142c:	8a 2d       	mov	r24, r10
	uint8 lcd_memory_address = 0;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    142e:	91 30       	cpi	r25, 0x01	; 1
    1430:	39 f0       	breq	.+14     	; 0x1440 <LCD_moveCursor+0x4c>
    1432:	58 f0       	brcs	.+22     	; 0x144a <LCD_moveCursor+0x56>
    1434:	92 30       	cpi	r25, 0x02	; 2
    1436:	31 f0       	breq	.+12     	; 0x1444 <LCD_moveCursor+0x50>
    1438:	93 30       	cpi	r25, 0x03	; 3
    143a:	31 f0       	breq	.+12     	; 0x1448 <LCD_moveCursor+0x54>
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(ST_LCD_t lcd,uint8 row,uint8 col){
	uint8 lcd_memory_address = 0;
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	05 c0       	rjmp	.+10     	; 0x144a <LCD_moveCursor+0x56>
	{
		case 0:
		lcd_memory_address=col;
		break;
		case 1:
		lcd_memory_address=col+0x40;
    1440:	80 5c       	subi	r24, 0xC0	; 192
		break;
    1442:	03 c0       	rjmp	.+6      	; 0x144a <LCD_moveCursor+0x56>
		case 2:
		lcd_memory_address=col+0x10;
    1444:	80 5f       	subi	r24, 0xF0	; 240
		break;
    1446:	01 c0       	rjmp	.+2      	; 0x144a <LCD_moveCursor+0x56>
		case 3:
		lcd_memory_address=col+0x50;
    1448:	80 5b       	subi	r24, 0xB0	; 176
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd,lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    144a:	80 68       	ori	r24, 0x80	; 128
    144c:	c8 2e       	mov	r12, r24
    144e:	e9 80       	ldd	r14, Y+1	; 0x01
    1450:	fa 80       	ldd	r15, Y+2	; 0x02
    1452:	0b 81       	ldd	r16, Y+3	; 0x03
    1454:	1c 81       	ldd	r17, Y+4	; 0x04
    1456:	2d 81       	ldd	r18, Y+5	; 0x05
    1458:	3e 81       	ldd	r19, Y+6	; 0x06
    145a:	4f 81       	ldd	r20, Y+7	; 0x07
    145c:	58 85       	ldd	r21, Y+8	; 0x08
    145e:	69 85       	ldd	r22, Y+9	; 0x09
    1460:	7a 85       	ldd	r23, Y+10	; 0x0a
    1462:	8b 85       	ldd	r24, Y+11	; 0x0b
    1464:	0e 94 14 08 	call	0x1028	; 0x1028 <LCD_sendCommand>
}
    1468:	2b 96       	adiw	r28, 0x0b	; 11
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	ff 90       	pop	r15
    147e:	ef 90       	pop	r14
    1480:	cf 90       	pop	r12
    1482:	af 90       	pop	r10
    1484:	08 95       	ret

00001486 <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(ST_LCD_t lcd,uint8 row,uint8 col,const char *Str){
    1486:	5f 92       	push	r5
    1488:	6f 92       	push	r6
    148a:	7f 92       	push	r7
    148c:	8f 92       	push	r8
    148e:	9f 92       	push	r9
    1490:	af 92       	push	r10
    1492:	bf 92       	push	r11
    1494:	cf 92       	push	r12
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	2b 97       	sbiw	r28, 0x0b	; 11
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	e9 82       	std	Y+1, r14	; 0x01
    14b6:	fa 82       	std	Y+2, r15	; 0x02
    14b8:	0b 83       	std	Y+3, r16	; 0x03
    14ba:	1c 83       	std	Y+4, r17	; 0x04
    14bc:	2d 83       	std	Y+5, r18	; 0x05
    14be:	3e 83       	std	Y+6, r19	; 0x06
    14c0:	4f 83       	std	Y+7, r20	; 0x07
    14c2:	58 87       	std	Y+8, r21	; 0x08
    14c4:	69 87       	std	Y+9, r22	; 0x09
    14c6:	7a 87       	std	Y+10, r23	; 0x0a
    14c8:	8b 87       	std	Y+11, r24	; 0x0b
	LCD_moveCursor(lcd,row,col); /* go to to the required LCD position */
    14ca:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <LCD_moveCursor>
	LCD_displayString(lcd,Str); /* display the string */
    14ce:	64 01       	movw	r12, r8
    14d0:	e9 80       	ldd	r14, Y+1	; 0x01
    14d2:	fa 80       	ldd	r15, Y+2	; 0x02
    14d4:	0b 81       	ldd	r16, Y+3	; 0x03
    14d6:	1c 81       	ldd	r17, Y+4	; 0x04
    14d8:	2d 81       	ldd	r18, Y+5	; 0x05
    14da:	3e 81       	ldd	r19, Y+6	; 0x06
    14dc:	4f 81       	ldd	r20, Y+7	; 0x07
    14de:	58 85       	ldd	r21, Y+8	; 0x08
    14e0:	69 85       	ldd	r22, Y+9	; 0x09
    14e2:	7a 85       	ldd	r23, Y+10	; 0x0a
    14e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14e6:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_displayString>
}
    14ea:	2b 96       	adiw	r28, 0x0b	; 11
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	cf 90       	pop	r12
    1506:	bf 90       	pop	r11
    1508:	af 90       	pop	r10
    150a:	9f 90       	pop	r9
    150c:	8f 90       	pop	r8
    150e:	7f 90       	pop	r7
    1510:	6f 90       	pop	r6
    1512:	5f 90       	pop	r5
    1514:	08 95       	ret

00001516 <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(ST_LCD_t lcd,int data){
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	6b 97       	sbiw	r28, 0x1b	; 27
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	e9 8a       	std	Y+17, r14	; 0x11
    1538:	fa 8a       	std	Y+18, r15	; 0x12
    153a:	0b 8b       	std	Y+19, r16	; 0x13
    153c:	1c 8b       	std	Y+20, r17	; 0x14
    153e:	2d 8b       	std	Y+21, r18	; 0x15
    1540:	3e 8b       	std	Y+22, r19	; 0x16
    1542:	4f 8b       	std	Y+23, r20	; 0x17
    1544:	58 8f       	std	Y+24, r21	; 0x18
    1546:	69 8f       	std	Y+25, r22	; 0x19
    1548:	7a 8f       	std	Y+26, r23	; 0x1a
    154a:	8b 8f       	std	Y+27, r24	; 0x1b
    154c:	c6 01       	movw	r24, r12
	  char buff[16]; /* String to hold the ascii result */
	  itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    154e:	4a e0       	ldi	r20, 0x0A	; 10
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	be 01       	movw	r22, r28
    1554:	6f 5f       	subi	r22, 0xFF	; 255
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	0e 94 60 11 	call	0x22c0	; 0x22c0 <itoa>
	  LCD_displayString(lcd,buff); /* Display the string */
    155c:	ce 01       	movw	r24, r28
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	6c 01       	movw	r12, r24
    1562:	e9 88       	ldd	r14, Y+17	; 0x11
    1564:	fa 88       	ldd	r15, Y+18	; 0x12
    1566:	0b 89       	ldd	r16, Y+19	; 0x13
    1568:	1c 89       	ldd	r17, Y+20	; 0x14
    156a:	2d 89       	ldd	r18, Y+21	; 0x15
    156c:	3e 89       	ldd	r19, Y+22	; 0x16
    156e:	4f 89       	ldd	r20, Y+23	; 0x17
    1570:	58 8d       	ldd	r21, Y+24	; 0x18
    1572:	69 8d       	ldd	r22, Y+25	; 0x19
    1574:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1576:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1578:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_displayString>
}
    157c:	6b 96       	adiw	r28, 0x1b	; 27
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	08 95       	ret

0000159a <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(ST_LCD_t lcd){
    159a:	cf 92       	push	r12
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	2b 97       	sbiw	r28, 0x0b	; 11
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(lcd,LCD_CLEAR_COMMAND); /* Send clear display command */
    15b8:	cc 24       	eor	r12, r12
    15ba:	c3 94       	inc	r12
    15bc:	0e 94 14 08 	call	0x1028	; 0x1028 <LCD_sendCommand>
}
    15c0:	2b 96       	adiw	r28, 0x0b	; 11
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	cf 90       	pop	r12
    15da:	08 95       	ret

000015dc <main>:

#include "Application/application.h"

int main(void)
{
	appInit();
    15dc:	0e 94 3f 01 	call	0x27e	; 0x27e <appInit>
	while (1) 
    {
		appStart();
    15e0:	0e 94 ca 03 	call	0x794	; 0x794 <appStart>
    15e4:	fd cf       	rjmp	.-6      	; 0x15e0 <main+0x4>

000015e6 <dio_init>:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;

}
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	11 f1       	breq	.+68     	; 0x162e <dio_init+0x48>
    15ea:	30 f0       	brcs	.+12     	; 0x15f8 <dio_init+0x12>
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	d1 f1       	breq	.+116    	; 0x1664 <dio_init+0x7e>
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <dio_init+0x10>
    15f4:	52 c0       	rjmp	.+164    	; 0x169a <dio_init+0xb4>
    15f6:	6c c0       	rjmp	.+216    	; 0x16d0 <dio_init+0xea>
    15f8:	41 11       	cpse	r20, r1
    15fa:	0d c0       	rjmp	.+26     	; 0x1616 <dio_init+0x30>
    15fc:	2a b3       	in	r18, 0x1a	; 26
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <dio_init+0x22>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	6a 95       	dec	r22
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <dio_init+0x1e>
    160c:	80 95       	com	r24
    160e:	82 23       	and	r24, r18
    1610:	8a bb       	out	0x1a, r24	; 26
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	08 95       	ret
    1616:	2a b3       	in	r18, 0x1a	; 26
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <dio_init+0x3c>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	6a 95       	dec	r22
    1624:	e2 f7       	brpl	.-8      	; 0x161e <dio_init+0x38>
    1626:	82 2b       	or	r24, r18
    1628:	8a bb       	out	0x1a, r24	; 26
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	08 95       	ret
    162e:	41 11       	cpse	r20, r1
    1630:	0d c0       	rjmp	.+26     	; 0x164c <dio_init+0x66>
    1632:	27 b3       	in	r18, 0x17	; 23
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 c0       	rjmp	.+4      	; 0x163e <dio_init+0x58>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	6a 95       	dec	r22
    1640:	e2 f7       	brpl	.-8      	; 0x163a <dio_init+0x54>
    1642:	80 95       	com	r24
    1644:	82 23       	and	r24, r18
    1646:	87 bb       	out	0x17, r24	; 23
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	08 95       	ret
    164c:	27 b3       	in	r18, 0x17	; 23
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <dio_init+0x72>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	6a 95       	dec	r22
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <dio_init+0x6e>
    165c:	82 2b       	or	r24, r18
    165e:	87 bb       	out	0x17, r24	; 23
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	08 95       	ret
    1664:	41 11       	cpse	r20, r1
    1666:	0d c0       	rjmp	.+26     	; 0x1682 <dio_init+0x9c>
    1668:	24 b3       	in	r18, 0x14	; 20
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <dio_init+0x8e>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	6a 95       	dec	r22
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <dio_init+0x8a>
    1678:	80 95       	com	r24
    167a:	82 23       	and	r24, r18
    167c:	84 bb       	out	0x14, r24	; 20
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	08 95       	ret
    1682:	24 b3       	in	r18, 0x14	; 20
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 c0       	rjmp	.+4      	; 0x168e <dio_init+0xa8>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	6a 95       	dec	r22
    1690:	e2 f7       	brpl	.-8      	; 0x168a <dio_init+0xa4>
    1692:	82 2b       	or	r24, r18
    1694:	84 bb       	out	0x14, r24	; 20
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	08 95       	ret
    169a:	41 11       	cpse	r20, r1
    169c:	0d c0       	rjmp	.+26     	; 0x16b8 <dio_init+0xd2>
    169e:	21 b3       	in	r18, 0x11	; 17
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <dio_init+0xc4>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	6a 95       	dec	r22
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <dio_init+0xc0>
    16ae:	80 95       	com	r24
    16b0:	82 23       	and	r24, r18
    16b2:	81 bb       	out	0x11, r24	; 17
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	08 95       	ret
    16b8:	21 b3       	in	r18, 0x11	; 17
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <dio_init+0xde>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	6a 95       	dec	r22
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <dio_init+0xda>
    16c8:	82 2b       	or	r24, r18
    16ca:	81 bb       	out	0x11, r24	; 17
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	08 95       	ret
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	08 95       	ret

000016d4 <dio_write_pin>:
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	11 f1       	breq	.+68     	; 0x171c <dio_write_pin+0x48>
    16d8:	30 f0       	brcs	.+12     	; 0x16e6 <dio_write_pin+0x12>
    16da:	82 30       	cpi	r24, 0x02	; 2
    16dc:	d1 f1       	breq	.+116    	; 0x1752 <dio_write_pin+0x7e>
    16de:	83 30       	cpi	r24, 0x03	; 3
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <dio_write_pin+0x10>
    16e2:	52 c0       	rjmp	.+164    	; 0x1788 <dio_write_pin+0xb4>
    16e4:	6c c0       	rjmp	.+216    	; 0x17be <dio_write_pin+0xea>
    16e6:	41 11       	cpse	r20, r1
    16e8:	0d c0       	rjmp	.+26     	; 0x1704 <dio_write_pin+0x30>
    16ea:	2b b3       	in	r18, 0x1b	; 27
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <dio_write_pin+0x22>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	6a 95       	dec	r22
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <dio_write_pin+0x1e>
    16fa:	80 95       	com	r24
    16fc:	82 23       	and	r24, r18
    16fe:	8b bb       	out	0x1b, r24	; 27
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	08 95       	ret
    1704:	2b b3       	in	r18, 0x1b	; 27
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <dio_write_pin+0x3c>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	6a 95       	dec	r22
    1712:	e2 f7       	brpl	.-8      	; 0x170c <dio_write_pin+0x38>
    1714:	82 2b       	or	r24, r18
    1716:	8b bb       	out	0x1b, r24	; 27
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	08 95       	ret
    171c:	41 11       	cpse	r20, r1
    171e:	0d c0       	rjmp	.+26     	; 0x173a <dio_write_pin+0x66>
    1720:	28 b3       	in	r18, 0x18	; 24
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <dio_write_pin+0x58>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	6a 95       	dec	r22
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <dio_write_pin+0x54>
    1730:	80 95       	com	r24
    1732:	82 23       	and	r24, r18
    1734:	88 bb       	out	0x18, r24	; 24
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	08 95       	ret
    173a:	28 b3       	in	r18, 0x18	; 24
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <dio_write_pin+0x72>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	6a 95       	dec	r22
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <dio_write_pin+0x6e>
    174a:	82 2b       	or	r24, r18
    174c:	88 bb       	out	0x18, r24	; 24
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	08 95       	ret
    1752:	41 11       	cpse	r20, r1
    1754:	0d c0       	rjmp	.+26     	; 0x1770 <dio_write_pin+0x9c>
    1756:	25 b3       	in	r18, 0x15	; 21
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <dio_write_pin+0x8e>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	6a 95       	dec	r22
    1764:	e2 f7       	brpl	.-8      	; 0x175e <dio_write_pin+0x8a>
    1766:	80 95       	com	r24
    1768:	82 23       	and	r24, r18
    176a:	85 bb       	out	0x15, r24	; 21
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	08 95       	ret
    1770:	25 b3       	in	r18, 0x15	; 21
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 c0       	rjmp	.+4      	; 0x177c <dio_write_pin+0xa8>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	6a 95       	dec	r22
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <dio_write_pin+0xa4>
    1780:	82 2b       	or	r24, r18
    1782:	85 bb       	out	0x15, r24	; 21
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	08 95       	ret
    1788:	41 11       	cpse	r20, r1
    178a:	0d c0       	rjmp	.+26     	; 0x17a6 <dio_write_pin+0xd2>
    178c:	22 b3       	in	r18, 0x12	; 18
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <dio_write_pin+0xc4>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	6a 95       	dec	r22
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <dio_write_pin+0xc0>
    179c:	80 95       	com	r24
    179e:	82 23       	and	r24, r18
    17a0:	82 bb       	out	0x12, r24	; 18
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	08 95       	ret
    17a6:	22 b3       	in	r18, 0x12	; 18
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <dio_write_pin+0xde>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	6a 95       	dec	r22
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <dio_write_pin+0xda>
    17b6:	82 2b       	or	r24, r18
    17b8:	82 bb       	out	0x12, r24	; 18
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	08 95       	ret
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	08 95       	ret

000017c2 <dio_read_pin>:

EN_DIO_ERROR_t dio_read_pin(uint8 port, uint8 pin,uint8 *data)
{
    switch(port){
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	91 f0       	breq	.+36     	; 0x17ea <dio_read_pin+0x28>
    17c6:	28 f0       	brcs	.+10     	; 0x17d2 <dio_read_pin+0x10>
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	d9 f0       	breq	.+54     	; 0x1802 <dio_read_pin+0x40>
    17cc:	83 30       	cpi	r24, 0x03	; 3
    17ce:	29 f1       	breq	.+74     	; 0x181a <dio_read_pin+0x58>
    17d0:	30 c0       	rjmp	.+96     	; 0x1832 <dio_read_pin+0x70>
        case PORT_A:
            *data = READ_BIT(PINA,pin);
    17d2:	89 b3       	in	r24, 0x19	; 25
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <dio_read_pin+0x1a>
    17d8:	95 95       	asr	r25
    17da:	87 95       	ror	r24
    17dc:	6a 95       	dec	r22
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <dio_read_pin+0x16>
    17e0:	81 70       	andi	r24, 0x01	; 1
    17e2:	fa 01       	movw	r30, r20
    17e4:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_read_pin(uint8 port, uint8 pin,uint8 *data)
{
    switch(port){
        case PORT_A:
            *data = READ_BIT(PINA,pin);
            break;
    17e8:	08 95       	ret
        case PORT_B:
            *data =READ_BIT(PINB,pin);
    17ea:	86 b3       	in	r24, 0x16	; 22
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <dio_read_pin+0x32>
    17f0:	95 95       	asr	r25
    17f2:	87 95       	ror	r24
    17f4:	6a 95       	dec	r22
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <dio_read_pin+0x2e>
    17f8:	81 70       	andi	r24, 0x01	; 1
    17fa:	fa 01       	movw	r30, r20
    17fc:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_A:
            *data = READ_BIT(PINA,pin);
            break;
        case PORT_B:
            *data =READ_BIT(PINB,pin);
            break;
    1800:	08 95       	ret
        case PORT_C:
            *data =READ_BIT(PINC,pin);
    1802:	83 b3       	in	r24, 0x13	; 19
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 c0       	rjmp	.+4      	; 0x180c <dio_read_pin+0x4a>
    1808:	95 95       	asr	r25
    180a:	87 95       	ror	r24
    180c:	6a 95       	dec	r22
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <dio_read_pin+0x46>
    1810:	81 70       	andi	r24, 0x01	; 1
    1812:	fa 01       	movw	r30, r20
    1814:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    1816:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_B:
            *data =READ_BIT(PINB,pin);
            break;
        case PORT_C:
            *data =READ_BIT(PINC,pin);
            break;
    1818:	08 95       	ret
        case PORT_D:
            *data =READ_BIT(PIND,pin);
    181a:	80 b3       	in	r24, 0x10	; 16
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <dio_read_pin+0x62>
    1820:	95 95       	asr	r25
    1822:	87 95       	ror	r24
    1824:	6a 95       	dec	r22
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <dio_read_pin+0x5e>
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	fa 01       	movw	r30, r20
    182c:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    182e:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_C:
            *data =READ_BIT(PINC,pin);
            break;
        case PORT_D:
            *data =READ_BIT(PIND,pin);
            break;
    1830:	08 95       	ret
        default:
            return DIO_FAIL;
    1832:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }
    return DIO_SUCCESS;
}
    1834:	08 95       	ret

00001836 <dio_read_port>:

EN_DIO_ERROR_t dio_read_port(uint8 port,uint8 *data)
{
	switch(port){
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	59 f0       	breq	.+22     	; 0x1850 <dio_read_port+0x1a>
    183a:	28 f0       	brcs	.+10     	; 0x1846 <dio_read_port+0x10>
    183c:	82 30       	cpi	r24, 0x02	; 2
    183e:	69 f0       	breq	.+26     	; 0x185a <dio_read_port+0x24>
    1840:	83 30       	cpi	r24, 0x03	; 3
    1842:	81 f0       	breq	.+32     	; 0x1864 <dio_read_port+0x2e>
    1844:	14 c0       	rjmp	.+40     	; 0x186e <dio_read_port+0x38>
		case PORT_A:
		*data = PINA;
    1846:	89 b3       	in	r24, 0x19	; 25
    1848:	fb 01       	movw	r30, r22
    184a:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    184c:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_read_port(uint8 port,uint8 *data)
{
	switch(port){
		case PORT_A:
		*data = PINA;
		break;
    184e:	08 95       	ret
		case PORT_B:
		*data =PINB;
    1850:	86 b3       	in	r24, 0x16	; 22
    1852:	fb 01       	movw	r30, r22
    1854:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    1856:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*data = PINA;
		break;
		case PORT_B:
		*data =PINB;
		break;
    1858:	08 95       	ret
		case PORT_C:
		*data =PINC;
    185a:	83 b3       	in	r24, 0x13	; 19
    185c:	fb 01       	movw	r30, r22
    185e:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    1860:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*data =PINB;
		break;
		case PORT_C:
		*data =PINC;
		break;
    1862:	08 95       	ret
		case PORT_D:
		*data =PIND;
    1864:	80 b3       	in	r24, 0x10	; 16
    1866:	fb 01       	movw	r30, r22
    1868:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    186a:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*data =PINC;
		break;
		case PORT_D:
		*data =PIND;
		break;
    186c:	08 95       	ret
		default:
		return DIO_FAIL;
    186e:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_SUCCESS;
}
    1870:	08 95       	ret

00001872 <dio_write_port>:


EN_DIO_ERROR_t dio_write_port(uint8 port,uint8 value)
{
	switch(port){
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	49 f0       	breq	.+18     	; 0x1888 <dio_write_port+0x16>
    1876:	28 f0       	brcs	.+10     	; 0x1882 <dio_write_port+0x10>
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	49 f0       	breq	.+18     	; 0x188e <dio_write_port+0x1c>
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	51 f0       	breq	.+20     	; 0x1894 <dio_write_port+0x22>
    1880:	0c c0       	rjmp	.+24     	; 0x189a <dio_write_port+0x28>
		case PORT_A:
		PORTA = value;
    1882:	6b bb       	out	0x1b, r22	; 27
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    1884:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_write_port(uint8 port,uint8 value)
{
	switch(port){
		case PORT_A:
		PORTA = value;
		break;
    1886:	08 95       	ret
		case PORT_B:
		PORTB = value;
    1888:	68 bb       	out	0x18, r22	; 24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    188a:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		PORTA = value;
		break;
		case PORT_B:
		PORTB = value;
		break;
    188c:	08 95       	ret
		case PORT_C:
		PORTC = value;
    188e:	65 bb       	out	0x15, r22	; 21
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    1890:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		PORTB = value;
		break;
		case PORT_C:
		PORTC = value;
		break;
    1892:	08 95       	ret
		case PORT_D:
		PORTD = value;
    1894:	62 bb       	out	0x12, r22	; 18
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    1896:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		PORTC = value;
		break;
		case PORT_D:
		PORTD = value;
		break;
    1898:	08 95       	ret
		default:
		return DIO_FAIL;
    189a:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_SUCCESS;
    189c:	08 95       	ret

0000189e <SPI_initSlave>:
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	dio_init(PORT_B,PINB4,DIO_IN);
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	64 e0       	ldi	r22, 0x04	; 4
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	dio_init(PORT_B,PINB5,DIO_IN);
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	65 e0       	ldi	r22, 0x05	; 5
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	dio_init(PORT_B,PINB6,DIO_OUT);
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	66 e0       	ldi	r22, 0x06	; 6
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	dio_init(PORT_B,PINB7,DIO_IN);
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	67 e0       	ldi	r22, 0x07	; 7
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <dio_init>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    18c6:	80 e4       	ldi	r24, 0x40	; 64
    18c8:	8d b9       	out	0x0d, r24	; 13

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    18ca:	8e b1       	in	r24, 0x0e	; 14
    18cc:	8e 7f       	andi	r24, 0xFE	; 254
    18ce:	8e b9       	out	0x0e, r24	; 14
    18d0:	08 95       	ret

000018d2 <calc_prescaler>:
		init_value=0;
	}
	TCNT0=init_value;
	g_callBackPtr_0=g_ptr;
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
}
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	6b 01       	movw	r12, r22
    18e0:	7c 01       	movw	r14, r24
    18e2:	ea 01       	movw	r28, r20
    18e4:	2c ee       	ldi	r18, 0xEC	; 236
    18e6:	31 e1       	ldi	r19, 0x11	; 17
    18e8:	43 e8       	ldi	r20, 0x83	; 131
    18ea:	53 e4       	ldi	r21, 0x43	; 67
    18ec:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	0c f4       	brge	.+2      	; 0x18f6 <calc_prescaler+0x24>
    18f4:	53 c0       	rjmp	.+166    	; 0x199c <calc_prescaler+0xca>
    18f6:	28 eb       	ldi	r18, 0xB8	; 184
    18f8:	3e e1       	ldi	r19, 0x1E	; 30
    18fa:	45 e8       	ldi	r20, 0x85	; 133
    18fc:	5e e3       	ldi	r21, 0x3E	; 62
    18fe:	c7 01       	movw	r24, r14
    1900:	b6 01       	movw	r22, r12
    1902:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    1906:	18 16       	cp	r1, r24
    1908:	2c f0       	brlt	.+10     	; 0x1914 <calc_prescaler+0x42>
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	99 83       	std	Y+1, r25	; 0x01
    1910:	88 83       	st	Y, r24
    1912:	45 c0       	rjmp	.+138    	; 0x199e <calc_prescaler+0xcc>
    1914:	23 e3       	ldi	r18, 0x33	; 51
    1916:	33 e3       	ldi	r19, 0x33	; 51
    1918:	43 e0       	ldi	r20, 0x03	; 3
    191a:	50 e4       	ldi	r21, 0x40	; 64
    191c:	c7 01       	movw	r24, r14
    191e:	b6 01       	movw	r22, r12
    1920:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    1924:	18 16       	cp	r1, r24
    1926:	34 f0       	brlt	.+12     	; 0x1934 <calc_prescaler+0x62>
    1928:	88 e0       	ldi	r24, 0x08	; 8
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	99 83       	std	Y+1, r25	; 0x01
    192e:	88 83       	st	Y, r24
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	35 c0       	rjmp	.+106    	; 0x199e <calc_prescaler+0xcc>
    1934:	2d e3       	ldi	r18, 0x3D	; 61
    1936:	3a e0       	ldi	r19, 0x0A	; 10
    1938:	43 e8       	ldi	r20, 0x83	; 131
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	c7 01       	movw	r24, r14
    193e:	b6 01       	movw	r22, r12
    1940:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    1944:	18 16       	cp	r1, r24
    1946:	34 f0       	brlt	.+12     	; 0x1954 <calc_prescaler+0x82>
    1948:	80 e4       	ldi	r24, 0x40	; 64
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	99 83       	std	Y+1, r25	; 0x01
    194e:	88 83       	st	Y, r24
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	25 c0       	rjmp	.+74     	; 0x199e <calc_prescaler+0xcc>
    1954:	2b e7       	ldi	r18, 0x7B	; 123
    1956:	34 e1       	ldi	r19, 0x14	; 20
    1958:	43 e8       	ldi	r20, 0x83	; 131
    195a:	52 e4       	ldi	r21, 0x42	; 66
    195c:	c7 01       	movw	r24, r14
    195e:	b6 01       	movw	r22, r12
    1960:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    1964:	18 16       	cp	r1, r24
    1966:	34 f0       	brlt	.+12     	; 0x1974 <calc_prescaler+0xa2>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	99 83       	std	Y+1, r25	; 0x01
    196e:	88 83       	st	Y, r24
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	15 c0       	rjmp	.+42     	; 0x199e <calc_prescaler+0xcc>
    1974:	2c ee       	ldi	r18, 0xEC	; 236
    1976:	31 e1       	ldi	r19, 0x11	; 17
    1978:	43 e8       	ldi	r20, 0x83	; 131
    197a:	53 e4       	ldi	r21, 0x43	; 67
    197c:	c7 01       	movw	r24, r14
    197e:	b6 01       	movw	r22, r12
    1980:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    1984:	18 16       	cp	r1, r24
    1986:	34 f0       	brlt	.+12     	; 0x1994 <calc_prescaler+0xc2>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	94 e0       	ldi	r25, 0x04	; 4
    198c:	99 83       	std	Y+1, r25	; 0x01
    198e:	88 83       	st	Y, r24
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	05 c0       	rjmp	.+10     	; 0x199e <calc_prescaler+0xcc>
    1994:	19 82       	std	Y+1, r1	; 0x01
    1996:	18 82       	st	Y, r1
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	01 c0       	rjmp	.+2      	; 0x199e <calc_prescaler+0xcc>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	ff 90       	pop	r15
    19a4:	ef 90       	pop	r14
    19a6:	df 90       	pop	r13
    19a8:	cf 90       	pop	r12
    19aa:	08 95       	ret

000019ac <calc_initialValue>:
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	eb 01       	movw	r28, r22
    19b2:	80 34       	cpi	r24, 0x40	; 64
    19b4:	91 05       	cpc	r25, r1
    19b6:	81 f1       	breq	.+96     	; 0x1a18 <calc_initialValue+0x6c>
    19b8:	30 f4       	brcc	.+12     	; 0x19c6 <calc_initialValue+0x1a>
    19ba:	81 30       	cpi	r24, 0x01	; 1
    19bc:	91 05       	cpc	r25, r1
    19be:	61 f0       	breq	.+24     	; 0x19d8 <calc_initialValue+0x2c>
    19c0:	08 97       	sbiw	r24, 0x08	; 8
    19c2:	d1 f0       	breq	.+52     	; 0x19f8 <calc_initialValue+0x4c>
    19c4:	59 c0       	rjmp	.+178    	; 0x1a78 <calc_initialValue+0xcc>
    19c6:	81 15       	cp	r24, r1
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	96 07       	cpc	r25, r22
    19cc:	a9 f1       	breq	.+106    	; 0x1a38 <calc_initialValue+0x8c>
    19ce:	81 15       	cp	r24, r1
    19d0:	94 40       	sbci	r25, 0x04	; 4
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <calc_initialValue+0x2a>
    19d4:	41 c0       	rjmp	.+130    	; 0x1a58 <calc_initialValue+0xac>
    19d6:	50 c0       	rjmp	.+160    	; 0x1a78 <calc_initialValue+0xcc>
    19d8:	68 eb       	ldi	r22, 0xB8	; 184
    19da:	7e e1       	ldi	r23, 0x1E	; 30
    19dc:	85 e8       	ldi	r24, 0x85	; 133
    19de:	9e e3       	ldi	r25, 0x3E	; 62
    19e0:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    19e4:	2f e6       	ldi	r18, 0x6F	; 111
    19e6:	32 e1       	ldi	r19, 0x12	; 18
    19e8:	43 e8       	ldi	r20, 0x83	; 131
    19ea:	5a e3       	ldi	r21, 0x3A	; 58
    19ec:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    19f0:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    19f4:	68 83       	st	Y, r22
    19f6:	41 c0       	rjmp	.+130    	; 0x1a7a <calc_initialValue+0xce>
    19f8:	63 e3       	ldi	r22, 0x33	; 51
    19fa:	73 e3       	ldi	r23, 0x33	; 51
    19fc:	83 e0       	ldi	r24, 0x03	; 3
    19fe:	90 e4       	ldi	r25, 0x40	; 64
    1a00:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    1a04:	2f e6       	ldi	r18, 0x6F	; 111
    1a06:	32 e1       	ldi	r19, 0x12	; 18
    1a08:	43 e0       	ldi	r20, 0x03	; 3
    1a0a:	5c e3       	ldi	r21, 0x3C	; 60
    1a0c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    1a10:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1a14:	68 83       	st	Y, r22
    1a16:	31 c0       	rjmp	.+98     	; 0x1a7a <calc_initialValue+0xce>
    1a18:	6d e3       	ldi	r22, 0x3D	; 61
    1a1a:	7a e0       	ldi	r23, 0x0A	; 10
    1a1c:	83 e8       	ldi	r24, 0x83	; 131
    1a1e:	91 e4       	ldi	r25, 0x41	; 65
    1a20:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    1a24:	2f e6       	ldi	r18, 0x6F	; 111
    1a26:	32 e1       	ldi	r19, 0x12	; 18
    1a28:	43 e8       	ldi	r20, 0x83	; 131
    1a2a:	5d e3       	ldi	r21, 0x3D	; 61
    1a2c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    1a30:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1a34:	68 83       	st	Y, r22
    1a36:	21 c0       	rjmp	.+66     	; 0x1a7a <calc_initialValue+0xce>
    1a38:	6b e7       	ldi	r22, 0x7B	; 123
    1a3a:	74 e1       	ldi	r23, 0x14	; 20
    1a3c:	83 e8       	ldi	r24, 0x83	; 131
    1a3e:	92 e4       	ldi	r25, 0x42	; 66
    1a40:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    1a44:	2f e6       	ldi	r18, 0x6F	; 111
    1a46:	32 e1       	ldi	r19, 0x12	; 18
    1a48:	43 e8       	ldi	r20, 0x83	; 131
    1a4a:	5e e3       	ldi	r21, 0x3E	; 62
    1a4c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    1a50:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1a54:	68 83       	st	Y, r22
    1a56:	11 c0       	rjmp	.+34     	; 0x1a7a <calc_initialValue+0xce>
    1a58:	6c ee       	ldi	r22, 0xEC	; 236
    1a5a:	71 e1       	ldi	r23, 0x11	; 17
    1a5c:	83 e8       	ldi	r24, 0x83	; 131
    1a5e:	93 e4       	ldi	r25, 0x43	; 67
    1a60:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    1a64:	2f e6       	ldi	r18, 0x6F	; 111
    1a66:	32 e1       	ldi	r19, 0x12	; 18
    1a68:	43 e8       	ldi	r20, 0x83	; 131
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    1a70:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1a74:	68 83       	st	Y, r22
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <calc_initialValue+0xce>
    1a78:	18 82       	st	Y, r1
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	08 95       	ret

00001a80 <set_prescale>:
    1a80:	80 34       	cpi	r24, 0x40	; 64
    1a82:	91 05       	cpc	r25, r1
    1a84:	a9 f0       	breq	.+42     	; 0x1ab0 <set_prescale+0x30>
    1a86:	30 f4       	brcc	.+12     	; 0x1a94 <set_prescale+0x14>
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	59 f0       	breq	.+22     	; 0x1aa4 <set_prescale+0x24>
    1a8e:	08 97       	sbiw	r24, 0x08	; 8
    1a90:	61 f0       	breq	.+24     	; 0x1aaa <set_prescale+0x2a>
    1a92:	17 c0       	rjmp	.+46     	; 0x1ac2 <set_prescale+0x42>
    1a94:	81 15       	cp	r24, r1
    1a96:	21 e0       	ldi	r18, 0x01	; 1
    1a98:	92 07       	cpc	r25, r18
    1a9a:	69 f0       	breq	.+26     	; 0x1ab6 <set_prescale+0x36>
    1a9c:	81 15       	cp	r24, r1
    1a9e:	94 40       	sbci	r25, 0x04	; 4
    1aa0:	69 f0       	breq	.+26     	; 0x1abc <set_prescale+0x3c>
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <set_prescale+0x42>
    1aa4:	81 e8       	ldi	r24, 0x81	; 129
    1aa6:	83 bf       	out	0x33, r24	; 51
    1aa8:	08 95       	ret
    1aaa:	82 e8       	ldi	r24, 0x82	; 130
    1aac:	83 bf       	out	0x33, r24	; 51
    1aae:	08 95       	ret
    1ab0:	83 e8       	ldi	r24, 0x83	; 131
    1ab2:	83 bf       	out	0x33, r24	; 51
    1ab4:	08 95       	ret
    1ab6:	84 e8       	ldi	r24, 0x84	; 132
    1ab8:	83 bf       	out	0x33, r24	; 51
    1aba:	08 95       	ret
    1abc:	85 e8       	ldi	r24, 0x85	; 133
    1abe:	83 bf       	out	0x33, r24	; 51
    1ac0:	08 95       	ret
    1ac2:	13 be       	out	0x33, r1	; 51
    1ac4:	08 95       	ret

00001ac6 <Timer0_Delay>:
    1ac6:	8f 92       	push	r8
    1ac8:	9f 92       	push	r9
    1aca:	af 92       	push	r10
    1acc:	bf 92       	push	r11
    1ace:	cf 92       	push	r12
    1ad0:	df 92       	push	r13
    1ad2:	ef 92       	push	r14
    1ad4:	ff 92       	push	r15
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	27 97       	sbiw	r28, 0x07	; 7
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	6b 01       	movw	r12, r22
    1aee:	7c 01       	movw	r14, r24
    1af0:	ae 01       	movw	r20, r28
    1af2:	4f 5f       	subi	r20, 0xFF	; 255
    1af4:	5f 4f       	sbci	r21, 0xFF	; 255
    1af6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <calc_prescaler>
    1afa:	88 23       	and	r24, r24
    1afc:	71 f0       	breq	.+28     	; 0x1b1a <Timer0_Delay+0x54>
    1afe:	a7 01       	movw	r20, r14
    1b00:	96 01       	movw	r18, r12
    1b02:	be 01       	movw	r22, r28
    1b04:	6d 5f       	subi	r22, 0xFD	; 253
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <calc_initialValue>
    1b10:	1c 82       	std	Y+4, r1	; 0x04
    1b12:	1d 82       	std	Y+5, r1	; 0x05
    1b14:	1e 82       	std	Y+6, r1	; 0x06
    1b16:	1f 82       	std	Y+7, r1	; 0x07
    1b18:	11 c0       	rjmp	.+34     	; 0x1b3c <Timer0_Delay+0x76>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	94 e0       	ldi	r25, 0x04	; 4
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	2c ee       	ldi	r18, 0xEC	; 236
    1b24:	31 e1       	ldi	r19, 0x11	; 17
    1b26:	43 e8       	ldi	r20, 0x83	; 131
    1b28:	53 e4       	ldi	r21, 0x43	; 67
    1b2a:	c7 01       	movw	r24, r14
    1b2c:	b6 01       	movw	r22, r12
    1b2e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    1b32:	6c 83       	std	Y+4, r22	; 0x04
    1b34:	7d 83       	std	Y+5, r23	; 0x05
    1b36:	8e 83       	std	Y+6, r24	; 0x06
    1b38:	9f 83       	std	Y+7, r25	; 0x07
    1b3a:	1b 82       	std	Y+3, r1	; 0x03
    1b3c:	cc 80       	ldd	r12, Y+4	; 0x04
    1b3e:	dd 80       	ldd	r13, Y+5	; 0x05
    1b40:	ee 80       	ldd	r14, Y+6	; 0x06
    1b42:	ff 80       	ldd	r15, Y+7	; 0x07
    1b44:	c7 01       	movw	r24, r14
    1b46:	b6 01       	movw	r22, r12
    1b48:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1b4c:	16 2f       	mov	r17, r22
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 31 10 	call	0x2062	; 0x2062 <__floatsisf>
    1b58:	9b 01       	movw	r18, r22
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	c7 01       	movw	r24, r14
    1b5e:	b6 01       	movw	r22, r12
    1b60:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    1b64:	2c ee       	ldi	r18, 0xEC	; 236
    1b66:	31 e1       	ldi	r19, 0x11	; 17
    1b68:	43 e8       	ldi	r20, 0x83	; 131
    1b6a:	53 e4       	ldi	r21, 0x43	; 67
    1b6c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1b70:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1b74:	f6 2e       	mov	r15, r22
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	82 bf       	out	0x32, r24	; 50
    1b7a:	11 11       	cpse	r17, r1
    1b7c:	08 c0       	rjmp	.+16     	; 0x1b8e <Timer0_Delay+0xc8>
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_prescale>
    1b86:	08 b6       	in	r0, 0x38	; 56
    1b88:	00 fe       	sbrs	r0, 0
    1b8a:	fd cf       	rjmp	.-6      	; 0x1b86 <Timer0_Delay+0xc0>
    1b8c:	00 c1       	rjmp	.+512    	; 0x1d8e <Timer0_Delay+0x2c8>
    1b8e:	85 e8       	ldi	r24, 0x85	; 133
    1b90:	83 bf       	out	0x33, r24	; 51
    1b92:	07 c0       	rjmp	.+14     	; 0x1ba2 <Timer0_Delay+0xdc>
    1b94:	08 b6       	in	r0, 0x38	; 56
    1b96:	00 fe       	sbrs	r0, 0
    1b98:	fd cf       	rjmp	.-6      	; 0x1b94 <Timer0_Delay+0xce>
    1b9a:	11 50       	subi	r17, 0x01	; 1
    1b9c:	88 b7       	in	r24, 0x38	; 56
    1b9e:	81 60       	ori	r24, 0x01	; 1
    1ba0:	88 bf       	out	0x38, r24	; 56
    1ba2:	11 11       	cpse	r17, r1
    1ba4:	f7 cf       	rjmp	.-18     	; 0x1b94 <Timer0_Delay+0xce>
    1ba6:	ff 20       	and	r15, r15
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <Timer0_Delay+0xe6>
    1baa:	53 c0       	rjmp	.+166    	; 0x1c52 <Timer0_Delay+0x18c>
    1bac:	6f 2d       	mov	r22, r15
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 31 10 	call	0x2062	; 0x2062 <__floatsisf>
    1bb8:	4b 01       	movw	r8, r22
    1bba:	5c 01       	movw	r10, r24
    1bbc:	28 eb       	ldi	r18, 0xB8	; 184
    1bbe:	3e e1       	ldi	r19, 0x1E	; 30
    1bc0:	45 e8       	ldi	r20, 0x85	; 133
    1bc2:	5e e3       	ldi	r21, 0x3E	; 62
    1bc4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    1bc8:	18 16       	cp	r1, r24
    1bca:	2c f0       	brlt	.+10     	; 0x1bd6 <Timer0_Delay+0x110>
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	3e c0       	rjmp	.+124    	; 0x1c52 <Timer0_Delay+0x18c>
    1bd6:	23 e3       	ldi	r18, 0x33	; 51
    1bd8:	33 e3       	ldi	r19, 0x33	; 51
    1bda:	43 e0       	ldi	r20, 0x03	; 3
    1bdc:	50 e4       	ldi	r21, 0x40	; 64
    1bde:	c5 01       	movw	r24, r10
    1be0:	b4 01       	movw	r22, r8
    1be2:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    1be6:	18 16       	cp	r1, r24
    1be8:	2c f0       	brlt	.+10     	; 0x1bf4 <Timer0_Delay+0x12e>
    1bea:	88 e0       	ldi	r24, 0x08	; 8
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	2f c0       	rjmp	.+94     	; 0x1c52 <Timer0_Delay+0x18c>
    1bf4:	2d e3       	ldi	r18, 0x3D	; 61
    1bf6:	3a e0       	ldi	r19, 0x0A	; 10
    1bf8:	43 e8       	ldi	r20, 0x83	; 131
    1bfa:	51 e4       	ldi	r21, 0x41	; 65
    1bfc:	c5 01       	movw	r24, r10
    1bfe:	b4 01       	movw	r22, r8
    1c00:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	2c f0       	brlt	.+10     	; 0x1c12 <Timer0_Delay+0x14c>
    1c08:	80 e4       	ldi	r24, 0x40	; 64
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	20 c0       	rjmp	.+64     	; 0x1c52 <Timer0_Delay+0x18c>
    1c12:	2b e7       	ldi	r18, 0x7B	; 123
    1c14:	34 e1       	ldi	r19, 0x14	; 20
    1c16:	43 e8       	ldi	r20, 0x83	; 131
    1c18:	52 e4       	ldi	r21, 0x42	; 66
    1c1a:	c5 01       	movw	r24, r10
    1c1c:	b4 01       	movw	r22, r8
    1c1e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	2c f0       	brlt	.+10     	; 0x1c30 <Timer0_Delay+0x16a>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	91 e0       	ldi	r25, 0x01	; 1
    1c2a:	9a 83       	std	Y+2, r25	; 0x02
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	11 c0       	rjmp	.+34     	; 0x1c52 <Timer0_Delay+0x18c>
    1c30:	2c ee       	ldi	r18, 0xEC	; 236
    1c32:	31 e1       	ldi	r19, 0x11	; 17
    1c34:	43 e8       	ldi	r20, 0x83	; 131
    1c36:	53 e4       	ldi	r21, 0x43	; 67
    1c38:	c5 01       	movw	r24, r10
    1c3a:	b4 01       	movw	r22, r8
    1c3c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	2c f0       	brlt	.+10     	; 0x1c4e <Timer0_Delay+0x188>
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	94 e0       	ldi	r25, 0x04	; 4
    1c48:	9a 83       	std	Y+2, r25	; 0x02
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <Timer0_Delay+0x18c>
    1c4e:	1a 82       	std	Y+2, r1	; 0x02
    1c50:	19 82       	std	Y+1, r1	; 0x01
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	80 34       	cpi	r24, 0x40	; 64
    1c58:	91 05       	cpc	r25, r1
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <Timer0_Delay+0x198>
    1c5c:	45 c0       	rjmp	.+138    	; 0x1ce8 <Timer0_Delay+0x222>
    1c5e:	30 f4       	brcc	.+12     	; 0x1c6c <Timer0_Delay+0x1a6>
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	91 05       	cpc	r25, r1
    1c64:	69 f0       	breq	.+26     	; 0x1c80 <Timer0_Delay+0x1ba>
    1c66:	08 97       	sbiw	r24, 0x08	; 8
    1c68:	29 f1       	breq	.+74     	; 0x1cb4 <Timer0_Delay+0x1ee>
    1c6a:	8c c0       	rjmp	.+280    	; 0x1d84 <Timer0_Delay+0x2be>
    1c6c:	81 15       	cp	r24, r1
    1c6e:	21 e0       	ldi	r18, 0x01	; 1
    1c70:	92 07       	cpc	r25, r18
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <Timer0_Delay+0x1b0>
    1c74:	53 c0       	rjmp	.+166    	; 0x1d1c <Timer0_Delay+0x256>
    1c76:	81 15       	cp	r24, r1
    1c78:	94 40       	sbci	r25, 0x04	; 4
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <Timer0_Delay+0x1b8>
    1c7c:	69 c0       	rjmp	.+210    	; 0x1d50 <Timer0_Delay+0x28a>
    1c7e:	82 c0       	rjmp	.+260    	; 0x1d84 <Timer0_Delay+0x2be>
    1c80:	6f 2d       	mov	r22, r15
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 31 10 	call	0x2062	; 0x2062 <__floatsisf>
    1c8c:	9b 01       	movw	r18, r22
    1c8e:	ac 01       	movw	r20, r24
    1c90:	68 eb       	ldi	r22, 0xB8	; 184
    1c92:	7e e1       	ldi	r23, 0x1E	; 30
    1c94:	85 e8       	ldi	r24, 0x85	; 133
    1c96:	9e e3       	ldi	r25, 0x3E	; 62
    1c98:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    1c9c:	2f e6       	ldi	r18, 0x6F	; 111
    1c9e:	32 e1       	ldi	r19, 0x12	; 18
    1ca0:	43 e8       	ldi	r20, 0x83	; 131
    1ca2:	5a e3       	ldi	r21, 0x3A	; 58
    1ca4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    1ca8:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1cac:	62 bf       	out	0x32, r22	; 50
    1cae:	81 e8       	ldi	r24, 0x81	; 129
    1cb0:	83 bf       	out	0x33, r24	; 51
    1cb2:	6a c0       	rjmp	.+212    	; 0x1d88 <Timer0_Delay+0x2c2>
    1cb4:	6f 2d       	mov	r22, r15
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 31 10 	call	0x2062	; 0x2062 <__floatsisf>
    1cc0:	9b 01       	movw	r18, r22
    1cc2:	ac 01       	movw	r20, r24
    1cc4:	63 e3       	ldi	r22, 0x33	; 51
    1cc6:	73 e3       	ldi	r23, 0x33	; 51
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	90 e4       	ldi	r25, 0x40	; 64
    1ccc:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    1cd0:	2f e6       	ldi	r18, 0x6F	; 111
    1cd2:	32 e1       	ldi	r19, 0x12	; 18
    1cd4:	43 e0       	ldi	r20, 0x03	; 3
    1cd6:	5c e3       	ldi	r21, 0x3C	; 60
    1cd8:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    1cdc:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1ce0:	62 bf       	out	0x32, r22	; 50
    1ce2:	82 e8       	ldi	r24, 0x82	; 130
    1ce4:	83 bf       	out	0x33, r24	; 51
    1ce6:	50 c0       	rjmp	.+160    	; 0x1d88 <Timer0_Delay+0x2c2>
    1ce8:	6f 2d       	mov	r22, r15
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 31 10 	call	0x2062	; 0x2062 <__floatsisf>
    1cf4:	9b 01       	movw	r18, r22
    1cf6:	ac 01       	movw	r20, r24
    1cf8:	6d e3       	ldi	r22, 0x3D	; 61
    1cfa:	7a e0       	ldi	r23, 0x0A	; 10
    1cfc:	83 e8       	ldi	r24, 0x83	; 131
    1cfe:	91 e4       	ldi	r25, 0x41	; 65
    1d00:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    1d04:	2f e6       	ldi	r18, 0x6F	; 111
    1d06:	32 e1       	ldi	r19, 0x12	; 18
    1d08:	43 e8       	ldi	r20, 0x83	; 131
    1d0a:	5d e3       	ldi	r21, 0x3D	; 61
    1d0c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    1d10:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1d14:	62 bf       	out	0x32, r22	; 50
    1d16:	83 e8       	ldi	r24, 0x83	; 131
    1d18:	83 bf       	out	0x33, r24	; 51
    1d1a:	36 c0       	rjmp	.+108    	; 0x1d88 <Timer0_Delay+0x2c2>
    1d1c:	6f 2d       	mov	r22, r15
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	0e 94 31 10 	call	0x2062	; 0x2062 <__floatsisf>
    1d28:	9b 01       	movw	r18, r22
    1d2a:	ac 01       	movw	r20, r24
    1d2c:	6b e7       	ldi	r22, 0x7B	; 123
    1d2e:	74 e1       	ldi	r23, 0x14	; 20
    1d30:	83 e8       	ldi	r24, 0x83	; 131
    1d32:	92 e4       	ldi	r25, 0x42	; 66
    1d34:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    1d38:	2f e6       	ldi	r18, 0x6F	; 111
    1d3a:	32 e1       	ldi	r19, 0x12	; 18
    1d3c:	43 e8       	ldi	r20, 0x83	; 131
    1d3e:	5e e3       	ldi	r21, 0x3E	; 62
    1d40:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    1d44:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1d48:	62 bf       	out	0x32, r22	; 50
    1d4a:	84 e8       	ldi	r24, 0x84	; 132
    1d4c:	83 bf       	out	0x33, r24	; 51
    1d4e:	1c c0       	rjmp	.+56     	; 0x1d88 <Timer0_Delay+0x2c2>
    1d50:	6f 2d       	mov	r22, r15
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 31 10 	call	0x2062	; 0x2062 <__floatsisf>
    1d5c:	9b 01       	movw	r18, r22
    1d5e:	ac 01       	movw	r20, r24
    1d60:	6c ee       	ldi	r22, 0xEC	; 236
    1d62:	71 e1       	ldi	r23, 0x11	; 17
    1d64:	83 e8       	ldi	r24, 0x83	; 131
    1d66:	93 e4       	ldi	r25, 0x43	; 67
    1d68:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__subsf3>
    1d6c:	2f e6       	ldi	r18, 0x6F	; 111
    1d6e:	32 e1       	ldi	r19, 0x12	; 18
    1d70:	43 e8       	ldi	r20, 0x83	; 131
    1d72:	5f e3       	ldi	r21, 0x3F	; 63
    1d74:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__divsf3>
    1d78:	0e 94 00 10 	call	0x2000	; 0x2000 <__fixunssfsi>
    1d7c:	62 bf       	out	0x32, r22	; 50
    1d7e:	85 e8       	ldi	r24, 0x85	; 133
    1d80:	83 bf       	out	0x33, r24	; 51
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <Timer0_Delay+0x2c2>
    1d84:	12 be       	out	0x32, r1	; 50
    1d86:	13 be       	out	0x33, r1	; 51
    1d88:	08 b6       	in	r0, 0x38	; 56
    1d8a:	00 fe       	sbrs	r0, 0
    1d8c:	fd cf       	rjmp	.-6      	; 0x1d88 <Timer0_Delay+0x2c2>
    1d8e:	88 b7       	in	r24, 0x38	; 56
    1d90:	81 60       	ori	r24, 0x01	; 1
    1d92:	88 bf       	out	0x38, r24	; 56
    1d94:	13 be       	out	0x33, r1	; 51
    1d96:	27 96       	adiw	r28, 0x07	; 7
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	cf 90       	pop	r12
    1db0:	bf 90       	pop	r11
    1db2:	af 90       	pop	r10
    1db4:	9f 90       	pop	r9
    1db6:	8f 90       	pop	r8
    1db8:	08 95       	ret

00001dba <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1dba:	1f 92       	push	r1
    1dbc:	0f 92       	push	r0
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	0f 92       	push	r0
    1dc2:	11 24       	eor	r1, r1
    1dc4:	2f 93       	push	r18
    1dc6:	3f 93       	push	r19
    1dc8:	4f 93       	push	r20
    1dca:	5f 93       	push	r21
    1dcc:	6f 93       	push	r22
    1dce:	7f 93       	push	r23
    1dd0:	8f 93       	push	r24
    1dd2:	9f 93       	push	r25
    1dd4:	af 93       	push	r26
    1dd6:	bf 93       	push	r27
    1dd8:	ef 93       	push	r30
    1dda:	ff 93       	push	r31
	if(g_callBackPtr_0 !=  ((void*)0))
    1ddc:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <g_callBackPtr_0>
    1de0:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <g_callBackPtr_0+0x1>
    1de4:	30 97       	sbiw	r30, 0x00	; 0
    1de6:	b9 f0       	breq	.+46     	; 0x1e16 <__vector_11+0x5c>
	{
		if(NO_OF_OVERFLOWS > 0)
    1de8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <NO_OF_OVERFLOWS>
    1dec:	88 23       	and	r24, r24
    1dee:	79 f0       	breq	.+30     	; 0x1e0e <__vector_11+0x54>
		{
			g_tick++;
    1df0:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <g_tick>
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <g_tick>
			if(g_tick == NO_OF_OVERFLOWS)
    1dfa:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <g_tick>
    1dfe:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <NO_OF_OVERFLOWS>
    1e02:	98 13       	cpse	r25, r24
    1e04:	08 c0       	rjmp	.+16     	; 0x1e16 <__vector_11+0x5c>
			{
				g_callBackPtr_0();
    1e06:	09 95       	icall
				g_tick = 0; //clear the tick counter again to start new count
    1e08:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <g_tick>
    1e0c:	04 c0       	rjmp	.+8      	; 0x1e16 <__vector_11+0x5c>
			}
		}
		else
		{
			g_callBackPtr_0();
    1e0e:	09 95       	icall
			TCNT0=init_value;
    1e10:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
    1e14:	82 bf       	out	0x32, r24	; 50
		}
	}
}
    1e16:	ff 91       	pop	r31
    1e18:	ef 91       	pop	r30
    1e1a:	bf 91       	pop	r27
    1e1c:	af 91       	pop	r26
    1e1e:	9f 91       	pop	r25
    1e20:	8f 91       	pop	r24
    1e22:	7f 91       	pop	r23
    1e24:	6f 91       	pop	r22
    1e26:	5f 91       	pop	r21
    1e28:	4f 91       	pop	r20
    1e2a:	3f 91       	pop	r19
    1e2c:	2f 91       	pop	r18
    1e2e:	0f 90       	pop	r0
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	0f 90       	pop	r0
    1e34:	1f 90       	pop	r1
    1e36:	18 95       	reti

00001e38 <__subsf3>:
    1e38:	50 58       	subi	r21, 0x80	; 128

00001e3a <__addsf3>:
    1e3a:	bb 27       	eor	r27, r27
    1e3c:	aa 27       	eor	r26, r26
    1e3e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__addsf3x>
    1e42:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__fp_round>
    1e46:	0e 94 99 10 	call	0x2132	; 0x2132 <__fp_pscA>
    1e4a:	38 f0       	brcs	.+14     	; 0x1e5a <__addsf3+0x20>
    1e4c:	0e 94 a0 10 	call	0x2140	; 0x2140 <__fp_pscB>
    1e50:	20 f0       	brcs	.+8      	; 0x1e5a <__addsf3+0x20>
    1e52:	39 f4       	brne	.+14     	; 0x1e62 <__addsf3+0x28>
    1e54:	9f 3f       	cpi	r25, 0xFF	; 255
    1e56:	19 f4       	brne	.+6      	; 0x1e5e <__addsf3+0x24>
    1e58:	26 f4       	brtc	.+8      	; 0x1e62 <__addsf3+0x28>
    1e5a:	0c 94 96 10 	jmp	0x212c	; 0x212c <__fp_nan>
    1e5e:	0e f4       	brtc	.+2      	; 0x1e62 <__addsf3+0x28>
    1e60:	e0 95       	com	r30
    1e62:	e7 fb       	bst	r30, 7
    1e64:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__fp_inf>

00001e68 <__addsf3x>:
    1e68:	e9 2f       	mov	r30, r25
    1e6a:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fp_split3>
    1e6e:	58 f3       	brcs	.-42     	; 0x1e46 <__addsf3+0xc>
    1e70:	ba 17       	cp	r27, r26
    1e72:	62 07       	cpc	r22, r18
    1e74:	73 07       	cpc	r23, r19
    1e76:	84 07       	cpc	r24, r20
    1e78:	95 07       	cpc	r25, r21
    1e7a:	20 f0       	brcs	.+8      	; 0x1e84 <__addsf3x+0x1c>
    1e7c:	79 f4       	brne	.+30     	; 0x1e9c <__addsf3x+0x34>
    1e7e:	a6 f5       	brtc	.+104    	; 0x1ee8 <__addsf3x+0x80>
    1e80:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__fp_zero>
    1e84:	0e f4       	brtc	.+2      	; 0x1e88 <__addsf3x+0x20>
    1e86:	e0 95       	com	r30
    1e88:	0b 2e       	mov	r0, r27
    1e8a:	ba 2f       	mov	r27, r26
    1e8c:	a0 2d       	mov	r26, r0
    1e8e:	0b 01       	movw	r0, r22
    1e90:	b9 01       	movw	r22, r18
    1e92:	90 01       	movw	r18, r0
    1e94:	0c 01       	movw	r0, r24
    1e96:	ca 01       	movw	r24, r20
    1e98:	a0 01       	movw	r20, r0
    1e9a:	11 24       	eor	r1, r1
    1e9c:	ff 27       	eor	r31, r31
    1e9e:	59 1b       	sub	r21, r25
    1ea0:	99 f0       	breq	.+38     	; 0x1ec8 <__addsf3x+0x60>
    1ea2:	59 3f       	cpi	r21, 0xF9	; 249
    1ea4:	50 f4       	brcc	.+20     	; 0x1eba <__addsf3x+0x52>
    1ea6:	50 3e       	cpi	r21, 0xE0	; 224
    1ea8:	68 f1       	brcs	.+90     	; 0x1f04 <__addsf3x+0x9c>
    1eaa:	1a 16       	cp	r1, r26
    1eac:	f0 40       	sbci	r31, 0x00	; 0
    1eae:	a2 2f       	mov	r26, r18
    1eb0:	23 2f       	mov	r18, r19
    1eb2:	34 2f       	mov	r19, r20
    1eb4:	44 27       	eor	r20, r20
    1eb6:	58 5f       	subi	r21, 0xF8	; 248
    1eb8:	f3 cf       	rjmp	.-26     	; 0x1ea0 <__addsf3x+0x38>
    1eba:	46 95       	lsr	r20
    1ebc:	37 95       	ror	r19
    1ebe:	27 95       	ror	r18
    1ec0:	a7 95       	ror	r26
    1ec2:	f0 40       	sbci	r31, 0x00	; 0
    1ec4:	53 95       	inc	r21
    1ec6:	c9 f7       	brne	.-14     	; 0x1eba <__addsf3x+0x52>
    1ec8:	7e f4       	brtc	.+30     	; 0x1ee8 <__addsf3x+0x80>
    1eca:	1f 16       	cp	r1, r31
    1ecc:	ba 0b       	sbc	r27, r26
    1ece:	62 0b       	sbc	r22, r18
    1ed0:	73 0b       	sbc	r23, r19
    1ed2:	84 0b       	sbc	r24, r20
    1ed4:	ba f0       	brmi	.+46     	; 0x1f04 <__addsf3x+0x9c>
    1ed6:	91 50       	subi	r25, 0x01	; 1
    1ed8:	a1 f0       	breq	.+40     	; 0x1f02 <__addsf3x+0x9a>
    1eda:	ff 0f       	add	r31, r31
    1edc:	bb 1f       	adc	r27, r27
    1ede:	66 1f       	adc	r22, r22
    1ee0:	77 1f       	adc	r23, r23
    1ee2:	88 1f       	adc	r24, r24
    1ee4:	c2 f7       	brpl	.-16     	; 0x1ed6 <__addsf3x+0x6e>
    1ee6:	0e c0       	rjmp	.+28     	; 0x1f04 <__addsf3x+0x9c>
    1ee8:	ba 0f       	add	r27, r26
    1eea:	62 1f       	adc	r22, r18
    1eec:	73 1f       	adc	r23, r19
    1eee:	84 1f       	adc	r24, r20
    1ef0:	48 f4       	brcc	.+18     	; 0x1f04 <__addsf3x+0x9c>
    1ef2:	87 95       	ror	r24
    1ef4:	77 95       	ror	r23
    1ef6:	67 95       	ror	r22
    1ef8:	b7 95       	ror	r27
    1efa:	f7 95       	ror	r31
    1efc:	9e 3f       	cpi	r25, 0xFE	; 254
    1efe:	08 f0       	brcs	.+2      	; 0x1f02 <__addsf3x+0x9a>
    1f00:	b0 cf       	rjmp	.-160    	; 0x1e62 <__addsf3+0x28>
    1f02:	93 95       	inc	r25
    1f04:	88 0f       	add	r24, r24
    1f06:	08 f0       	brcs	.+2      	; 0x1f0a <__addsf3x+0xa2>
    1f08:	99 27       	eor	r25, r25
    1f0a:	ee 0f       	add	r30, r30
    1f0c:	97 95       	ror	r25
    1f0e:	87 95       	ror	r24
    1f10:	08 95       	ret

00001f12 <__cmpsf2>:
    1f12:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fp_cmp>
    1f16:	08 f4       	brcc	.+2      	; 0x1f1a <__cmpsf2+0x8>
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	08 95       	ret

00001f1c <__divsf3>:
    1f1c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__divsf3x>
    1f20:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__fp_round>
    1f24:	0e 94 a0 10 	call	0x2140	; 0x2140 <__fp_pscB>
    1f28:	58 f0       	brcs	.+22     	; 0x1f40 <__divsf3+0x24>
    1f2a:	0e 94 99 10 	call	0x2132	; 0x2132 <__fp_pscA>
    1f2e:	40 f0       	brcs	.+16     	; 0x1f40 <__divsf3+0x24>
    1f30:	29 f4       	brne	.+10     	; 0x1f3c <__divsf3+0x20>
    1f32:	5f 3f       	cpi	r21, 0xFF	; 255
    1f34:	29 f0       	breq	.+10     	; 0x1f40 <__divsf3+0x24>
    1f36:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__fp_inf>
    1f3a:	51 11       	cpse	r21, r1
    1f3c:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__fp_szero>
    1f40:	0c 94 96 10 	jmp	0x212c	; 0x212c <__fp_nan>

00001f44 <__divsf3x>:
    1f44:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fp_split3>
    1f48:	68 f3       	brcs	.-38     	; 0x1f24 <__divsf3+0x8>

00001f4a <__divsf3_pse>:
    1f4a:	99 23       	and	r25, r25
    1f4c:	b1 f3       	breq	.-20     	; 0x1f3a <__divsf3+0x1e>
    1f4e:	55 23       	and	r21, r21
    1f50:	91 f3       	breq	.-28     	; 0x1f36 <__divsf3+0x1a>
    1f52:	95 1b       	sub	r25, r21
    1f54:	55 0b       	sbc	r21, r21
    1f56:	bb 27       	eor	r27, r27
    1f58:	aa 27       	eor	r26, r26
    1f5a:	62 17       	cp	r22, r18
    1f5c:	73 07       	cpc	r23, r19
    1f5e:	84 07       	cpc	r24, r20
    1f60:	38 f0       	brcs	.+14     	; 0x1f70 <__divsf3_pse+0x26>
    1f62:	9f 5f       	subi	r25, 0xFF	; 255
    1f64:	5f 4f       	sbci	r21, 0xFF	; 255
    1f66:	22 0f       	add	r18, r18
    1f68:	33 1f       	adc	r19, r19
    1f6a:	44 1f       	adc	r20, r20
    1f6c:	aa 1f       	adc	r26, r26
    1f6e:	a9 f3       	breq	.-22     	; 0x1f5a <__divsf3_pse+0x10>
    1f70:	35 d0       	rcall	.+106    	; 0x1fdc <__divsf3_pse+0x92>
    1f72:	0e 2e       	mov	r0, r30
    1f74:	3a f0       	brmi	.+14     	; 0x1f84 <__divsf3_pse+0x3a>
    1f76:	e0 e8       	ldi	r30, 0x80	; 128
    1f78:	32 d0       	rcall	.+100    	; 0x1fde <__divsf3_pse+0x94>
    1f7a:	91 50       	subi	r25, 0x01	; 1
    1f7c:	50 40       	sbci	r21, 0x00	; 0
    1f7e:	e6 95       	lsr	r30
    1f80:	00 1c       	adc	r0, r0
    1f82:	ca f7       	brpl	.-14     	; 0x1f76 <__divsf3_pse+0x2c>
    1f84:	2b d0       	rcall	.+86     	; 0x1fdc <__divsf3_pse+0x92>
    1f86:	fe 2f       	mov	r31, r30
    1f88:	29 d0       	rcall	.+82     	; 0x1fdc <__divsf3_pse+0x92>
    1f8a:	66 0f       	add	r22, r22
    1f8c:	77 1f       	adc	r23, r23
    1f8e:	88 1f       	adc	r24, r24
    1f90:	bb 1f       	adc	r27, r27
    1f92:	26 17       	cp	r18, r22
    1f94:	37 07       	cpc	r19, r23
    1f96:	48 07       	cpc	r20, r24
    1f98:	ab 07       	cpc	r26, r27
    1f9a:	b0 e8       	ldi	r27, 0x80	; 128
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <__divsf3_pse+0x56>
    1f9e:	bb 0b       	sbc	r27, r27
    1fa0:	80 2d       	mov	r24, r0
    1fa2:	bf 01       	movw	r22, r30
    1fa4:	ff 27       	eor	r31, r31
    1fa6:	93 58       	subi	r25, 0x83	; 131
    1fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1faa:	3a f0       	brmi	.+14     	; 0x1fba <__divsf3_pse+0x70>
    1fac:	9e 3f       	cpi	r25, 0xFE	; 254
    1fae:	51 05       	cpc	r21, r1
    1fb0:	78 f0       	brcs	.+30     	; 0x1fd0 <__divsf3_pse+0x86>
    1fb2:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__fp_inf>
    1fb6:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__fp_szero>
    1fba:	5f 3f       	cpi	r21, 0xFF	; 255
    1fbc:	e4 f3       	brlt	.-8      	; 0x1fb6 <__divsf3_pse+0x6c>
    1fbe:	98 3e       	cpi	r25, 0xE8	; 232
    1fc0:	d4 f3       	brlt	.-12     	; 0x1fb6 <__divsf3_pse+0x6c>
    1fc2:	86 95       	lsr	r24
    1fc4:	77 95       	ror	r23
    1fc6:	67 95       	ror	r22
    1fc8:	b7 95       	ror	r27
    1fca:	f7 95       	ror	r31
    1fcc:	9f 5f       	subi	r25, 0xFF	; 255
    1fce:	c9 f7       	brne	.-14     	; 0x1fc2 <__divsf3_pse+0x78>
    1fd0:	88 0f       	add	r24, r24
    1fd2:	91 1d       	adc	r25, r1
    1fd4:	96 95       	lsr	r25
    1fd6:	87 95       	ror	r24
    1fd8:	97 f9       	bld	r25, 7
    1fda:	08 95       	ret
    1fdc:	e1 e0       	ldi	r30, 0x01	; 1
    1fde:	66 0f       	add	r22, r22
    1fe0:	77 1f       	adc	r23, r23
    1fe2:	88 1f       	adc	r24, r24
    1fe4:	bb 1f       	adc	r27, r27
    1fe6:	62 17       	cp	r22, r18
    1fe8:	73 07       	cpc	r23, r19
    1fea:	84 07       	cpc	r24, r20
    1fec:	ba 07       	cpc	r27, r26
    1fee:	20 f0       	brcs	.+8      	; 0x1ff8 <__divsf3_pse+0xae>
    1ff0:	62 1b       	sub	r22, r18
    1ff2:	73 0b       	sbc	r23, r19
    1ff4:	84 0b       	sbc	r24, r20
    1ff6:	ba 0b       	sbc	r27, r26
    1ff8:	ee 1f       	adc	r30, r30
    1ffa:	88 f7       	brcc	.-30     	; 0x1fde <__divsf3_pse+0x94>
    1ffc:	e0 95       	com	r30
    1ffe:	08 95       	ret

00002000 <__fixunssfsi>:
    2000:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fp_splitA>
    2004:	88 f0       	brcs	.+34     	; 0x2028 <__fixunssfsi+0x28>
    2006:	9f 57       	subi	r25, 0x7F	; 127
    2008:	98 f0       	brcs	.+38     	; 0x2030 <__fixunssfsi+0x30>
    200a:	b9 2f       	mov	r27, r25
    200c:	99 27       	eor	r25, r25
    200e:	b7 51       	subi	r27, 0x17	; 23
    2010:	b0 f0       	brcs	.+44     	; 0x203e <__fixunssfsi+0x3e>
    2012:	e1 f0       	breq	.+56     	; 0x204c <__fixunssfsi+0x4c>
    2014:	66 0f       	add	r22, r22
    2016:	77 1f       	adc	r23, r23
    2018:	88 1f       	adc	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	1a f0       	brmi	.+6      	; 0x2024 <__fixunssfsi+0x24>
    201e:	ba 95       	dec	r27
    2020:	c9 f7       	brne	.-14     	; 0x2014 <__fixunssfsi+0x14>
    2022:	14 c0       	rjmp	.+40     	; 0x204c <__fixunssfsi+0x4c>
    2024:	b1 30       	cpi	r27, 0x01	; 1
    2026:	91 f0       	breq	.+36     	; 0x204c <__fixunssfsi+0x4c>
    2028:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__fp_zero>
    202c:	b1 e0       	ldi	r27, 0x01	; 1
    202e:	08 95       	ret
    2030:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__fp_zero>
    2034:	67 2f       	mov	r22, r23
    2036:	78 2f       	mov	r23, r24
    2038:	88 27       	eor	r24, r24
    203a:	b8 5f       	subi	r27, 0xF8	; 248
    203c:	39 f0       	breq	.+14     	; 0x204c <__fixunssfsi+0x4c>
    203e:	b9 3f       	cpi	r27, 0xF9	; 249
    2040:	cc f3       	brlt	.-14     	; 0x2034 <__fixunssfsi+0x34>
    2042:	86 95       	lsr	r24
    2044:	77 95       	ror	r23
    2046:	67 95       	ror	r22
    2048:	b3 95       	inc	r27
    204a:	d9 f7       	brne	.-10     	; 0x2042 <__fixunssfsi+0x42>
    204c:	3e f4       	brtc	.+14     	; 0x205c <__fixunssfsi+0x5c>
    204e:	90 95       	com	r25
    2050:	80 95       	com	r24
    2052:	70 95       	com	r23
    2054:	61 95       	neg	r22
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	8f 4f       	sbci	r24, 0xFF	; 255
    205a:	9f 4f       	sbci	r25, 0xFF	; 255
    205c:	08 95       	ret

0000205e <__floatunsisf>:
    205e:	e8 94       	clt
    2060:	09 c0       	rjmp	.+18     	; 0x2074 <__floatsisf+0x12>

00002062 <__floatsisf>:
    2062:	97 fb       	bst	r25, 7
    2064:	3e f4       	brtc	.+14     	; 0x2074 <__floatsisf+0x12>
    2066:	90 95       	com	r25
    2068:	80 95       	com	r24
    206a:	70 95       	com	r23
    206c:	61 95       	neg	r22
    206e:	7f 4f       	sbci	r23, 0xFF	; 255
    2070:	8f 4f       	sbci	r24, 0xFF	; 255
    2072:	9f 4f       	sbci	r25, 0xFF	; 255
    2074:	99 23       	and	r25, r25
    2076:	a9 f0       	breq	.+42     	; 0x20a2 <__floatsisf+0x40>
    2078:	f9 2f       	mov	r31, r25
    207a:	96 e9       	ldi	r25, 0x96	; 150
    207c:	bb 27       	eor	r27, r27
    207e:	93 95       	inc	r25
    2080:	f6 95       	lsr	r31
    2082:	87 95       	ror	r24
    2084:	77 95       	ror	r23
    2086:	67 95       	ror	r22
    2088:	b7 95       	ror	r27
    208a:	f1 11       	cpse	r31, r1
    208c:	f8 cf       	rjmp	.-16     	; 0x207e <__floatsisf+0x1c>
    208e:	fa f4       	brpl	.+62     	; 0x20ce <__floatsisf+0x6c>
    2090:	bb 0f       	add	r27, r27
    2092:	11 f4       	brne	.+4      	; 0x2098 <__floatsisf+0x36>
    2094:	60 ff       	sbrs	r22, 0
    2096:	1b c0       	rjmp	.+54     	; 0x20ce <__floatsisf+0x6c>
    2098:	6f 5f       	subi	r22, 0xFF	; 255
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	8f 4f       	sbci	r24, 0xFF	; 255
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	16 c0       	rjmp	.+44     	; 0x20ce <__floatsisf+0x6c>
    20a2:	88 23       	and	r24, r24
    20a4:	11 f0       	breq	.+4      	; 0x20aa <__floatsisf+0x48>
    20a6:	96 e9       	ldi	r25, 0x96	; 150
    20a8:	11 c0       	rjmp	.+34     	; 0x20cc <__floatsisf+0x6a>
    20aa:	77 23       	and	r23, r23
    20ac:	21 f0       	breq	.+8      	; 0x20b6 <__floatsisf+0x54>
    20ae:	9e e8       	ldi	r25, 0x8E	; 142
    20b0:	87 2f       	mov	r24, r23
    20b2:	76 2f       	mov	r23, r22
    20b4:	05 c0       	rjmp	.+10     	; 0x20c0 <__floatsisf+0x5e>
    20b6:	66 23       	and	r22, r22
    20b8:	71 f0       	breq	.+28     	; 0x20d6 <__floatsisf+0x74>
    20ba:	96 e8       	ldi	r25, 0x86	; 134
    20bc:	86 2f       	mov	r24, r22
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	2a f0       	brmi	.+10     	; 0x20ce <__floatsisf+0x6c>
    20c4:	9a 95       	dec	r25
    20c6:	66 0f       	add	r22, r22
    20c8:	77 1f       	adc	r23, r23
    20ca:	88 1f       	adc	r24, r24
    20cc:	da f7       	brpl	.-10     	; 0x20c4 <__floatsisf+0x62>
    20ce:	88 0f       	add	r24, r24
    20d0:	96 95       	lsr	r25
    20d2:	87 95       	ror	r24
    20d4:	97 f9       	bld	r25, 7
    20d6:	08 95       	ret

000020d8 <__fp_cmp>:
    20d8:	99 0f       	add	r25, r25
    20da:	00 08       	sbc	r0, r0
    20dc:	55 0f       	add	r21, r21
    20de:	aa 0b       	sbc	r26, r26
    20e0:	e0 e8       	ldi	r30, 0x80	; 128
    20e2:	fe ef       	ldi	r31, 0xFE	; 254
    20e4:	16 16       	cp	r1, r22
    20e6:	17 06       	cpc	r1, r23
    20e8:	e8 07       	cpc	r30, r24
    20ea:	f9 07       	cpc	r31, r25
    20ec:	c0 f0       	brcs	.+48     	; 0x211e <__fp_cmp+0x46>
    20ee:	12 16       	cp	r1, r18
    20f0:	13 06       	cpc	r1, r19
    20f2:	e4 07       	cpc	r30, r20
    20f4:	f5 07       	cpc	r31, r21
    20f6:	98 f0       	brcs	.+38     	; 0x211e <__fp_cmp+0x46>
    20f8:	62 1b       	sub	r22, r18
    20fa:	73 0b       	sbc	r23, r19
    20fc:	84 0b       	sbc	r24, r20
    20fe:	95 0b       	sbc	r25, r21
    2100:	39 f4       	brne	.+14     	; 0x2110 <__fp_cmp+0x38>
    2102:	0a 26       	eor	r0, r26
    2104:	61 f0       	breq	.+24     	; 0x211e <__fp_cmp+0x46>
    2106:	23 2b       	or	r18, r19
    2108:	24 2b       	or	r18, r20
    210a:	25 2b       	or	r18, r21
    210c:	21 f4       	brne	.+8      	; 0x2116 <__fp_cmp+0x3e>
    210e:	08 95       	ret
    2110:	0a 26       	eor	r0, r26
    2112:	09 f4       	brne	.+2      	; 0x2116 <__fp_cmp+0x3e>
    2114:	a1 40       	sbci	r26, 0x01	; 1
    2116:	a6 95       	lsr	r26
    2118:	8f ef       	ldi	r24, 0xFF	; 255
    211a:	81 1d       	adc	r24, r1
    211c:	81 1d       	adc	r24, r1
    211e:	08 95       	ret

00002120 <__fp_inf>:
    2120:	97 f9       	bld	r25, 7
    2122:	9f 67       	ori	r25, 0x7F	; 127
    2124:	80 e8       	ldi	r24, 0x80	; 128
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	08 95       	ret

0000212c <__fp_nan>:
    212c:	9f ef       	ldi	r25, 0xFF	; 255
    212e:	80 ec       	ldi	r24, 0xC0	; 192
    2130:	08 95       	ret

00002132 <__fp_pscA>:
    2132:	00 24       	eor	r0, r0
    2134:	0a 94       	dec	r0
    2136:	16 16       	cp	r1, r22
    2138:	17 06       	cpc	r1, r23
    213a:	18 06       	cpc	r1, r24
    213c:	09 06       	cpc	r0, r25
    213e:	08 95       	ret

00002140 <__fp_pscB>:
    2140:	00 24       	eor	r0, r0
    2142:	0a 94       	dec	r0
    2144:	12 16       	cp	r1, r18
    2146:	13 06       	cpc	r1, r19
    2148:	14 06       	cpc	r1, r20
    214a:	05 06       	cpc	r0, r21
    214c:	08 95       	ret

0000214e <__fp_round>:
    214e:	09 2e       	mov	r0, r25
    2150:	03 94       	inc	r0
    2152:	00 0c       	add	r0, r0
    2154:	11 f4       	brne	.+4      	; 0x215a <__fp_round+0xc>
    2156:	88 23       	and	r24, r24
    2158:	52 f0       	brmi	.+20     	; 0x216e <__fp_round+0x20>
    215a:	bb 0f       	add	r27, r27
    215c:	40 f4       	brcc	.+16     	; 0x216e <__fp_round+0x20>
    215e:	bf 2b       	or	r27, r31
    2160:	11 f4       	brne	.+4      	; 0x2166 <__fp_round+0x18>
    2162:	60 ff       	sbrs	r22, 0
    2164:	04 c0       	rjmp	.+8      	; 0x216e <__fp_round+0x20>
    2166:	6f 5f       	subi	r22, 0xFF	; 255
    2168:	7f 4f       	sbci	r23, 0xFF	; 255
    216a:	8f 4f       	sbci	r24, 0xFF	; 255
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	08 95       	ret

00002170 <__fp_split3>:
    2170:	57 fd       	sbrc	r21, 7
    2172:	90 58       	subi	r25, 0x80	; 128
    2174:	44 0f       	add	r20, r20
    2176:	55 1f       	adc	r21, r21
    2178:	59 f0       	breq	.+22     	; 0x2190 <__fp_splitA+0x10>
    217a:	5f 3f       	cpi	r21, 0xFF	; 255
    217c:	71 f0       	breq	.+28     	; 0x219a <__fp_splitA+0x1a>
    217e:	47 95       	ror	r20

00002180 <__fp_splitA>:
    2180:	88 0f       	add	r24, r24
    2182:	97 fb       	bst	r25, 7
    2184:	99 1f       	adc	r25, r25
    2186:	61 f0       	breq	.+24     	; 0x21a0 <__fp_splitA+0x20>
    2188:	9f 3f       	cpi	r25, 0xFF	; 255
    218a:	79 f0       	breq	.+30     	; 0x21aa <__fp_splitA+0x2a>
    218c:	87 95       	ror	r24
    218e:	08 95       	ret
    2190:	12 16       	cp	r1, r18
    2192:	13 06       	cpc	r1, r19
    2194:	14 06       	cpc	r1, r20
    2196:	55 1f       	adc	r21, r21
    2198:	f2 cf       	rjmp	.-28     	; 0x217e <__fp_split3+0xe>
    219a:	46 95       	lsr	r20
    219c:	f1 df       	rcall	.-30     	; 0x2180 <__fp_splitA>
    219e:	08 c0       	rjmp	.+16     	; 0x21b0 <__fp_splitA+0x30>
    21a0:	16 16       	cp	r1, r22
    21a2:	17 06       	cpc	r1, r23
    21a4:	18 06       	cpc	r1, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	f1 cf       	rjmp	.-30     	; 0x218c <__fp_splitA+0xc>
    21aa:	86 95       	lsr	r24
    21ac:	71 05       	cpc	r23, r1
    21ae:	61 05       	cpc	r22, r1
    21b0:	08 94       	sec
    21b2:	08 95       	ret

000021b4 <__fp_zero>:
    21b4:	e8 94       	clt

000021b6 <__fp_szero>:
    21b6:	bb 27       	eor	r27, r27
    21b8:	66 27       	eor	r22, r22
    21ba:	77 27       	eor	r23, r23
    21bc:	cb 01       	movw	r24, r22
    21be:	97 f9       	bld	r25, 7
    21c0:	08 95       	ret

000021c2 <__gesf2>:
    21c2:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fp_cmp>
    21c6:	08 f4       	brcc	.+2      	; 0x21ca <__gesf2+0x8>
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	08 95       	ret

000021cc <__mulsf3>:
    21cc:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__mulsf3x>
    21d0:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__fp_round>
    21d4:	0e 94 99 10 	call	0x2132	; 0x2132 <__fp_pscA>
    21d8:	38 f0       	brcs	.+14     	; 0x21e8 <__mulsf3+0x1c>
    21da:	0e 94 a0 10 	call	0x2140	; 0x2140 <__fp_pscB>
    21de:	20 f0       	brcs	.+8      	; 0x21e8 <__mulsf3+0x1c>
    21e0:	95 23       	and	r25, r21
    21e2:	11 f0       	breq	.+4      	; 0x21e8 <__mulsf3+0x1c>
    21e4:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__fp_inf>
    21e8:	0c 94 96 10 	jmp	0x212c	; 0x212c <__fp_nan>
    21ec:	11 24       	eor	r1, r1
    21ee:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__fp_szero>

000021f2 <__mulsf3x>:
    21f2:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fp_split3>
    21f6:	70 f3       	brcs	.-36     	; 0x21d4 <__mulsf3+0x8>

000021f8 <__mulsf3_pse>:
    21f8:	95 9f       	mul	r25, r21
    21fa:	c1 f3       	breq	.-16     	; 0x21ec <__mulsf3+0x20>
    21fc:	95 0f       	add	r25, r21
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	55 1f       	adc	r21, r21
    2202:	62 9f       	mul	r22, r18
    2204:	f0 01       	movw	r30, r0
    2206:	72 9f       	mul	r23, r18
    2208:	bb 27       	eor	r27, r27
    220a:	f0 0d       	add	r31, r0
    220c:	b1 1d       	adc	r27, r1
    220e:	63 9f       	mul	r22, r19
    2210:	aa 27       	eor	r26, r26
    2212:	f0 0d       	add	r31, r0
    2214:	b1 1d       	adc	r27, r1
    2216:	aa 1f       	adc	r26, r26
    2218:	64 9f       	mul	r22, r20
    221a:	66 27       	eor	r22, r22
    221c:	b0 0d       	add	r27, r0
    221e:	a1 1d       	adc	r26, r1
    2220:	66 1f       	adc	r22, r22
    2222:	82 9f       	mul	r24, r18
    2224:	22 27       	eor	r18, r18
    2226:	b0 0d       	add	r27, r0
    2228:	a1 1d       	adc	r26, r1
    222a:	62 1f       	adc	r22, r18
    222c:	73 9f       	mul	r23, r19
    222e:	b0 0d       	add	r27, r0
    2230:	a1 1d       	adc	r26, r1
    2232:	62 1f       	adc	r22, r18
    2234:	83 9f       	mul	r24, r19
    2236:	a0 0d       	add	r26, r0
    2238:	61 1d       	adc	r22, r1
    223a:	22 1f       	adc	r18, r18
    223c:	74 9f       	mul	r23, r20
    223e:	33 27       	eor	r19, r19
    2240:	a0 0d       	add	r26, r0
    2242:	61 1d       	adc	r22, r1
    2244:	23 1f       	adc	r18, r19
    2246:	84 9f       	mul	r24, r20
    2248:	60 0d       	add	r22, r0
    224a:	21 1d       	adc	r18, r1
    224c:	82 2f       	mov	r24, r18
    224e:	76 2f       	mov	r23, r22
    2250:	6a 2f       	mov	r22, r26
    2252:	11 24       	eor	r1, r1
    2254:	9f 57       	subi	r25, 0x7F	; 127
    2256:	50 40       	sbci	r21, 0x00	; 0
    2258:	9a f0       	brmi	.+38     	; 0x2280 <__mulsf3_pse+0x88>
    225a:	f1 f0       	breq	.+60     	; 0x2298 <__mulsf3_pse+0xa0>
    225c:	88 23       	and	r24, r24
    225e:	4a f0       	brmi	.+18     	; 0x2272 <__mulsf3_pse+0x7a>
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	bb 1f       	adc	r27, r27
    2266:	66 1f       	adc	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	88 1f       	adc	r24, r24
    226c:	91 50       	subi	r25, 0x01	; 1
    226e:	50 40       	sbci	r21, 0x00	; 0
    2270:	a9 f7       	brne	.-22     	; 0x225c <__mulsf3_pse+0x64>
    2272:	9e 3f       	cpi	r25, 0xFE	; 254
    2274:	51 05       	cpc	r21, r1
    2276:	80 f0       	brcs	.+32     	; 0x2298 <__mulsf3_pse+0xa0>
    2278:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__fp_inf>
    227c:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__fp_szero>
    2280:	5f 3f       	cpi	r21, 0xFF	; 255
    2282:	e4 f3       	brlt	.-8      	; 0x227c <__mulsf3_pse+0x84>
    2284:	98 3e       	cpi	r25, 0xE8	; 232
    2286:	d4 f3       	brlt	.-12     	; 0x227c <__mulsf3_pse+0x84>
    2288:	86 95       	lsr	r24
    228a:	77 95       	ror	r23
    228c:	67 95       	ror	r22
    228e:	b7 95       	ror	r27
    2290:	f7 95       	ror	r31
    2292:	e7 95       	ror	r30
    2294:	9f 5f       	subi	r25, 0xFF	; 255
    2296:	c1 f7       	brne	.-16     	; 0x2288 <__mulsf3_pse+0x90>
    2298:	fe 2b       	or	r31, r30
    229a:	88 0f       	add	r24, r24
    229c:	91 1d       	adc	r25, r1
    229e:	96 95       	lsr	r25
    22a0:	87 95       	ror	r24
    22a2:	97 f9       	bld	r25, 7
    22a4:	08 95       	ret

000022a6 <atof>:
    22a6:	66 27       	eor	r22, r22
    22a8:	77 27       	eor	r23, r23
    22aa:	0c 94 90 11 	jmp	0x2320	; 0x2320 <strtod>

000022ae <strcmp>:
    22ae:	fb 01       	movw	r30, r22
    22b0:	dc 01       	movw	r26, r24
    22b2:	8d 91       	ld	r24, X+
    22b4:	01 90       	ld	r0, Z+
    22b6:	80 19       	sub	r24, r0
    22b8:	01 10       	cpse	r0, r1
    22ba:	d9 f3       	breq	.-10     	; 0x22b2 <strcmp+0x4>
    22bc:	99 0b       	sbc	r25, r25
    22be:	08 95       	ret

000022c0 <itoa>:
    22c0:	45 32       	cpi	r20, 0x25	; 37
    22c2:	51 05       	cpc	r21, r1
    22c4:	20 f4       	brcc	.+8      	; 0x22ce <itoa+0xe>
    22c6:	42 30       	cpi	r20, 0x02	; 2
    22c8:	10 f0       	brcs	.+4      	; 0x22ce <itoa+0xe>
    22ca:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__itoa_ncheck>
    22ce:	fb 01       	movw	r30, r22
    22d0:	10 82       	st	Z, r1
    22d2:	cb 01       	movw	r24, r22
    22d4:	08 95       	ret

000022d6 <__itoa_ncheck>:
    22d6:	bb 27       	eor	r27, r27
    22d8:	4a 30       	cpi	r20, 0x0A	; 10
    22da:	31 f4       	brne	.+12     	; 0x22e8 <__itoa_ncheck+0x12>
    22dc:	99 23       	and	r25, r25
    22de:	22 f4       	brpl	.+8      	; 0x22e8 <__itoa_ncheck+0x12>
    22e0:	bd e2       	ldi	r27, 0x2D	; 45
    22e2:	90 95       	com	r25
    22e4:	81 95       	neg	r24
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__utoa_common>

000022ec <__utoa_ncheck>:
    22ec:	bb 27       	eor	r27, r27

000022ee <__utoa_common>:
    22ee:	fb 01       	movw	r30, r22
    22f0:	55 27       	eor	r21, r21
    22f2:	aa 27       	eor	r26, r26
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	aa 1f       	adc	r26, r26
    22fa:	a4 17       	cp	r26, r20
    22fc:	10 f0       	brcs	.+4      	; 0x2302 <__utoa_common+0x14>
    22fe:	a4 1b       	sub	r26, r20
    2300:	83 95       	inc	r24
    2302:	50 51       	subi	r21, 0x10	; 16
    2304:	b9 f7       	brne	.-18     	; 0x22f4 <__utoa_common+0x6>
    2306:	a0 5d       	subi	r26, 0xD0	; 208
    2308:	aa 33       	cpi	r26, 0x3A	; 58
    230a:	08 f0       	brcs	.+2      	; 0x230e <__utoa_common+0x20>
    230c:	a9 5d       	subi	r26, 0xD9	; 217
    230e:	a1 93       	st	Z+, r26
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	79 f7       	brne	.-34     	; 0x22f2 <__utoa_common+0x4>
    2314:	b1 11       	cpse	r27, r1
    2316:	b1 93       	st	Z+, r27
    2318:	11 92       	st	Z+, r1
    231a:	cb 01       	movw	r24, r22
    231c:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <strrev>

00002320 <strtod>:
    2320:	a0 e0       	ldi	r26, 0x00	; 0
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e6 e9       	ldi	r30, 0x96	; 150
    2326:	f1 e1       	ldi	r31, 0x11	; 17
    2328:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0xc>
    232c:	ec 01       	movw	r28, r24
    232e:	6b 01       	movw	r12, r22
    2330:	61 15       	cp	r22, r1
    2332:	71 05       	cpc	r23, r1
    2334:	19 f0       	breq	.+6      	; 0x233c <strtod+0x1c>
    2336:	fb 01       	movw	r30, r22
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	80 83       	st	Z, r24
    233c:	7e 01       	movw	r14, r28
    233e:	ff ef       	ldi	r31, 0xFF	; 255
    2340:	ef 1a       	sub	r14, r31
    2342:	ff 0a       	sbc	r15, r31
    2344:	08 81       	ld	r16, Y
    2346:	80 2f       	mov	r24, r16
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 de 12 	call	0x25bc	; 0x25bc <isspace>
    234e:	89 2b       	or	r24, r25
    2350:	11 f0       	breq	.+4      	; 0x2356 <strtod+0x36>
    2352:	e7 01       	movw	r28, r14
    2354:	f3 cf       	rjmp	.-26     	; 0x233c <strtod+0x1c>
    2356:	0d 32       	cpi	r16, 0x2D	; 45
    2358:	39 f4       	brne	.+14     	; 0x2368 <strtod+0x48>
    235a:	7e 01       	movw	r14, r28
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	e8 0e       	add	r14, r24
    2360:	f1 1c       	adc	r15, r1
    2362:	09 81       	ldd	r16, Y+1	; 0x01
    2364:	11 e0       	ldi	r17, 0x01	; 1
    2366:	08 c0       	rjmp	.+16     	; 0x2378 <strtod+0x58>
    2368:	0b 32       	cpi	r16, 0x2B	; 43
    236a:	29 f4       	brne	.+10     	; 0x2376 <strtod+0x56>
    236c:	7e 01       	movw	r14, r28
    236e:	92 e0       	ldi	r25, 0x02	; 2
    2370:	e9 0e       	add	r14, r25
    2372:	f1 1c       	adc	r15, r1
    2374:	09 81       	ldd	r16, Y+1	; 0x01
    2376:	10 e0       	ldi	r17, 0x00	; 0
    2378:	e7 01       	movw	r28, r14
    237a:	21 97       	sbiw	r28, 0x01	; 1
    237c:	43 e0       	ldi	r20, 0x03	; 3
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	6c e5       	ldi	r22, 0x5C	; 92
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	ce 01       	movw	r24, r28
    2386:	0e 94 e7 12 	call	0x25ce	; 0x25ce <strncasecmp_P>
    238a:	89 2b       	or	r24, r25
    238c:	c1 f4       	brne	.+48     	; 0x23be <strtod+0x9e>
    238e:	23 96       	adiw	r28, 0x03	; 3
    2390:	45 e0       	ldi	r20, 0x05	; 5
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	67 e5       	ldi	r22, 0x57	; 87
    2396:	70 e0       	ldi	r23, 0x00	; 0
    2398:	ce 01       	movw	r24, r28
    239a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <strncasecmp_P>
    239e:	89 2b       	or	r24, r25
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <strtod+0x84>
    23a2:	25 96       	adiw	r28, 0x05	; 5
    23a4:	c1 14       	cp	r12, r1
    23a6:	d1 04       	cpc	r13, r1
    23a8:	19 f0       	breq	.+6      	; 0x23b0 <strtod+0x90>
    23aa:	f6 01       	movw	r30, r12
    23ac:	d1 83       	std	Z+1, r29	; 0x01
    23ae:	c0 83       	st	Z, r28
    23b0:	11 11       	cpse	r17, r1
    23b2:	f6 c0       	rjmp	.+492    	; 0x25a0 <strtod+0x280>
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	80 e8       	ldi	r24, 0x80	; 128
    23ba:	9f e7       	ldi	r25, 0x7F	; 127
    23bc:	fa c0       	rjmp	.+500    	; 0x25b2 <strtod+0x292>
    23be:	43 e0       	ldi	r20, 0x03	; 3
    23c0:	50 e0       	ldi	r21, 0x00	; 0
    23c2:	64 e5       	ldi	r22, 0x54	; 84
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	ce 01       	movw	r24, r28
    23c8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <strncasecmp_P>
    23cc:	89 2b       	or	r24, r25
    23ce:	59 f4       	brne	.+22     	; 0x23e6 <strtod+0xc6>
    23d0:	c1 14       	cp	r12, r1
    23d2:	d1 04       	cpc	r13, r1
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <strtod+0xb8>
    23d6:	e9 c0       	rjmp	.+466    	; 0x25aa <strtod+0x28a>
    23d8:	f2 e0       	ldi	r31, 0x02	; 2
    23da:	ef 0e       	add	r14, r31
    23dc:	f1 1c       	adc	r15, r1
    23de:	f6 01       	movw	r30, r12
    23e0:	f1 82       	std	Z+1, r15	; 0x01
    23e2:	e0 82       	st	Z, r14
    23e4:	e2 c0       	rjmp	.+452    	; 0x25aa <strtod+0x28a>
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	a9 01       	movw	r20, r18
    23ec:	c0 e0       	ldi	r28, 0x00	; 0
    23ee:	d0 e0       	ldi	r29, 0x00	; 0
    23f0:	f7 01       	movw	r30, r14
    23f2:	80 ed       	ldi	r24, 0xD0	; 208
    23f4:	a8 2e       	mov	r10, r24
    23f6:	a0 0e       	add	r10, r16
    23f8:	89 e0       	ldi	r24, 0x09	; 9
    23fa:	8a 15       	cp	r24, r10
    23fc:	30 f1       	brcs	.+76     	; 0x244a <strtod+0x12a>
    23fe:	91 2f       	mov	r25, r17
    2400:	92 60       	ori	r25, 0x02	; 2
    2402:	b9 2e       	mov	r11, r25
    2404:	81 2f       	mov	r24, r17
    2406:	88 70       	andi	r24, 0x08	; 8
    2408:	12 ff       	sbrs	r17, 2
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <strtod+0xf4>
    240c:	81 11       	cpse	r24, r1
    240e:	24 c0       	rjmp	.+72     	; 0x2458 <strtod+0x138>
    2410:	21 96       	adiw	r28, 0x01	; 1
    2412:	22 c0       	rjmp	.+68     	; 0x2458 <strtod+0x138>
    2414:	81 11       	cpse	r24, r1
    2416:	21 97       	sbiw	r28, 0x01	; 1
    2418:	a5 e0       	ldi	r26, 0x05	; 5
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	0e 94 12 13 	call	0x2624	; 0x2624 <__muluhisi3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	aa 1f       	adc	r26, r26
    242a:	bb 1f       	adc	r27, r27
    242c:	9c 01       	movw	r18, r24
    242e:	ad 01       	movw	r20, r26
    2430:	2a 0d       	add	r18, r10
    2432:	31 1d       	adc	r19, r1
    2434:	41 1d       	adc	r20, r1
    2436:	51 1d       	adc	r21, r1
    2438:	28 39       	cpi	r18, 0x98	; 152
    243a:	89 e9       	ldi	r24, 0x99	; 153
    243c:	38 07       	cpc	r19, r24
    243e:	48 07       	cpc	r20, r24
    2440:	89 e1       	ldi	r24, 0x19	; 25
    2442:	58 07       	cpc	r21, r24
    2444:	48 f0       	brcs	.+18     	; 0x2458 <strtod+0x138>
    2446:	16 60       	ori	r17, 0x06	; 6
    2448:	06 c0       	rjmp	.+12     	; 0x2456 <strtod+0x136>
    244a:	9e ef       	ldi	r25, 0xFE	; 254
    244c:	a9 12       	cpse	r10, r25
    244e:	0a c0       	rjmp	.+20     	; 0x2464 <strtod+0x144>
    2450:	13 fd       	sbrc	r17, 3
    2452:	40 c0       	rjmp	.+128    	; 0x24d4 <strtod+0x1b4>
    2454:	18 60       	ori	r17, 0x08	; 8
    2456:	b1 2e       	mov	r11, r17
    2458:	8f ef       	ldi	r24, 0xFF	; 255
    245a:	e8 1a       	sub	r14, r24
    245c:	f8 0a       	sbc	r15, r24
    245e:	00 81       	ld	r16, Z
    2460:	1b 2d       	mov	r17, r11
    2462:	c6 cf       	rjmp	.-116    	; 0x23f0 <strtod+0xd0>
    2464:	80 2f       	mov	r24, r16
    2466:	8f 7d       	andi	r24, 0xDF	; 223
    2468:	85 34       	cpi	r24, 0x45	; 69
    246a:	a1 f5       	brne	.+104    	; 0x24d4 <strtod+0x1b4>
    246c:	80 81       	ld	r24, Z
    246e:	8d 32       	cpi	r24, 0x2D	; 45
    2470:	11 f4       	brne	.+4      	; 0x2476 <strtod+0x156>
    2472:	10 61       	ori	r17, 0x10	; 16
    2474:	06 c0       	rjmp	.+12     	; 0x2482 <strtod+0x162>
    2476:	8b 32       	cpi	r24, 0x2B	; 43
    2478:	21 f0       	breq	.+8      	; 0x2482 <strtod+0x162>
    247a:	31 96       	adiw	r30, 0x01	; 1
    247c:	61 e0       	ldi	r22, 0x01	; 1
    247e:	70 e0       	ldi	r23, 0x00	; 0
    2480:	04 c0       	rjmp	.+8      	; 0x248a <strtod+0x16a>
    2482:	81 81       	ldd	r24, Z+1	; 0x01
    2484:	32 96       	adiw	r30, 0x02	; 2
    2486:	62 e0       	ldi	r22, 0x02	; 2
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	80 53       	subi	r24, 0x30	; 48
    248c:	8a 30       	cpi	r24, 0x0A	; 10
    248e:	18 f0       	brcs	.+6      	; 0x2496 <strtod+0x176>
    2490:	e6 1b       	sub	r30, r22
    2492:	f7 0b       	sbc	r31, r23
    2494:	1f c0       	rjmp	.+62     	; 0x24d4 <strtod+0x1b4>
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	70 e0       	ldi	r23, 0x00	; 0
    249a:	60 38       	cpi	r22, 0x80	; 128
    249c:	9c e0       	ldi	r25, 0x0C	; 12
    249e:	79 07       	cpc	r23, r25
    24a0:	5c f4       	brge	.+22     	; 0x24b8 <strtod+0x198>
    24a2:	db 01       	movw	r26, r22
    24a4:	aa 0f       	add	r26, r26
    24a6:	bb 1f       	adc	r27, r27
    24a8:	aa 0f       	add	r26, r26
    24aa:	bb 1f       	adc	r27, r27
    24ac:	6a 0f       	add	r22, r26
    24ae:	7b 1f       	adc	r23, r27
    24b0:	66 0f       	add	r22, r22
    24b2:	77 1f       	adc	r23, r23
    24b4:	68 0f       	add	r22, r24
    24b6:	71 1d       	adc	r23, r1
    24b8:	31 96       	adiw	r30, 0x01	; 1
    24ba:	df 01       	movw	r26, r30
    24bc:	11 97       	sbiw	r26, 0x01	; 1
    24be:	8c 91       	ld	r24, X
    24c0:	80 53       	subi	r24, 0x30	; 48
    24c2:	8a 30       	cpi	r24, 0x0A	; 10
    24c4:	50 f3       	brcs	.-44     	; 0x249a <strtod+0x17a>
    24c6:	14 ff       	sbrs	r17, 4
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <strtod+0x1b0>
    24ca:	71 95       	neg	r23
    24cc:	61 95       	neg	r22
    24ce:	71 09       	sbc	r23, r1
    24d0:	c6 0f       	add	r28, r22
    24d2:	d7 1f       	adc	r29, r23
    24d4:	11 ff       	sbrs	r17, 1
    24d6:	08 c0       	rjmp	.+16     	; 0x24e8 <strtod+0x1c8>
    24d8:	c1 14       	cp	r12, r1
    24da:	d1 04       	cpc	r13, r1
    24dc:	29 f0       	breq	.+10     	; 0x24e8 <strtod+0x1c8>
    24de:	cf 01       	movw	r24, r30
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f6 01       	movw	r30, r12
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
    24e8:	ca 01       	movw	r24, r20
    24ea:	b9 01       	movw	r22, r18
    24ec:	0e 94 2f 10 	call	0x205e	; 0x205e <__floatunsisf>
    24f0:	21 2f       	mov	r18, r17
    24f2:	23 70       	andi	r18, 0x03	; 3
    24f4:	23 30       	cpi	r18, 0x03	; 3
    24f6:	19 f0       	breq	.+6      	; 0x24fe <strtod+0x1de>
    24f8:	4b 01       	movw	r8, r22
    24fa:	5c 01       	movw	r10, r24
    24fc:	06 c0       	rjmp	.+12     	; 0x250a <strtod+0x1ea>
    24fe:	4b 01       	movw	r8, r22
    2500:	5c 01       	movw	r10, r24
    2502:	b7 fa       	bst	r11, 7
    2504:	b0 94       	com	r11
    2506:	b7 f8       	bld	r11, 7
    2508:	b0 94       	com	r11
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	a9 01       	movw	r20, r18
    2510:	c5 01       	movw	r24, r10
    2512:	b4 01       	movw	r22, r8
    2514:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    2518:	88 23       	and	r24, r24
    251a:	09 f4       	brne	.+2      	; 0x251e <strtod+0x1fe>
    251c:	3e c0       	rjmp	.+124    	; 0x259a <strtod+0x27a>
    251e:	d7 ff       	sbrs	r29, 7
    2520:	06 c0       	rjmp	.+12     	; 0x252e <strtod+0x20e>
    2522:	d1 95       	neg	r29
    2524:	c1 95       	neg	r28
    2526:	d1 09       	sbc	r29, r1
    2528:	03 e7       	ldi	r16, 0x73	; 115
    252a:	10 e0       	ldi	r17, 0x00	; 0
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <strtod+0x212>
    252e:	0b e8       	ldi	r16, 0x8B	; 139
    2530:	10 e0       	ldi	r17, 0x00	; 0
    2532:	68 01       	movw	r12, r16
    2534:	f8 e1       	ldi	r31, 0x18	; 24
    2536:	cf 1a       	sub	r12, r31
    2538:	d1 08       	sbc	r13, r1
    253a:	90 e2       	ldi	r25, 0x20	; 32
    253c:	e9 2e       	mov	r14, r25
    253e:	f1 2c       	mov	r15, r1
    2540:	ce 15       	cp	r28, r14
    2542:	df 05       	cpc	r29, r15
    2544:	74 f0       	brlt	.+28     	; 0x2562 <strtod+0x242>
    2546:	f8 01       	movw	r30, r16
    2548:	25 91       	lpm	r18, Z+
    254a:	35 91       	lpm	r19, Z+
    254c:	45 91       	lpm	r20, Z+
    254e:	54 91       	lpm	r21, Z
    2550:	c5 01       	movw	r24, r10
    2552:	b4 01       	movw	r22, r8
    2554:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    2558:	4b 01       	movw	r8, r22
    255a:	5c 01       	movw	r10, r24
    255c:	ce 19       	sub	r28, r14
    255e:	df 09       	sbc	r29, r15
    2560:	ef cf       	rjmp	.-34     	; 0x2540 <strtod+0x220>
    2562:	04 50       	subi	r16, 0x04	; 4
    2564:	11 09       	sbc	r17, r1
    2566:	f5 94       	asr	r15
    2568:	e7 94       	ror	r14
    256a:	0c 15       	cp	r16, r12
    256c:	1d 05       	cpc	r17, r13
    256e:	41 f7       	brne	.-48     	; 0x2540 <strtod+0x220>
    2570:	8a 2d       	mov	r24, r10
    2572:	88 0f       	add	r24, r24
    2574:	8b 2d       	mov	r24, r11
    2576:	88 1f       	adc	r24, r24
    2578:	8f 3f       	cpi	r24, 0xFF	; 255
    257a:	49 f0       	breq	.+18     	; 0x258e <strtod+0x26e>
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	a9 01       	movw	r20, r18
    2582:	c5 01       	movw	r24, r10
    2584:	b4 01       	movw	r22, r8
    2586:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
    258a:	81 11       	cpse	r24, r1
    258c:	06 c0       	rjmp	.+12     	; 0x259a <strtod+0x27a>
    258e:	82 e2       	ldi	r24, 0x22	; 34
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <errno+0x1>
    2596:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <errno>
    259a:	c5 01       	movw	r24, r10
    259c:	b4 01       	movw	r22, r8
    259e:	09 c0       	rjmp	.+18     	; 0x25b2 <strtod+0x292>
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	80 e8       	ldi	r24, 0x80	; 128
    25a6:	9f ef       	ldi	r25, 0xFF	; 255
    25a8:	04 c0       	rjmp	.+8      	; 0x25b2 <strtod+0x292>
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	80 ec       	ldi	r24, 0xC0	; 192
    25b0:	9f e7       	ldi	r25, 0x7F	; 127
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	ec e0       	ldi	r30, 0x0C	; 12
    25b8:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0xc>

000025bc <isspace>:
    25bc:	91 11       	cpse	r25, r1
    25be:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__ctype_isfalse>
    25c2:	80 32       	cpi	r24, 0x20	; 32
    25c4:	19 f0       	breq	.+6      	; 0x25cc <isspace+0x10>
    25c6:	89 50       	subi	r24, 0x09	; 9
    25c8:	85 50       	subi	r24, 0x05	; 5
    25ca:	c8 f7       	brcc	.-14     	; 0x25be <isspace+0x2>
    25cc:	08 95       	ret

000025ce <strncasecmp_P>:
    25ce:	fb 01       	movw	r30, r22
    25d0:	dc 01       	movw	r26, r24
    25d2:	41 50       	subi	r20, 0x01	; 1
    25d4:	50 40       	sbci	r21, 0x00	; 0
    25d6:	88 f0       	brcs	.+34     	; 0x25fa <strncasecmp_P+0x2c>
    25d8:	8d 91       	ld	r24, X+
    25da:	81 34       	cpi	r24, 0x41	; 65
    25dc:	1c f0       	brlt	.+6      	; 0x25e4 <strncasecmp_P+0x16>
    25de:	8b 35       	cpi	r24, 0x5B	; 91
    25e0:	0c f4       	brge	.+2      	; 0x25e4 <strncasecmp_P+0x16>
    25e2:	80 5e       	subi	r24, 0xE0	; 224
    25e4:	65 91       	lpm	r22, Z+
    25e6:	61 34       	cpi	r22, 0x41	; 65
    25e8:	1c f0       	brlt	.+6      	; 0x25f0 <strncasecmp_P+0x22>
    25ea:	6b 35       	cpi	r22, 0x5B	; 91
    25ec:	0c f4       	brge	.+2      	; 0x25f0 <strncasecmp_P+0x22>
    25ee:	60 5e       	subi	r22, 0xE0	; 224
    25f0:	86 1b       	sub	r24, r22
    25f2:	61 11       	cpse	r22, r1
    25f4:	71 f3       	breq	.-36     	; 0x25d2 <strncasecmp_P+0x4>
    25f6:	99 0b       	sbc	r25, r25
    25f8:	08 95       	ret
    25fa:	88 1b       	sub	r24, r24
    25fc:	fc cf       	rjmp	.-8      	; 0x25f6 <strncasecmp_P+0x28>

000025fe <strrev>:
    25fe:	dc 01       	movw	r26, r24
    2600:	fc 01       	movw	r30, r24
    2602:	67 2f       	mov	r22, r23
    2604:	71 91       	ld	r23, Z+
    2606:	77 23       	and	r23, r23
    2608:	e1 f7       	brne	.-8      	; 0x2602 <strrev+0x4>
    260a:	32 97       	sbiw	r30, 0x02	; 2
    260c:	04 c0       	rjmp	.+8      	; 0x2616 <strrev+0x18>
    260e:	7c 91       	ld	r23, X
    2610:	6d 93       	st	X+, r22
    2612:	70 83       	st	Z, r23
    2614:	62 91       	ld	r22, -Z
    2616:	ae 17       	cp	r26, r30
    2618:	bf 07       	cpc	r27, r31
    261a:	c8 f3       	brcs	.-14     	; 0x260e <strrev+0x10>
    261c:	08 95       	ret

0000261e <__ctype_isfalse>:
    261e:	99 27       	eor	r25, r25
    2620:	88 27       	eor	r24, r24

00002622 <__ctype_istrue>:
    2622:	08 95       	ret

00002624 <__muluhisi3>:
    2624:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__umulhisi3>
    2628:	a5 9f       	mul	r26, r21
    262a:	90 0d       	add	r25, r0
    262c:	b4 9f       	mul	r27, r20
    262e:	90 0d       	add	r25, r0
    2630:	a4 9f       	mul	r26, r20
    2632:	80 0d       	add	r24, r0
    2634:	91 1d       	adc	r25, r1
    2636:	11 24       	eor	r1, r1
    2638:	08 95       	ret

0000263a <__prologue_saves__>:
    263a:	2f 92       	push	r2
    263c:	3f 92       	push	r3
    263e:	4f 92       	push	r4
    2640:	5f 92       	push	r5
    2642:	6f 92       	push	r6
    2644:	7f 92       	push	r7
    2646:	8f 92       	push	r8
    2648:	9f 92       	push	r9
    264a:	af 92       	push	r10
    264c:	bf 92       	push	r11
    264e:	cf 92       	push	r12
    2650:	df 92       	push	r13
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	ca 1b       	sub	r28, r26
    2664:	db 0b       	sbc	r29, r27
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	09 94       	ijmp

00002672 <__epilogue_restores__>:
    2672:	2a 88       	ldd	r2, Y+18	; 0x12
    2674:	39 88       	ldd	r3, Y+17	; 0x11
    2676:	48 88       	ldd	r4, Y+16	; 0x10
    2678:	5f 84       	ldd	r5, Y+15	; 0x0f
    267a:	6e 84       	ldd	r6, Y+14	; 0x0e
    267c:	7d 84       	ldd	r7, Y+13	; 0x0d
    267e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2680:	9b 84       	ldd	r9, Y+11	; 0x0b
    2682:	aa 84       	ldd	r10, Y+10	; 0x0a
    2684:	b9 84       	ldd	r11, Y+9	; 0x09
    2686:	c8 84       	ldd	r12, Y+8	; 0x08
    2688:	df 80       	ldd	r13, Y+7	; 0x07
    268a:	ee 80       	ldd	r14, Y+6	; 0x06
    268c:	fd 80       	ldd	r15, Y+5	; 0x05
    268e:	0c 81       	ldd	r16, Y+4	; 0x04
    2690:	1b 81       	ldd	r17, Y+3	; 0x03
    2692:	aa 81       	ldd	r26, Y+2	; 0x02
    2694:	b9 81       	ldd	r27, Y+1	; 0x01
    2696:	ce 0f       	add	r28, r30
    2698:	d1 1d       	adc	r29, r1
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	ed 01       	movw	r28, r26
    26a6:	08 95       	ret

000026a8 <__umulhisi3>:
    26a8:	a2 9f       	mul	r26, r18
    26aa:	b0 01       	movw	r22, r0
    26ac:	b3 9f       	mul	r27, r19
    26ae:	c0 01       	movw	r24, r0
    26b0:	a3 9f       	mul	r26, r19
    26b2:	70 0d       	add	r23, r0
    26b4:	81 1d       	adc	r24, r1
    26b6:	11 24       	eor	r1, r1
    26b8:	91 1d       	adc	r25, r1
    26ba:	b2 9f       	mul	r27, r18
    26bc:	70 0d       	add	r23, r0
    26be:	81 1d       	adc	r24, r1
    26c0:	11 24       	eor	r1, r1
    26c2:	91 1d       	adc	r25, r1
    26c4:	08 95       	ret

000026c6 <_exit>:
    26c6:	f8 94       	cli

000026c8 <__stop_program>:
    26c8:	ff cf       	rjmp	.-2      	; 0x26c8 <__stop_program>
