
ATM_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000231c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  0000231c  000023b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  008000fc  008000fc  0000244c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002730  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d95  00000000  00000000  00004dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001614  00000000  00000000  00005b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  000071a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000948  00000000  00000000  000078e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a65  00000000  00000000  00008228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00009c8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_11>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ec e1       	ldi	r30, 0x1C	; 28
      a4:	f3 e2       	ldi	r31, 0x23	; 35
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 3f       	cpi	r26, 0xFC	; 252
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ac ef       	ldi	r26, 0xFC	; 252
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 33       	cpi	r26, 0x3D	; 61
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 38 09 	call	0x1270	; 0x1270 <main>
      c6:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <appInit>:
			//            accountRefrence->state=accountsDB[x].state;
			return ACC_FOUND;
		}
	}
	return ACC_NOT_FOUNT;
}
      ce:	df 92       	push	r13
      d0:	ef 92       	push	r14
      d2:	ff 92       	push	r15
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	0f 2e       	mov	r0, r31
      de:	f5 e0       	ldi	r31, 0x05	; 5
      e0:	df 2e       	mov	r13, r31
      e2:	f0 2d       	mov	r31, r0
      e4:	d0 92 2c 01 	sts	0x012C, r13	; 0x80012c <atm_mode>
      e8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <card_trigger_signal>
      ec:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ATM_STATUS>
      f0:	e7 e0       	ldi	r30, 0x07	; 7
      f2:	f1 e0       	ldi	r31, 0x01	; 1
      f4:	c2 e0       	ldi	r28, 0x02	; 2
      f6:	0c 2f       	mov	r16, r28
      f8:	c2 83       	std	Z+2, r28	; 0x02
      fa:	d3 e0       	ldi	r29, 0x03	; 3
      fc:	3d 2f       	mov	r19, r29
      fe:	d5 83       	std	Z+5, r29	; 0x05
     100:	ec 2e       	mov	r14, r28
     102:	c0 83       	st	Z, r28
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	18 2f       	mov	r17, r24
     108:	83 83       	std	Z+3, r24	; 0x03
     10a:	fc 2e       	mov	r15, r28
     10c:	c1 83       	std	Z+1, r28	; 0x01
     10e:	2c 2f       	mov	r18, r28
     110:	c4 83       	std	Z+4, r28	; 0x04
     112:	4c 2f       	mov	r20, r28
     114:	c6 83       	std	Z+6, r28	; 0x06
     116:	84 e0       	ldi	r24, 0x04	; 4
     118:	58 2f       	mov	r21, r24
     11a:	87 83       	std	Z+7, r24	; 0x07
     11c:	6d 2d       	mov	r22, r13
     11e:	d0 86       	std	Z+8, r13	; 0x08
     120:	86 e0       	ldi	r24, 0x06	; 6
     122:	78 2f       	mov	r23, r24
     124:	81 87       	std	Z+9, r24	; 0x09
     126:	87 e0       	ldi	r24, 0x07	; 7
     128:	82 87       	std	Z+10, r24	; 0x0a
     12a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_init>
     12e:	e2 e3       	ldi	r30, 0x32	; 50
     130:	f1 e0       	ldi	r31, 0x01	; 1
     132:	14 82       	std	Z+4, r1	; 0x04
     134:	15 82       	std	Z+5, r1	; 0x05
     136:	4d 2f       	mov	r20, r29
     138:	d0 83       	st	Z, r29
     13a:	5d 2f       	mov	r21, r29
     13c:	d1 83       	std	Z+1, r29	; 0x01
     13e:	6c 2f       	mov	r22, r28
     140:	c2 83       	std	Z+2, r28	; 0x02
     142:	7d 2d       	mov	r23, r13
     144:	d3 82       	std	Z+3, r13	; 0x03
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <KPD_init>
     14e:	e4 e0       	ldi	r30, 0x04	; 4
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	d0 83       	st	Z, r29
     154:	d1 83       	std	Z+1, r29	; 0x01
     156:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buzzer>
     15a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <buzzer+0x1>
     15e:	0e 94 bc 05 	call	0xb78	; 0xb78 <buzzer_init>
     162:	e1 e0       	ldi	r30, 0x01	; 1
     164:	f1 e0       	ldi	r31, 0x01	; 1
     166:	d0 83       	st	Z, r29
     168:	c1 83       	std	Z+1, r28	; 0x01
     16a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <zero_enter_btn>
     16e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <zero_enter_btn+0x1>
     172:	0e 94 65 05 	call	0xaca	; 0xaca <BUTTON_init>
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	62 e0       	ldi	r22, 0x02	; 2
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
     180:	84 b7       	in	r24, 0x34	; 52
     182:	80 64       	ori	r24, 0x40	; 64
     184:	84 bf       	out	0x34, r24	; 52
     186:	8b b7       	in	r24, 0x3b	; 59
     188:	80 62       	ori	r24, 0x20	; 32
     18a:	8b bf       	out	0x3b, r24	; 59
     18c:	8f b7       	in	r24, 0x3f	; 63
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	8f bf       	out	0x3f, r24	; 63
     192:	78 94       	sei
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	08 95       	ret

000001a4 <idelMenu>:
     1a4:	8f 92       	push	r8
     1a6:	9f 92       	push	r9
     1a8:	af 92       	push	r10
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     1ba:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     1be:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     1c2:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     1c6:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     1ca:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     1ce:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     1d2:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     1d6:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     1da:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     1de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     1e2:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_clearScreen>
     1e6:	0f 2e       	mov	r0, r31
     1e8:	f0 e6       	ldi	r31, 0x60	; 96
     1ea:	8f 2e       	mov	r8, r31
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	9f 2e       	mov	r9, r31
     1f0:	f0 2d       	mov	r31, r0
     1f2:	0f 2e       	mov	r0, r31
     1f4:	f5 e0       	ldi	r31, 0x05	; 5
     1f6:	af 2e       	mov	r10, r31
     1f8:	f0 2d       	mov	r31, r0
     1fa:	c1 2c       	mov	r12, r1
     1fc:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     200:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     204:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     208:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     20c:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     210:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     214:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     218:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     21c:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     220:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     224:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     228:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	8a e7       	ldi	r24, 0x7A	; 122
     232:	94 e4       	ldi	r25, 0x44	; 68
     234:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
     238:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     23c:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     240:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     244:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     248:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     24c:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     250:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     254:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     258:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     25c:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     260:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     264:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_clearScreen>
     268:	0f 2e       	mov	r0, r31
     26a:	f8 e6       	ldi	r31, 0x68	; 104
     26c:	cf 2e       	mov	r12, r31
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	df 2e       	mov	r13, r31
     272:	f0 2d       	mov	r31, r0
     274:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     278:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     27c:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     280:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     284:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     288:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     28c:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     290:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     294:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     298:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     29c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     2a0:	0e 94 ff 07 	call	0xffe	; 0xffe <LCD_displayString>
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	ff 90       	pop	r15
     2aa:	ef 90       	pop	r14
     2ac:	df 90       	pop	r13
     2ae:	cf 90       	pop	r12
     2b0:	af 90       	pop	r10
     2b2:	9f 90       	pop	r9
     2b4:	8f 90       	pop	r8
     2b6:	08 95       	ret

000002b8 <readNumber>:
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	28 97       	sbiw	r28, 0x08	; 8
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	4b 83       	std	Y+3, r20	; 0x03
     2d6:	5c 83       	std	Y+4, r21	; 0x04
     2d8:	6d 83       	std	Y+5, r22	; 0x05
     2da:	7e 83       	std	Y+6, r23	; 0x06
     2dc:	8f 83       	std	Y+7, r24	; 0x07
     2de:	98 87       	std	Y+8, r25	; 0x08
     2e0:	79 01       	movw	r14, r18
     2e2:	9e 01       	movw	r18, r28
     2e4:	2f 5f       	subi	r18, 0xFF	; 255
     2e6:	3f 4f       	sbci	r19, 0xFF	; 255
     2e8:	0e 94 f6 05 	call	0xbec	; 0xbec <KPD_get_pressed_key>
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	88 e4       	ldi	r24, 0x48	; 72
     2f2:	92 e4       	ldi	r25, 0x42	; 66
     2f4:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
     2f8:	be 01       	movw	r22, r28
     2fa:	6e 5f       	subi	r22, 0xFE	; 254
     2fc:	7f 4f       	sbci	r23, 0xFF	; 255
     2fe:	c7 01       	movw	r24, r14
     300:	0e 94 6a 05 	call	0xad4	; 0xad4 <BUTTON_read_zero_enter>
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	80 ea       	ldi	r24, 0xA0	; 160
     30a:	91 e4       	ldi	r25, 0x41	; 65
     30c:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
     310:	1d c0       	rjmp	.+58     	; 0x34c <readNumber+0x94>
     312:	9e 01       	movw	r18, r28
     314:	2f 5f       	subi	r18, 0xFF	; 255
     316:	3f 4f       	sbci	r19, 0xFF	; 255
     318:	4b 81       	ldd	r20, Y+3	; 0x03
     31a:	5c 81       	ldd	r21, Y+4	; 0x04
     31c:	6d 81       	ldd	r22, Y+5	; 0x05
     31e:	7e 81       	ldd	r23, Y+6	; 0x06
     320:	8f 81       	ldd	r24, Y+7	; 0x07
     322:	98 85       	ldd	r25, Y+8	; 0x08
     324:	0e 94 f6 05 	call	0xbec	; 0xbec <KPD_get_pressed_key>
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	88 e4       	ldi	r24, 0x48	; 72
     32e:	92 e4       	ldi	r25, 0x42	; 66
     330:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
     334:	be 01       	movw	r22, r28
     336:	6e 5f       	subi	r22, 0xFE	; 254
     338:	7f 4f       	sbci	r23, 0xFF	; 255
     33a:	c7 01       	movw	r24, r14
     33c:	0e 94 6a 05 	call	0xad4	; 0xad4 <BUTTON_read_zero_enter>
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	80 e2       	ldi	r24, 0x20	; 32
     346:	91 e4       	ldi	r25, 0x41	; 65
     348:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	8c 30       	cpi	r24, 0x0C	; 12
     350:	19 f4       	brne	.+6      	; 0x358 <readNumber+0xa0>
     352:	9a 81       	ldd	r25, Y+2	; 0x02
     354:	9c 30       	cpi	r25, 0x0C	; 12
     356:	e9 f2       	breq	.-70     	; 0x312 <readNumber+0x5a>
     358:	8c 30       	cpi	r24, 0x0C	; 12
     35a:	19 f0       	breq	.+6      	; 0x362 <readNumber+0xaa>
     35c:	f8 01       	movw	r30, r16
     35e:	80 83       	st	Z, r24
     360:	05 c0       	rjmp	.+10     	; 0x36c <readNumber+0xb4>
     362:	8a 81       	ldd	r24, Y+2	; 0x02
     364:	8c 30       	cpi	r24, 0x0C	; 12
     366:	11 f0       	breq	.+4      	; 0x36c <readNumber+0xb4>
     368:	f8 01       	movw	r30, r16
     36a:	80 83       	st	Z, r24
     36c:	28 96       	adiw	r28, 0x08	; 8
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <readPIN>:
     386:	6f 92       	push	r6
     388:	7f 92       	push	r7
     38a:	8f 92       	push	r8
     38c:	9f 92       	push	r9
     38e:	af 92       	push	r10
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <readPIN+0x1c>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <readPIN+0x1e>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	3c 01       	movw	r6, r24
     3aa:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     3ae:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     3b2:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     3b6:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     3ba:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     3be:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     3c2:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     3c6:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     3ca:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     3ce:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     3d2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     3d6:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_clearScreen>
     3da:	0f 2e       	mov	r0, r31
     3dc:	f6 e7       	ldi	r31, 0x76	; 118
     3de:	8f 2e       	mov	r8, r31
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	9f 2e       	mov	r9, r31
     3e4:	f0 2d       	mov	r31, r0
     3e6:	a1 2c       	mov	r10, r1
     3e8:	c1 2c       	mov	r12, r1
     3ea:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     3ee:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     3f2:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     3f6:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     3fa:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     3fe:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     402:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     406:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     40a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     40e:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     412:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     416:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
     41a:	d1 2c       	mov	r13, r1
     41c:	41 c0       	rjmp	.+130    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     41e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <zero_enter_btn>
     422:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <zero_enter_btn+0x1>
     426:	8e 01       	movw	r16, r28
     428:	0f 5f       	subi	r16, 0xFF	; 255
     42a:	1f 4f       	sbci	r17, 0xFF	; 255
     42c:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <kpd>
     430:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <kpd+0x1>
     434:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <kpd+0x2>
     438:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <kpd+0x3>
     43c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <kpd+0x4>
     440:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <kpd+0x5>
     444:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <readNumber>
     448:	0f 2e       	mov	r0, r31
     44a:	f5 e0       	ldi	r31, 0x05	; 5
     44c:	af 2e       	mov	r10, r31
     44e:	f0 2d       	mov	r31, r0
     450:	ad 0c       	add	r10, r13
     452:	0f 2e       	mov	r0, r31
     454:	f5 e8       	ldi	r31, 0x85	; 133
     456:	8f 2e       	mov	r8, r31
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	9f 2e       	mov	r9, r31
     45c:	f0 2d       	mov	r31, r0
     45e:	cc 24       	eor	r12, r12
     460:	c3 94       	inc	r12
     462:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     466:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     46a:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     46e:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     472:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     476:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     47a:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     47e:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     482:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     486:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     48a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     48e:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	88 e4       	ldi	r24, 0x48	; 72
     498:	92 e4       	ldi	r25, 0x42	; 66
     49a:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
     49e:	d3 94       	inc	r13
     4a0:	83 e0       	ldi	r24, 0x03	; 3
     4a2:	8d 15       	cp	r24, r13
     4a4:	08 f0       	brcs	.+2      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4a6:	bb cf       	rjmp	.-138    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     4a8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <zero_enter_btn>
     4ac:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <zero_enter_btn+0x1>
     4b0:	09 e3       	ldi	r16, 0x39	; 57
     4b2:	11 e0       	ldi	r17, 0x01	; 1
     4b4:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <kpd>
     4b8:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <kpd+0x1>
     4bc:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <kpd+0x2>
     4c0:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <kpd+0x3>
     4c4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <kpd+0x4>
     4c8:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <kpd+0x5>
     4cc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <readNumber>
     4d0:	14 c0       	rjmp	.+40     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
     4d2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <zero_enter_btn>
     4d6:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <zero_enter_btn+0x1>
     4da:	09 e3       	ldi	r16, 0x39	; 57
     4dc:	11 e0       	ldi	r17, 0x01	; 1
     4de:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <kpd>
     4e2:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <kpd+0x1>
     4e6:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <kpd+0x2>
     4ea:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <kpd+0x3>
     4ee:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <kpd+0x4>
     4f2:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <kpd+0x5>
     4f6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <readNumber>
     4fa:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <btn_value_temp>
     4fe:	8b 30       	cpi	r24, 0x0B	; 11
     500:	41 f7       	brne	.-48     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     502:	ce 01       	movw	r24, r28
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	f3 01       	movw	r30, r6
     508:	91 83       	std	Z+1, r25	; 0x01
     50a:	80 83       	st	Z, r24
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	df 90       	pop	r13
     522:	cf 90       	pop	r12
     524:	af 90       	pop	r10
     526:	9f 90       	pop	r9
     528:	8f 90       	pop	r8
     52a:	7f 90       	pop	r7
     52c:	6f 90       	pop	r6
     52e:	08 95       	ret

00000530 <readCardInfo>:


void readCardInfo(ST_transaction_t *card){
	*card->PAN ="8989374615436850";
     530:	27 e8       	ldi	r18, 0x87	; 135
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
	*card->pin = "1122";
     538:	28 e9       	ldi	r18, 0x98	; 152
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	24 8b       	std	Z+20, r18	; 0x14
     53e:	08 95       	ret

00000540 <readAmount>:

}


void readAmount(float *amount){
     540:	6f 92       	push	r6
     542:	7f 92       	push	r7
     544:	8f 92       	push	r8
     546:	9f 92       	push	r9
     548:	af 92       	push	r10
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	29 97       	sbiw	r28, 0x09	; 9
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	3c 01       	movw	r6, r24
	uint8 amount_display[8] = "0000.00",num;
     56c:	88 e0       	ldi	r24, 0x08	; 8
     56e:	ea ea       	ldi	r30, 0xAA	; 170
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	de 01       	movw	r26, r28
     574:	11 96       	adiw	r26, 0x01	; 1
     576:	01 90       	ld	r0, Z+
     578:	0d 92       	st	X+, r0
     57a:	8a 95       	dec	r24
     57c:	e1 f7       	brne	.-8      	; 0x576 <readAmount+0x36>
	LCD_clearScreen(atm_lcd);
     57e:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     582:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     586:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     58a:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     58e:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     592:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     596:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     59a:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     59e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     5a2:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     5a6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     5aa:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd,0,3,"ENTER AMOUNT");
     5ae:	0f 2e       	mov	r0, r31
     5b0:	fd e9       	ldi	r31, 0x9D	; 157
     5b2:	8f 2e       	mov	r8, r31
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	9f 2e       	mov	r9, r31
     5b8:	f0 2d       	mov	r31, r0
     5ba:	0f 2e       	mov	r0, r31
     5bc:	f3 e0       	ldi	r31, 0x03	; 3
     5be:	af 2e       	mov	r10, r31
     5c0:	f0 2d       	mov	r31, r0
     5c2:	c1 2c       	mov	r12, r1
     5c4:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     5c8:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     5cc:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     5d0:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     5d4:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     5d8:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     5dc:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     5e0:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     5e4:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     5e8:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     5ec:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     5f0:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(atm_lcd,1,3,amount_display);
     5f4:	ce 01       	movw	r24, r28
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	4c 01       	movw	r8, r24
     5fa:	cc 24       	eor	r12, r12
     5fc:	c3 94       	inc	r12
     5fe:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     602:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     606:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     60a:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     60e:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     612:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     616:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     61a:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     61e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     622:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     626:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     62a:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
	for(uint8 i = 0 ; i <= 6;i++){
     62e:	d1 2c       	mov	r13, r1
     630:	45 c0       	rjmp	.+138    	; 0x6bc <readAmount+0x17c>
		if (i == 4)
     632:	94 e0       	ldi	r25, 0x04	; 4
     634:	d9 12       	cpse	r13, r25
     636:	01 c0       	rjmp	.+2      	; 0x63a <readAmount+0xfa>
		{
			// skip decimal point 
			i++;
     638:	d3 94       	inc	r13
		}
		readNumber(kpd,zero_enter_btn,&num);
     63a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <zero_enter_btn>
     63e:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <zero_enter_btn+0x1>
     642:	8e 01       	movw	r16, r28
     644:	07 5f       	subi	r16, 0xF7	; 247
     646:	1f 4f       	sbci	r17, 0xFF	; 255
     648:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <kpd>
     64c:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <kpd+0x1>
     650:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <kpd+0x2>
     654:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <kpd+0x3>
     658:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <kpd+0x4>
     65c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <kpd+0x5>
     660:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <readNumber>
		amount_display[i] = num +'0' ;
     664:	e1 e0       	ldi	r30, 0x01	; 1
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	ec 0f       	add	r30, r28
     66a:	fd 1f       	adc	r31, r29
     66c:	ed 0d       	add	r30, r13
     66e:	f1 1d       	adc	r31, r1
     670:	89 85       	ldd	r24, Y+9	; 0x09
     672:	80 5d       	subi	r24, 0xD0	; 208
     674:	80 83       	st	Z, r24
		LCD_displayStringRowColumn(atm_lcd,1,(3+i),amount_display);
     676:	0f 2e       	mov	r0, r31
     678:	f3 e0       	ldi	r31, 0x03	; 3
     67a:	af 2e       	mov	r10, r31
     67c:	f0 2d       	mov	r31, r0
     67e:	ad 0c       	add	r10, r13
     680:	fe 01       	movw	r30, r28
     682:	31 96       	adiw	r30, 0x01	; 1
     684:	4f 01       	movw	r8, r30
     686:	cc 24       	eor	r12, r12
     688:	c3 94       	inc	r12
     68a:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     68e:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     692:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     696:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     69a:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     69e:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     6a2:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     6a6:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     6aa:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     6ae:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     6b2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     6b6:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
void readAmount(float *amount){
	uint8 amount_display[8] = "0000.00",num;
	LCD_clearScreen(atm_lcd);
	LCD_displayStringRowColumn(atm_lcd,0,3,"ENTER AMOUNT");
	LCD_displayStringRowColumn(atm_lcd,1,3,amount_display);
	for(uint8 i = 0 ; i <= 6;i++){
     6ba:	d3 94       	inc	r13
     6bc:	f6 e0       	ldi	r31, 0x06	; 6
     6be:	fd 15       	cp	r31, r13
     6c0:	08 f0       	brcs	.+2      	; 0x6c4 <readAmount+0x184>
     6c2:	b7 cf       	rjmp	.-146    	; 0x632 <readAmount+0xf2>
		readNumber(kpd,zero_enter_btn,&num);
		amount_display[i] = num +'0' ;
		LCD_displayStringRowColumn(atm_lcd,1,(3+i),amount_display);

	}
	*amount = atof((const char *)amount_display);
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <atof>
     6cc:	f3 01       	movw	r30, r6
     6ce:	60 83       	st	Z, r22
     6d0:	71 83       	std	Z+1, r23	; 0x01
     6d2:	82 83       	std	Z+2, r24	; 0x02
     6d4:	93 83       	std	Z+3, r25	; 0x03
}
     6d6:	29 96       	adiw	r28, 0x09	; 9
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	af 90       	pop	r10
     6f4:	9f 90       	pop	r9
     6f6:	8f 90       	pop	r8
     6f8:	7f 90       	pop	r7
     6fa:	6f 90       	pop	r6
     6fc:	08 95       	ret

000006fe <appStart>:

void appStart(void){	
     6fe:	8f 92       	push	r8
     700:	9f 92       	push	r9
     702:	af 92       	push	r10
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	a0 97       	sbiw	r28, 0x20	; 32
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
	uint8 pin_temp[PIN_LENTH];
	ST_transaction_t card ;
	if (ATM_STATUS == ATM_BLOKED_MODE)
     724:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ATM_STATUS>
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	e1 f5       	brne	.+120    	; 0x7a4 <appStart+0xa6>
	{
		LCD_clearScreen(atm_lcd);
     72c:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     730:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     734:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     738:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     73c:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     740:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     744:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     748:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     74c:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     750:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     754:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     758:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"OUT FOR MENTENANCE");
     75c:	0f 2e       	mov	r0, r31
     75e:	f2 eb       	ldi	r31, 0xB2	; 178
     760:	8f 2e       	mov	r8, r31
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	9f 2e       	mov	r9, r31
     766:	f0 2d       	mov	r31, r0
     768:	0f 2e       	mov	r0, r31
     76a:	f3 e0       	ldi	r31, 0x03	; 3
     76c:	af 2e       	mov	r10, r31
     76e:	f0 2d       	mov	r31, r0
     770:	c1 2c       	mov	r12, r1
     772:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     776:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     77a:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     77e:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     782:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     786:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     78a:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     78e:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     792:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     796:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     79a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     79e:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
		return;	
     7a2:	6c c1       	rjmp	.+728    	; 0xa7c <__stack+0x21d>
	}	
	if (atm_mode == FRIST_RUN)
     7a4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <atm_mode>
     7a8:	85 30       	cpi	r24, 0x05	; 5
     7aa:	31 f4       	brne	.+12     	; 0x7b8 <appStart+0xba>
	{
		idelMenu();
     7ac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <idelMenu>
		atm_mode = NORMAL_MODE;
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <atm_mode>
		return;
     7b6:	62 c1       	rjmp	.+708    	; 0xa7c <__stack+0x21d>
	}
	if (card_trigger_signal == CARD_INSERTED)
     7b8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <card_trigger_signal>
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	09 f0       	breq	.+2      	; 0x7c2 <appStart+0xc4>
     7c0:	5d c1       	rjmp	.+698    	; 0xa7c <__stack+0x21d>
	{
		LCD_clearScreen(atm_lcd);
     7c2:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     7c6:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     7ca:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     7ce:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     7d2:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     7d6:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     7da:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     7de:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     7e2:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     7e6:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     7ea:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     7ee:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"CARD Detected");
     7f2:	0f 2e       	mov	r0, r31
     7f4:	f5 ec       	ldi	r31, 0xC5	; 197
     7f6:	8f 2e       	mov	r8, r31
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	9f 2e       	mov	r9, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	0f 2e       	mov	r0, r31
     800:	f3 e0       	ldi	r31, 0x03	; 3
     802:	af 2e       	mov	r10, r31
     804:	f0 2d       	mov	r31, r0
     806:	c1 2c       	mov	r12, r1
     808:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     80c:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     810:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     814:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     818:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     81c:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     820:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     824:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     828:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     82c:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     830:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     834:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
		
		LCD_displayStringRowColumn(atm_lcd,1,0,"READING ...");
     838:	0f 2e       	mov	r0, r31
     83a:	f3 ed       	ldi	r31, 0xD3	; 211
     83c:	8f 2e       	mov	r8, r31
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	9f 2e       	mov	r9, r31
     842:	f0 2d       	mov	r31, r0
     844:	a1 2c       	mov	r10, r1
     846:	cc 24       	eor	r12, r12
     848:	c3 94       	inc	r12
     84a:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     84e:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     852:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     856:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     85a:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     85e:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     862:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     866:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     86a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     86e:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     872:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     876:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
		// read Card info
		readCardInfo(&card);
     87a:	ce 01       	movw	r24, r28
     87c:	05 96       	adiw	r24, 0x05	; 5
     87e:	0e 94 98 02 	call	0x530	; 0x530 <readCardInfo>
		
		// READ PIN
		counter1 = 0;
     882:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter1>
				LCD_displayStringRowColumn(atm_lcd,0,0,"INVALID PIN");
				Timer0_Delay(2000);
			}
			
			// read PIN			
			readPIN(&pin_temp);
     886:	ce 01       	movw	r24, r28
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	0e 94 c3 01 	call	0x386	; 0x386 <readPIN>
			
			
			// check if PIN is correct
			//checkCardInfo(card,pin_temp);
			counter1++;
     88e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter1>
     892:	8f 5f       	subi	r24, 0xFF	; 255
     894:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counter1>
				//is_pin_correct = 0;
			//}
		}while((counter1<2)&&!is_pin_correct);
				
		// check if PIN entered twise wrong
		if (counter1>=2)
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	08 f4       	brcc	.+2      	; 0x89e <__stack+0x3f>
     89c:	6d c0       	rjmp	.+218    	; 0x978 <__stack+0x119>
		{
			// Turn Alarm ON
			LCD_clearScreen(atm_lcd);
     89e:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     8a2:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     8a6:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     8aa:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     8ae:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     8b2:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     8b6:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     8ba:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     8be:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     8c2:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     8c6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     8ca:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,3,"ATM BLOCKED");
     8ce:	0f 2e       	mov	r0, r31
     8d0:	ff ed       	ldi	r31, 0xDF	; 223
     8d2:	8f 2e       	mov	r8, r31
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	9f 2e       	mov	r9, r31
     8d8:	f0 2d       	mov	r31, r0
     8da:	0f 2e       	mov	r0, r31
     8dc:	f3 e0       	ldi	r31, 0x03	; 3
     8de:	af 2e       	mov	r10, r31
     8e0:	f0 2d       	mov	r31, r0
     8e2:	c1 2c       	mov	r12, r1
     8e4:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     8e8:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     8ec:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     8f0:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     8f4:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     8f8:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     8fc:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     900:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     904:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     908:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     90c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     910:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(atm_lcd,1,0,"INVALIDS TRYS");
     914:	0f 2e       	mov	r0, r31
     916:	fb ee       	ldi	r31, 0xEB	; 235
     918:	8f 2e       	mov	r8, r31
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	9f 2e       	mov	r9, r31
     91e:	f0 2d       	mov	r31, r0
     920:	a1 2c       	mov	r10, r1
     922:	cc 24       	eor	r12, r12
     924:	c3 94       	inc	r12
     926:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     92a:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     92e:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     932:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     936:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     93a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     93e:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     942:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     946:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     94a:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     94e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     952:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
			Timer0_Delay(1000);
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	8a e7       	ldi	r24, 0x7A	; 122
     95c:	94 e4       	ldi	r25, 0x44	; 68
     95e:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
			buzzer_digitalwrite(buzzer,DIO_HIGH);
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buzzer>
     968:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <buzzer+0x1>
     96c:	0e 94 c1 05 	call	0xb82	; 0xb82 <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ATM_STATUS>
     976:	82 c0       	rjmp	.+260    	; 0xa7c <__stack+0x21d>
		}
		
		
		float amount;
		// read amounts 
		readAmount(&amount);
     978:	ce 01       	movw	r24, r28
     97a:	4d 96       	adiw	r24, 0x1d	; 29
     97c:	0e 94 a0 02 	call	0x540	; 0x540 <readAmount>
		LCD_clearScreen(atm_lcd);
     980:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     984:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     988:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     98c:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     990:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     994:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     998:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     99c:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     9a0:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     9a4:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     9a8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     9ac:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_clearScreen>
		LCD_intgerToString(atm_lcd,amount);
     9b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     9b2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     9b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9b6:	98 a1       	ldd	r25, Y+32	; 0x20
     9b8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__fixsfsi>
     9bc:	6b 01       	movw	r12, r22
     9be:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     9c2:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     9c6:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     9ca:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     9ce:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     9d2:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     9d6:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     9da:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     9de:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     9e2:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     9e6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     9ea:	0e 94 d5 08 	call	0x11aa	; 0x11aa <LCD_intgerToString>
		Timer0_Delay(1000);
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	8a e7       	ldi	r24, 0x7A	; 122
     9f4:	94 e4       	ldi	r25, 0x44	; 68
     9f6:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
		
		
		

		// if it true
		LCD_clearScreen(atm_lcd);
     9fa:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     9fe:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     a02:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     a06:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     a0a:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     a0e:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     a12:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     a16:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     a1a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     a1e:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     a22:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     a26:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"OK");
     a2a:	0f 2e       	mov	r0, r31
     a2c:	f9 ef       	ldi	r31, 0xF9	; 249
     a2e:	8f 2e       	mov	r8, r31
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	9f 2e       	mov	r9, r31
     a34:	f0 2d       	mov	r31, r0
     a36:	0f 2e       	mov	r0, r31
     a38:	f3 e0       	ldi	r31, 0x03	; 3
     a3a:	af 2e       	mov	r10, r31
     a3c:	f0 2d       	mov	r31, r0
     a3e:	c1 2c       	mov	r12, r1
     a40:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <atm_lcd>
     a44:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <atm_lcd+0x1>
     a48:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <atm_lcd+0x2>
     a4c:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <atm_lcd+0x3>
     a50:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <atm_lcd+0x4>
     a54:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <atm_lcd+0x5>
     a58:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <atm_lcd+0x6>
     a5c:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <atm_lcd+0x7>
     a60:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <atm_lcd+0x8>
     a64:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <atm_lcd+0x9>
     a68:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <atm_lcd+0xa>
     a6c:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_displayStringRowColumn>
		Timer0_Delay(1000);
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	8a e7       	ldi	r24, 0x7A	; 122
     a76:	94 e4       	ldi	r25, 0x44	; 68
     a78:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
	}
}
     a7c:	a0 96       	adiw	r28, 0x20	; 32
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	af 90       	pop	r10
     a9a:	9f 90       	pop	r9
     a9c:	8f 90       	pop	r8
     a9e:	08 95       	ret

00000aa0 <__vector_3>:


ISR(INT2_vect){
     aa0:	1f 92       	push	r1
     aa2:	0f 92       	push	r0
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	0f 92       	push	r0
     aa8:	11 24       	eor	r1, r1
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
	card_trigger_signal = !card_trigger_signal;
     aae:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <card_trigger_signal>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	91 11       	cpse	r25, r1
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <card_trigger_signal>
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <BUTTON_init>:

void BUTTON_init(ST_PBTN_t button){
	dio_init(button.button_port,button.button_pin,DIO_IN);
}
void BUTTON_status(ST_PBTN_t button,uint8 *status){
	dio_read_pin(button.button_port,button.button_pin,status);
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	69 2f       	mov	r22, r25
     ace:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
     ad2:	08 95       	ret

00000ad4 <BUTTON_read_zero_enter>:
}


void BUTTON_read_zero_enter(ST_PBTN_t button,uint8 * value){
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <BUTTON_read_zero_enter+0xe>
     ae2:	1f 92       	push	r1
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	8b 01       	movw	r16, r22
	 uint8 button_state = 0;
     aea:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16 timeCounter = 0;
     aec:	1b 82       	std	Y+3, r1	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
	dio_read_pin(button.button_port,button.button_pin,&button_state);
     af0:	f9 2e       	mov	r15, r25
     af2:	e8 2e       	mov	r14, r24
     af4:	ae 01       	movw	r20, r28
     af6:	4f 5f       	subi	r20, 0xFF	; 255
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	69 2f       	mov	r22, r25
     afc:	0e 94 2b 0a 	call	0x1456	; 0x1456 <dio_read_pin>
	if (button_state == DIO_HIGH)
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	61 f5       	brne	.+88     	; 0xb5e <BUTTON_read_zero_enter+0x8a>
     b06:	27 c0       	rjmp	.+78     	; 0xb56 <BUTTON_read_zero_enter+0x82>
	{
		while(button_state == DIO_HIGH){
			Timer0_Delay(BTN_MIN_SECOND);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	88 e4       	ldi	r24, 0x48	; 72
     b0e:	92 e4       	ldi	r25, 0x42	; 66
     b10:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
			timeCounter += BTN_MIN_SECOND;
     b14:	8a 81       	ldd	r24, Y+2	; 0x02
     b16:	9b 81       	ldd	r25, Y+3	; 0x03
     b18:	c2 96       	adiw	r24, 0x32	; 50
     b1a:	9b 83       	std	Y+3, r25	; 0x03
     b1c:	8a 83       	std	Y+2, r24	; 0x02
			dio_read_pin(button.button_port,button.button_pin,&button_state);
     b1e:	ae 01       	movw	r20, r28
     b20:	4f 5f       	subi	r20, 0xFF	; 255
     b22:	5f 4f       	sbci	r21, 0xFF	; 255
     b24:	6f 2d       	mov	r22, r15
     b26:	8e 2d       	mov	r24, r14
     b28:	0e 94 2b 0a 	call	0x1456	; 0x1456 <dio_read_pin>
			if (button_state == DIO_LOW && timeCounter < BTN_2_SECOND)
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	81 11       	cpse	r24, r1
     b30:	09 c0       	rjmp	.+18     	; 0xb44 <BUTTON_read_zero_enter+0x70>
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	9b 81       	ldd	r25, Y+3	; 0x03
     b36:	8c 3d       	cpi	r24, 0xDC	; 220
     b38:	95 40       	sbci	r25, 0x05	; 5
     b3a:	20 f4       	brcc	.+8      	; 0xb44 <BUTTON_read_zero_enter+0x70>
			{
				*value = BTN_ZERO_PRESSED;
     b3c:	8a e0       	ldi	r24, 0x0A	; 10
     b3e:	f8 01       	movw	r30, r16
     b40:	80 83       	st	Z, r24
     b42:	09 c0       	rjmp	.+18     	; 0xb56 <BUTTON_read_zero_enter+0x82>
			}
			else if (timeCounter >= BTN_2_SECOND)
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	9b 81       	ldd	r25, Y+3	; 0x03
     b48:	8c 3d       	cpi	r24, 0xDC	; 220
     b4a:	95 40       	sbci	r25, 0x05	; 5
     b4c:	20 f0       	brcs	.+8      	; 0xb56 <BUTTON_read_zero_enter+0x82>
			{
				*value = BTN_ENTER_PRESSED;
     b4e:	8b e0       	ldi	r24, 0x0B	; 11
     b50:	f8 01       	movw	r30, r16
     b52:	80 83       	st	Z, r24
				break;
     b54:	07 c0       	rjmp	.+14     	; 0xb64 <BUTTON_read_zero_enter+0x90>
	 uint8 button_state = 0;
	volatile uint16 timeCounter = 0;
	dio_read_pin(button.button_port,button.button_pin,&button_state);
	if (button_state == DIO_HIGH)
	{
		while(button_state == DIO_HIGH){
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	b1 f2       	breq	.-84     	; 0xb08 <BUTTON_read_zero_enter+0x34>
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <BUTTON_read_zero_enter+0x90>
			}
		}
	}
	else
	{
		*value = BTN_NO_PRESS;//NO
     b5e:	8c e0       	ldi	r24, 0x0C	; 12
     b60:	f8 01       	movw	r30, r16
     b62:	80 83       	st	Z, r24
	}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	08 95       	ret

00000b78 <buzzer_init>:

/*============= FUNCTION DEFINITION =============*/


void buzzer_init(ST_BUZZER_t buzzer){
	dio_init(buzzer.buzzer_port,buzzer.buzzer_pin,DIO_LOW);
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	69 2f       	mov	r22, r25
     b7c:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
     b80:	08 95       	ret

00000b82 <buzzer_digitalwrite>:
}
void buzzer_digitalwrite(ST_BUZZER_t buzzer,uint8 value){
     b82:	46 2f       	mov	r20, r22
	dio_write_pin(buzzer.buzzer_port,buzzer.buzzer_pin,value);
     b84:	69 2f       	mov	r22, r25
     b86:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
     b8a:	08 95       	ret

00000b8c <KPD_init>:
#include "keypad.h"
#include "../../mcal/timer0/timer0.h"
#include "../../mcal/dio/dio.h"


void KPD_init(ST_KPD_t kpd){
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	00 d0       	rcall	.+0      	; 0xb94 <KPD_init+0x8>
     b94:	00 d0       	rcall	.+0      	; 0xb96 <KPD_init+0xa>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <KPD_init+0xc>
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	49 83       	std	Y+1, r20	; 0x01
     b9e:	5a 83       	std	Y+2, r21	; 0x02
     ba0:	6b 83       	std	Y+3, r22	; 0x03
     ba2:	7c 83       	std	Y+4, r23	; 0x04
     ba4:	8d 83       	std	Y+5, r24	; 0x05
     ba6:	9e 83       	std	Y+6, r25	; 0x06
	// set cols as an input
	for (uint8 i = 0 ; i<kpd.number_of_rows;i++)
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	07 c0       	rjmp	.+14     	; 0xbba <KPD_init+0x2e>
	{
		dio_init(kpd.rows_port,(kpd.rows_first_pin+i),DIO_IN);
     bac:	6c 81       	ldd	r22, Y+4	; 0x04
     bae:	61 0f       	add	r22, r17
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	8e 81       	ldd	r24, Y+6	; 0x06
     bb4:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
#include "../../mcal/dio/dio.h"


void KPD_init(ST_KPD_t kpd){
	// set cols as an input
	for (uint8 i = 0 ; i<kpd.number_of_rows;i++)
     bb8:	1f 5f       	subi	r17, 0xFF	; 255
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	18 17       	cp	r17, r24
     bbe:	b0 f3       	brcs	.-20     	; 0xbac <KPD_init+0x20>
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <KPD_init+0x46>
		dio_init(kpd.rows_port,(kpd.rows_first_pin+i),DIO_IN);
	}
	// set rows as input 
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
	{
		dio_init(kpd.cols_port,(kpd.cols_first_pin+i),DIO_OUT);
     bc4:	6b 81       	ldd	r22, Y+3	; 0x03
     bc6:	61 0f       	add	r22, r17
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	8d 81       	ldd	r24, Y+5	; 0x05
     bcc:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
	for (uint8 i = 0 ; i<kpd.number_of_rows;i++)
	{
		dio_init(kpd.rows_port,(kpd.rows_first_pin+i),DIO_IN);
	}
	// set rows as input 
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
     bd0:	1f 5f       	subi	r17, 0xFF	; 255
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	18 17       	cp	r17, r24
     bd6:	b0 f3       	brcs	.-20     	; 0xbc4 <KPD_init+0x38>
	{
		dio_init(kpd.cols_port,(kpd.cols_first_pin+i),DIO_OUT);
	}
	
}
     bd8:	26 96       	adiw	r28, 0x06	; 6
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	08 95       	ret

00000bec <KPD_get_pressed_key>:
void KPD_get_pressed_key(ST_KPD_t kpd,uint8*key){
     bec:	bf 92       	push	r11
     bee:	cf 92       	push	r12
     bf0:	df 92       	push	r13
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	27 97       	sbiw	r28, 0x07	; 7
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	4a 83       	std	Y+2, r20	; 0x02
     c10:	5b 83       	std	Y+3, r21	; 0x03
     c12:	6c 83       	std	Y+4, r22	; 0x04
     c14:	7d 83       	std	Y+5, r23	; 0x05
     c16:	8e 83       	std	Y+6, r24	; 0x06
     c18:	9f 83       	std	Y+7, r25	; 0x07
     c1a:	79 01       	movw	r14, r18
	uint8 value; // counters
	// cols loops
	*key= KPD_NO_KEY_PRESSED;
     c1c:	8c e0       	ldi	r24, 0x0C	; 12
     c1e:	f9 01       	movw	r30, r18
     c20:	80 83       	st	Z, r24
	for (uint8 col = 0 ; col < kpd.number_of_cols;col++)
     c22:	00 e0       	ldi	r16, 0x00	; 0
     c24:	38 c0       	rjmp	.+112    	; 0xc96 <KPD_get_pressed_key+0xaa>
	{
		// activate cols
		
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_HIGH);
     c26:	dc 80       	ldd	r13, Y+4	; 0x04
     c28:	d0 0e       	add	r13, r16
     c2a:	be 80       	ldd	r11, Y+6	; 0x06
     c2c:	41 e0       	ldi	r20, 0x01	; 1
     c2e:	6d 2d       	mov	r22, r13
     c30:	8b 2d       	mov	r24, r11
     c32:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
		// rows loops
		
		for (uint8 row = 0;row<kpd.number_of_rows;row++)
     c36:	10 e0       	ldi	r17, 0x00	; 0
     c38:	1f c0       	rjmp	.+62     	; 0xc78 <KPD_get_pressed_key+0x8c>
		{
			// get read 
			Timer0_Delay(30);
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	80 ef       	ldi	r24, 0xF0	; 240
     c40:	91 e4       	ldi	r25, 0x41	; 65
     c42:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
			dio_read_pin(kpd.rows_port,(kpd.rows_first_pin+row),&value);
     c46:	6d 81       	ldd	r22, Y+5	; 0x05
     c48:	61 0f       	add	r22, r17
     c4a:	ae 01       	movw	r20, r28
     c4c:	4f 5f       	subi	r20, 0xFF	; 255
     c4e:	5f 4f       	sbci	r21, 0xFF	; 255
     c50:	8f 81       	ldd	r24, Y+7	; 0x07
     c52:	0e 94 2b 0a 	call	0x1456	; 0x1456 <dio_read_pin>
			// check if button is pressed
			if (value == DIO_HIGH)
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	69 f4       	brne	.+26     	; 0xc76 <KPD_get_pressed_key+0x8a>
			{
				// return key (row_number * numbers_of_cols) + (column number +1)
				
				*key =  ((row * kpd.number_of_cols) + col + 1);
     c5c:	1c 9d       	mul	r17, r12
     c5e:	00 0d       	add	r16, r0
     c60:	11 24       	eor	r1, r1
     c62:	0f 5f       	subi	r16, 0xFF	; 255
     c64:	f7 01       	movw	r30, r14
     c66:	00 83       	st	Z, r16
				Timer0_Delay(50);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	88 e4       	ldi	r24, 0x48	; 72
     c6e:	92 e4       	ldi	r25, 0x42	; 66
     c70:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
     c74:	13 c0       	rjmp	.+38     	; 0xc9c <KPD_get_pressed_key+0xb0>
		// activate cols
		
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_HIGH);
		// rows loops
		
		for (uint8 row = 0;row<kpd.number_of_rows;row++)
     c76:	1f 5f       	subi	r17, 0xFF	; 255
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	18 17       	cp	r17, r24
     c7c:	f0 f2       	brcs	.-68     	; 0xc3a <KPD_get_pressed_key+0x4e>
				Timer0_Delay(50);
				return;
			}
		
		}
		Timer0_Delay(30);
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	80 ef       	ldi	r24, 0xF0	; 240
     c84:	91 e4       	ldi	r25, 0x41	; 65
     c86:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_LOW);
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	6d 2d       	mov	r22, r13
     c8e:	8b 2d       	mov	r24, r11
     c90:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
}
void KPD_get_pressed_key(ST_KPD_t kpd,uint8*key){
	uint8 value; // counters
	// cols loops
	*key= KPD_NO_KEY_PRESSED;
	for (uint8 col = 0 ; col < kpd.number_of_cols;col++)
     c94:	0f 5f       	subi	r16, 0xFF	; 255
     c96:	ca 80       	ldd	r12, Y+2	; 0x02
     c98:	0c 15       	cp	r16, r12
     c9a:	28 f2       	brcs	.-118    	; 0xc26 <KPD_get_pressed_key+0x3a>
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_LOW);
		
	}
	
	
     c9c:	27 96       	adiw	r28, 0x07	; 7
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	08 95       	ret

00000cbc <LCD_sendCommand>:
}
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(ST_LCD_t lcd,uint8 command){
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	2c 97       	sbiw	r28, 0x0c	; 12
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	8e 2d       	mov	r24, r14
     cde:	fb 82       	std	Y+3, r15	; 0x03
     ce0:	0c 83       	std	Y+4, r16	; 0x04
     ce2:	61 2f       	mov	r22, r17
     ce4:	2e 83       	std	Y+6, r18	; 0x06
     ce6:	3f 83       	std	Y+7, r19	; 0x07
     ce8:	48 87       	std	Y+8, r20	; 0x08
	uint8 lcd_port_value = 0;
     cea:	19 82       	std	Y+1, r1	; 0x01
	dio_write_pin(lcd.RS_port,lcd.RS_pin,DIO_LOW); /* Instruction Mode RS=0 */
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
	dio_write_pin(lcd.RW_port,lcd.RW_pin,DIO_LOW); /* write data to LCD so RW=0 */
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	6e 81       	ldd	r22, Y+6	; 0x06
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
	
	Timer0_Delay(1);
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	80 e8       	ldi	r24, 0x80	; 128
     d02:	9f e3       	ldi	r25, 0x3F	; 63
     d04:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_HIGH); /* write data to LCD so E=1 */
     d08:	0f 81       	ldd	r16, Y+7	; 0x07
     d0a:	1c 81       	ldd	r17, Y+4	; 0x04
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	60 2f       	mov	r22, r16
     d10:	81 2f       	mov	r24, r17
     d12:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
	Timer0_Delay(1);
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	80 e8       	ldi	r24, 0x80	; 128
     d1c:	9f e3       	ldi	r25, 0x3F	; 63
     d1e:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
	
	dio_read_port(lcd.lcd_data_port,&lcd_port_value);
     d22:	f8 84       	ldd	r15, Y+8	; 0x08
     d24:	be 01       	movw	r22, r28
     d26:	6f 5f       	subi	r22, 0xFF	; 255
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	8f 2d       	mov	r24, r15
     d2c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <dio_read_port>
	
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
     d30:	69 81       	ldd	r22, Y+1	; 0x01
     d32:	6f 70       	andi	r22, 0x0F	; 15
     d34:	8c 2d       	mov	r24, r12
     d36:	80 7f       	andi	r24, 0xF0	; 240
     d38:	68 2b       	or	r22, r24
     d3a:	69 83       	std	Y+1, r22	; 0x01
	
	// write command
	dio_write_port(lcd.lcd_data_port,lcd_port_value);
     d3c:	8f 2d       	mov	r24, r15
     d3e:	0e 94 83 0a 	call	0x1506	; 0x1506 <dio_write_port>
	Timer0_Delay(1);
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	80 e8       	ldi	r24, 0x80	; 128
     d48:	9f e3       	ldi	r25, 0x3F	; 63
     d4a:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_LOW); /* write data to LCD so E=0 */	
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	60 2f       	mov	r22, r16
     d52:	81 2f       	mov	r24, r17
     d54:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
	Timer0_Delay(1);
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	80 e8       	ldi	r24, 0x80	; 128
     d5e:	9f e3       	ldi	r25, 0x3F	; 63
     d60:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_HIGH); /* write data to LCD so E=1 */
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	60 2f       	mov	r22, r16
     d68:	81 2f       	mov	r24, r17
     d6a:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
	
	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	dio_read_port(lcd.lcd_data_port,&lcd_port_value);
     d6e:	be 01       	movw	r22, r28
     d70:	6f 5f       	subi	r22, 0xFF	; 255
     d72:	7f 4f       	sbci	r23, 0xFF	; 255
     d74:	8f 2d       	mov	r24, r15
     d76:	0e 94 65 0a 	call	0x14ca	; 0x14ca <dio_read_port>
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
     d7a:	80 e1       	ldi	r24, 0x10	; 16
     d7c:	c8 9e       	mul	r12, r24
     d7e:	60 01       	movw	r12, r0
     d80:	11 24       	eor	r1, r1
     d82:	69 81       	ldd	r22, Y+1	; 0x01
     d84:	6f 70       	andi	r22, 0x0F	; 15
     d86:	6c 29       	or	r22, r12
     d88:	69 83       	std	Y+1, r22	; 0x01
	
	dio_write_port(lcd.lcd_data_port,lcd_port_value);
     d8a:	8f 2d       	mov	r24, r15
     d8c:	0e 94 83 0a 	call	0x1506	; 0x1506 <dio_write_port>
	Timer0_Delay(1);
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	80 e8       	ldi	r24, 0x80	; 128
     d96:	9f e3       	ldi	r25, 0x3F	; 63
     d98:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_LOW); /* write data to LCD so E=0 */
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	60 2f       	mov	r22, r16
     da0:	81 2f       	mov	r24, r17
     da2:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
	Timer0_Delay(1);
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	80 e8       	ldi	r24, 0x80	; 128
     dac:	9f e3       	ldi	r25, 0x3F	; 63
     dae:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>

}
     db2:	2c 96       	adiw	r28, 0x0c	; 12
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret

00000dd0 <LCD_init>:
#include "../../mcal/timer0/timer0.h"
#include "../../utilities/bit_math.h"
#include "../../utilities/types.h"


void LCD_init(ST_LCD_t lcd){
     dd0:	cf 92       	push	r12
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	2b 97       	sbiw	r28, 0x0b	; 11
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	e9 82       	std	Y+1, r14	; 0x01
     df0:	fa 82       	std	Y+2, r15	; 0x02
     df2:	0b 83       	std	Y+3, r16	; 0x03
     df4:	1c 83       	std	Y+4, r17	; 0x04
     df6:	2d 83       	std	Y+5, r18	; 0x05
     df8:	3e 83       	std	Y+6, r19	; 0x06
     dfa:	4f 83       	std	Y+7, r20	; 0x07
     dfc:	58 87       	std	Y+8, r21	; 0x08
     dfe:	69 87       	std	Y+9, r22	; 0x09
     e00:	7a 87       	std	Y+10, r23	; 0x0a
     e02:	8b 87       	std	Y+11, r24	; 0x0b
	
	dio_init(lcd.E_port,lcd.E_pin,DIO_OUT);
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	63 2f       	mov	r22, r19
     e08:	80 2f       	mov	r24, r16
     e0a:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
	dio_init(lcd.RS_port,lcd.RS_pin,DIO_OUT);
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	6c 81       	ldd	r22, Y+4	; 0x04
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
	dio_init(lcd.RW_port,lcd.RW_pin,DIO_OUT);
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	6d 81       	ldd	r22, Y+5	; 0x05
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
	
	dio_init(lcd.lcd_data_port,lcd.lcd_data1_pin,DIO_OUT);
     e22:	1f 81       	ldd	r17, Y+7	; 0x07
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	68 85       	ldd	r22, Y+8	; 0x08
     e28:	81 2f       	mov	r24, r17
     e2a:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
	dio_init(lcd.lcd_data_port,lcd.lcd_data2_pin,DIO_OUT);
     e2e:	41 e0       	ldi	r20, 0x01	; 1
     e30:	69 85       	ldd	r22, Y+9	; 0x09
     e32:	81 2f       	mov	r24, r17
     e34:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
	dio_init(lcd.lcd_data_port,lcd.lcd_data3_pin,DIO_OUT);
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	6a 85       	ldd	r22, Y+10	; 0x0a
     e3c:	81 2f       	mov	r24, r17
     e3e:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
	dio_init(lcd.lcd_data_port,lcd.lcd_data4_pin,DIO_OUT);
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	6b 85       	ldd	r22, Y+11	; 0x0b
     e46:	81 2f       	mov	r24, r17
     e48:	0e 94 3d 09 	call	0x127a	; 0x127a <dio_init>
	
	LCD_sendCommand(lcd,LCD_GO_TO_HOME);
     e4c:	68 94       	set
     e4e:	cc 24       	eor	r12, r12
     e50:	c1 f8       	bld	r12, 1
     e52:	e9 80       	ldd	r14, Y+1	; 0x01
     e54:	fa 80       	ldd	r15, Y+2	; 0x02
     e56:	0b 81       	ldd	r16, Y+3	; 0x03
     e58:	1c 81       	ldd	r17, Y+4	; 0x04
     e5a:	2d 81       	ldd	r18, Y+5	; 0x05
     e5c:	3e 81       	ldd	r19, Y+6	; 0x06
     e5e:	4f 81       	ldd	r20, Y+7	; 0x07
     e60:	58 85       	ldd	r21, Y+8	; 0x08
     e62:	69 85       	ldd	r22, Y+9	; 0x09
     e64:	7a 85       	ldd	r23, Y+10	; 0x0a
     e66:	8b 85       	ldd	r24, Y+11	; 0x0b
     e68:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_sendCommand>
	LCD_sendCommand(lcd,LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     e6c:	0f 2e       	mov	r0, r31
     e6e:	f8 e2       	ldi	r31, 0x28	; 40
     e70:	cf 2e       	mov	r12, r31
     e72:	f0 2d       	mov	r31, r0
     e74:	e9 80       	ldd	r14, Y+1	; 0x01
     e76:	fa 80       	ldd	r15, Y+2	; 0x02
     e78:	0b 81       	ldd	r16, Y+3	; 0x03
     e7a:	1c 81       	ldd	r17, Y+4	; 0x04
     e7c:	2d 81       	ldd	r18, Y+5	; 0x05
     e7e:	3e 81       	ldd	r19, Y+6	; 0x06
     e80:	4f 81       	ldd	r20, Y+7	; 0x07
     e82:	58 85       	ldd	r21, Y+8	; 0x08
     e84:	69 85       	ldd	r22, Y+9	; 0x09
     e86:	7a 85       	ldd	r23, Y+10	; 0x0a
     e88:	8b 85       	ldd	r24, Y+11	; 0x0b
     e8a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_sendCommand>
	
	LCD_sendCommand(lcd,LCD_CURSOR_OFF); /* cursor off */
     e8e:	0f 2e       	mov	r0, r31
     e90:	fc e0       	ldi	r31, 0x0C	; 12
     e92:	cf 2e       	mov	r12, r31
     e94:	f0 2d       	mov	r31, r0
     e96:	e9 80       	ldd	r14, Y+1	; 0x01
     e98:	fa 80       	ldd	r15, Y+2	; 0x02
     e9a:	0b 81       	ldd	r16, Y+3	; 0x03
     e9c:	1c 81       	ldd	r17, Y+4	; 0x04
     e9e:	2d 81       	ldd	r18, Y+5	; 0x05
     ea0:	3e 81       	ldd	r19, Y+6	; 0x06
     ea2:	4f 81       	ldd	r20, Y+7	; 0x07
     ea4:	58 85       	ldd	r21, Y+8	; 0x08
     ea6:	69 85       	ldd	r22, Y+9	; 0x09
     ea8:	7a 85       	ldd	r23, Y+10	; 0x0a
     eaa:	8b 85       	ldd	r24, Y+11	; 0x0b
     eac:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_sendCommand>
	LCD_sendCommand(lcd,LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     eb0:	cc 24       	eor	r12, r12
     eb2:	c3 94       	inc	r12
     eb4:	e9 80       	ldd	r14, Y+1	; 0x01
     eb6:	fa 80       	ldd	r15, Y+2	; 0x02
     eb8:	0b 81       	ldd	r16, Y+3	; 0x03
     eba:	1c 81       	ldd	r17, Y+4	; 0x04
     ebc:	2d 81       	ldd	r18, Y+5	; 0x05
     ebe:	3e 81       	ldd	r19, Y+6	; 0x06
     ec0:	4f 81       	ldd	r20, Y+7	; 0x07
     ec2:	58 85       	ldd	r21, Y+8	; 0x08
     ec4:	69 85       	ldd	r22, Y+9	; 0x09
     ec6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ec8:	8b 85       	ldd	r24, Y+11	; 0x0b
     eca:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_sendCommand>
}
     ece:	2b 96       	adiw	r28, 0x0b	; 11
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	cf 90       	pop	r12
     ee8:	08 95       	ret

00000eea <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(ST_LCD_t lcd,uint8 data){
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	2c 97       	sbiw	r28, 0x0c	; 12
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	8e 2d       	mov	r24, r14
     f0c:	fb 82       	std	Y+3, r15	; 0x03
     f0e:	0c 83       	std	Y+4, r16	; 0x04
     f10:	61 2f       	mov	r22, r17
     f12:	2e 83       	std	Y+6, r18	; 0x06
     f14:	3f 83       	std	Y+7, r19	; 0x07
     f16:	48 87       	std	Y+8, r20	; 0x08
	uint8 lcd_port_value = 0;
     f18:	19 82       	std	Y+1, r1	; 0x01
	dio_write_pin(lcd.RS_port,lcd.RS_pin,DIO_HIGH); /* DATA Mode RS=1 */
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
	dio_write_pin(lcd.RW_port,lcd.RW_pin,DIO_LOW); /* write data to LCD so RW=0 */
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	6e 81       	ldd	r22, Y+6	; 0x06
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>

	Timer0_Delay(1);
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	80 e8       	ldi	r24, 0x80	; 128
     f30:	9f e3       	ldi	r25, 0x3F	; 63
     f32:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_HIGH); /* write data to LCD so E=1 */
     f36:	0f 81       	ldd	r16, Y+7	; 0x07
     f38:	1c 81       	ldd	r17, Y+4	; 0x04
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	60 2f       	mov	r22, r16
     f3e:	81 2f       	mov	r24, r17
     f40:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
	Timer0_Delay(1);
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	80 e8       	ldi	r24, 0x80	; 128
     f4a:	9f e3       	ldi	r25, 0x3F	; 63
     f4c:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>

	dio_read_port(lcd.lcd_data_port,&lcd_port_value);
     f50:	f8 84       	ldd	r15, Y+8	; 0x08
     f52:	be 01       	movw	r22, r28
     f54:	6f 5f       	subi	r22, 0xFF	; 255
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	8f 2d       	mov	r24, r15
     f5a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <dio_read_port>

	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
     f5e:	69 81       	ldd	r22, Y+1	; 0x01
     f60:	6f 70       	andi	r22, 0x0F	; 15
     f62:	8c 2d       	mov	r24, r12
     f64:	80 7f       	andi	r24, 0xF0	; 240
     f66:	68 2b       	or	r22, r24
     f68:	69 83       	std	Y+1, r22	; 0x01

	// write command
	dio_write_port(lcd.lcd_data_port,lcd_port_value);
     f6a:	8f 2d       	mov	r24, r15
     f6c:	0e 94 83 0a 	call	0x1506	; 0x1506 <dio_write_port>
	Timer0_Delay(1);
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	80 e8       	ldi	r24, 0x80	; 128
     f76:	9f e3       	ldi	r25, 0x3F	; 63
     f78:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_LOW); /* write data to LCD so E=0 */
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	60 2f       	mov	r22, r16
     f80:	81 2f       	mov	r24, r17
     f82:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
	Timer0_Delay(1);
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	9f e3       	ldi	r25, 0x3F	; 63
     f8e:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_HIGH); /* write data to LCD so E=1 */
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	60 2f       	mov	r22, r16
     f96:	81 2f       	mov	r24, r17
     f98:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	dio_read_port(lcd.lcd_data_port,&lcd_port_value);
     f9c:	be 01       	movw	r22, r28
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	8f 2d       	mov	r24, r15
     fa4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <dio_read_port>
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
     fa8:	80 e1       	ldi	r24, 0x10	; 16
     faa:	c8 9e       	mul	r12, r24
     fac:	60 01       	movw	r12, r0
     fae:	11 24       	eor	r1, r1
     fb0:	69 81       	ldd	r22, Y+1	; 0x01
     fb2:	6f 70       	andi	r22, 0x0F	; 15
     fb4:	6c 29       	or	r22, r12
     fb6:	69 83       	std	Y+1, r22	; 0x01

	dio_write_port(lcd.lcd_data_port,lcd_port_value);
     fb8:	8f 2d       	mov	r24, r15
     fba:	0e 94 83 0a 	call	0x1506	; 0x1506 <dio_write_port>
	Timer0_Delay(1);
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	80 e8       	ldi	r24, 0x80	; 128
     fc4:	9f e3       	ldi	r25, 0x3F	; 63
     fc6:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
	dio_write_pin(lcd.E_port,lcd.E_pin,DIO_LOW); /* write data to LCD so E=0 */
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	60 2f       	mov	r22, r16
     fce:	81 2f       	mov	r24, r17
     fd0:	0e 94 b4 09 	call	0x1368	; 0x1368 <dio_write_pin>
	Timer0_Delay(1);
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	80 e8       	ldi	r24, 0x80	; 128
     fda:	9f e3       	ldi	r25, 0x3F	; 63
     fdc:	0e 94 93 0b 	call	0x1726	; 0x1726 <Timer0_Delay>
}
     fe0:	2c 96       	adiw	r28, 0x0c	; 12
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	08 95       	ret

00000ffe <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(ST_LCD_t lcd,const char *Str){
     ffe:	af 92       	push	r10
    1000:	bf 92       	push	r11
    1002:	cf 92       	push	r12
    1004:	df 92       	push	r13
    1006:	ef 92       	push	r14
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	2b 97       	sbiw	r28, 0x0b	; 11
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	e9 82       	std	Y+1, r14	; 0x01
    1024:	fa 82       	std	Y+2, r15	; 0x02
    1026:	0b 83       	std	Y+3, r16	; 0x03
    1028:	1c 83       	std	Y+4, r17	; 0x04
    102a:	2d 83       	std	Y+5, r18	; 0x05
    102c:	3e 83       	std	Y+6, r19	; 0x06
    102e:	4f 83       	std	Y+7, r20	; 0x07
    1030:	58 87       	std	Y+8, r21	; 0x08
    1032:	69 87       	std	Y+9, r22	; 0x09
    1034:	7a 87       	std	Y+10, r23	; 0x0a
    1036:	8b 87       	std	Y+11, r24	; 0x0b
    1038:	56 01       	movw	r10, r12
	uint8 i = 0;
    103a:	d1 2c       	mov	r13, r1
	while(Str[i] != '\0')
    103c:	0e c0       	rjmp	.+28     	; 0x105a <LCD_displayString+0x5c>
	{
		LCD_displayCharacter(lcd,Str[i]);
    103e:	e9 80       	ldd	r14, Y+1	; 0x01
    1040:	fa 80       	ldd	r15, Y+2	; 0x02
    1042:	0b 81       	ldd	r16, Y+3	; 0x03
    1044:	1c 81       	ldd	r17, Y+4	; 0x04
    1046:	2d 81       	ldd	r18, Y+5	; 0x05
    1048:	3e 81       	ldd	r19, Y+6	; 0x06
    104a:	4f 81       	ldd	r20, Y+7	; 0x07
    104c:	58 85       	ldd	r21, Y+8	; 0x08
    104e:	69 85       	ldd	r22, Y+9	; 0x09
    1050:	7a 85       	ldd	r23, Y+10	; 0x0a
    1052:	8b 85       	ldd	r24, Y+11	; 0x0b
    1054:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_displayCharacter>
		i++;
    1058:	d3 94       	inc	r13
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(ST_LCD_t lcd,const char *Str){
	uint8 i = 0;
	while(Str[i] != '\0')
    105a:	f5 01       	movw	r30, r10
    105c:	ed 0d       	add	r30, r13
    105e:	f1 1d       	adc	r31, r1
    1060:	c0 80       	ld	r12, Z
    1062:	c1 10       	cpse	r12, r1
    1064:	ec cf       	rjmp	.-40     	; 0x103e <LCD_displayString+0x40>
	{
		LCD_displayCharacter(lcd,Str[i]);
		i++;
	}
}
    1066:	2b 96       	adiw	r28, 0x0b	; 11
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
    1082:	bf 90       	pop	r11
    1084:	af 90       	pop	r10
    1086:	08 95       	ret

00001088 <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(ST_LCD_t lcd,uint8 row,uint8 col){
    1088:	af 92       	push	r10
    108a:	cf 92       	push	r12
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	2b 97       	sbiw	r28, 0x0b	; 11
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	e9 82       	std	Y+1, r14	; 0x01
    10aa:	fa 82       	std	Y+2, r15	; 0x02
    10ac:	0b 83       	std	Y+3, r16	; 0x03
    10ae:	1c 83       	std	Y+4, r17	; 0x04
    10b0:	2d 83       	std	Y+5, r18	; 0x05
    10b2:	3e 83       	std	Y+6, r19	; 0x06
    10b4:	4f 83       	std	Y+7, r20	; 0x07
    10b6:	58 87       	std	Y+8, r21	; 0x08
    10b8:	69 87       	std	Y+9, r22	; 0x09
    10ba:	7a 87       	std	Y+10, r23	; 0x0a
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 2d       	mov	r25, r12
    10c0:	8a 2d       	mov	r24, r10
	uint8 lcd_memory_address = 0;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    10c2:	91 30       	cpi	r25, 0x01	; 1
    10c4:	39 f0       	breq	.+14     	; 0x10d4 <LCD_moveCursor+0x4c>
    10c6:	58 f0       	brcs	.+22     	; 0x10de <LCD_moveCursor+0x56>
    10c8:	92 30       	cpi	r25, 0x02	; 2
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <LCD_moveCursor+0x50>
    10cc:	93 30       	cpi	r25, 0x03	; 3
    10ce:	31 f0       	breq	.+12     	; 0x10dc <LCD_moveCursor+0x54>
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(ST_LCD_t lcd,uint8 row,uint8 col){
	uint8 lcd_memory_address = 0;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <LCD_moveCursor+0x56>
	{
		case 0:
		lcd_memory_address=col;
		break;
		case 1:
		lcd_memory_address=col+0x40;
    10d4:	80 5c       	subi	r24, 0xC0	; 192
		break;
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <LCD_moveCursor+0x56>
		case 2:
		lcd_memory_address=col+0x10;
    10d8:	80 5f       	subi	r24, 0xF0	; 240
		break;
    10da:	01 c0       	rjmp	.+2      	; 0x10de <LCD_moveCursor+0x56>
		case 3:
		lcd_memory_address=col+0x50;
    10dc:	80 5b       	subi	r24, 0xB0	; 176
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd,lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    10de:	80 68       	ori	r24, 0x80	; 128
    10e0:	c8 2e       	mov	r12, r24
    10e2:	e9 80       	ldd	r14, Y+1	; 0x01
    10e4:	fa 80       	ldd	r15, Y+2	; 0x02
    10e6:	0b 81       	ldd	r16, Y+3	; 0x03
    10e8:	1c 81       	ldd	r17, Y+4	; 0x04
    10ea:	2d 81       	ldd	r18, Y+5	; 0x05
    10ec:	3e 81       	ldd	r19, Y+6	; 0x06
    10ee:	4f 81       	ldd	r20, Y+7	; 0x07
    10f0:	58 85       	ldd	r21, Y+8	; 0x08
    10f2:	69 85       	ldd	r22, Y+9	; 0x09
    10f4:	7a 85       	ldd	r23, Y+10	; 0x0a
    10f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_sendCommand>
}
    10fc:	2b 96       	adiw	r28, 0x0b	; 11
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	cf 90       	pop	r12
    1116:	af 90       	pop	r10
    1118:	08 95       	ret

0000111a <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(ST_LCD_t lcd,uint8 row,uint8 col,const char *Str){
    111a:	5f 92       	push	r5
    111c:	6f 92       	push	r6
    111e:	7f 92       	push	r7
    1120:	8f 92       	push	r8
    1122:	9f 92       	push	r9
    1124:	af 92       	push	r10
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	2b 97       	sbiw	r28, 0x0b	; 11
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	e9 82       	std	Y+1, r14	; 0x01
    114a:	fa 82       	std	Y+2, r15	; 0x02
    114c:	0b 83       	std	Y+3, r16	; 0x03
    114e:	1c 83       	std	Y+4, r17	; 0x04
    1150:	2d 83       	std	Y+5, r18	; 0x05
    1152:	3e 83       	std	Y+6, r19	; 0x06
    1154:	4f 83       	std	Y+7, r20	; 0x07
    1156:	58 87       	std	Y+8, r21	; 0x08
    1158:	69 87       	std	Y+9, r22	; 0x09
    115a:	7a 87       	std	Y+10, r23	; 0x0a
    115c:	8b 87       	std	Y+11, r24	; 0x0b
	LCD_moveCursor(lcd,row,col); /* go to to the required LCD position */
    115e:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_moveCursor>
	LCD_displayString(lcd,Str); /* display the string */
    1162:	64 01       	movw	r12, r8
    1164:	e9 80       	ldd	r14, Y+1	; 0x01
    1166:	fa 80       	ldd	r15, Y+2	; 0x02
    1168:	0b 81       	ldd	r16, Y+3	; 0x03
    116a:	1c 81       	ldd	r17, Y+4	; 0x04
    116c:	2d 81       	ldd	r18, Y+5	; 0x05
    116e:	3e 81       	ldd	r19, Y+6	; 0x06
    1170:	4f 81       	ldd	r20, Y+7	; 0x07
    1172:	58 85       	ldd	r21, Y+8	; 0x08
    1174:	69 85       	ldd	r22, Y+9	; 0x09
    1176:	7a 85       	ldd	r23, Y+10	; 0x0a
    1178:	8b 85       	ldd	r24, Y+11	; 0x0b
    117a:	0e 94 ff 07 	call	0xffe	; 0xffe <LCD_displayString>
}
    117e:	2b 96       	adiw	r28, 0x0b	; 11
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	bf 90       	pop	r11
    119c:	af 90       	pop	r10
    119e:	9f 90       	pop	r9
    11a0:	8f 90       	pop	r8
    11a2:	7f 90       	pop	r7
    11a4:	6f 90       	pop	r6
    11a6:	5f 90       	pop	r5
    11a8:	08 95       	ret

000011aa <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(ST_LCD_t lcd,int data){
    11aa:	cf 92       	push	r12
    11ac:	df 92       	push	r13
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	6b 97       	sbiw	r28, 0x1b	; 27
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	e9 8a       	std	Y+17, r14	; 0x11
    11cc:	fa 8a       	std	Y+18, r15	; 0x12
    11ce:	0b 8b       	std	Y+19, r16	; 0x13
    11d0:	1c 8b       	std	Y+20, r17	; 0x14
    11d2:	2d 8b       	std	Y+21, r18	; 0x15
    11d4:	3e 8b       	std	Y+22, r19	; 0x16
    11d6:	4f 8b       	std	Y+23, r20	; 0x17
    11d8:	58 8f       	std	Y+24, r21	; 0x18
    11da:	69 8f       	std	Y+25, r22	; 0x19
    11dc:	7a 8f       	std	Y+26, r23	; 0x1a
    11de:	8b 8f       	std	Y+27, r24	; 0x1b
    11e0:	c6 01       	movw	r24, r12
	  char buff[16]; /* String to hold the ascii result */
	  itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    11e2:	4a e0       	ldi	r20, 0x0A	; 10
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	be 01       	movw	r22, r28
    11e8:	6f 5f       	subi	r22, 0xFF	; 255
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <itoa>
	  LCD_displayString(lcd,buff); /* Display the string */
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	6c 01       	movw	r12, r24
    11f6:	e9 88       	ldd	r14, Y+17	; 0x11
    11f8:	fa 88       	ldd	r15, Y+18	; 0x12
    11fa:	0b 89       	ldd	r16, Y+19	; 0x13
    11fc:	1c 89       	ldd	r17, Y+20	; 0x14
    11fe:	2d 89       	ldd	r18, Y+21	; 0x15
    1200:	3e 89       	ldd	r19, Y+22	; 0x16
    1202:	4f 89       	ldd	r20, Y+23	; 0x17
    1204:	58 8d       	ldd	r21, Y+24	; 0x18
    1206:	69 8d       	ldd	r22, Y+25	; 0x19
    1208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    120a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    120c:	0e 94 ff 07 	call	0xffe	; 0xffe <LCD_displayString>
}
    1210:	6b 96       	adiw	r28, 0x1b	; 27
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	08 95       	ret

0000122e <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(ST_LCD_t lcd){
    122e:	cf 92       	push	r12
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	2b 97       	sbiw	r28, 0x0b	; 11
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(lcd,LCD_CLEAR_COMMAND); /* Send clear display command */
    124c:	cc 24       	eor	r12, r12
    124e:	c3 94       	inc	r12
    1250:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_sendCommand>
}
    1254:	2b 96       	adiw	r28, 0x0b	; 11
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	cf 90       	pop	r12
    126e:	08 95       	ret

00001270 <main>:

#include "Application/application.h"

int main(void)
{
	appInit();
    1270:	0e 94 67 00 	call	0xce	; 0xce <appInit>
	while (1) 
    {
		appStart();
    1274:	0e 94 7f 03 	call	0x6fe	; 0x6fe <appStart>
    1278:	fd cf       	rjmp	.-6      	; 0x1274 <main+0x4>

0000127a <dio_init>:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;

}
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	11 f1       	breq	.+68     	; 0x12c2 <dio_init+0x48>
    127e:	30 f0       	brcs	.+12     	; 0x128c <dio_init+0x12>
    1280:	82 30       	cpi	r24, 0x02	; 2
    1282:	d1 f1       	breq	.+116    	; 0x12f8 <dio_init+0x7e>
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	09 f4       	brne	.+2      	; 0x128a <dio_init+0x10>
    1288:	52 c0       	rjmp	.+164    	; 0x132e <dio_init+0xb4>
    128a:	6c c0       	rjmp	.+216    	; 0x1364 <dio_init+0xea>
    128c:	41 11       	cpse	r20, r1
    128e:	0d c0       	rjmp	.+26     	; 0x12aa <dio_init+0x30>
    1290:	2a b3       	in	r18, 0x1a	; 26
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 c0       	rjmp	.+4      	; 0x129c <dio_init+0x22>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	6a 95       	dec	r22
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <dio_init+0x1e>
    12a0:	80 95       	com	r24
    12a2:	82 23       	and	r24, r18
    12a4:	8a bb       	out	0x1a, r24	; 26
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	08 95       	ret
    12aa:	2a b3       	in	r18, 0x1a	; 26
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <dio_init+0x3c>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	6a 95       	dec	r22
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <dio_init+0x38>
    12ba:	82 2b       	or	r24, r18
    12bc:	8a bb       	out	0x1a, r24	; 26
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	08 95       	ret
    12c2:	41 11       	cpse	r20, r1
    12c4:	0d c0       	rjmp	.+26     	; 0x12e0 <dio_init+0x66>
    12c6:	27 b3       	in	r18, 0x17	; 23
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <dio_init+0x58>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	6a 95       	dec	r22
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <dio_init+0x54>
    12d6:	80 95       	com	r24
    12d8:	82 23       	and	r24, r18
    12da:	87 bb       	out	0x17, r24	; 23
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	08 95       	ret
    12e0:	27 b3       	in	r18, 0x17	; 23
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <dio_init+0x72>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	6a 95       	dec	r22
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <dio_init+0x6e>
    12f0:	82 2b       	or	r24, r18
    12f2:	87 bb       	out	0x17, r24	; 23
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	08 95       	ret
    12f8:	41 11       	cpse	r20, r1
    12fa:	0d c0       	rjmp	.+26     	; 0x1316 <dio_init+0x9c>
    12fc:	24 b3       	in	r18, 0x14	; 20
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <dio_init+0x8e>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	6a 95       	dec	r22
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <dio_init+0x8a>
    130c:	80 95       	com	r24
    130e:	82 23       	and	r24, r18
    1310:	84 bb       	out	0x14, r24	; 20
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	08 95       	ret
    1316:	24 b3       	in	r18, 0x14	; 20
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <dio_init+0xa8>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	6a 95       	dec	r22
    1324:	e2 f7       	brpl	.-8      	; 0x131e <dio_init+0xa4>
    1326:	82 2b       	or	r24, r18
    1328:	84 bb       	out	0x14, r24	; 20
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	08 95       	ret
    132e:	41 11       	cpse	r20, r1
    1330:	0d c0       	rjmp	.+26     	; 0x134c <dio_init+0xd2>
    1332:	21 b3       	in	r18, 0x11	; 17
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 c0       	rjmp	.+4      	; 0x133e <dio_init+0xc4>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	6a 95       	dec	r22
    1340:	e2 f7       	brpl	.-8      	; 0x133a <dio_init+0xc0>
    1342:	80 95       	com	r24
    1344:	82 23       	and	r24, r18
    1346:	81 bb       	out	0x11, r24	; 17
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	08 95       	ret
    134c:	21 b3       	in	r18, 0x11	; 17
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <dio_init+0xde>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	6a 95       	dec	r22
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <dio_init+0xda>
    135c:	82 2b       	or	r24, r18
    135e:	81 bb       	out	0x11, r24	; 17
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	08 95       	ret
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	08 95       	ret

00001368 <dio_write_pin>:
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	11 f1       	breq	.+68     	; 0x13b0 <dio_write_pin+0x48>
    136c:	30 f0       	brcs	.+12     	; 0x137a <dio_write_pin+0x12>
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	d1 f1       	breq	.+116    	; 0x13e6 <dio_write_pin+0x7e>
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	09 f4       	brne	.+2      	; 0x1378 <dio_write_pin+0x10>
    1376:	52 c0       	rjmp	.+164    	; 0x141c <dio_write_pin+0xb4>
    1378:	6c c0       	rjmp	.+216    	; 0x1452 <dio_write_pin+0xea>
    137a:	41 11       	cpse	r20, r1
    137c:	0d c0       	rjmp	.+26     	; 0x1398 <dio_write_pin+0x30>
    137e:	2b b3       	in	r18, 0x1b	; 27
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 c0       	rjmp	.+4      	; 0x138a <dio_write_pin+0x22>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	6a 95       	dec	r22
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <dio_write_pin+0x1e>
    138e:	80 95       	com	r24
    1390:	82 23       	and	r24, r18
    1392:	8b bb       	out	0x1b, r24	; 27
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	08 95       	ret
    1398:	2b b3       	in	r18, 0x1b	; 27
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <dio_write_pin+0x3c>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	6a 95       	dec	r22
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <dio_write_pin+0x38>
    13a8:	82 2b       	or	r24, r18
    13aa:	8b bb       	out	0x1b, r24	; 27
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	08 95       	ret
    13b0:	41 11       	cpse	r20, r1
    13b2:	0d c0       	rjmp	.+26     	; 0x13ce <dio_write_pin+0x66>
    13b4:	28 b3       	in	r18, 0x18	; 24
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <dio_write_pin+0x58>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	6a 95       	dec	r22
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <dio_write_pin+0x54>
    13c4:	80 95       	com	r24
    13c6:	82 23       	and	r24, r18
    13c8:	88 bb       	out	0x18, r24	; 24
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	08 95       	ret
    13ce:	28 b3       	in	r18, 0x18	; 24
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <dio_write_pin+0x72>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	6a 95       	dec	r22
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <dio_write_pin+0x6e>
    13de:	82 2b       	or	r24, r18
    13e0:	88 bb       	out	0x18, r24	; 24
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	08 95       	ret
    13e6:	41 11       	cpse	r20, r1
    13e8:	0d c0       	rjmp	.+26     	; 0x1404 <dio_write_pin+0x9c>
    13ea:	25 b3       	in	r18, 0x15	; 21
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <dio_write_pin+0x8e>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	6a 95       	dec	r22
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <dio_write_pin+0x8a>
    13fa:	80 95       	com	r24
    13fc:	82 23       	and	r24, r18
    13fe:	85 bb       	out	0x15, r24	; 21
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	08 95       	ret
    1404:	25 b3       	in	r18, 0x15	; 21
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <dio_write_pin+0xa8>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	6a 95       	dec	r22
    1412:	e2 f7       	brpl	.-8      	; 0x140c <dio_write_pin+0xa4>
    1414:	82 2b       	or	r24, r18
    1416:	85 bb       	out	0x15, r24	; 21
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	08 95       	ret
    141c:	41 11       	cpse	r20, r1
    141e:	0d c0       	rjmp	.+26     	; 0x143a <dio_write_pin+0xd2>
    1420:	22 b3       	in	r18, 0x12	; 18
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 c0       	rjmp	.+4      	; 0x142c <dio_write_pin+0xc4>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	6a 95       	dec	r22
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <dio_write_pin+0xc0>
    1430:	80 95       	com	r24
    1432:	82 23       	and	r24, r18
    1434:	82 bb       	out	0x12, r24	; 18
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	08 95       	ret
    143a:	22 b3       	in	r18, 0x12	; 18
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <dio_write_pin+0xde>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	6a 95       	dec	r22
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <dio_write_pin+0xda>
    144a:	82 2b       	or	r24, r18
    144c:	82 bb       	out	0x12, r24	; 18
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	08 95       	ret
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	08 95       	ret

00001456 <dio_read_pin>:

EN_DIO_ERROR_t dio_read_pin(uint8 port, uint8 pin,uint8 *data)
{
    switch(port){
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	91 f0       	breq	.+36     	; 0x147e <dio_read_pin+0x28>
    145a:	28 f0       	brcs	.+10     	; 0x1466 <dio_read_pin+0x10>
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	d9 f0       	breq	.+54     	; 0x1496 <dio_read_pin+0x40>
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	29 f1       	breq	.+74     	; 0x14ae <dio_read_pin+0x58>
    1464:	30 c0       	rjmp	.+96     	; 0x14c6 <dio_read_pin+0x70>
        case PORT_A:
            *data = READ_BIT(PINA,pin);
    1466:	89 b3       	in	r24, 0x19	; 25
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <dio_read_pin+0x1a>
    146c:	95 95       	asr	r25
    146e:	87 95       	ror	r24
    1470:	6a 95       	dec	r22
    1472:	e2 f7       	brpl	.-8      	; 0x146c <dio_read_pin+0x16>
    1474:	81 70       	andi	r24, 0x01	; 1
    1476:	fa 01       	movw	r30, r20
    1478:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    147a:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_read_pin(uint8 port, uint8 pin,uint8 *data)
{
    switch(port){
        case PORT_A:
            *data = READ_BIT(PINA,pin);
            break;
    147c:	08 95       	ret
        case PORT_B:
            *data =READ_BIT(PINB,pin);
    147e:	86 b3       	in	r24, 0x16	; 22
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <dio_read_pin+0x32>
    1484:	95 95       	asr	r25
    1486:	87 95       	ror	r24
    1488:	6a 95       	dec	r22
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <dio_read_pin+0x2e>
    148c:	81 70       	andi	r24, 0x01	; 1
    148e:	fa 01       	movw	r30, r20
    1490:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    1492:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_A:
            *data = READ_BIT(PINA,pin);
            break;
        case PORT_B:
            *data =READ_BIT(PINB,pin);
            break;
    1494:	08 95       	ret
        case PORT_C:
            *data =READ_BIT(PINC,pin);
    1496:	83 b3       	in	r24, 0x13	; 19
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <dio_read_pin+0x4a>
    149c:	95 95       	asr	r25
    149e:	87 95       	ror	r24
    14a0:	6a 95       	dec	r22
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <dio_read_pin+0x46>
    14a4:	81 70       	andi	r24, 0x01	; 1
    14a6:	fa 01       	movw	r30, r20
    14a8:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_B:
            *data =READ_BIT(PINB,pin);
            break;
        case PORT_C:
            *data =READ_BIT(PINC,pin);
            break;
    14ac:	08 95       	ret
        case PORT_D:
            *data =READ_BIT(PIND,pin);
    14ae:	80 b3       	in	r24, 0x10	; 16
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <dio_read_pin+0x62>
    14b4:	95 95       	asr	r25
    14b6:	87 95       	ror	r24
    14b8:	6a 95       	dec	r22
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <dio_read_pin+0x5e>
    14bc:	81 70       	andi	r24, 0x01	; 1
    14be:	fa 01       	movw	r30, r20
    14c0:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_C:
            *data =READ_BIT(PINC,pin);
            break;
        case PORT_D:
            *data =READ_BIT(PIND,pin);
            break;
    14c4:	08 95       	ret
        default:
            return DIO_FAIL;
    14c6:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }
    return DIO_SUCCESS;
}
    14c8:	08 95       	ret

000014ca <dio_read_port>:

EN_DIO_ERROR_t dio_read_port(uint8 port,uint8 *data)
{
	switch(port){
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	59 f0       	breq	.+22     	; 0x14e4 <dio_read_port+0x1a>
    14ce:	28 f0       	brcs	.+10     	; 0x14da <dio_read_port+0x10>
    14d0:	82 30       	cpi	r24, 0x02	; 2
    14d2:	69 f0       	breq	.+26     	; 0x14ee <dio_read_port+0x24>
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	81 f0       	breq	.+32     	; 0x14f8 <dio_read_port+0x2e>
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <dio_read_port+0x38>
		case PORT_A:
		*data = PINA;
    14da:	89 b3       	in	r24, 0x19	; 25
    14dc:	fb 01       	movw	r30, r22
    14de:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_read_port(uint8 port,uint8 *data)
{
	switch(port){
		case PORT_A:
		*data = PINA;
		break;
    14e2:	08 95       	ret
		case PORT_B:
		*data =PINB;
    14e4:	86 b3       	in	r24, 0x16	; 22
    14e6:	fb 01       	movw	r30, r22
    14e8:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*data = PINA;
		break;
		case PORT_B:
		*data =PINB;
		break;
    14ec:	08 95       	ret
		case PORT_C:
		*data =PINC;
    14ee:	83 b3       	in	r24, 0x13	; 19
    14f0:	fb 01       	movw	r30, r22
    14f2:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*data =PINB;
		break;
		case PORT_C:
		*data =PINC;
		break;
    14f6:	08 95       	ret
		case PORT_D:
		*data =PIND;
    14f8:	80 b3       	in	r24, 0x10	; 16
    14fa:	fb 01       	movw	r30, r22
    14fc:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*data =PINC;
		break;
		case PORT_D:
		*data =PIND;
		break;
    1500:	08 95       	ret
		default:
		return DIO_FAIL;
    1502:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_SUCCESS;
}
    1504:	08 95       	ret

00001506 <dio_write_port>:


EN_DIO_ERROR_t dio_write_port(uint8 port,uint8 value)
{
	switch(port){
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	49 f0       	breq	.+18     	; 0x151c <dio_write_port+0x16>
    150a:	28 f0       	brcs	.+10     	; 0x1516 <dio_write_port+0x10>
    150c:	82 30       	cpi	r24, 0x02	; 2
    150e:	49 f0       	breq	.+18     	; 0x1522 <dio_write_port+0x1c>
    1510:	83 30       	cpi	r24, 0x03	; 3
    1512:	51 f0       	breq	.+20     	; 0x1528 <dio_write_port+0x22>
    1514:	0c c0       	rjmp	.+24     	; 0x152e <dio_write_port+0x28>
		case PORT_A:
		PORTA = value;
    1516:	6b bb       	out	0x1b, r22	; 27
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    1518:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_write_port(uint8 port,uint8 value)
{
	switch(port){
		case PORT_A:
		PORTA = value;
		break;
    151a:	08 95       	ret
		case PORT_B:
		PORTB = value;
    151c:	68 bb       	out	0x18, r22	; 24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    151e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		PORTA = value;
		break;
		case PORT_B:
		PORTB = value;
		break;
    1520:	08 95       	ret
		case PORT_C:
		PORTC = value;
    1522:	65 bb       	out	0x15, r22	; 21
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    1524:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		PORTB = value;
		break;
		case PORT_C:
		PORTC = value;
		break;
    1526:	08 95       	ret
		case PORT_D:
		PORTD = value;
    1528:	62 bb       	out	0x12, r22	; 18
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    152a:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		PORTC = value;
		break;
		case PORT_D:
		PORTD = value;
		break;
    152c:	08 95       	ret
		default:
		return DIO_FAIL;
    152e:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_SUCCESS;
    1530:	08 95       	ret

00001532 <calc_prescaler>:
		init_value=0;
	}
	TCNT0=init_value;
	g_callBackPtr_0=g_ptr;
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
}
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	6b 01       	movw	r12, r22
    1540:	7c 01       	movw	r14, r24
    1542:	ea 01       	movw	r28, r20
    1544:	2c ee       	ldi	r18, 0xEC	; 236
    1546:	31 e1       	ldi	r19, 0x11	; 17
    1548:	43 e8       	ldi	r20, 0x83	; 131
    154a:	53 e4       	ldi	r21, 0x43	; 67
    154c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    1550:	18 16       	cp	r1, r24
    1552:	0c f4       	brge	.+2      	; 0x1556 <calc_prescaler+0x24>
    1554:	53 c0       	rjmp	.+166    	; 0x15fc <calc_prescaler+0xca>
    1556:	28 eb       	ldi	r18, 0xB8	; 184
    1558:	3e e1       	ldi	r19, 0x1E	; 30
    155a:	45 e8       	ldi	r20, 0x85	; 133
    155c:	5e e3       	ldi	r21, 0x3E	; 62
    155e:	c7 01       	movw	r24, r14
    1560:	b6 01       	movw	r22, r12
    1562:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    1566:	18 16       	cp	r1, r24
    1568:	2c f0       	brlt	.+10     	; 0x1574 <calc_prescaler+0x42>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	99 83       	std	Y+1, r25	; 0x01
    1570:	88 83       	st	Y, r24
    1572:	45 c0       	rjmp	.+138    	; 0x15fe <calc_prescaler+0xcc>
    1574:	23 e3       	ldi	r18, 0x33	; 51
    1576:	33 e3       	ldi	r19, 0x33	; 51
    1578:	43 e0       	ldi	r20, 0x03	; 3
    157a:	50 e4       	ldi	r21, 0x40	; 64
    157c:	c7 01       	movw	r24, r14
    157e:	b6 01       	movw	r22, r12
    1580:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    1584:	18 16       	cp	r1, r24
    1586:	34 f0       	brlt	.+12     	; 0x1594 <calc_prescaler+0x62>
    1588:	88 e0       	ldi	r24, 0x08	; 8
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	99 83       	std	Y+1, r25	; 0x01
    158e:	88 83       	st	Y, r24
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	35 c0       	rjmp	.+106    	; 0x15fe <calc_prescaler+0xcc>
    1594:	2d e3       	ldi	r18, 0x3D	; 61
    1596:	3a e0       	ldi	r19, 0x0A	; 10
    1598:	43 e8       	ldi	r20, 0x83	; 131
    159a:	51 e4       	ldi	r21, 0x41	; 65
    159c:	c7 01       	movw	r24, r14
    159e:	b6 01       	movw	r22, r12
    15a0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    15a4:	18 16       	cp	r1, r24
    15a6:	34 f0       	brlt	.+12     	; 0x15b4 <calc_prescaler+0x82>
    15a8:	80 e4       	ldi	r24, 0x40	; 64
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	99 83       	std	Y+1, r25	; 0x01
    15ae:	88 83       	st	Y, r24
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	25 c0       	rjmp	.+74     	; 0x15fe <calc_prescaler+0xcc>
    15b4:	2b e7       	ldi	r18, 0x7B	; 123
    15b6:	34 e1       	ldi	r19, 0x14	; 20
    15b8:	43 e8       	ldi	r20, 0x83	; 131
    15ba:	52 e4       	ldi	r21, 0x42	; 66
    15bc:	c7 01       	movw	r24, r14
    15be:	b6 01       	movw	r22, r12
    15c0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	34 f0       	brlt	.+12     	; 0x15d4 <calc_prescaler+0xa2>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	99 83       	std	Y+1, r25	; 0x01
    15ce:	88 83       	st	Y, r24
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	15 c0       	rjmp	.+42     	; 0x15fe <calc_prescaler+0xcc>
    15d4:	2c ee       	ldi	r18, 0xEC	; 236
    15d6:	31 e1       	ldi	r19, 0x11	; 17
    15d8:	43 e8       	ldi	r20, 0x83	; 131
    15da:	53 e4       	ldi	r21, 0x43	; 67
    15dc:	c7 01       	movw	r24, r14
    15de:	b6 01       	movw	r22, r12
    15e0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    15e4:	18 16       	cp	r1, r24
    15e6:	34 f0       	brlt	.+12     	; 0x15f4 <calc_prescaler+0xc2>
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	94 e0       	ldi	r25, 0x04	; 4
    15ec:	99 83       	std	Y+1, r25	; 0x01
    15ee:	88 83       	st	Y, r24
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	05 c0       	rjmp	.+10     	; 0x15fe <calc_prescaler+0xcc>
    15f4:	19 82       	std	Y+1, r1	; 0x01
    15f6:	18 82       	st	Y, r1
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	01 c0       	rjmp	.+2      	; 0x15fe <calc_prescaler+0xcc>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	08 95       	ret

0000160c <calc_initialValue>:
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	eb 01       	movw	r28, r22
    1612:	80 34       	cpi	r24, 0x40	; 64
    1614:	91 05       	cpc	r25, r1
    1616:	81 f1       	breq	.+96     	; 0x1678 <calc_initialValue+0x6c>
    1618:	30 f4       	brcc	.+12     	; 0x1626 <calc_initialValue+0x1a>
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	91 05       	cpc	r25, r1
    161e:	61 f0       	breq	.+24     	; 0x1638 <calc_initialValue+0x2c>
    1620:	08 97       	sbiw	r24, 0x08	; 8
    1622:	d1 f0       	breq	.+52     	; 0x1658 <calc_initialValue+0x4c>
    1624:	59 c0       	rjmp	.+178    	; 0x16d8 <calc_initialValue+0xcc>
    1626:	81 15       	cp	r24, r1
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	96 07       	cpc	r25, r22
    162c:	a9 f1       	breq	.+106    	; 0x1698 <calc_initialValue+0x8c>
    162e:	81 15       	cp	r24, r1
    1630:	94 40       	sbci	r25, 0x04	; 4
    1632:	09 f4       	brne	.+2      	; 0x1636 <calc_initialValue+0x2a>
    1634:	41 c0       	rjmp	.+130    	; 0x16b8 <calc_initialValue+0xac>
    1636:	50 c0       	rjmp	.+160    	; 0x16d8 <calc_initialValue+0xcc>
    1638:	68 eb       	ldi	r22, 0xB8	; 184
    163a:	7e e1       	ldi	r23, 0x1E	; 30
    163c:	85 e8       	ldi	r24, 0x85	; 133
    163e:	9e e3       	ldi	r25, 0x3E	; 62
    1640:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    1644:	2f e6       	ldi	r18, 0x6F	; 111
    1646:	32 e1       	ldi	r19, 0x12	; 18
    1648:	43 e8       	ldi	r20, 0x83	; 131
    164a:	5a e3       	ldi	r21, 0x3A	; 58
    164c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    1650:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    1654:	68 83       	st	Y, r22
    1656:	41 c0       	rjmp	.+130    	; 0x16da <calc_initialValue+0xce>
    1658:	63 e3       	ldi	r22, 0x33	; 51
    165a:	73 e3       	ldi	r23, 0x33	; 51
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	90 e4       	ldi	r25, 0x40	; 64
    1660:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    1664:	2f e6       	ldi	r18, 0x6F	; 111
    1666:	32 e1       	ldi	r19, 0x12	; 18
    1668:	43 e0       	ldi	r20, 0x03	; 3
    166a:	5c e3       	ldi	r21, 0x3C	; 60
    166c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    1670:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    1674:	68 83       	st	Y, r22
    1676:	31 c0       	rjmp	.+98     	; 0x16da <calc_initialValue+0xce>
    1678:	6d e3       	ldi	r22, 0x3D	; 61
    167a:	7a e0       	ldi	r23, 0x0A	; 10
    167c:	83 e8       	ldi	r24, 0x83	; 131
    167e:	91 e4       	ldi	r25, 0x41	; 65
    1680:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    1684:	2f e6       	ldi	r18, 0x6F	; 111
    1686:	32 e1       	ldi	r19, 0x12	; 18
    1688:	43 e8       	ldi	r20, 0x83	; 131
    168a:	5d e3       	ldi	r21, 0x3D	; 61
    168c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    1690:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    1694:	68 83       	st	Y, r22
    1696:	21 c0       	rjmp	.+66     	; 0x16da <calc_initialValue+0xce>
    1698:	6b e7       	ldi	r22, 0x7B	; 123
    169a:	74 e1       	ldi	r23, 0x14	; 20
    169c:	83 e8       	ldi	r24, 0x83	; 131
    169e:	92 e4       	ldi	r25, 0x42	; 66
    16a0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    16a4:	2f e6       	ldi	r18, 0x6F	; 111
    16a6:	32 e1       	ldi	r19, 0x12	; 18
    16a8:	43 e8       	ldi	r20, 0x83	; 131
    16aa:	5e e3       	ldi	r21, 0x3E	; 62
    16ac:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    16b0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    16b4:	68 83       	st	Y, r22
    16b6:	11 c0       	rjmp	.+34     	; 0x16da <calc_initialValue+0xce>
    16b8:	6c ee       	ldi	r22, 0xEC	; 236
    16ba:	71 e1       	ldi	r23, 0x11	; 17
    16bc:	83 e8       	ldi	r24, 0x83	; 131
    16be:	93 e4       	ldi	r25, 0x43	; 67
    16c0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    16c4:	2f e6       	ldi	r18, 0x6F	; 111
    16c6:	32 e1       	ldi	r19, 0x12	; 18
    16c8:	43 e8       	ldi	r20, 0x83	; 131
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    16d0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    16d4:	68 83       	st	Y, r22
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <calc_initialValue+0xce>
    16d8:	18 82       	st	Y, r1
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	08 95       	ret

000016e0 <set_prescale>:
    16e0:	80 34       	cpi	r24, 0x40	; 64
    16e2:	91 05       	cpc	r25, r1
    16e4:	a9 f0       	breq	.+42     	; 0x1710 <set_prescale+0x30>
    16e6:	30 f4       	brcc	.+12     	; 0x16f4 <set_prescale+0x14>
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 05       	cpc	r25, r1
    16ec:	59 f0       	breq	.+22     	; 0x1704 <set_prescale+0x24>
    16ee:	08 97       	sbiw	r24, 0x08	; 8
    16f0:	61 f0       	breq	.+24     	; 0x170a <set_prescale+0x2a>
    16f2:	17 c0       	rjmp	.+46     	; 0x1722 <set_prescale+0x42>
    16f4:	81 15       	cp	r24, r1
    16f6:	21 e0       	ldi	r18, 0x01	; 1
    16f8:	92 07       	cpc	r25, r18
    16fa:	69 f0       	breq	.+26     	; 0x1716 <set_prescale+0x36>
    16fc:	81 15       	cp	r24, r1
    16fe:	94 40       	sbci	r25, 0x04	; 4
    1700:	69 f0       	breq	.+26     	; 0x171c <set_prescale+0x3c>
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <set_prescale+0x42>
    1704:	81 e8       	ldi	r24, 0x81	; 129
    1706:	83 bf       	out	0x33, r24	; 51
    1708:	08 95       	ret
    170a:	82 e8       	ldi	r24, 0x82	; 130
    170c:	83 bf       	out	0x33, r24	; 51
    170e:	08 95       	ret
    1710:	83 e8       	ldi	r24, 0x83	; 131
    1712:	83 bf       	out	0x33, r24	; 51
    1714:	08 95       	ret
    1716:	84 e8       	ldi	r24, 0x84	; 132
    1718:	83 bf       	out	0x33, r24	; 51
    171a:	08 95       	ret
    171c:	85 e8       	ldi	r24, 0x85	; 133
    171e:	83 bf       	out	0x33, r24	; 51
    1720:	08 95       	ret
    1722:	13 be       	out	0x33, r1	; 51
    1724:	08 95       	ret

00001726 <Timer0_Delay>:
    1726:	8f 92       	push	r8
    1728:	9f 92       	push	r9
    172a:	af 92       	push	r10
    172c:	bf 92       	push	r11
    172e:	cf 92       	push	r12
    1730:	df 92       	push	r13
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	27 97       	sbiw	r28, 0x07	; 7
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	6b 01       	movw	r12, r22
    174e:	7c 01       	movw	r14, r24
    1750:	ae 01       	movw	r20, r28
    1752:	4f 5f       	subi	r20, 0xFF	; 255
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	0e 94 99 0a 	call	0x1532	; 0x1532 <calc_prescaler>
    175a:	88 23       	and	r24, r24
    175c:	71 f0       	breq	.+28     	; 0x177a <Timer0_Delay+0x54>
    175e:	a7 01       	movw	r20, r14
    1760:	96 01       	movw	r18, r12
    1762:	be 01       	movw	r22, r28
    1764:	6d 5f       	subi	r22, 0xFD	; 253
    1766:	7f 4f       	sbci	r23, 0xFF	; 255
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	0e 94 06 0b 	call	0x160c	; 0x160c <calc_initialValue>
    1770:	1c 82       	std	Y+4, r1	; 0x04
    1772:	1d 82       	std	Y+5, r1	; 0x05
    1774:	1e 82       	std	Y+6, r1	; 0x06
    1776:	1f 82       	std	Y+7, r1	; 0x07
    1778:	11 c0       	rjmp	.+34     	; 0x179c <Timer0_Delay+0x76>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	94 e0       	ldi	r25, 0x04	; 4
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	2c ee       	ldi	r18, 0xEC	; 236
    1784:	31 e1       	ldi	r19, 0x11	; 17
    1786:	43 e8       	ldi	r20, 0x83	; 131
    1788:	53 e4       	ldi	r21, 0x43	; 67
    178a:	c7 01       	movw	r24, r14
    178c:	b6 01       	movw	r22, r12
    178e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    1792:	6c 83       	std	Y+4, r22	; 0x04
    1794:	7d 83       	std	Y+5, r23	; 0x05
    1796:	8e 83       	std	Y+6, r24	; 0x06
    1798:	9f 83       	std	Y+7, r25	; 0x07
    179a:	1b 82       	std	Y+3, r1	; 0x03
    179c:	cc 80       	ldd	r12, Y+4	; 0x04
    179e:	dd 80       	ldd	r13, Y+5	; 0x05
    17a0:	ee 80       	ldd	r14, Y+6	; 0x06
    17a2:	ff 80       	ldd	r15, Y+7	; 0x07
    17a4:	c7 01       	movw	r24, r14
    17a6:	b6 01       	movw	r22, r12
    17a8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    17ac:	16 2f       	mov	r17, r22
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__floatsisf>
    17b8:	9b 01       	movw	r18, r22
    17ba:	ac 01       	movw	r20, r24
    17bc:	c7 01       	movw	r24, r14
    17be:	b6 01       	movw	r22, r12
    17c0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    17c4:	2c ee       	ldi	r18, 0xEC	; 236
    17c6:	31 e1       	ldi	r19, 0x11	; 17
    17c8:	43 e8       	ldi	r20, 0x83	; 131
    17ca:	53 e4       	ldi	r21, 0x43	; 67
    17cc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
    17d0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    17d4:	f6 2e       	mov	r15, r22
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	82 bf       	out	0x32, r24	; 50
    17da:	11 11       	cpse	r17, r1
    17dc:	08 c0       	rjmp	.+16     	; 0x17ee <Timer0_Delay+0xc8>
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <set_prescale>
    17e6:	08 b6       	in	r0, 0x38	; 56
    17e8:	00 fe       	sbrs	r0, 0
    17ea:	fd cf       	rjmp	.-6      	; 0x17e6 <Timer0_Delay+0xc0>
    17ec:	00 c1       	rjmp	.+512    	; 0x19ee <Timer0_Delay+0x2c8>
    17ee:	85 e8       	ldi	r24, 0x85	; 133
    17f0:	83 bf       	out	0x33, r24	; 51
    17f2:	07 c0       	rjmp	.+14     	; 0x1802 <Timer0_Delay+0xdc>
    17f4:	08 b6       	in	r0, 0x38	; 56
    17f6:	00 fe       	sbrs	r0, 0
    17f8:	fd cf       	rjmp	.-6      	; 0x17f4 <Timer0_Delay+0xce>
    17fa:	11 50       	subi	r17, 0x01	; 1
    17fc:	88 b7       	in	r24, 0x38	; 56
    17fe:	81 60       	ori	r24, 0x01	; 1
    1800:	88 bf       	out	0x38, r24	; 56
    1802:	11 11       	cpse	r17, r1
    1804:	f7 cf       	rjmp	.-18     	; 0x17f4 <Timer0_Delay+0xce>
    1806:	ff 20       	and	r15, r15
    1808:	09 f4       	brne	.+2      	; 0x180c <Timer0_Delay+0xe6>
    180a:	53 c0       	rjmp	.+166    	; 0x18b2 <Timer0_Delay+0x18c>
    180c:	6f 2d       	mov	r22, r15
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__floatsisf>
    1818:	4b 01       	movw	r8, r22
    181a:	5c 01       	movw	r10, r24
    181c:	28 eb       	ldi	r18, 0xB8	; 184
    181e:	3e e1       	ldi	r19, 0x1E	; 30
    1820:	45 e8       	ldi	r20, 0x85	; 133
    1822:	5e e3       	ldi	r21, 0x3E	; 62
    1824:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    1828:	18 16       	cp	r1, r24
    182a:	2c f0       	brlt	.+10     	; 0x1836 <Timer0_Delay+0x110>
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	3e c0       	rjmp	.+124    	; 0x18b2 <Timer0_Delay+0x18c>
    1836:	23 e3       	ldi	r18, 0x33	; 51
    1838:	33 e3       	ldi	r19, 0x33	; 51
    183a:	43 e0       	ldi	r20, 0x03	; 3
    183c:	50 e4       	ldi	r21, 0x40	; 64
    183e:	c5 01       	movw	r24, r10
    1840:	b4 01       	movw	r22, r8
    1842:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    1846:	18 16       	cp	r1, r24
    1848:	2c f0       	brlt	.+10     	; 0x1854 <Timer0_Delay+0x12e>
    184a:	88 e0       	ldi	r24, 0x08	; 8
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	2f c0       	rjmp	.+94     	; 0x18b2 <Timer0_Delay+0x18c>
    1854:	2d e3       	ldi	r18, 0x3D	; 61
    1856:	3a e0       	ldi	r19, 0x0A	; 10
    1858:	43 e8       	ldi	r20, 0x83	; 131
    185a:	51 e4       	ldi	r21, 0x41	; 65
    185c:	c5 01       	movw	r24, r10
    185e:	b4 01       	movw	r22, r8
    1860:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    1864:	18 16       	cp	r1, r24
    1866:	2c f0       	brlt	.+10     	; 0x1872 <Timer0_Delay+0x14c>
    1868:	80 e4       	ldi	r24, 0x40	; 64
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9a 83       	std	Y+2, r25	; 0x02
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	20 c0       	rjmp	.+64     	; 0x18b2 <Timer0_Delay+0x18c>
    1872:	2b e7       	ldi	r18, 0x7B	; 123
    1874:	34 e1       	ldi	r19, 0x14	; 20
    1876:	43 e8       	ldi	r20, 0x83	; 131
    1878:	52 e4       	ldi	r21, 0x42	; 66
    187a:	c5 01       	movw	r24, r10
    187c:	b4 01       	movw	r22, r8
    187e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    1882:	18 16       	cp	r1, r24
    1884:	2c f0       	brlt	.+10     	; 0x1890 <Timer0_Delay+0x16a>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	11 c0       	rjmp	.+34     	; 0x18b2 <Timer0_Delay+0x18c>
    1890:	2c ee       	ldi	r18, 0xEC	; 236
    1892:	31 e1       	ldi	r19, 0x11	; 17
    1894:	43 e8       	ldi	r20, 0x83	; 131
    1896:	53 e4       	ldi	r21, 0x43	; 67
    1898:	c5 01       	movw	r24, r10
    189a:	b4 01       	movw	r22, r8
    189c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    18a0:	18 16       	cp	r1, r24
    18a2:	2c f0       	brlt	.+10     	; 0x18ae <Timer0_Delay+0x188>
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	94 e0       	ldi	r25, 0x04	; 4
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <Timer0_Delay+0x18c>
    18ae:	1a 82       	std	Y+2, r1	; 0x02
    18b0:	19 82       	std	Y+1, r1	; 0x01
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	9a 81       	ldd	r25, Y+2	; 0x02
    18b6:	80 34       	cpi	r24, 0x40	; 64
    18b8:	91 05       	cpc	r25, r1
    18ba:	09 f4       	brne	.+2      	; 0x18be <Timer0_Delay+0x198>
    18bc:	45 c0       	rjmp	.+138    	; 0x1948 <Timer0_Delay+0x222>
    18be:	30 f4       	brcc	.+12     	; 0x18cc <Timer0_Delay+0x1a6>
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	91 05       	cpc	r25, r1
    18c4:	69 f0       	breq	.+26     	; 0x18e0 <Timer0_Delay+0x1ba>
    18c6:	08 97       	sbiw	r24, 0x08	; 8
    18c8:	29 f1       	breq	.+74     	; 0x1914 <Timer0_Delay+0x1ee>
    18ca:	8c c0       	rjmp	.+280    	; 0x19e4 <Timer0_Delay+0x2be>
    18cc:	81 15       	cp	r24, r1
    18ce:	21 e0       	ldi	r18, 0x01	; 1
    18d0:	92 07       	cpc	r25, r18
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <Timer0_Delay+0x1b0>
    18d4:	53 c0       	rjmp	.+166    	; 0x197c <Timer0_Delay+0x256>
    18d6:	81 15       	cp	r24, r1
    18d8:	94 40       	sbci	r25, 0x04	; 4
    18da:	09 f4       	brne	.+2      	; 0x18de <Timer0_Delay+0x1b8>
    18dc:	69 c0       	rjmp	.+210    	; 0x19b0 <Timer0_Delay+0x28a>
    18de:	82 c0       	rjmp	.+260    	; 0x19e4 <Timer0_Delay+0x2be>
    18e0:	6f 2d       	mov	r22, r15
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__floatsisf>
    18ec:	9b 01       	movw	r18, r22
    18ee:	ac 01       	movw	r20, r24
    18f0:	68 eb       	ldi	r22, 0xB8	; 184
    18f2:	7e e1       	ldi	r23, 0x1E	; 30
    18f4:	85 e8       	ldi	r24, 0x85	; 133
    18f6:	9e e3       	ldi	r25, 0x3E	; 62
    18f8:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    18fc:	2f e6       	ldi	r18, 0x6F	; 111
    18fe:	32 e1       	ldi	r19, 0x12	; 18
    1900:	43 e8       	ldi	r20, 0x83	; 131
    1902:	5a e3       	ldi	r21, 0x3A	; 58
    1904:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    1908:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    190c:	62 bf       	out	0x32, r22	; 50
    190e:	81 e8       	ldi	r24, 0x81	; 129
    1910:	83 bf       	out	0x33, r24	; 51
    1912:	6a c0       	rjmp	.+212    	; 0x19e8 <Timer0_Delay+0x2c2>
    1914:	6f 2d       	mov	r22, r15
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__floatsisf>
    1920:	9b 01       	movw	r18, r22
    1922:	ac 01       	movw	r20, r24
    1924:	63 e3       	ldi	r22, 0x33	; 51
    1926:	73 e3       	ldi	r23, 0x33	; 51
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	90 e4       	ldi	r25, 0x40	; 64
    192c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    1930:	2f e6       	ldi	r18, 0x6F	; 111
    1932:	32 e1       	ldi	r19, 0x12	; 18
    1934:	43 e0       	ldi	r20, 0x03	; 3
    1936:	5c e3       	ldi	r21, 0x3C	; 60
    1938:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    193c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    1940:	62 bf       	out	0x32, r22	; 50
    1942:	82 e8       	ldi	r24, 0x82	; 130
    1944:	83 bf       	out	0x33, r24	; 51
    1946:	50 c0       	rjmp	.+160    	; 0x19e8 <Timer0_Delay+0x2c2>
    1948:	6f 2d       	mov	r22, r15
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__floatsisf>
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
    1958:	6d e3       	ldi	r22, 0x3D	; 61
    195a:	7a e0       	ldi	r23, 0x0A	; 10
    195c:	83 e8       	ldi	r24, 0x83	; 131
    195e:	91 e4       	ldi	r25, 0x41	; 65
    1960:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    1964:	2f e6       	ldi	r18, 0x6F	; 111
    1966:	32 e1       	ldi	r19, 0x12	; 18
    1968:	43 e8       	ldi	r20, 0x83	; 131
    196a:	5d e3       	ldi	r21, 0x3D	; 61
    196c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    1970:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    1974:	62 bf       	out	0x32, r22	; 50
    1976:	83 e8       	ldi	r24, 0x83	; 131
    1978:	83 bf       	out	0x33, r24	; 51
    197a:	36 c0       	rjmp	.+108    	; 0x19e8 <Timer0_Delay+0x2c2>
    197c:	6f 2d       	mov	r22, r15
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__floatsisf>
    1988:	9b 01       	movw	r18, r22
    198a:	ac 01       	movw	r20, r24
    198c:	6b e7       	ldi	r22, 0x7B	; 123
    198e:	74 e1       	ldi	r23, 0x14	; 20
    1990:	83 e8       	ldi	r24, 0x83	; 131
    1992:	92 e4       	ldi	r25, 0x42	; 66
    1994:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    1998:	2f e6       	ldi	r18, 0x6F	; 111
    199a:	32 e1       	ldi	r19, 0x12	; 18
    199c:	43 e8       	ldi	r20, 0x83	; 131
    199e:	5e e3       	ldi	r21, 0x3E	; 62
    19a0:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    19a4:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    19a8:	62 bf       	out	0x32, r22	; 50
    19aa:	84 e8       	ldi	r24, 0x84	; 132
    19ac:	83 bf       	out	0x33, r24	; 51
    19ae:	1c c0       	rjmp	.+56     	; 0x19e8 <Timer0_Delay+0x2c2>
    19b0:	6f 2d       	mov	r22, r15
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__floatsisf>
    19bc:	9b 01       	movw	r18, r22
    19be:	ac 01       	movw	r20, r24
    19c0:	6c ee       	ldi	r22, 0xEC	; 236
    19c2:	71 e1       	ldi	r23, 0x11	; 17
    19c4:	83 e8       	ldi	r24, 0x83	; 131
    19c6:	93 e4       	ldi	r25, 0x43	; 67
    19c8:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__subsf3>
    19cc:	2f e6       	ldi	r18, 0x6F	; 111
    19ce:	32 e1       	ldi	r19, 0x12	; 18
    19d0:	43 e8       	ldi	r20, 0x83	; 131
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    19d8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    19dc:	62 bf       	out	0x32, r22	; 50
    19de:	85 e8       	ldi	r24, 0x85	; 133
    19e0:	83 bf       	out	0x33, r24	; 51
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <Timer0_Delay+0x2c2>
    19e4:	12 be       	out	0x32, r1	; 50
    19e6:	13 be       	out	0x33, r1	; 51
    19e8:	08 b6       	in	r0, 0x38	; 56
    19ea:	00 fe       	sbrs	r0, 0
    19ec:	fd cf       	rjmp	.-6      	; 0x19e8 <Timer0_Delay+0x2c2>
    19ee:	88 b7       	in	r24, 0x38	; 56
    19f0:	81 60       	ori	r24, 0x01	; 1
    19f2:	88 bf       	out	0x38, r24	; 56
    19f4:	13 be       	out	0x33, r1	; 51
    19f6:	27 96       	adiw	r28, 0x07	; 7
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	bf 90       	pop	r11
    1a12:	af 90       	pop	r10
    1a14:	9f 90       	pop	r9
    1a16:	8f 90       	pop	r8
    1a18:	08 95       	ret

00001a1a <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	0f 92       	push	r0
    1a22:	11 24       	eor	r1, r1
    1a24:	2f 93       	push	r18
    1a26:	3f 93       	push	r19
    1a28:	4f 93       	push	r20
    1a2a:	5f 93       	push	r21
    1a2c:	6f 93       	push	r22
    1a2e:	7f 93       	push	r23
    1a30:	8f 93       	push	r24
    1a32:	9f 93       	push	r25
    1a34:	af 93       	push	r26
    1a36:	bf 93       	push	r27
    1a38:	ef 93       	push	r30
    1a3a:	ff 93       	push	r31
	if(g_callBackPtr_0 !=  ((void*)0))
    1a3c:	e0 91 ff 00 	lds	r30, 0x00FF	; 0x8000ff <g_callBackPtr_0>
    1a40:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <g_callBackPtr_0+0x1>
    1a44:	30 97       	sbiw	r30, 0x00	; 0
    1a46:	b9 f0       	breq	.+46     	; 0x1a76 <__vector_11+0x5c>
	{
		if(NO_OF_OVERFLOWS > 0)
    1a48:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <NO_OF_OVERFLOWS>
    1a4c:	88 23       	and	r24, r24
    1a4e:	79 f0       	breq	.+30     	; 0x1a6e <__vector_11+0x54>
		{
			g_tick++;
    1a50:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <g_tick>
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <g_tick>
			if(g_tick == NO_OF_OVERFLOWS)
    1a5a:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <g_tick>
    1a5e:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <NO_OF_OVERFLOWS>
    1a62:	98 13       	cpse	r25, r24
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <__vector_11+0x5c>
			{
				g_callBackPtr_0();
    1a66:	09 95       	icall
				g_tick = 0; //clear the tick counter again to start new count
    1a68:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <g_tick>
    1a6c:	04 c0       	rjmp	.+8      	; 0x1a76 <__vector_11+0x5c>
			}
		}
		else
		{
			g_callBackPtr_0();
    1a6e:	09 95       	icall
			TCNT0=init_value;
    1a70:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end>
    1a74:	82 bf       	out	0x32, r24	; 50
		}
	}
}
    1a76:	ff 91       	pop	r31
    1a78:	ef 91       	pop	r30
    1a7a:	bf 91       	pop	r27
    1a7c:	af 91       	pop	r26
    1a7e:	9f 91       	pop	r25
    1a80:	8f 91       	pop	r24
    1a82:	7f 91       	pop	r23
    1a84:	6f 91       	pop	r22
    1a86:	5f 91       	pop	r21
    1a88:	4f 91       	pop	r20
    1a8a:	3f 91       	pop	r19
    1a8c:	2f 91       	pop	r18
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	0f 90       	pop	r0
    1a94:	1f 90       	pop	r1
    1a96:	18 95       	reti

00001a98 <__subsf3>:
    1a98:	50 58       	subi	r21, 0x80	; 128

00001a9a <__addsf3>:
    1a9a:	bb 27       	eor	r27, r27
    1a9c:	aa 27       	eor	r26, r26
    1a9e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__addsf3x>
    1aa2:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__fp_round>
    1aa6:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__fp_pscA>
    1aaa:	38 f0       	brcs	.+14     	; 0x1aba <__addsf3+0x20>
    1aac:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fp_pscB>
    1ab0:	20 f0       	brcs	.+8      	; 0x1aba <__addsf3+0x20>
    1ab2:	39 f4       	brne	.+14     	; 0x1ac2 <__addsf3+0x28>
    1ab4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab6:	19 f4       	brne	.+6      	; 0x1abe <__addsf3+0x24>
    1ab8:	26 f4       	brtc	.+8      	; 0x1ac2 <__addsf3+0x28>
    1aba:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__fp_nan>
    1abe:	0e f4       	brtc	.+2      	; 0x1ac2 <__addsf3+0x28>
    1ac0:	e0 95       	com	r30
    1ac2:	e7 fb       	bst	r30, 7
    1ac4:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__fp_inf>

00001ac8 <__addsf3x>:
    1ac8:	e9 2f       	mov	r30, r25
    1aca:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fp_split3>
    1ace:	58 f3       	brcs	.-42     	; 0x1aa6 <__addsf3+0xc>
    1ad0:	ba 17       	cp	r27, r26
    1ad2:	62 07       	cpc	r22, r18
    1ad4:	73 07       	cpc	r23, r19
    1ad6:	84 07       	cpc	r24, r20
    1ad8:	95 07       	cpc	r25, r21
    1ada:	20 f0       	brcs	.+8      	; 0x1ae4 <__addsf3x+0x1c>
    1adc:	79 f4       	brne	.+30     	; 0x1afc <__addsf3x+0x34>
    1ade:	a6 f5       	brtc	.+104    	; 0x1b48 <__addsf3x+0x80>
    1ae0:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__fp_zero>
    1ae4:	0e f4       	brtc	.+2      	; 0x1ae8 <__addsf3x+0x20>
    1ae6:	e0 95       	com	r30
    1ae8:	0b 2e       	mov	r0, r27
    1aea:	ba 2f       	mov	r27, r26
    1aec:	a0 2d       	mov	r26, r0
    1aee:	0b 01       	movw	r0, r22
    1af0:	b9 01       	movw	r22, r18
    1af2:	90 01       	movw	r18, r0
    1af4:	0c 01       	movw	r0, r24
    1af6:	ca 01       	movw	r24, r20
    1af8:	a0 01       	movw	r20, r0
    1afa:	11 24       	eor	r1, r1
    1afc:	ff 27       	eor	r31, r31
    1afe:	59 1b       	sub	r21, r25
    1b00:	99 f0       	breq	.+38     	; 0x1b28 <__addsf3x+0x60>
    1b02:	59 3f       	cpi	r21, 0xF9	; 249
    1b04:	50 f4       	brcc	.+20     	; 0x1b1a <__addsf3x+0x52>
    1b06:	50 3e       	cpi	r21, 0xE0	; 224
    1b08:	68 f1       	brcs	.+90     	; 0x1b64 <__addsf3x+0x9c>
    1b0a:	1a 16       	cp	r1, r26
    1b0c:	f0 40       	sbci	r31, 0x00	; 0
    1b0e:	a2 2f       	mov	r26, r18
    1b10:	23 2f       	mov	r18, r19
    1b12:	34 2f       	mov	r19, r20
    1b14:	44 27       	eor	r20, r20
    1b16:	58 5f       	subi	r21, 0xF8	; 248
    1b18:	f3 cf       	rjmp	.-26     	; 0x1b00 <__addsf3x+0x38>
    1b1a:	46 95       	lsr	r20
    1b1c:	37 95       	ror	r19
    1b1e:	27 95       	ror	r18
    1b20:	a7 95       	ror	r26
    1b22:	f0 40       	sbci	r31, 0x00	; 0
    1b24:	53 95       	inc	r21
    1b26:	c9 f7       	brne	.-14     	; 0x1b1a <__addsf3x+0x52>
    1b28:	7e f4       	brtc	.+30     	; 0x1b48 <__addsf3x+0x80>
    1b2a:	1f 16       	cp	r1, r31
    1b2c:	ba 0b       	sbc	r27, r26
    1b2e:	62 0b       	sbc	r22, r18
    1b30:	73 0b       	sbc	r23, r19
    1b32:	84 0b       	sbc	r24, r20
    1b34:	ba f0       	brmi	.+46     	; 0x1b64 <__addsf3x+0x9c>
    1b36:	91 50       	subi	r25, 0x01	; 1
    1b38:	a1 f0       	breq	.+40     	; 0x1b62 <__addsf3x+0x9a>
    1b3a:	ff 0f       	add	r31, r31
    1b3c:	bb 1f       	adc	r27, r27
    1b3e:	66 1f       	adc	r22, r22
    1b40:	77 1f       	adc	r23, r23
    1b42:	88 1f       	adc	r24, r24
    1b44:	c2 f7       	brpl	.-16     	; 0x1b36 <__addsf3x+0x6e>
    1b46:	0e c0       	rjmp	.+28     	; 0x1b64 <__addsf3x+0x9c>
    1b48:	ba 0f       	add	r27, r26
    1b4a:	62 1f       	adc	r22, r18
    1b4c:	73 1f       	adc	r23, r19
    1b4e:	84 1f       	adc	r24, r20
    1b50:	48 f4       	brcc	.+18     	; 0x1b64 <__addsf3x+0x9c>
    1b52:	87 95       	ror	r24
    1b54:	77 95       	ror	r23
    1b56:	67 95       	ror	r22
    1b58:	b7 95       	ror	r27
    1b5a:	f7 95       	ror	r31
    1b5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b5e:	08 f0       	brcs	.+2      	; 0x1b62 <__addsf3x+0x9a>
    1b60:	b0 cf       	rjmp	.-160    	; 0x1ac2 <__addsf3+0x28>
    1b62:	93 95       	inc	r25
    1b64:	88 0f       	add	r24, r24
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <__addsf3x+0xa2>
    1b68:	99 27       	eor	r25, r25
    1b6a:	ee 0f       	add	r30, r30
    1b6c:	97 95       	ror	r25
    1b6e:	87 95       	ror	r24
    1b70:	08 95       	ret

00001b72 <__cmpsf2>:
    1b72:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__fp_cmp>
    1b76:	08 f4       	brcc	.+2      	; 0x1b7a <__cmpsf2+0x8>
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	08 95       	ret

00001b7c <__divsf3>:
    1b7c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__divsf3x>
    1b80:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__fp_round>
    1b84:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fp_pscB>
    1b88:	58 f0       	brcs	.+22     	; 0x1ba0 <__divsf3+0x24>
    1b8a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__fp_pscA>
    1b8e:	40 f0       	brcs	.+16     	; 0x1ba0 <__divsf3+0x24>
    1b90:	29 f4       	brne	.+10     	; 0x1b9c <__divsf3+0x20>
    1b92:	5f 3f       	cpi	r21, 0xFF	; 255
    1b94:	29 f0       	breq	.+10     	; 0x1ba0 <__divsf3+0x24>
    1b96:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__fp_inf>
    1b9a:	51 11       	cpse	r21, r1
    1b9c:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__fp_szero>
    1ba0:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__fp_nan>

00001ba4 <__divsf3x>:
    1ba4:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fp_split3>
    1ba8:	68 f3       	brcs	.-38     	; 0x1b84 <__divsf3+0x8>

00001baa <__divsf3_pse>:
    1baa:	99 23       	and	r25, r25
    1bac:	b1 f3       	breq	.-20     	; 0x1b9a <__divsf3+0x1e>
    1bae:	55 23       	and	r21, r21
    1bb0:	91 f3       	breq	.-28     	; 0x1b96 <__divsf3+0x1a>
    1bb2:	95 1b       	sub	r25, r21
    1bb4:	55 0b       	sbc	r21, r21
    1bb6:	bb 27       	eor	r27, r27
    1bb8:	aa 27       	eor	r26, r26
    1bba:	62 17       	cp	r22, r18
    1bbc:	73 07       	cpc	r23, r19
    1bbe:	84 07       	cpc	r24, r20
    1bc0:	38 f0       	brcs	.+14     	; 0x1bd0 <__divsf3_pse+0x26>
    1bc2:	9f 5f       	subi	r25, 0xFF	; 255
    1bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc6:	22 0f       	add	r18, r18
    1bc8:	33 1f       	adc	r19, r19
    1bca:	44 1f       	adc	r20, r20
    1bcc:	aa 1f       	adc	r26, r26
    1bce:	a9 f3       	breq	.-22     	; 0x1bba <__divsf3_pse+0x10>
    1bd0:	35 d0       	rcall	.+106    	; 0x1c3c <__divsf3_pse+0x92>
    1bd2:	0e 2e       	mov	r0, r30
    1bd4:	3a f0       	brmi	.+14     	; 0x1be4 <__divsf3_pse+0x3a>
    1bd6:	e0 e8       	ldi	r30, 0x80	; 128
    1bd8:	32 d0       	rcall	.+100    	; 0x1c3e <__divsf3_pse+0x94>
    1bda:	91 50       	subi	r25, 0x01	; 1
    1bdc:	50 40       	sbci	r21, 0x00	; 0
    1bde:	e6 95       	lsr	r30
    1be0:	00 1c       	adc	r0, r0
    1be2:	ca f7       	brpl	.-14     	; 0x1bd6 <__divsf3_pse+0x2c>
    1be4:	2b d0       	rcall	.+86     	; 0x1c3c <__divsf3_pse+0x92>
    1be6:	fe 2f       	mov	r31, r30
    1be8:	29 d0       	rcall	.+82     	; 0x1c3c <__divsf3_pse+0x92>
    1bea:	66 0f       	add	r22, r22
    1bec:	77 1f       	adc	r23, r23
    1bee:	88 1f       	adc	r24, r24
    1bf0:	bb 1f       	adc	r27, r27
    1bf2:	26 17       	cp	r18, r22
    1bf4:	37 07       	cpc	r19, r23
    1bf6:	48 07       	cpc	r20, r24
    1bf8:	ab 07       	cpc	r26, r27
    1bfa:	b0 e8       	ldi	r27, 0x80	; 128
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <__divsf3_pse+0x56>
    1bfe:	bb 0b       	sbc	r27, r27
    1c00:	80 2d       	mov	r24, r0
    1c02:	bf 01       	movw	r22, r30
    1c04:	ff 27       	eor	r31, r31
    1c06:	93 58       	subi	r25, 0x83	; 131
    1c08:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0a:	3a f0       	brmi	.+14     	; 0x1c1a <__divsf3_pse+0x70>
    1c0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c0e:	51 05       	cpc	r21, r1
    1c10:	78 f0       	brcs	.+30     	; 0x1c30 <__divsf3_pse+0x86>
    1c12:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__fp_inf>
    1c16:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__fp_szero>
    1c1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c1c:	e4 f3       	brlt	.-8      	; 0x1c16 <__divsf3_pse+0x6c>
    1c1e:	98 3e       	cpi	r25, 0xE8	; 232
    1c20:	d4 f3       	brlt	.-12     	; 0x1c16 <__divsf3_pse+0x6c>
    1c22:	86 95       	lsr	r24
    1c24:	77 95       	ror	r23
    1c26:	67 95       	ror	r22
    1c28:	b7 95       	ror	r27
    1c2a:	f7 95       	ror	r31
    1c2c:	9f 5f       	subi	r25, 0xFF	; 255
    1c2e:	c9 f7       	brne	.-14     	; 0x1c22 <__divsf3_pse+0x78>
    1c30:	88 0f       	add	r24, r24
    1c32:	91 1d       	adc	r25, r1
    1c34:	96 95       	lsr	r25
    1c36:	87 95       	ror	r24
    1c38:	97 f9       	bld	r25, 7
    1c3a:	08 95       	ret
    1c3c:	e1 e0       	ldi	r30, 0x01	; 1
    1c3e:	66 0f       	add	r22, r22
    1c40:	77 1f       	adc	r23, r23
    1c42:	88 1f       	adc	r24, r24
    1c44:	bb 1f       	adc	r27, r27
    1c46:	62 17       	cp	r22, r18
    1c48:	73 07       	cpc	r23, r19
    1c4a:	84 07       	cpc	r24, r20
    1c4c:	ba 07       	cpc	r27, r26
    1c4e:	20 f0       	brcs	.+8      	; 0x1c58 <__divsf3_pse+0xae>
    1c50:	62 1b       	sub	r22, r18
    1c52:	73 0b       	sbc	r23, r19
    1c54:	84 0b       	sbc	r24, r20
    1c56:	ba 0b       	sbc	r27, r26
    1c58:	ee 1f       	adc	r30, r30
    1c5a:	88 f7       	brcc	.-30     	; 0x1c3e <__divsf3_pse+0x94>
    1c5c:	e0 95       	com	r30
    1c5e:	08 95       	ret

00001c60 <__fixsfsi>:
    1c60:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixunssfsi>
    1c64:	68 94       	set
    1c66:	b1 11       	cpse	r27, r1
    1c68:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__fp_szero>
    1c6c:	08 95       	ret

00001c6e <__fixunssfsi>:
    1c6e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fp_splitA>
    1c72:	88 f0       	brcs	.+34     	; 0x1c96 <__fixunssfsi+0x28>
    1c74:	9f 57       	subi	r25, 0x7F	; 127
    1c76:	98 f0       	brcs	.+38     	; 0x1c9e <__fixunssfsi+0x30>
    1c78:	b9 2f       	mov	r27, r25
    1c7a:	99 27       	eor	r25, r25
    1c7c:	b7 51       	subi	r27, 0x17	; 23
    1c7e:	b0 f0       	brcs	.+44     	; 0x1cac <__fixunssfsi+0x3e>
    1c80:	e1 f0       	breq	.+56     	; 0x1cba <__fixunssfsi+0x4c>
    1c82:	66 0f       	add	r22, r22
    1c84:	77 1f       	adc	r23, r23
    1c86:	88 1f       	adc	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	1a f0       	brmi	.+6      	; 0x1c92 <__fixunssfsi+0x24>
    1c8c:	ba 95       	dec	r27
    1c8e:	c9 f7       	brne	.-14     	; 0x1c82 <__fixunssfsi+0x14>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <__fixunssfsi+0x4c>
    1c92:	b1 30       	cpi	r27, 0x01	; 1
    1c94:	91 f0       	breq	.+36     	; 0x1cba <__fixunssfsi+0x4c>
    1c96:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__fp_zero>
    1c9a:	b1 e0       	ldi	r27, 0x01	; 1
    1c9c:	08 95       	ret
    1c9e:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__fp_zero>
    1ca2:	67 2f       	mov	r22, r23
    1ca4:	78 2f       	mov	r23, r24
    1ca6:	88 27       	eor	r24, r24
    1ca8:	b8 5f       	subi	r27, 0xF8	; 248
    1caa:	39 f0       	breq	.+14     	; 0x1cba <__fixunssfsi+0x4c>
    1cac:	b9 3f       	cpi	r27, 0xF9	; 249
    1cae:	cc f3       	brlt	.-14     	; 0x1ca2 <__fixunssfsi+0x34>
    1cb0:	86 95       	lsr	r24
    1cb2:	77 95       	ror	r23
    1cb4:	67 95       	ror	r22
    1cb6:	b3 95       	inc	r27
    1cb8:	d9 f7       	brne	.-10     	; 0x1cb0 <__fixunssfsi+0x42>
    1cba:	3e f4       	brtc	.+14     	; 0x1cca <__fixunssfsi+0x5c>
    1cbc:	90 95       	com	r25
    1cbe:	80 95       	com	r24
    1cc0:	70 95       	com	r23
    1cc2:	61 95       	neg	r22
    1cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cca:	08 95       	ret

00001ccc <__floatunsisf>:
    1ccc:	e8 94       	clt
    1cce:	09 c0       	rjmp	.+18     	; 0x1ce2 <__floatsisf+0x12>

00001cd0 <__floatsisf>:
    1cd0:	97 fb       	bst	r25, 7
    1cd2:	3e f4       	brtc	.+14     	; 0x1ce2 <__floatsisf+0x12>
    1cd4:	90 95       	com	r25
    1cd6:	80 95       	com	r24
    1cd8:	70 95       	com	r23
    1cda:	61 95       	neg	r22
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	99 23       	and	r25, r25
    1ce4:	a9 f0       	breq	.+42     	; 0x1d10 <__floatsisf+0x40>
    1ce6:	f9 2f       	mov	r31, r25
    1ce8:	96 e9       	ldi	r25, 0x96	; 150
    1cea:	bb 27       	eor	r27, r27
    1cec:	93 95       	inc	r25
    1cee:	f6 95       	lsr	r31
    1cf0:	87 95       	ror	r24
    1cf2:	77 95       	ror	r23
    1cf4:	67 95       	ror	r22
    1cf6:	b7 95       	ror	r27
    1cf8:	f1 11       	cpse	r31, r1
    1cfa:	f8 cf       	rjmp	.-16     	; 0x1cec <__floatsisf+0x1c>
    1cfc:	fa f4       	brpl	.+62     	; 0x1d3c <__floatsisf+0x6c>
    1cfe:	bb 0f       	add	r27, r27
    1d00:	11 f4       	brne	.+4      	; 0x1d06 <__floatsisf+0x36>
    1d02:	60 ff       	sbrs	r22, 0
    1d04:	1b c0       	rjmp	.+54     	; 0x1d3c <__floatsisf+0x6c>
    1d06:	6f 5f       	subi	r22, 0xFF	; 255
    1d08:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0e:	16 c0       	rjmp	.+44     	; 0x1d3c <__floatsisf+0x6c>
    1d10:	88 23       	and	r24, r24
    1d12:	11 f0       	breq	.+4      	; 0x1d18 <__floatsisf+0x48>
    1d14:	96 e9       	ldi	r25, 0x96	; 150
    1d16:	11 c0       	rjmp	.+34     	; 0x1d3a <__floatsisf+0x6a>
    1d18:	77 23       	and	r23, r23
    1d1a:	21 f0       	breq	.+8      	; 0x1d24 <__floatsisf+0x54>
    1d1c:	9e e8       	ldi	r25, 0x8E	; 142
    1d1e:	87 2f       	mov	r24, r23
    1d20:	76 2f       	mov	r23, r22
    1d22:	05 c0       	rjmp	.+10     	; 0x1d2e <__floatsisf+0x5e>
    1d24:	66 23       	and	r22, r22
    1d26:	71 f0       	breq	.+28     	; 0x1d44 <__floatsisf+0x74>
    1d28:	96 e8       	ldi	r25, 0x86	; 134
    1d2a:	86 2f       	mov	r24, r22
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	2a f0       	brmi	.+10     	; 0x1d3c <__floatsisf+0x6c>
    1d32:	9a 95       	dec	r25
    1d34:	66 0f       	add	r22, r22
    1d36:	77 1f       	adc	r23, r23
    1d38:	88 1f       	adc	r24, r24
    1d3a:	da f7       	brpl	.-10     	; 0x1d32 <__floatsisf+0x62>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	96 95       	lsr	r25
    1d40:	87 95       	ror	r24
    1d42:	97 f9       	bld	r25, 7
    1d44:	08 95       	ret

00001d46 <__fp_cmp>:
    1d46:	99 0f       	add	r25, r25
    1d48:	00 08       	sbc	r0, r0
    1d4a:	55 0f       	add	r21, r21
    1d4c:	aa 0b       	sbc	r26, r26
    1d4e:	e0 e8       	ldi	r30, 0x80	; 128
    1d50:	fe ef       	ldi	r31, 0xFE	; 254
    1d52:	16 16       	cp	r1, r22
    1d54:	17 06       	cpc	r1, r23
    1d56:	e8 07       	cpc	r30, r24
    1d58:	f9 07       	cpc	r31, r25
    1d5a:	c0 f0       	brcs	.+48     	; 0x1d8c <__fp_cmp+0x46>
    1d5c:	12 16       	cp	r1, r18
    1d5e:	13 06       	cpc	r1, r19
    1d60:	e4 07       	cpc	r30, r20
    1d62:	f5 07       	cpc	r31, r21
    1d64:	98 f0       	brcs	.+38     	; 0x1d8c <__fp_cmp+0x46>
    1d66:	62 1b       	sub	r22, r18
    1d68:	73 0b       	sbc	r23, r19
    1d6a:	84 0b       	sbc	r24, r20
    1d6c:	95 0b       	sbc	r25, r21
    1d6e:	39 f4       	brne	.+14     	; 0x1d7e <__fp_cmp+0x38>
    1d70:	0a 26       	eor	r0, r26
    1d72:	61 f0       	breq	.+24     	; 0x1d8c <__fp_cmp+0x46>
    1d74:	23 2b       	or	r18, r19
    1d76:	24 2b       	or	r18, r20
    1d78:	25 2b       	or	r18, r21
    1d7a:	21 f4       	brne	.+8      	; 0x1d84 <__fp_cmp+0x3e>
    1d7c:	08 95       	ret
    1d7e:	0a 26       	eor	r0, r26
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <__fp_cmp+0x3e>
    1d82:	a1 40       	sbci	r26, 0x01	; 1
    1d84:	a6 95       	lsr	r26
    1d86:	8f ef       	ldi	r24, 0xFF	; 255
    1d88:	81 1d       	adc	r24, r1
    1d8a:	81 1d       	adc	r24, r1
    1d8c:	08 95       	ret

00001d8e <__fp_inf>:
    1d8e:	97 f9       	bld	r25, 7
    1d90:	9f 67       	ori	r25, 0x7F	; 127
    1d92:	80 e8       	ldi	r24, 0x80	; 128
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	08 95       	ret

00001d9a <__fp_nan>:
    1d9a:	9f ef       	ldi	r25, 0xFF	; 255
    1d9c:	80 ec       	ldi	r24, 0xC0	; 192
    1d9e:	08 95       	ret

00001da0 <__fp_pscA>:
    1da0:	00 24       	eor	r0, r0
    1da2:	0a 94       	dec	r0
    1da4:	16 16       	cp	r1, r22
    1da6:	17 06       	cpc	r1, r23
    1da8:	18 06       	cpc	r1, r24
    1daa:	09 06       	cpc	r0, r25
    1dac:	08 95       	ret

00001dae <__fp_pscB>:
    1dae:	00 24       	eor	r0, r0
    1db0:	0a 94       	dec	r0
    1db2:	12 16       	cp	r1, r18
    1db4:	13 06       	cpc	r1, r19
    1db6:	14 06       	cpc	r1, r20
    1db8:	05 06       	cpc	r0, r21
    1dba:	08 95       	ret

00001dbc <__fp_round>:
    1dbc:	09 2e       	mov	r0, r25
    1dbe:	03 94       	inc	r0
    1dc0:	00 0c       	add	r0, r0
    1dc2:	11 f4       	brne	.+4      	; 0x1dc8 <__fp_round+0xc>
    1dc4:	88 23       	and	r24, r24
    1dc6:	52 f0       	brmi	.+20     	; 0x1ddc <__fp_round+0x20>
    1dc8:	bb 0f       	add	r27, r27
    1dca:	40 f4       	brcc	.+16     	; 0x1ddc <__fp_round+0x20>
    1dcc:	bf 2b       	or	r27, r31
    1dce:	11 f4       	brne	.+4      	; 0x1dd4 <__fp_round+0x18>
    1dd0:	60 ff       	sbrs	r22, 0
    1dd2:	04 c0       	rjmp	.+8      	; 0x1ddc <__fp_round+0x20>
    1dd4:	6f 5f       	subi	r22, 0xFF	; 255
    1dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	08 95       	ret

00001dde <__fp_split3>:
    1dde:	57 fd       	sbrc	r21, 7
    1de0:	90 58       	subi	r25, 0x80	; 128
    1de2:	44 0f       	add	r20, r20
    1de4:	55 1f       	adc	r21, r21
    1de6:	59 f0       	breq	.+22     	; 0x1dfe <__fp_splitA+0x10>
    1de8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dea:	71 f0       	breq	.+28     	; 0x1e08 <__fp_splitA+0x1a>
    1dec:	47 95       	ror	r20

00001dee <__fp_splitA>:
    1dee:	88 0f       	add	r24, r24
    1df0:	97 fb       	bst	r25, 7
    1df2:	99 1f       	adc	r25, r25
    1df4:	61 f0       	breq	.+24     	; 0x1e0e <__fp_splitA+0x20>
    1df6:	9f 3f       	cpi	r25, 0xFF	; 255
    1df8:	79 f0       	breq	.+30     	; 0x1e18 <__fp_splitA+0x2a>
    1dfa:	87 95       	ror	r24
    1dfc:	08 95       	ret
    1dfe:	12 16       	cp	r1, r18
    1e00:	13 06       	cpc	r1, r19
    1e02:	14 06       	cpc	r1, r20
    1e04:	55 1f       	adc	r21, r21
    1e06:	f2 cf       	rjmp	.-28     	; 0x1dec <__fp_split3+0xe>
    1e08:	46 95       	lsr	r20
    1e0a:	f1 df       	rcall	.-30     	; 0x1dee <__fp_splitA>
    1e0c:	08 c0       	rjmp	.+16     	; 0x1e1e <__fp_splitA+0x30>
    1e0e:	16 16       	cp	r1, r22
    1e10:	17 06       	cpc	r1, r23
    1e12:	18 06       	cpc	r1, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	f1 cf       	rjmp	.-30     	; 0x1dfa <__fp_splitA+0xc>
    1e18:	86 95       	lsr	r24
    1e1a:	71 05       	cpc	r23, r1
    1e1c:	61 05       	cpc	r22, r1
    1e1e:	08 94       	sec
    1e20:	08 95       	ret

00001e22 <__fp_zero>:
    1e22:	e8 94       	clt

00001e24 <__fp_szero>:
    1e24:	bb 27       	eor	r27, r27
    1e26:	66 27       	eor	r22, r22
    1e28:	77 27       	eor	r23, r23
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	97 f9       	bld	r25, 7
    1e2e:	08 95       	ret

00001e30 <__mulsf3>:
    1e30:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__mulsf3x>
    1e34:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__fp_round>
    1e38:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__fp_pscA>
    1e3c:	38 f0       	brcs	.+14     	; 0x1e4c <__mulsf3+0x1c>
    1e3e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fp_pscB>
    1e42:	20 f0       	brcs	.+8      	; 0x1e4c <__mulsf3+0x1c>
    1e44:	95 23       	and	r25, r21
    1e46:	11 f0       	breq	.+4      	; 0x1e4c <__mulsf3+0x1c>
    1e48:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__fp_inf>
    1e4c:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__fp_nan>
    1e50:	11 24       	eor	r1, r1
    1e52:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__fp_szero>

00001e56 <__mulsf3x>:
    1e56:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fp_split3>
    1e5a:	70 f3       	brcs	.-36     	; 0x1e38 <__mulsf3+0x8>

00001e5c <__mulsf3_pse>:
    1e5c:	95 9f       	mul	r25, r21
    1e5e:	c1 f3       	breq	.-16     	; 0x1e50 <__mulsf3+0x20>
    1e60:	95 0f       	add	r25, r21
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	55 1f       	adc	r21, r21
    1e66:	62 9f       	mul	r22, r18
    1e68:	f0 01       	movw	r30, r0
    1e6a:	72 9f       	mul	r23, r18
    1e6c:	bb 27       	eor	r27, r27
    1e6e:	f0 0d       	add	r31, r0
    1e70:	b1 1d       	adc	r27, r1
    1e72:	63 9f       	mul	r22, r19
    1e74:	aa 27       	eor	r26, r26
    1e76:	f0 0d       	add	r31, r0
    1e78:	b1 1d       	adc	r27, r1
    1e7a:	aa 1f       	adc	r26, r26
    1e7c:	64 9f       	mul	r22, r20
    1e7e:	66 27       	eor	r22, r22
    1e80:	b0 0d       	add	r27, r0
    1e82:	a1 1d       	adc	r26, r1
    1e84:	66 1f       	adc	r22, r22
    1e86:	82 9f       	mul	r24, r18
    1e88:	22 27       	eor	r18, r18
    1e8a:	b0 0d       	add	r27, r0
    1e8c:	a1 1d       	adc	r26, r1
    1e8e:	62 1f       	adc	r22, r18
    1e90:	73 9f       	mul	r23, r19
    1e92:	b0 0d       	add	r27, r0
    1e94:	a1 1d       	adc	r26, r1
    1e96:	62 1f       	adc	r22, r18
    1e98:	83 9f       	mul	r24, r19
    1e9a:	a0 0d       	add	r26, r0
    1e9c:	61 1d       	adc	r22, r1
    1e9e:	22 1f       	adc	r18, r18
    1ea0:	74 9f       	mul	r23, r20
    1ea2:	33 27       	eor	r19, r19
    1ea4:	a0 0d       	add	r26, r0
    1ea6:	61 1d       	adc	r22, r1
    1ea8:	23 1f       	adc	r18, r19
    1eaa:	84 9f       	mul	r24, r20
    1eac:	60 0d       	add	r22, r0
    1eae:	21 1d       	adc	r18, r1
    1eb0:	82 2f       	mov	r24, r18
    1eb2:	76 2f       	mov	r23, r22
    1eb4:	6a 2f       	mov	r22, r26
    1eb6:	11 24       	eor	r1, r1
    1eb8:	9f 57       	subi	r25, 0x7F	; 127
    1eba:	50 40       	sbci	r21, 0x00	; 0
    1ebc:	9a f0       	brmi	.+38     	; 0x1ee4 <__mulsf3_pse+0x88>
    1ebe:	f1 f0       	breq	.+60     	; 0x1efc <__mulsf3_pse+0xa0>
    1ec0:	88 23       	and	r24, r24
    1ec2:	4a f0       	brmi	.+18     	; 0x1ed6 <__mulsf3_pse+0x7a>
    1ec4:	ee 0f       	add	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	bb 1f       	adc	r27, r27
    1eca:	66 1f       	adc	r22, r22
    1ecc:	77 1f       	adc	r23, r23
    1ece:	88 1f       	adc	r24, r24
    1ed0:	91 50       	subi	r25, 0x01	; 1
    1ed2:	50 40       	sbci	r21, 0x00	; 0
    1ed4:	a9 f7       	brne	.-22     	; 0x1ec0 <__mulsf3_pse+0x64>
    1ed6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed8:	51 05       	cpc	r21, r1
    1eda:	80 f0       	brcs	.+32     	; 0x1efc <__mulsf3_pse+0xa0>
    1edc:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__fp_inf>
    1ee0:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__fp_szero>
    1ee4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee6:	e4 f3       	brlt	.-8      	; 0x1ee0 <__mulsf3_pse+0x84>
    1ee8:	98 3e       	cpi	r25, 0xE8	; 232
    1eea:	d4 f3       	brlt	.-12     	; 0x1ee0 <__mulsf3_pse+0x84>
    1eec:	86 95       	lsr	r24
    1eee:	77 95       	ror	r23
    1ef0:	67 95       	ror	r22
    1ef2:	b7 95       	ror	r27
    1ef4:	f7 95       	ror	r31
    1ef6:	e7 95       	ror	r30
    1ef8:	9f 5f       	subi	r25, 0xFF	; 255
    1efa:	c1 f7       	brne	.-16     	; 0x1eec <__mulsf3_pse+0x90>
    1efc:	fe 2b       	or	r31, r30
    1efe:	88 0f       	add	r24, r24
    1f00:	91 1d       	adc	r25, r1
    1f02:	96 95       	lsr	r25
    1f04:	87 95       	ror	r24
    1f06:	97 f9       	bld	r25, 7
    1f08:	08 95       	ret

00001f0a <atof>:
    1f0a:	66 27       	eor	r22, r22
    1f0c:	77 27       	eor	r23, r23
    1f0e:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <strtod>

00001f12 <itoa>:
    1f12:	45 32       	cpi	r20, 0x25	; 37
    1f14:	51 05       	cpc	r21, r1
    1f16:	20 f4       	brcc	.+8      	; 0x1f20 <itoa+0xe>
    1f18:	42 30       	cpi	r20, 0x02	; 2
    1f1a:	10 f0       	brcs	.+4      	; 0x1f20 <itoa+0xe>
    1f1c:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__itoa_ncheck>
    1f20:	fb 01       	movw	r30, r22
    1f22:	10 82       	st	Z, r1
    1f24:	cb 01       	movw	r24, r22
    1f26:	08 95       	ret

00001f28 <__itoa_ncheck>:
    1f28:	bb 27       	eor	r27, r27
    1f2a:	4a 30       	cpi	r20, 0x0A	; 10
    1f2c:	31 f4       	brne	.+12     	; 0x1f3a <__itoa_ncheck+0x12>
    1f2e:	99 23       	and	r25, r25
    1f30:	22 f4       	brpl	.+8      	; 0x1f3a <__itoa_ncheck+0x12>
    1f32:	bd e2       	ldi	r27, 0x2D	; 45
    1f34:	90 95       	com	r25
    1f36:	81 95       	neg	r24
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__utoa_common>

00001f3e <__utoa_ncheck>:
    1f3e:	bb 27       	eor	r27, r27

00001f40 <__utoa_common>:
    1f40:	fb 01       	movw	r30, r22
    1f42:	55 27       	eor	r21, r21
    1f44:	aa 27       	eor	r26, r26
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	aa 1f       	adc	r26, r26
    1f4c:	a4 17       	cp	r26, r20
    1f4e:	10 f0       	brcs	.+4      	; 0x1f54 <__utoa_common+0x14>
    1f50:	a4 1b       	sub	r26, r20
    1f52:	83 95       	inc	r24
    1f54:	50 51       	subi	r21, 0x10	; 16
    1f56:	b9 f7       	brne	.-18     	; 0x1f46 <__utoa_common+0x6>
    1f58:	a0 5d       	subi	r26, 0xD0	; 208
    1f5a:	aa 33       	cpi	r26, 0x3A	; 58
    1f5c:	08 f0       	brcs	.+2      	; 0x1f60 <__utoa_common+0x20>
    1f5e:	a9 5d       	subi	r26, 0xD9	; 217
    1f60:	a1 93       	st	Z+, r26
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	79 f7       	brne	.-34     	; 0x1f44 <__utoa_common+0x4>
    1f66:	b1 11       	cpse	r27, r1
    1f68:	b1 93       	st	Z+, r27
    1f6a:	11 92       	st	Z+, r1
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	0c 94 28 11 	jmp	0x2250	; 0x2250 <strrev>

00001f72 <strtod>:
    1f72:	a0 e0       	ldi	r26, 0x00	; 0
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	ef eb       	ldi	r30, 0xBF	; 191
    1f78:	ff e0       	ldi	r31, 0x0F	; 15
    1f7a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0xc>
    1f7e:	ec 01       	movw	r28, r24
    1f80:	6b 01       	movw	r12, r22
    1f82:	61 15       	cp	r22, r1
    1f84:	71 05       	cpc	r23, r1
    1f86:	19 f0       	breq	.+6      	; 0x1f8e <strtod+0x1c>
    1f88:	fb 01       	movw	r30, r22
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
    1f8e:	7e 01       	movw	r14, r28
    1f90:	ff ef       	ldi	r31, 0xFF	; 255
    1f92:	ef 1a       	sub	r14, r31
    1f94:	ff 0a       	sbc	r15, r31
    1f96:	08 81       	ld	r16, Y
    1f98:	80 2f       	mov	r24, r16
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0e 94 07 11 	call	0x220e	; 0x220e <isspace>
    1fa0:	89 2b       	or	r24, r25
    1fa2:	11 f0       	breq	.+4      	; 0x1fa8 <strtod+0x36>
    1fa4:	e7 01       	movw	r28, r14
    1fa6:	f3 cf       	rjmp	.-26     	; 0x1f8e <strtod+0x1c>
    1fa8:	0d 32       	cpi	r16, 0x2D	; 45
    1faa:	39 f4       	brne	.+14     	; 0x1fba <strtod+0x48>
    1fac:	7e 01       	movw	r14, r28
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	e8 0e       	add	r14, r24
    1fb2:	f1 1c       	adc	r15, r1
    1fb4:	09 81       	ldd	r16, Y+1	; 0x01
    1fb6:	11 e0       	ldi	r17, 0x01	; 1
    1fb8:	08 c0       	rjmp	.+16     	; 0x1fca <strtod+0x58>
    1fba:	0b 32       	cpi	r16, 0x2B	; 43
    1fbc:	29 f4       	brne	.+10     	; 0x1fc8 <strtod+0x56>
    1fbe:	7e 01       	movw	r14, r28
    1fc0:	92 e0       	ldi	r25, 0x02	; 2
    1fc2:	e9 0e       	add	r14, r25
    1fc4:	f1 1c       	adc	r15, r1
    1fc6:	09 81       	ldd	r16, Y+1	; 0x01
    1fc8:	10 e0       	ldi	r17, 0x00	; 0
    1fca:	e7 01       	movw	r28, r14
    1fcc:	21 97       	sbiw	r28, 0x01	; 1
    1fce:	43 e0       	ldi	r20, 0x03	; 3
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	6c e5       	ldi	r22, 0x5C	; 92
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	0e 94 10 11 	call	0x2220	; 0x2220 <strncasecmp_P>
    1fdc:	89 2b       	or	r24, r25
    1fde:	c1 f4       	brne	.+48     	; 0x2010 <strtod+0x9e>
    1fe0:	23 96       	adiw	r28, 0x03	; 3
    1fe2:	45 e0       	ldi	r20, 0x05	; 5
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	67 e5       	ldi	r22, 0x57	; 87
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	ce 01       	movw	r24, r28
    1fec:	0e 94 10 11 	call	0x2220	; 0x2220 <strncasecmp_P>
    1ff0:	89 2b       	or	r24, r25
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <strtod+0x84>
    1ff4:	25 96       	adiw	r28, 0x05	; 5
    1ff6:	c1 14       	cp	r12, r1
    1ff8:	d1 04       	cpc	r13, r1
    1ffa:	19 f0       	breq	.+6      	; 0x2002 <strtod+0x90>
    1ffc:	f6 01       	movw	r30, r12
    1ffe:	d1 83       	std	Z+1, r29	; 0x01
    2000:	c0 83       	st	Z, r28
    2002:	11 11       	cpse	r17, r1
    2004:	f6 c0       	rjmp	.+492    	; 0x21f2 <strtod+0x280>
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	80 e8       	ldi	r24, 0x80	; 128
    200c:	9f e7       	ldi	r25, 0x7F	; 127
    200e:	fa c0       	rjmp	.+500    	; 0x2204 <strtod+0x292>
    2010:	43 e0       	ldi	r20, 0x03	; 3
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	64 e5       	ldi	r22, 0x54	; 84
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	ce 01       	movw	r24, r28
    201a:	0e 94 10 11 	call	0x2220	; 0x2220 <strncasecmp_P>
    201e:	89 2b       	or	r24, r25
    2020:	59 f4       	brne	.+22     	; 0x2038 <strtod+0xc6>
    2022:	c1 14       	cp	r12, r1
    2024:	d1 04       	cpc	r13, r1
    2026:	09 f4       	brne	.+2      	; 0x202a <strtod+0xb8>
    2028:	e9 c0       	rjmp	.+466    	; 0x21fc <strtod+0x28a>
    202a:	f2 e0       	ldi	r31, 0x02	; 2
    202c:	ef 0e       	add	r14, r31
    202e:	f1 1c       	adc	r15, r1
    2030:	f6 01       	movw	r30, r12
    2032:	f1 82       	std	Z+1, r15	; 0x01
    2034:	e0 82       	st	Z, r14
    2036:	e2 c0       	rjmp	.+452    	; 0x21fc <strtod+0x28a>
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	a9 01       	movw	r20, r18
    203e:	c0 e0       	ldi	r28, 0x00	; 0
    2040:	d0 e0       	ldi	r29, 0x00	; 0
    2042:	f7 01       	movw	r30, r14
    2044:	80 ed       	ldi	r24, 0xD0	; 208
    2046:	a8 2e       	mov	r10, r24
    2048:	a0 0e       	add	r10, r16
    204a:	89 e0       	ldi	r24, 0x09	; 9
    204c:	8a 15       	cp	r24, r10
    204e:	30 f1       	brcs	.+76     	; 0x209c <strtod+0x12a>
    2050:	91 2f       	mov	r25, r17
    2052:	92 60       	ori	r25, 0x02	; 2
    2054:	b9 2e       	mov	r11, r25
    2056:	81 2f       	mov	r24, r17
    2058:	88 70       	andi	r24, 0x08	; 8
    205a:	12 ff       	sbrs	r17, 2
    205c:	04 c0       	rjmp	.+8      	; 0x2066 <strtod+0xf4>
    205e:	81 11       	cpse	r24, r1
    2060:	24 c0       	rjmp	.+72     	; 0x20aa <strtod+0x138>
    2062:	21 96       	adiw	r28, 0x01	; 1
    2064:	22 c0       	rjmp	.+68     	; 0x20aa <strtod+0x138>
    2066:	81 11       	cpse	r24, r1
    2068:	21 97       	sbiw	r28, 0x01	; 1
    206a:	a5 e0       	ldi	r26, 0x05	; 5
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	0e 94 3b 11 	call	0x2276	; 0x2276 <__muluhisi3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	aa 1f       	adc	r26, r26
    207c:	bb 1f       	adc	r27, r27
    207e:	9c 01       	movw	r18, r24
    2080:	ad 01       	movw	r20, r26
    2082:	2a 0d       	add	r18, r10
    2084:	31 1d       	adc	r19, r1
    2086:	41 1d       	adc	r20, r1
    2088:	51 1d       	adc	r21, r1
    208a:	28 39       	cpi	r18, 0x98	; 152
    208c:	89 e9       	ldi	r24, 0x99	; 153
    208e:	38 07       	cpc	r19, r24
    2090:	48 07       	cpc	r20, r24
    2092:	89 e1       	ldi	r24, 0x19	; 25
    2094:	58 07       	cpc	r21, r24
    2096:	48 f0       	brcs	.+18     	; 0x20aa <strtod+0x138>
    2098:	16 60       	ori	r17, 0x06	; 6
    209a:	06 c0       	rjmp	.+12     	; 0x20a8 <strtod+0x136>
    209c:	9e ef       	ldi	r25, 0xFE	; 254
    209e:	a9 12       	cpse	r10, r25
    20a0:	0a c0       	rjmp	.+20     	; 0x20b6 <strtod+0x144>
    20a2:	13 fd       	sbrc	r17, 3
    20a4:	40 c0       	rjmp	.+128    	; 0x2126 <strtod+0x1b4>
    20a6:	18 60       	ori	r17, 0x08	; 8
    20a8:	b1 2e       	mov	r11, r17
    20aa:	8f ef       	ldi	r24, 0xFF	; 255
    20ac:	e8 1a       	sub	r14, r24
    20ae:	f8 0a       	sbc	r15, r24
    20b0:	00 81       	ld	r16, Z
    20b2:	1b 2d       	mov	r17, r11
    20b4:	c6 cf       	rjmp	.-116    	; 0x2042 <strtod+0xd0>
    20b6:	80 2f       	mov	r24, r16
    20b8:	8f 7d       	andi	r24, 0xDF	; 223
    20ba:	85 34       	cpi	r24, 0x45	; 69
    20bc:	a1 f5       	brne	.+104    	; 0x2126 <strtod+0x1b4>
    20be:	80 81       	ld	r24, Z
    20c0:	8d 32       	cpi	r24, 0x2D	; 45
    20c2:	11 f4       	brne	.+4      	; 0x20c8 <strtod+0x156>
    20c4:	10 61       	ori	r17, 0x10	; 16
    20c6:	06 c0       	rjmp	.+12     	; 0x20d4 <strtod+0x162>
    20c8:	8b 32       	cpi	r24, 0x2B	; 43
    20ca:	21 f0       	breq	.+8      	; 0x20d4 <strtod+0x162>
    20cc:	31 96       	adiw	r30, 0x01	; 1
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <strtod+0x16a>
    20d4:	81 81       	ldd	r24, Z+1	; 0x01
    20d6:	32 96       	adiw	r30, 0x02	; 2
    20d8:	62 e0       	ldi	r22, 0x02	; 2
    20da:	70 e0       	ldi	r23, 0x00	; 0
    20dc:	80 53       	subi	r24, 0x30	; 48
    20de:	8a 30       	cpi	r24, 0x0A	; 10
    20e0:	18 f0       	brcs	.+6      	; 0x20e8 <strtod+0x176>
    20e2:	e6 1b       	sub	r30, r22
    20e4:	f7 0b       	sbc	r31, r23
    20e6:	1f c0       	rjmp	.+62     	; 0x2126 <strtod+0x1b4>
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	60 38       	cpi	r22, 0x80	; 128
    20ee:	9c e0       	ldi	r25, 0x0C	; 12
    20f0:	79 07       	cpc	r23, r25
    20f2:	5c f4       	brge	.+22     	; 0x210a <strtod+0x198>
    20f4:	db 01       	movw	r26, r22
    20f6:	aa 0f       	add	r26, r26
    20f8:	bb 1f       	adc	r27, r27
    20fa:	aa 0f       	add	r26, r26
    20fc:	bb 1f       	adc	r27, r27
    20fe:	6a 0f       	add	r22, r26
    2100:	7b 1f       	adc	r23, r27
    2102:	66 0f       	add	r22, r22
    2104:	77 1f       	adc	r23, r23
    2106:	68 0f       	add	r22, r24
    2108:	71 1d       	adc	r23, r1
    210a:	31 96       	adiw	r30, 0x01	; 1
    210c:	df 01       	movw	r26, r30
    210e:	11 97       	sbiw	r26, 0x01	; 1
    2110:	8c 91       	ld	r24, X
    2112:	80 53       	subi	r24, 0x30	; 48
    2114:	8a 30       	cpi	r24, 0x0A	; 10
    2116:	50 f3       	brcs	.-44     	; 0x20ec <strtod+0x17a>
    2118:	14 ff       	sbrs	r17, 4
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <strtod+0x1b0>
    211c:	71 95       	neg	r23
    211e:	61 95       	neg	r22
    2120:	71 09       	sbc	r23, r1
    2122:	c6 0f       	add	r28, r22
    2124:	d7 1f       	adc	r29, r23
    2126:	11 ff       	sbrs	r17, 1
    2128:	08 c0       	rjmp	.+16     	; 0x213a <strtod+0x1c8>
    212a:	c1 14       	cp	r12, r1
    212c:	d1 04       	cpc	r13, r1
    212e:	29 f0       	breq	.+10     	; 0x213a <strtod+0x1c8>
    2130:	cf 01       	movw	r24, r30
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f6 01       	movw	r30, r12
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	ca 01       	movw	r24, r20
    213c:	b9 01       	movw	r22, r18
    213e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__floatunsisf>
    2142:	21 2f       	mov	r18, r17
    2144:	23 70       	andi	r18, 0x03	; 3
    2146:	23 30       	cpi	r18, 0x03	; 3
    2148:	19 f0       	breq	.+6      	; 0x2150 <strtod+0x1de>
    214a:	4b 01       	movw	r8, r22
    214c:	5c 01       	movw	r10, r24
    214e:	06 c0       	rjmp	.+12     	; 0x215c <strtod+0x1ea>
    2150:	4b 01       	movw	r8, r22
    2152:	5c 01       	movw	r10, r24
    2154:	b7 fa       	bst	r11, 7
    2156:	b0 94       	com	r11
    2158:	b7 f8       	bld	r11, 7
    215a:	b0 94       	com	r11
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	a9 01       	movw	r20, r18
    2162:	c5 01       	movw	r24, r10
    2164:	b4 01       	movw	r22, r8
    2166:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    216a:	88 23       	and	r24, r24
    216c:	09 f4       	brne	.+2      	; 0x2170 <strtod+0x1fe>
    216e:	3e c0       	rjmp	.+124    	; 0x21ec <strtod+0x27a>
    2170:	d7 ff       	sbrs	r29, 7
    2172:	06 c0       	rjmp	.+12     	; 0x2180 <strtod+0x20e>
    2174:	d1 95       	neg	r29
    2176:	c1 95       	neg	r28
    2178:	d1 09       	sbc	r29, r1
    217a:	03 e7       	ldi	r16, 0x73	; 115
    217c:	10 e0       	ldi	r17, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <strtod+0x212>
    2180:	0b e8       	ldi	r16, 0x8B	; 139
    2182:	10 e0       	ldi	r17, 0x00	; 0
    2184:	68 01       	movw	r12, r16
    2186:	f8 e1       	ldi	r31, 0x18	; 24
    2188:	cf 1a       	sub	r12, r31
    218a:	d1 08       	sbc	r13, r1
    218c:	90 e2       	ldi	r25, 0x20	; 32
    218e:	e9 2e       	mov	r14, r25
    2190:	f1 2c       	mov	r15, r1
    2192:	ce 15       	cp	r28, r14
    2194:	df 05       	cpc	r29, r15
    2196:	74 f0       	brlt	.+28     	; 0x21b4 <strtod+0x242>
    2198:	f8 01       	movw	r30, r16
    219a:	25 91       	lpm	r18, Z+
    219c:	35 91       	lpm	r19, Z+
    219e:	45 91       	lpm	r20, Z+
    21a0:	54 91       	lpm	r21, Z
    21a2:	c5 01       	movw	r24, r10
    21a4:	b4 01       	movw	r22, r8
    21a6:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
    21aa:	4b 01       	movw	r8, r22
    21ac:	5c 01       	movw	r10, r24
    21ae:	ce 19       	sub	r28, r14
    21b0:	df 09       	sbc	r29, r15
    21b2:	ef cf       	rjmp	.-34     	; 0x2192 <strtod+0x220>
    21b4:	04 50       	subi	r16, 0x04	; 4
    21b6:	11 09       	sbc	r17, r1
    21b8:	f5 94       	asr	r15
    21ba:	e7 94       	ror	r14
    21bc:	0c 15       	cp	r16, r12
    21be:	1d 05       	cpc	r17, r13
    21c0:	41 f7       	brne	.-48     	; 0x2192 <strtod+0x220>
    21c2:	8a 2d       	mov	r24, r10
    21c4:	88 0f       	add	r24, r24
    21c6:	8b 2d       	mov	r24, r11
    21c8:	88 1f       	adc	r24, r24
    21ca:	8f 3f       	cpi	r24, 0xFF	; 255
    21cc:	49 f0       	breq	.+18     	; 0x21e0 <strtod+0x26e>
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	a9 01       	movw	r20, r18
    21d4:	c5 01       	movw	r24, r10
    21d6:	b4 01       	movw	r22, r8
    21d8:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__cmpsf2>
    21dc:	81 11       	cpse	r24, r1
    21de:	06 c0       	rjmp	.+12     	; 0x21ec <strtod+0x27a>
    21e0:	82 e2       	ldi	r24, 0x22	; 34
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <errno+0x1>
    21e8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <errno>
    21ec:	c5 01       	movw	r24, r10
    21ee:	b4 01       	movw	r22, r8
    21f0:	09 c0       	rjmp	.+18     	; 0x2204 <strtod+0x292>
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	80 e8       	ldi	r24, 0x80	; 128
    21f8:	9f ef       	ldi	r25, 0xFF	; 255
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <strtod+0x292>
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	80 ec       	ldi	r24, 0xC0	; 192
    2202:	9f e7       	ldi	r25, 0x7F	; 127
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	ec e0       	ldi	r30, 0x0C	; 12
    220a:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0xc>

0000220e <isspace>:
    220e:	91 11       	cpse	r25, r1
    2210:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__ctype_isfalse>
    2214:	80 32       	cpi	r24, 0x20	; 32
    2216:	19 f0       	breq	.+6      	; 0x221e <isspace+0x10>
    2218:	89 50       	subi	r24, 0x09	; 9
    221a:	85 50       	subi	r24, 0x05	; 5
    221c:	c8 f7       	brcc	.-14     	; 0x2210 <isspace+0x2>
    221e:	08 95       	ret

00002220 <strncasecmp_P>:
    2220:	fb 01       	movw	r30, r22
    2222:	dc 01       	movw	r26, r24
    2224:	41 50       	subi	r20, 0x01	; 1
    2226:	50 40       	sbci	r21, 0x00	; 0
    2228:	88 f0       	brcs	.+34     	; 0x224c <strncasecmp_P+0x2c>
    222a:	8d 91       	ld	r24, X+
    222c:	81 34       	cpi	r24, 0x41	; 65
    222e:	1c f0       	brlt	.+6      	; 0x2236 <strncasecmp_P+0x16>
    2230:	8b 35       	cpi	r24, 0x5B	; 91
    2232:	0c f4       	brge	.+2      	; 0x2236 <strncasecmp_P+0x16>
    2234:	80 5e       	subi	r24, 0xE0	; 224
    2236:	65 91       	lpm	r22, Z+
    2238:	61 34       	cpi	r22, 0x41	; 65
    223a:	1c f0       	brlt	.+6      	; 0x2242 <strncasecmp_P+0x22>
    223c:	6b 35       	cpi	r22, 0x5B	; 91
    223e:	0c f4       	brge	.+2      	; 0x2242 <strncasecmp_P+0x22>
    2240:	60 5e       	subi	r22, 0xE0	; 224
    2242:	86 1b       	sub	r24, r22
    2244:	61 11       	cpse	r22, r1
    2246:	71 f3       	breq	.-36     	; 0x2224 <strncasecmp_P+0x4>
    2248:	99 0b       	sbc	r25, r25
    224a:	08 95       	ret
    224c:	88 1b       	sub	r24, r24
    224e:	fc cf       	rjmp	.-8      	; 0x2248 <strncasecmp_P+0x28>

00002250 <strrev>:
    2250:	dc 01       	movw	r26, r24
    2252:	fc 01       	movw	r30, r24
    2254:	67 2f       	mov	r22, r23
    2256:	71 91       	ld	r23, Z+
    2258:	77 23       	and	r23, r23
    225a:	e1 f7       	brne	.-8      	; 0x2254 <strrev+0x4>
    225c:	32 97       	sbiw	r30, 0x02	; 2
    225e:	04 c0       	rjmp	.+8      	; 0x2268 <strrev+0x18>
    2260:	7c 91       	ld	r23, X
    2262:	6d 93       	st	X+, r22
    2264:	70 83       	st	Z, r23
    2266:	62 91       	ld	r22, -Z
    2268:	ae 17       	cp	r26, r30
    226a:	bf 07       	cpc	r27, r31
    226c:	c8 f3       	brcs	.-14     	; 0x2260 <strrev+0x10>
    226e:	08 95       	ret

00002270 <__ctype_isfalse>:
    2270:	99 27       	eor	r25, r25
    2272:	88 27       	eor	r24, r24

00002274 <__ctype_istrue>:
    2274:	08 95       	ret

00002276 <__muluhisi3>:
    2276:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__umulhisi3>
    227a:	a5 9f       	mul	r26, r21
    227c:	90 0d       	add	r25, r0
    227e:	b4 9f       	mul	r27, r20
    2280:	90 0d       	add	r25, r0
    2282:	a4 9f       	mul	r26, r20
    2284:	80 0d       	add	r24, r0
    2286:	91 1d       	adc	r25, r1
    2288:	11 24       	eor	r1, r1
    228a:	08 95       	ret

0000228c <__prologue_saves__>:
    228c:	2f 92       	push	r2
    228e:	3f 92       	push	r3
    2290:	4f 92       	push	r4
    2292:	5f 92       	push	r5
    2294:	6f 92       	push	r6
    2296:	7f 92       	push	r7
    2298:	8f 92       	push	r8
    229a:	9f 92       	push	r9
    229c:	af 92       	push	r10
    229e:	bf 92       	push	r11
    22a0:	cf 92       	push	r12
    22a2:	df 92       	push	r13
    22a4:	ef 92       	push	r14
    22a6:	ff 92       	push	r15
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	ca 1b       	sub	r28, r26
    22b6:	db 0b       	sbc	r29, r27
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	09 94       	ijmp

000022c4 <__epilogue_restores__>:
    22c4:	2a 88       	ldd	r2, Y+18	; 0x12
    22c6:	39 88       	ldd	r3, Y+17	; 0x11
    22c8:	48 88       	ldd	r4, Y+16	; 0x10
    22ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    22cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    22ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    22d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    22d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    22d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    22d6:	b9 84       	ldd	r11, Y+9	; 0x09
    22d8:	c8 84       	ldd	r12, Y+8	; 0x08
    22da:	df 80       	ldd	r13, Y+7	; 0x07
    22dc:	ee 80       	ldd	r14, Y+6	; 0x06
    22de:	fd 80       	ldd	r15, Y+5	; 0x05
    22e0:	0c 81       	ldd	r16, Y+4	; 0x04
    22e2:	1b 81       	ldd	r17, Y+3	; 0x03
    22e4:	aa 81       	ldd	r26, Y+2	; 0x02
    22e6:	b9 81       	ldd	r27, Y+1	; 0x01
    22e8:	ce 0f       	add	r28, r30
    22ea:	d1 1d       	adc	r29, r1
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	ed 01       	movw	r28, r26
    22f8:	08 95       	ret

000022fa <__umulhisi3>:
    22fa:	a2 9f       	mul	r26, r18
    22fc:	b0 01       	movw	r22, r0
    22fe:	b3 9f       	mul	r27, r19
    2300:	c0 01       	movw	r24, r0
    2302:	a3 9f       	mul	r26, r19
    2304:	70 0d       	add	r23, r0
    2306:	81 1d       	adc	r24, r1
    2308:	11 24       	eor	r1, r1
    230a:	91 1d       	adc	r25, r1
    230c:	b2 9f       	mul	r27, r18
    230e:	70 0d       	add	r23, r0
    2310:	81 1d       	adc	r24, r1
    2312:	11 24       	eor	r1, r1
    2314:	91 1d       	adc	r25, r1
    2316:	08 95       	ret

00002318 <_exit>:
    2318:	f8 94       	cli

0000231a <__stop_program>:
    231a:	ff cf       	rjmp	.-2      	; 0x231a <__stop_program>
