
ATM_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  000027ce  00002862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  00800170  00800170  00002972  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000029d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c77  00000000  00000000  00002c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea5  00000000  00000000  000058bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001990  00000000  00000000  00006760  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000840  00000000  00000000  000080f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f1  00000000  00000000  00008930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e60  00000000  00000000  00009321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000b181  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__vector_11>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ee ec       	ldi	r30, 0xCE	; 206
      a4:	f7 e2       	ldi	r31, 0x27	; 39
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 37       	cpi	r26, 0x70	; 112
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a0 e7       	ldi	r26, 0x70	; 112
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3b       	cpi	r26, 0xB1	; 177
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 98 0b 	call	0x1730	; 0x1730 <main>
      c6:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_3>:
#define MAX_AMOUNT 5000
// Structure for referencing an account
ST_accountsDB_t accountRefrence;


ISR(INT2_vect){
      ce:	1f 92       	push	r1
      d0:	0f 92       	push	r0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	0f 92       	push	r0
      d6:	11 24       	eor	r1, r1
      d8:	8f 93       	push	r24
      da:	9f 93       	push	r25
	card_trigger_signal = !card_trigger_signal;
      dc:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <card_trigger_signal>
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	91 11       	cpse	r25, r1
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <card_trigger_signal>
}
      ea:	9f 91       	pop	r25
      ec:	8f 91       	pop	r24
      ee:	0f 90       	pop	r0
      f0:	0f be       	out	0x3f, r0	; 63
      f2:	0f 90       	pop	r0
      f4:	1f 90       	pop	r1
      f6:	18 95       	reti

000000f8 <appInit>:

void appInit(void){
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
	// Set the initial ATM mode to FRIST_RUN
	atm_mode = FRIST_RUN;
     106:	0f 2e       	mov	r0, r31
     108:	f5 e0       	ldi	r31, 0x05	; 5
     10a:	df 2e       	mov	r13, r31
     10c:	f0 2d       	mov	r31, r0
     10e:	d0 92 a0 01 	sts	0x01A0, r13	; 0x8001a0 <atm_mode>
	// Initialize the card trigger signal to 0
	card_trigger_signal = 0;
     112:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <card_trigger_signal>

	// Set the ATM status to ATM_NORMAL_MODE
	ATM_STATUS = ATM_NORMAL_MODE;
     116:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <ATM_STATUS>

	// Initialize the LCD
	atm_lcd.E_port = PORT_C;
     11a:	eb e7       	ldi	r30, 0x7B	; 123
     11c:	f1 e0       	ldi	r31, 0x01	; 1
     11e:	c2 e0       	ldi	r28, 0x02	; 2
     120:	0c 2f       	mov	r16, r28
     122:	c2 83       	std	Z+2, r28	; 0x02
	atm_lcd.E_pin = PINC3;
     124:	d3 e0       	ldi	r29, 0x03	; 3
     126:	3d 2f       	mov	r19, r29
     128:	d5 83       	std	Z+5, r29	; 0x05
	atm_lcd.RS_port = PORT_C;
     12a:	ec 2e       	mov	r14, r28
     12c:	c0 83       	st	Z, r28
	atm_lcd.RS_pin = PINC1;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	18 2f       	mov	r17, r24
     132:	83 83       	std	Z+3, r24	; 0x03
	atm_lcd.RW_port = PORT_C;
     134:	fc 2e       	mov	r15, r28
     136:	c1 83       	std	Z+1, r28	; 0x01
	atm_lcd.RW_pin = PINC2;
     138:	2c 2f       	mov	r18, r28
     13a:	c4 83       	std	Z+4, r28	; 0x04
	atm_lcd.lcd_data_port = PORT_C;
     13c:	4c 2f       	mov	r20, r28
     13e:	c6 83       	std	Z+6, r28	; 0x06
	atm_lcd.lcd_data1_pin = PINC4;
     140:	84 e0       	ldi	r24, 0x04	; 4
     142:	58 2f       	mov	r21, r24
     144:	87 83       	std	Z+7, r24	; 0x07
	atm_lcd.lcd_data2_pin = PINC5;
     146:	6d 2d       	mov	r22, r13
     148:	d0 86       	std	Z+8, r13	; 0x08
	atm_lcd.lcd_data3_pin = PINC6;
     14a:	86 e0       	ldi	r24, 0x06	; 6
     14c:	78 2f       	mov	r23, r24
     14e:	81 87       	std	Z+9, r24	; 0x09
	atm_lcd.lcd_data4_pin = PINC7;
     150:	87 e0       	ldi	r24, 0x07	; 7
     152:	82 87       	std	Z+10, r24	; 0x0a
	LCD_init(atm_lcd);
     154:	0e 94 8a 09 	call	0x1314	; 0x1314 <LCD_init>

	// Initialize the keypad
	kpd.cols_port = PORT_A;
     158:	e6 ea       	ldi	r30, 0xA6	; 166
     15a:	f1 e0       	ldi	r31, 0x01	; 1
     15c:	14 82       	std	Z+4, r1	; 0x04
	kpd.rows_port = PORT_A;
     15e:	15 82       	std	Z+5, r1	; 0x05
	kpd.number_of_cols = 3;
     160:	4d 2f       	mov	r20, r29
     162:	d0 83       	st	Z, r29
	kpd.number_of_rows = 3;
     164:	5d 2f       	mov	r21, r29
     166:	d1 83       	std	Z+1, r29	; 0x01
	kpd.cols_first_pin = PINA2;
     168:	6c 2f       	mov	r22, r28
     16a:	c2 83       	std	Z+2, r28	; 0x02
	kpd.rows_first_pin = PINA5;
     16c:	7d 2d       	mov	r23, r13
     16e:	d3 82       	std	Z+3, r13	; 0x03
	KPD_init(kpd);
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 52 08 	call	0x10a4	; 0x10a4 <KPD_init>

	// Initialize the buzzer
	buzzer.buzzer_port = PORT_D;
     178:	e8 e7       	ldi	r30, 0x78	; 120
     17a:	f1 e0       	ldi	r31, 0x01	; 1
     17c:	d0 83       	st	Z, r29
	buzzer.buzzer_pin = PIND3;
     17e:	d1 83       	std	Z+1, r29	; 0x01
	buzzer_init(buzzer);
     180:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <buzzer>
     184:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <buzzer+0x1>
     188:	0e 94 48 08 	call	0x1090	; 0x1090 <buzzer_init>

	// Initialize the zero enter button
	zero_enter_btn.button_port = PORT_D;
     18c:	e5 e7       	ldi	r30, 0x75	; 117
     18e:	f1 e0       	ldi	r31, 0x01	; 1
     190:	d0 83       	st	Z, r29
	zero_enter_btn.button_pin = PIND2;
     192:	c1 83       	std	Z+1, r28	; 0x01
	BUTTON_init(zero_enter_btn);
     194:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <zero_enter_btn>
     198:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <zero_enter_btn+0x1>
     19c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <BUTTON_init>

	// Initialize the pin as input
	dio_init(PORT_B, PINB2, DIO_IN);
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	62 e0       	ldi	r22, 0x02	; 2
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>

	// Initialize the SPI as a slave
	SPI_initSlave();
     1aa:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <SPI_initSlave>

	// Enable interrupt for INT2
	SET_BIT(MCUCSR, ISC2);
     1ae:	84 b7       	in	r24, 0x34	; 52
     1b0:	80 64       	ori	r24, 0x40	; 64
     1b2:	84 bf       	out	0x34, r24	; 52
	SET_BIT(GICR, INT2);
     1b4:	8b b7       	in	r24, 0x3b	; 59
     1b6:	80 62       	ori	r24, 0x20	; 32
     1b8:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(SREG, 7);
     1ba:	8f b7       	in	r24, 0x3f	; 63
     1bc:	80 68       	ori	r24, 0x80	; 128
     1be:	8f bf       	out	0x3f, r24	; 63

	// Enable global interrupts
	sei();
     1c0:	78 94       	sei


}
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	08 95       	ret

000001d2 <idelMenu>:

void idelMenu(void){
     1d2:	8f 92       	push	r8
     1d4:	9f 92       	push	r9
     1d6:	af 92       	push	r10
     1d8:	cf 92       	push	r12
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
	LCD_clearScreen(atm_lcd);
     1e4:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     1e8:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     1ec:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     1f0:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     1f4:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     1f8:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     1fc:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     200:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     204:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     208:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     20c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     210:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
	// Display "WELCOME" in the middle of the first row
	LCD_displayStringRowColumn(atm_lcd, 0, 5, "WELCOME");
     214:	0f 2e       	mov	r0, r31
     216:	f0 e6       	ldi	r31, 0x60	; 96
     218:	8f 2e       	mov	r8, r31
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	9f 2e       	mov	r9, r31
     21e:	f0 2d       	mov	r31, r0
     220:	0f 2e       	mov	r0, r31
     222:	f5 e0       	ldi	r31, 0x05	; 5
     224:	af 2e       	mov	r10, r31
     226:	f0 2d       	mov	r31, r0
     228:	c1 2c       	mov	r12, r1
     22a:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     22e:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     232:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     236:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     23a:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     23e:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     242:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     246:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     24a:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     24e:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     252:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     256:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>

	// Delay for 1 second
	Timer0_Delay(1000);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	8a e7       	ldi	r24, 0x7A	; 122
     260:	94 e4       	ldi	r25, 0x44	; 68
     262:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>

	// Clear the LCD screen
	LCD_clearScreen(atm_lcd);
     266:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     26a:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     26e:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     272:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     276:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     27a:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     27e:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     282:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     286:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     28a:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     28e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     292:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>

	// Display "Insert a Card" on the LCD
	LCD_displayString(atm_lcd, "Insert a Card");
     296:	0f 2e       	mov	r0, r31
     298:	f8 e6       	ldi	r31, 0x68	; 104
     29a:	cf 2e       	mov	r12, r31
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	df 2e       	mov	r13, r31
     2a0:	f0 2d       	mov	r31, r0
     2a2:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     2a6:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     2aa:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     2ae:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     2b2:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     2b6:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     2ba:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     2be:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     2c2:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     2c6:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     2ca:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     2ce:	0e 94 a1 0a 	call	0x1542	; 0x1542 <LCD_displayString>

	
}
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	ff 90       	pop	r15
     2d8:	ef 90       	pop	r14
     2da:	df 90       	pop	r13
     2dc:	cf 90       	pop	r12
     2de:	af 90       	pop	r10
     2e0:	9f 90       	pop	r9
     2e2:	8f 90       	pop	r8
     2e4:	08 95       	ret

000002e6 <readNumber>:

// Function for reading a number from the keypad and zero enter button
void readNumber(ST_KPD_t a_kpd, ST_PBTN_t a_zero_enter_btn, uint8 *a_key){
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	28 97       	sbiw	r28, 0x08	; 8
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	cd bf       	out	0x3d, r28	; 61
     302:	4b 83       	std	Y+3, r20	; 0x03
     304:	5c 83       	std	Y+4, r21	; 0x04
     306:	6d 83       	std	Y+5, r22	; 0x05
     308:	7e 83       	std	Y+6, r23	; 0x06
     30a:	8f 83       	std	Y+7, r24	; 0x07
     30c:	98 87       	std	Y+8, r25	; 0x08
     30e:	79 01       	movw	r14, r18
	// Variables to store the values read from the keypad and zero enter button
	uint8 kpd_value, btn_value;

	// Read the pressed key from the keypad
	KPD_get_pressed_key(a_kpd, &kpd_value);
     310:	9e 01       	movw	r18, r28
     312:	2f 5f       	subi	r18, 0xFF	; 255
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	0e 94 8d 08 	call	0x111a	; 0x111a <KPD_get_pressed_key>
	Timer0_Delay(50);
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	88 e4       	ldi	r24, 0x48	; 72
     320:	92 e4       	ldi	r25, 0x42	; 66
     322:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>

	// Read the status of the zero enter button
	BUTTON_read_zero_enter(a_zero_enter_btn, &btn_value);
     326:	be 01       	movw	r22, r28
     328:	6e 5f       	subi	r22, 0xFE	; 254
     32a:	7f 4f       	sbci	r23, 0xFF	; 255
     32c:	c7 01       	movw	r24, r14
     32e:	0e 94 f6 07 	call	0xfec	; 0xfec <BUTTON_read_zero_enter>
	Timer0_Delay(20);
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	80 ea       	ldi	r24, 0xA0	; 160
     338:	91 e4       	ldi	r25, 0x41	; 65
     33a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>

	// Wait until a key or the zero enter button is pressed
	while(kpd_value == KPD_NO_KEY_PRESSED && btn_value == BTN_NO_PRESS){
     33e:	1d c0       	rjmp	.+58     	; 0x37a <readNumber+0x94>
		// Read the pressed key from the keypad
		KPD_get_pressed_key(a_kpd, &kpd_value);
     340:	9e 01       	movw	r18, r28
     342:	2f 5f       	subi	r18, 0xFF	; 255
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	4b 81       	ldd	r20, Y+3	; 0x03
     348:	5c 81       	ldd	r21, Y+4	; 0x04
     34a:	6d 81       	ldd	r22, Y+5	; 0x05
     34c:	7e 81       	ldd	r23, Y+6	; 0x06
     34e:	8f 81       	ldd	r24, Y+7	; 0x07
     350:	98 85       	ldd	r25, Y+8	; 0x08
     352:	0e 94 8d 08 	call	0x111a	; 0x111a <KPD_get_pressed_key>
		Timer0_Delay(50);
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	88 e4       	ldi	r24, 0x48	; 72
     35c:	92 e4       	ldi	r25, 0x42	; 66
     35e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
	
		// Read the status of the zero enter button
		BUTTON_read_zero_enter(a_zero_enter_btn, &btn_value);
     362:	be 01       	movw	r22, r28
     364:	6e 5f       	subi	r22, 0xFE	; 254
     366:	7f 4f       	sbci	r23, 0xFF	; 255
     368:	c7 01       	movw	r24, r14
     36a:	0e 94 f6 07 	call	0xfec	; 0xfec <BUTTON_read_zero_enter>
		Timer0_Delay(10);
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	80 e2       	ldi	r24, 0x20	; 32
     374:	91 e4       	ldi	r25, 0x41	; 65
     376:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
	// Read the status of the zero enter button
	BUTTON_read_zero_enter(a_zero_enter_btn, &btn_value);
	Timer0_Delay(20);

	// Wait until a key or the zero enter button is pressed
	while(kpd_value == KPD_NO_KEY_PRESSED && btn_value == BTN_NO_PRESS){
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	8c 30       	cpi	r24, 0x0C	; 12
     37e:	19 f4       	brne	.+6      	; 0x386 <readNumber+0xa0>
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	9c 30       	cpi	r25, 0x0C	; 12
     384:	e9 f2       	breq	.-70     	; 0x340 <readNumber+0x5a>
		BUTTON_read_zero_enter(a_zero_enter_btn, &btn_value);
		Timer0_Delay(10);
	}

	// If a key is pressed on the keypad, store the key value
	if (kpd_value != KPD_NO_KEY_PRESSED){
     386:	8c 30       	cpi	r24, 0x0C	; 12
     388:	19 f0       	breq	.+6      	; 0x390 <readNumber+0xaa>
		*a_key = kpd_value;
     38a:	f8 01       	movw	r30, r16
     38c:	80 83       	st	Z, r24
     38e:	0a c0       	rjmp	.+20     	; 0x3a4 <readNumber+0xbe>
	}
	// If the zero enter button is pressed, store the corresponding key value
	else if (btn_value != BTN_NO_PRESS){
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	8c 30       	cpi	r24, 0x0C	; 12
     394:	39 f0       	breq	.+14     	; 0x3a4 <readNumber+0xbe>
		*a_key = (btn_value == BTN_ZERO_PRESSED ? 0 : BTN_ENTER_PRESSED);
     396:	8a 30       	cpi	r24, 0x0A	; 10
     398:	11 f4       	brne	.+4      	; 0x39e <readNumber+0xb8>
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <readNumber+0xba>
     39e:	8b e0       	ldi	r24, 0x0B	; 11
     3a0:	f8 01       	movw	r30, r16
     3a2:	80 83       	st	Z, r24
	}

}
     3a4:	28 96       	adiw	r28, 0x08	; 8
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	08 95       	ret

000003be <readPIN>:



// read PIN from User
void readPIN(uint8 *pin[]){
     3be:	6f 92       	push	r6
     3c0:	7f 92       	push	r7
     3c2:	8f 92       	push	r8
     3c4:	9f 92       	push	r9
     3c6:	af 92       	push	r10
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	00 d0       	rcall	.+0      	; 0x3da <readPIN+0x1c>
     3da:	00 d0       	rcall	.+0      	; 0x3dc <readPIN+0x1e>
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	3c 01       	movw	r6, r24
	// Temporary array to store the PIN digits
	uint8 pin_temp[PIN_LENTH];
	// Display "ENTER YOUR PIN" on the LCD
	LCD_clearScreen(atm_lcd);
     3e2:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     3e6:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     3ea:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     3ee:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     3f2:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     3f6:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     3fa:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     3fe:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     402:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     406:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     40a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     40e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd, 0, 0, "ENTER YOUR PIN");
     412:	0f 2e       	mov	r0, r31
     414:	f6 e7       	ldi	r31, 0x76	; 118
     416:	8f 2e       	mov	r8, r31
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	9f 2e       	mov	r9, r31
     41c:	f0 2d       	mov	r31, r0
     41e:	a1 2c       	mov	r10, r1
     420:	c1 2c       	mov	r12, r1
     422:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     426:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     42a:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     42e:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     432:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     436:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     43a:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     43e:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     442:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     446:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     44a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     44e:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>

	// Read the PIN digits
	for (uint8 i = 0; i < PIN_LENTH; i++){
     452:	d1 2c       	mov	r13, r1
     454:	3e c0       	rjmp	.+124    	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
		readNumber(kpd, zero_enter_btn, &pin_temp[i]);
     456:	01 e0       	ldi	r16, 0x01	; 1
     458:	10 e0       	ldi	r17, 0x00	; 0
     45a:	0c 0f       	add	r16, r28
     45c:	1d 1f       	adc	r17, r29
     45e:	0d 0d       	add	r16, r13
     460:	11 1d       	adc	r17, r1
     462:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <zero_enter_btn>
     466:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <zero_enter_btn+0x1>
     46a:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <kpd>
     46e:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <kpd+0x1>
     472:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <kpd+0x2>
     476:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <kpd+0x3>
     47a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <kpd+0x4>
     47e:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <kpd+0x5>
     482:	0e 94 73 01 	call	0x2e6	; 0x2e6 <readNumber>
		LCD_displayStringRowColumn(atm_lcd, 1, (5 + i), "X");
     486:	0f 2e       	mov	r0, r31
     488:	f5 e0       	ldi	r31, 0x05	; 5
     48a:	af 2e       	mov	r10, r31
     48c:	f0 2d       	mov	r31, r0
     48e:	ad 0c       	add	r10, r13
     490:	0f 2e       	mov	r0, r31
     492:	f5 e8       	ldi	r31, 0x85	; 133
     494:	8f 2e       	mov	r8, r31
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	9f 2e       	mov	r9, r31
     49a:	f0 2d       	mov	r31, r0
     49c:	cc 24       	eor	r12, r12
     49e:	c3 94       	inc	r12
     4a0:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     4a4:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     4a8:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     4ac:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     4b0:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     4b4:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     4b8:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     4bc:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     4c0:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     4c4:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     4c8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     4cc:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
	// Display "ENTER YOUR PIN" on the LCD
	LCD_clearScreen(atm_lcd);
	LCD_displayStringRowColumn(atm_lcd, 0, 0, "ENTER YOUR PIN");

	// Read the PIN digits
	for (uint8 i = 0; i < PIN_LENTH; i++){
     4d0:	d3 94       	inc	r13
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	8d 15       	cp	r24, r13
     4d6:	08 f0       	brcs	.+2      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     4d8:	be cf       	rjmp	.-132    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		readNumber(kpd, zero_enter_btn, &pin_temp[i]);
		LCD_displayStringRowColumn(atm_lcd, 1, (5 + i), "X");
	}

	// Wait for the enter button to be pressed
	readNumber(kpd, zero_enter_btn, &btn_value_temp);
     4da:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <zero_enter_btn>
     4de:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <zero_enter_btn+0x1>
     4e2:	0d ea       	ldi	r16, 0xAD	; 173
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <kpd>
     4ea:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <kpd+0x1>
     4ee:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <kpd+0x2>
     4f2:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <kpd+0x3>
     4f6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <kpd+0x4>
     4fa:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <kpd+0x5>
     4fe:	0e 94 73 01 	call	0x2e6	; 0x2e6 <readNumber>
	while (btn_value_temp != BTN_ENTER_PRESSED){
     502:	14 c0       	rjmp	.+40     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
		readNumber(kpd, zero_enter_btn, &btn_value_temp);
     504:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <zero_enter_btn>
     508:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <zero_enter_btn+0x1>
     50c:	0d ea       	ldi	r16, 0xAD	; 173
     50e:	11 e0       	ldi	r17, 0x01	; 1
     510:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <kpd>
     514:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <kpd+0x1>
     518:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <kpd+0x2>
     51c:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <kpd+0x3>
     520:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <kpd+0x4>
     524:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <kpd+0x5>
     528:	0e 94 73 01 	call	0x2e6	; 0x2e6 <readNumber>
		LCD_displayStringRowColumn(atm_lcd, 1, (5 + i), "X");
	}

	// Wait for the enter button to be pressed
	readNumber(kpd, zero_enter_btn, &btn_value_temp);
	while (btn_value_temp != BTN_ENTER_PRESSED){
     52c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <btn_value_temp>
     530:	8b 30       	cpi	r24, 0x0B	; 11
     532:	41 f7       	brne	.-48     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
		readNumber(kpd, zero_enter_btn, &btn_value_temp);
	}

	// Assign the PIN to the provided pointer
	*pin = pin_temp;
     534:	ce 01       	movw	r24, r28
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	f3 01       	movw	r30, r6
     53a:	91 83       	std	Z+1, r25	; 0x01
     53c:	80 83       	st	Z, r24

}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	af 90       	pop	r10
     558:	9f 90       	pop	r9
     55a:	8f 90       	pop	r8
     55c:	7f 90       	pop	r7
     55e:	6f 90       	pop	r6
     560:	08 95       	ret

00000562 <checkCardInfo>:

// Function for checking the card information
uint8 checkCardInfo(ST_transaction_t *card, uint8 *pin, ST_accountsDB_t *accRef) {
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
     574:	7a 01       	movw	r14, r20
	uint8 count = 0;
	uint8 length;
	
	// Check if the entered PIN matches the card's PIN
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
     576:	44 96       	adiw	r24, 0x14	; 20
     578:	0e 94 0a 12 	call	0x2414	; 0x2414 <strcmp>
     57c:	89 2b       	or	r24, r25
     57e:	31 f5       	brne	.+76     	; 0x5cc <checkCardInfo+0x6a>
		return INVALID_PIN;
	}

	length = strlen((const char *)card->PAN);
     580:	cc 2e       	mov	r12, r28
     582:	dd 2e       	mov	r13, r29

	// Iterate through the accounts database to find a matching PAN
	for (int x = 0; x < ACCOUNTS_DB_SIZE; x++) {
     584:	00 e0       	ldi	r16, 0x00	; 0
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	1c c0       	rjmp	.+56     	; 0x5c2 <checkCardInfo+0x60>
		// Compare the card's PAN with the PAN in the accounts database
		if (strcmp((const char *)card->PAN, (const char *)accRef[x].primaryAccountNumber) == 0) {
     58a:	89 e1       	ldi	r24, 0x19	; 25
     58c:	80 9f       	mul	r24, r16
     58e:	e0 01       	movw	r28, r0
     590:	81 9f       	mul	r24, r17
     592:	d0 0d       	add	r29, r0
     594:	11 24       	eor	r1, r1
     596:	ce 0d       	add	r28, r14
     598:	df 1d       	adc	r29, r15
     59a:	be 01       	movw	r22, r28
     59c:	6b 5f       	subi	r22, 0xFB	; 251
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	8c 2d       	mov	r24, r12
     5a2:	9d 2d       	mov	r25, r13
     5a4:	0e 94 0a 12 	call	0x2414	; 0x2414 <strcmp>
     5a8:	89 2b       	or	r24, r25
     5aa:	49 f4       	brne	.+18     	; 0x5be <checkCardInfo+0x5c>
			// If a matching PAN is found, assign the account details to the provided pointer
			*accRef = accRef[x];
     5ac:	89 e1       	ldi	r24, 0x19	; 25
     5ae:	fe 01       	movw	r30, r28
     5b0:	d7 01       	movw	r26, r14
     5b2:	01 90       	ld	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	8a 95       	dec	r24
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <checkCardInfo+0x50>
			return ACC_FOUND;
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	08 c0       	rjmp	.+16     	; 0x5ce <checkCardInfo+0x6c>
	}

	length = strlen((const char *)card->PAN);

	// Iterate through the accounts database to find a matching PAN
	for (int x = 0; x < ACCOUNTS_DB_SIZE; x++) {
     5be:	0f 5f       	subi	r16, 0xFF	; 255
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	0f 3f       	cpi	r16, 0xFF	; 255
     5c4:	11 05       	cpc	r17, r1
     5c6:	0c f3       	brlt	.-62     	; 0x58a <checkCardInfo+0x28>
			return ACC_FOUND;
		}
	}

	// If no matching PAN is found, return ACC_NOT_FOUNT
	return ACC_NOT_FOUNT;
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <checkCardInfo+0x6c>
	uint8 count = 0;
	uint8 length;
	
	// Check if the entered PIN matches the card's PIN
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
		return INVALID_PIN;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
	}

	// If no matching PAN is found, return ACC_NOT_FOUNT
	return ACC_NOT_FOUNT;

}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	08 95       	ret

000005e0 <readCardInfo>:



// Function for reading the card information
void readCardInfo(ST_transaction_t *card){
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	68 97       	sbiw	r28, 0x18	; 24
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	6c 01       	movw	r12, r24
	uint8 str_pan[PAN_size] = {0};
     602:	fe 01       	movw	r30, r28
     604:	31 96       	adiw	r30, 0x01	; 1
     606:	84 e1       	ldi	r24, 0x14	; 20
     608:	df 01       	movw	r26, r30
     60a:	1d 92       	st	X+, r1
     60c:	8a 95       	dec	r24
     60e:	e9 f7       	brne	.-6      	; 0x60a <readCardInfo+0x2a>
	uint8 str_pin[PIN_LENTH] = {0};
     610:	1d 8a       	std	Y+21, r1	; 0x15
     612:	1e 8a       	std	Y+22, r1	; 0x16
     614:	1f 8a       	std	Y+23, r1	; 0x17
     616:	18 8e       	std	Y+24, r1	; 0x18
	uint8 str_length = 0;
     618:	00 e0       	ldi	r16, 0x00	; 0
	uint8 i = 0;
	uint8 key = 0;
	// Receive PAN
	while(!str_length){
     61a:	04 c0       	rjmp	.+8      	; 0x624 <readCardInfo+0x44>
		str_length = SPI_sendReceiveByte(0xAA);
     61c:	8a ea       	ldi	r24, 0xAA	; 170
     61e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <SPI_sendReceiveByte>
     622:	08 2f       	mov	r16, r24
	uint8 str_pin[PIN_LENTH] = {0};
	uint8 str_length = 0;
	uint8 i = 0;
	uint8 key = 0;
	// Receive PAN
	while(!str_length){
     624:	00 23       	and	r16, r16
     626:	d1 f3       	breq	.-12     	; 0x61c <readCardInfo+0x3c>
     628:	10 e0       	ldi	r17, 0x00	; 0
     62a:	12 c0       	rjmp	.+36     	; 0x650 <readCardInfo+0x70>
		str_length = SPI_sendReceiveByte(0xAA);
	}

	for(i = 0; i < str_length; i++){
		str_pan[i] = SPI_SlaveReceive();
     62c:	e1 2e       	mov	r14, r17
     62e:	f1 2c       	mov	r15, r1
     630:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <SPI_SlaveReceive>
     634:	e1 e0       	ldi	r30, 0x01	; 1
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	ec 0f       	add	r30, r28
     63a:	fd 1f       	adc	r31, r29
     63c:	ee 0d       	add	r30, r14
     63e:	ff 1d       	adc	r31, r15
     640:	80 83       	st	Z, r24
		Timer0_Delay(10);
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	80 e2       	ldi	r24, 0x20	; 32
     648:	91 e4       	ldi	r25, 0x41	; 65
     64a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
	// Receive PAN
	while(!str_length){
		str_length = SPI_sendReceiveByte(0xAA);
	}

	for(i = 0; i < str_length; i++){
     64e:	1f 5f       	subi	r17, 0xFF	; 255
     650:	10 17       	cp	r17, r16
     652:	60 f3       	brcs	.-40     	; 0x62c <readCardInfo+0x4c>
		str_pan[i] = SPI_SlaveReceive();
		Timer0_Delay(10);
	}

	str_pan[i] = '\0';
     654:	e1 e0       	ldi	r30, 0x01	; 1
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	ec 0f       	add	r30, r28
     65a:	fd 1f       	adc	r31, r29
     65c:	e1 0f       	add	r30, r17
     65e:	f1 1d       	adc	r31, r1
     660:	10 82       	st	Z, r1
void readCardInfo(ST_transaction_t *card){
	uint8 str_pan[PAN_size] = {0};
	uint8 str_pin[PIN_LENTH] = {0};
	uint8 str_length = 0;
	uint8 i = 0;
	uint8 key = 0;
     662:	10 e0       	ldi	r17, 0x00	; 0
	}

	str_pan[i] = '\0';

	// Receive PIN
	while(key != 0xBB){
     664:	0a c0       	rjmp	.+20     	; 0x67a <readCardInfo+0x9a>
		key = SPI_sendReceiveByte(0xFF);
     666:	8f ef       	ldi	r24, 0xFF	; 255
     668:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <SPI_sendReceiveByte>
     66c:	18 2f       	mov	r17, r24
		Timer0_Delay(10);
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e2       	ldi	r24, 0x20	; 32
     674:	91 e4       	ldi	r25, 0x41	; 65
     676:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
	}

	str_pan[i] = '\0';

	// Receive PIN
	while(key != 0xBB){
     67a:	1b 3b       	cpi	r17, 0xBB	; 187
     67c:	a1 f7       	brne	.-24     	; 0x666 <readCardInfo+0x86>
     67e:	10 e0       	ldi	r17, 0x00	; 0
     680:	12 c0       	rjmp	.+36     	; 0x6a6 <readCardInfo+0xc6>
		key = SPI_sendReceiveByte(0xFF);
		Timer0_Delay(10);
	}

	for(i = 0; i < PIN_LENTH; i++){
		str_pin[i] = SPI_SlaveReceive();
     682:	e1 2e       	mov	r14, r17
     684:	f1 2c       	mov	r15, r1
     686:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <SPI_SlaveReceive>
     68a:	e5 e1       	ldi	r30, 0x15	; 21
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	ec 0f       	add	r30, r28
     690:	fd 1f       	adc	r31, r29
     692:	ee 0d       	add	r30, r14
     694:	ff 1d       	adc	r31, r15
     696:	80 83       	st	Z, r24
		Timer0_Delay(10);
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e2       	ldi	r24, 0x20	; 32
     69e:	91 e4       	ldi	r25, 0x41	; 65
     6a0:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
	while(key != 0xBB){
		key = SPI_sendReceiveByte(0xFF);
		Timer0_Delay(10);
	}

	for(i = 0; i < PIN_LENTH; i++){
     6a4:	1f 5f       	subi	r17, 0xFF	; 255
     6a6:	14 30       	cpi	r17, 0x04	; 4
     6a8:	60 f3       	brcs	.-40     	; 0x682 <readCardInfo+0xa2>
		str_pin[i] = SPI_SlaveReceive();
		Timer0_Delay(10);
	}

	str_pin[i] = '\0';
     6aa:	e5 e1       	ldi	r30, 0x15	; 21
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	ec 0f       	add	r30, r28
     6b0:	fd 1f       	adc	r31, r29
     6b2:	e1 0f       	add	r30, r17
     6b4:	f1 1d       	adc	r31, r1
     6b6:	10 82       	st	Z, r1

	// Copy the received PAN and PIN to the card structure
	strncpy((char *)card->PAN, (const char *)str_pan, str_length);
     6b8:	40 2f       	mov	r20, r16
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	be 01       	movw	r22, r28
     6be:	6f 5f       	subi	r22, 0xFF	; 255
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	c6 01       	movw	r24, r12
     6c4:	0e 94 13 12 	call	0x2426	; 0x2426 <strncpy>
	strncpy((char *)card->pin, (const char *)str_pin, PIN_LENTH);
     6c8:	44 e0       	ldi	r20, 0x04	; 4
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	be 01       	movw	r22, r28
     6ce:	6b 5e       	subi	r22, 0xEB	; 235
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	c6 01       	movw	r24, r12
     6d4:	44 96       	adiw	r24, 0x14	; 20
     6d6:	0e 94 13 12 	call	0x2426	; 0x2426 <strncpy>

}
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	08 95       	ret

000006f8 <readAmount>:

// Function for reading the amount
void readAmount(float *amount){
     6f8:	6f 92       	push	r6
     6fa:	7f 92       	push	r7
     6fc:	8f 92       	push	r8
     6fe:	9f 92       	push	r9
     700:	af 92       	push	r10
     702:	cf 92       	push	r12
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	29 97       	sbiw	r28, 0x09	; 9
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	3c 01       	movw	r6, r24
	uint8 amount_display[8] = "0000.00";
     724:	88 e0       	ldi	r24, 0x08	; 8
     726:	e4 e9       	ldi	r30, 0x94	; 148
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	de 01       	movw	r26, r28
     72c:	11 96       	adiw	r26, 0x01	; 1
     72e:	01 90       	ld	r0, Z+
     730:	0d 92       	st	X+, r0
     732:	8a 95       	dec	r24
     734:	e1 f7       	brne	.-8      	; 0x72e <readAmount+0x36>
	uint8 num;
	// Clear the LCD screen
	LCD_clearScreen(atm_lcd);
     736:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     73a:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     73e:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     742:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     746:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     74a:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     74e:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     752:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     756:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     75a:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     75e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     762:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>

	// Display "ENTER AMOUNT" on the LCD
	LCD_displayStringRowColumn(atm_lcd, 0, 3, "ENTER AMOUNT");
     766:	0f 2e       	mov	r0, r31
     768:	f7 e8       	ldi	r31, 0x87	; 135
     76a:	8f 2e       	mov	r8, r31
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	9f 2e       	mov	r9, r31
     770:	f0 2d       	mov	r31, r0
     772:	0f 2e       	mov	r0, r31
     774:	f3 e0       	ldi	r31, 0x03	; 3
     776:	af 2e       	mov	r10, r31
     778:	f0 2d       	mov	r31, r0
     77a:	c1 2c       	mov	r12, r1
     77c:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     780:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     784:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     788:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     78c:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     790:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     794:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     798:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     79c:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     7a0:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     7a4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     7a8:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(atm_lcd, 1, 3, amount_display);
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	4c 01       	movw	r8, r24
     7b2:	cc 24       	eor	r12, r12
     7b4:	c3 94       	inc	r12
     7b6:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     7ba:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     7be:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     7c2:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     7c6:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     7ca:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     7ce:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     7d2:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     7d6:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     7da:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     7de:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     7e2:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>

	// Read each digit of the amount
	for(uint8 i = 0; i <= 6; i++){
     7e6:	d1 2c       	mov	r13, r1
     7e8:	45 c0       	rjmp	.+138    	; 0x874 <__stack+0x15>
		// Skip the position of the decimal point
		if (i == 4){
     7ea:	94 e0       	ldi	r25, 0x04	; 4
     7ec:	d9 12       	cpse	r13, r25
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <readAmount+0xfa>
			i++;
     7f0:	d3 94       	inc	r13
		}
	
		// Read a number from the keypad
		readNumber(kpd, zero_enter_btn, &num);
     7f2:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <zero_enter_btn>
     7f6:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <zero_enter_btn+0x1>
     7fa:	8e 01       	movw	r16, r28
     7fc:	07 5f       	subi	r16, 0xF7	; 247
     7fe:	1f 4f       	sbci	r17, 0xFF	; 255
     800:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <kpd>
     804:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <kpd+0x1>
     808:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <kpd+0x2>
     80c:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <kpd+0x3>
     810:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <kpd+0x4>
     814:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <kpd+0x5>
     818:	0e 94 73 01 	call	0x2e6	; 0x2e6 <readNumber>
		amount_display[i] = num + '0';
     81c:	e1 e0       	ldi	r30, 0x01	; 1
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	ec 0f       	add	r30, r28
     822:	fd 1f       	adc	r31, r29
     824:	ed 0d       	add	r30, r13
     826:	f1 1d       	adc	r31, r1
     828:	89 85       	ldd	r24, Y+9	; 0x09
     82a:	80 5d       	subi	r24, 0xD0	; 208
     82c:	80 83       	st	Z, r24
	
		// Display the updated amount on the LCD
		LCD_displayStringRowColumn(atm_lcd, 1, (3 + i), amount_display);
     82e:	0f 2e       	mov	r0, r31
     830:	f3 e0       	ldi	r31, 0x03	; 3
     832:	af 2e       	mov	r10, r31
     834:	f0 2d       	mov	r31, r0
     836:	ad 0c       	add	r10, r13
     838:	fe 01       	movw	r30, r28
     83a:	31 96       	adiw	r30, 0x01	; 1
     83c:	4f 01       	movw	r8, r30
     83e:	cc 24       	eor	r12, r12
     840:	c3 94       	inc	r12
     842:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     846:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     84a:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     84e:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     852:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     856:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     85a:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     85e:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     862:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     866:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     86a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     86e:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
	// Display "ENTER AMOUNT" on the LCD
	LCD_displayStringRowColumn(atm_lcd, 0, 3, "ENTER AMOUNT");
	LCD_displayStringRowColumn(atm_lcd, 1, 3, amount_display);

	// Read each digit of the amount
	for(uint8 i = 0; i <= 6; i++){
     872:	d3 94       	inc	r13
     874:	f6 e0       	ldi	r31, 0x06	; 6
     876:	fd 15       	cp	r31, r13
     878:	08 f0       	brcs	.+2      	; 0x87c <__stack+0x1d>
     87a:	b7 cf       	rjmp	.-146    	; 0x7ea <readAmount+0xf2>
		// Display the updated amount on the LCD
		LCD_displayStringRowColumn(atm_lcd, 1, (3 + i), amount_display);
	}

	// Convert the amount string to float and assign it to the provided pointer
	*amount = atof((const char *)amount_display);
     87c:	ce 01       	movw	r24, r28
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	0e 94 06 12 	call	0x240c	; 0x240c <atof>
     884:	bc 01       	movw	r22, r24
     886:	99 0f       	add	r25, r25
     888:	88 0b       	sbc	r24, r24
     88a:	99 0b       	sbc	r25, r25
     88c:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatsisf>
     890:	f3 01       	movw	r30, r6
     892:	60 83       	st	Z, r22
     894:	71 83       	std	Z+1, r23	; 0x01
     896:	82 83       	std	Z+2, r24	; 0x02
     898:	93 83       	std	Z+3, r25	; 0x03

}
     89a:	29 96       	adiw	r28, 0x09	; 9
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
     8b6:	af 90       	pop	r10
     8b8:	9f 90       	pop	r9
     8ba:	8f 90       	pop	r8
     8bc:	7f 90       	pop	r7
     8be:	6f 90       	pop	r6
     8c0:	08 95       	ret

000008c2 <appStart>:


// Function for starting the ATM application
void appStart(void){
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	a0 97       	sbiw	r28, 0x20	; 32
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
	uint8 pin_temp[PIN_LENTH], card_status;
	ST_transaction_t card;
	// Check if the ATM is in blocked mode
	if (ATM_STATUS == ATM_BLOKED_MODE){
     8ea:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ATM_STATUS>
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	e1 f5       	brne	.+120    	; 0x96a <appStart+0xa8>
		LCD_clearScreen(atm_lcd);
     8f2:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     8f6:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     8fa:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     8fe:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     902:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     906:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     90a:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     90e:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     912:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     916:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     91a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     91e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd, 0, 3, "OUT FOR MAINTENANCE");
     922:	0f 2e       	mov	r0, r31
     924:	fc e9       	ldi	r31, 0x9C	; 156
     926:	8f 2e       	mov	r8, r31
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	9f 2e       	mov	r9, r31
     92c:	f0 2d       	mov	r31, r0
     92e:	0f 2e       	mov	r0, r31
     930:	f3 e0       	ldi	r31, 0x03	; 3
     932:	af 2e       	mov	r10, r31
     934:	f0 2d       	mov	r31, r0
     936:	c1 2c       	mov	r12, r1
     938:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     93c:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     940:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     944:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     948:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     94c:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     950:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     954:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     958:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     95c:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     960:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     964:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
		return;
     968:	29 c3       	rjmp	.+1618   	; 0xfbc <appStart+0x6fa>
	}

	// Check if it's the first run of the ATM
	if (atm_mode == FRIST_RUN){
     96a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <atm_mode>
     96e:	85 30       	cpi	r24, 0x05	; 5
     970:	31 f4       	brne	.+12     	; 0x97e <appStart+0xbc>
		idelMenu();
     972:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <idelMenu>
		atm_mode = NORMAL_MODE;
     976:	84 e0       	ldi	r24, 0x04	; 4
     978:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <atm_mode>
		return;
     97c:	1f c3       	rjmp	.+1598   	; 0xfbc <appStart+0x6fa>
	}

	// Check if a card is inserted
	if (card_trigger_signal == CARD_INSERTED){
     97e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <card_trigger_signal>
     982:	81 30       	cpi	r24, 0x01	; 1
     984:	09 f0       	breq	.+2      	; 0x988 <appStart+0xc6>
     986:	1a c3       	rjmp	.+1588   	; 0xfbc <appStart+0x6fa>
		LCD_clearScreen(atm_lcd);
     988:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     98c:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     990:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     994:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     998:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     99c:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     9a0:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     9a4:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     9a8:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     9ac:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     9b0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     9b4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd, 0, 3, "CARD Detected");
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f0 eb       	ldi	r31, 0xB0	; 176
     9bc:	8f 2e       	mov	r8, r31
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	9f 2e       	mov	r9, r31
     9c2:	f0 2d       	mov	r31, r0
     9c4:	0f 2e       	mov	r0, r31
     9c6:	f3 e0       	ldi	r31, 0x03	; 3
     9c8:	af 2e       	mov	r10, r31
     9ca:	f0 2d       	mov	r31, r0
     9cc:	c1 2c       	mov	r12, r1
     9ce:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     9d2:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     9d6:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     9da:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     9de:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     9e2:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     9e6:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     9ea:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     9ee:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     9f2:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     9f6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     9fa:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(atm_lcd, 1, 0, "READING ...");
     9fe:	0f 2e       	mov	r0, r31
     a00:	fe eb       	ldi	r31, 0xBE	; 190
     a02:	8f 2e       	mov	r8, r31
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	9f 2e       	mov	r9, r31
     a08:	f0 2d       	mov	r31, r0
     a0a:	a1 2c       	mov	r10, r1
     a0c:	cc 24       	eor	r12, r12
     a0e:	c3 94       	inc	r12
     a10:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     a14:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     a18:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     a1c:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     a20:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     a24:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     a28:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     a2c:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     a30:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     a34:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     a38:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     a3c:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
		
		// Read card information
		readCardInfo(&card);
     a40:	ce 01       	movw	r24, r28
     a42:	05 96       	adiw	r24, 0x05	; 5
     a44:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readCardInfo>
		LCD_clearScreen(atm_lcd);
     a48:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     a4c:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     a50:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     a54:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     a58:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     a5c:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     a60:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     a64:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     a68:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     a6c:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     a70:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     a74:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd, 0, 3, "OK...");
     a78:	0f 2e       	mov	r0, r31
     a7a:	fa ec       	ldi	r31, 0xCA	; 202
     a7c:	8f 2e       	mov	r8, r31
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	9f 2e       	mov	r9, r31
     a82:	f0 2d       	mov	r31, r0
     a84:	0f 2e       	mov	r0, r31
     a86:	f3 e0       	ldi	r31, 0x03	; 3
     a88:	af 2e       	mov	r10, r31
     a8a:	f0 2d       	mov	r31, r0
     a8c:	c1 2c       	mov	r12, r1
     a8e:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     a92:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     a96:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     a9a:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     a9e:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     aa2:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     aa6:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     aaa:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     aae:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     ab2:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     ab6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     aba:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
		Timer0_Delay(1000);
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	8a e7       	ldi	r24, 0x7A	; 122
     ac4:	94 e4       	ldi	r25, 0x44	; 68
     ac6:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
		
		// Read PIN
		counter1 = 0;
     aca:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <counter1>
		card_status = VALID_PIN;
     ace:	81 e0       	ldi	r24, 0x01	; 1
		do {
			if (card_status == INVALID_PIN && counter1 != 0){
     ad0:	81 11       	cpse	r24, r1
     ad2:	42 c0       	rjmp	.+132    	; 0xb58 <appStart+0x296>
     ad4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <counter1>
     ad8:	88 23       	and	r24, r24
     ada:	f1 f1       	breq	.+124    	; 0xb58 <appStart+0x296>
				LCD_clearScreen(atm_lcd);
     adc:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     ae0:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     ae4:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     ae8:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     aec:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     af0:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     af4:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     af8:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     afc:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     b00:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     b04:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     b08:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
				LCD_displayStringRowColumn(atm_lcd, 0, 0, "INVALID PIN");
     b0c:	0f 2e       	mov	r0, r31
     b0e:	f0 ed       	ldi	r31, 0xD0	; 208
     b10:	8f 2e       	mov	r8, r31
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	9f 2e       	mov	r9, r31
     b16:	f0 2d       	mov	r31, r0
     b18:	a1 2c       	mov	r10, r1
     b1a:	c1 2c       	mov	r12, r1
     b1c:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     b20:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     b24:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     b28:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     b2c:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     b30:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     b34:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     b38:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     b3c:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     b40:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     b44:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     b48:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
				Timer0_Delay(2000);
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	8a ef       	ldi	r24, 0xFA	; 250
     b52:	94 e4       	ldi	r25, 0x44	; 68
     b54:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
			}
			
			// Read PIN
			readPIN(pin_temp);
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	0e 94 df 01 	call	0x3be	; 0x3be <readPIN>
			
			// Check if PIN is correct
			card_status = checkCardInfo(&card, pin_temp, &accountRefrence);
     b60:	46 e8       	ldi	r20, 0x86	; 134
     b62:	51 e0       	ldi	r21, 0x01	; 1
     b64:	be 01       	movw	r22, r28
     b66:	6f 5f       	subi	r22, 0xFF	; 255
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	ce 01       	movw	r24, r28
     b6c:	05 96       	adiw	r24, 0x05	; 5
     b6e:	0e 94 b1 02 	call	0x562	; 0x562 <checkCardInfo>
			counter1++;
     b72:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <counter1>
     b76:	9f 5f       	subi	r25, 0xFF	; 255
     b78:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <counter1>
			
		} while ((counter1 < 2) && !card_status);
     b7c:	92 30       	cpi	r25, 0x02	; 2
     b7e:	18 f4       	brcc	.+6      	; 0xb86 <appStart+0x2c4>
     b80:	88 23       	and	r24, r24
     b82:	09 f4       	brne	.+2      	; 0xb86 <appStart+0x2c4>
     b84:	a5 cf       	rjmp	.-182    	; 0xad0 <appStart+0x20e>
		
		// Check if PIN entered twice wrong
		if (counter1 >= 2){
     b86:	92 30       	cpi	r25, 0x02	; 2
     b88:	08 f4       	brcc	.+2      	; 0xb8c <appStart+0x2ca>
     b8a:	6d c0       	rjmp	.+218    	; 0xc66 <appStart+0x3a4>
			// Turn Alarm ON
			LCD_clearScreen(atm_lcd);
     b8c:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     b90:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     b94:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     b98:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     b9c:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     ba0:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     ba4:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     ba8:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     bac:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     bb0:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     bb4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     bb8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd, 0, 3, "ATM BLOCKED");
     bbc:	0f 2e       	mov	r0, r31
     bbe:	fc ed       	ldi	r31, 0xDC	; 220
     bc0:	8f 2e       	mov	r8, r31
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	9f 2e       	mov	r9, r31
     bc6:	f0 2d       	mov	r31, r0
     bc8:	0f 2e       	mov	r0, r31
     bca:	f3 e0       	ldi	r31, 0x03	; 3
     bcc:	af 2e       	mov	r10, r31
     bce:	f0 2d       	mov	r31, r0
     bd0:	c1 2c       	mov	r12, r1
     bd2:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     bd6:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     bda:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     bde:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     be2:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     be6:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     bea:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     bee:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     bf2:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     bf6:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     bfa:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     bfe:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(atm_lcd, 1, 0, "INVALID TRIES");
     c02:	0f 2e       	mov	r0, r31
     c04:	f8 ee       	ldi	r31, 0xE8	; 232
     c06:	8f 2e       	mov	r8, r31
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	9f 2e       	mov	r9, r31
     c0c:	f0 2d       	mov	r31, r0
     c0e:	a1 2c       	mov	r10, r1
     c10:	cc 24       	eor	r12, r12
     c12:	c3 94       	inc	r12
     c14:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     c18:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     c1c:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     c20:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     c24:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     c28:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     c2c:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     c30:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     c34:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     c38:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     c3c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     c40:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
			Timer0_Delay(1000);
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	8a e7       	ldi	r24, 0x7A	; 122
     c4a:	94 e4       	ldi	r25, 0x44	; 68
     c4c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
			buzzer_digitalwrite(buzzer, DIO_HIGH);
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <buzzer>
     c56:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <buzzer+0x1>
     c5a:	0e 94 4d 08 	call	0x109a	; 0x109a <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <ATM_STATUS>
			return;
     c64:	ab c1       	rjmp	.+854    	; 0xfbc <appStart+0x6fa>
		}
		
		if (card_status == ACC_NOT_FOUNT){
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	09 f0       	breq	.+2      	; 0xc6c <appStart+0x3aa>
     c6a:	43 c0       	rjmp	.+134    	; 0xcf2 <appStart+0x430>
			LCD_clearScreen(atm_lcd);
     c6c:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     c70:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     c74:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     c78:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     c7c:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     c80:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     c84:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     c88:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     c8c:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     c90:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     c94:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     c98:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd, 0, 0, "This is a fraud card");
     c9c:	0f 2e       	mov	r0, r31
     c9e:	f6 ef       	ldi	r31, 0xF6	; 246
     ca0:	8f 2e       	mov	r8, r31
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	9f 2e       	mov	r9, r31
     ca6:	f0 2d       	mov	r31, r0
     ca8:	a1 2c       	mov	r10, r1
     caa:	c1 2c       	mov	r12, r1
     cac:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     cb0:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     cb4:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     cb8:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     cbc:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     cc0:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     cc4:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     cc8:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     ccc:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     cd0:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     cd4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     cd8:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
			// Start ALARM
			buzzer_digitalwrite(buzzer, DIO_HIGH);
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <buzzer>
     ce2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <buzzer+0x1>
     ce6:	0e 94 4d 08 	call	0x109a	; 0x109a <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <ATM_STATUS>
			return;
     cf0:	65 c1       	rjmp	.+714    	; 0xfbc <appStart+0x6fa>
		}
		
		if (accountRefrence.en_state == BLOCKED){
     cf2:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <accountRefrence+0x4>
     cf6:	81 11       	cpse	r24, r1
     cf8:	43 c0       	rjmp	.+134    	; 0xd80 <appStart+0x4be>
			LCD_clearScreen(atm_lcd);
     cfa:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     cfe:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     d02:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     d06:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     d0a:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     d0e:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     d12:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     d16:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     d1a:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     d1e:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     d22:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     d26:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd, 0, 0, "This card is stolen");
     d2a:	0f 2e       	mov	r0, r31
     d2c:	fb e0       	ldi	r31, 0x0B	; 11
     d2e:	8f 2e       	mov	r8, r31
     d30:	f1 e0       	ldi	r31, 0x01	; 1
     d32:	9f 2e       	mov	r9, r31
     d34:	f0 2d       	mov	r31, r0
     d36:	a1 2c       	mov	r10, r1
     d38:	c1 2c       	mov	r12, r1
     d3a:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     d3e:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     d42:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     d46:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     d4a:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     d4e:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     d52:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     d56:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     d5a:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     d5e:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     d62:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     d66:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
			// Start ALARM
			buzzer_digitalwrite(buzzer, DIO_HIGH);
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <buzzer>
     d70:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <buzzer+0x1>
     d74:	0e 94 4d 08 	call	0x109a	; 0x109a <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <ATM_STATUS>
			return;
     d7e:	1e c1       	rjmp	.+572    	; 0xfbc <appStart+0x6fa>
		}
		
		float amount;
		// Read amount
		readAmount(&amount);
     d80:	ce 01       	movw	r24, r28
     d82:	4d 96       	adiw	r24, 0x1d	; 29
     d84:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <readAmount>
		
		// Check if there is sufficient balance
		if (accountRefrence.balance < amount){
     d88:	80 90 86 01 	lds	r8, 0x0186	; 0x800186 <accountRefrence>
     d8c:	90 90 87 01 	lds	r9, 0x0187	; 0x800187 <accountRefrence+0x1>
     d90:	a0 90 88 01 	lds	r10, 0x0188	; 0x800188 <accountRefrence+0x2>
     d94:	b0 90 89 01 	lds	r11, 0x0189	; 0x800189 <accountRefrence+0x3>
     d98:	cd 8c       	ldd	r12, Y+29	; 0x1d
     d9a:	de 8c       	ldd	r13, Y+30	; 0x1e
     d9c:	ef 8c       	ldd	r14, Y+31	; 0x1f
     d9e:	f8 a0       	ldd	r15, Y+32	; 0x20
     da0:	a7 01       	movw	r20, r14
     da2:	96 01       	movw	r18, r12
     da4:	c5 01       	movw	r24, r10
     da6:	b4 01       	movw	r22, r8
     da8:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
     dac:	88 23       	and	r24, r24
     dae:	cc f5       	brge	.+114    	; 0xe22 <appStart+0x560>
			LCD_clearScreen(atm_lcd);
     db0:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     db4:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     db8:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     dbc:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     dc0:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     dc4:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     dc8:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     dcc:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     dd0:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     dd4:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     dd8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     ddc:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd, 0, 0, "Insufficient funds");
     de0:	0f 2e       	mov	r0, r31
     de2:	ff e1       	ldi	r31, 0x1F	; 31
     de4:	8f 2e       	mov	r8, r31
     de6:	f1 e0       	ldi	r31, 0x01	; 1
     de8:	9f 2e       	mov	r9, r31
     dea:	f0 2d       	mov	r31, r0
     dec:	a1 2c       	mov	r10, r1
     dee:	c1 2c       	mov	r12, r1
     df0:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     df4:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     df8:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     dfc:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     e00:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     e04:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     e08:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     e0c:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     e10:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     e14:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     e18:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     e1c:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
			return;
     e20:	cd c0       	rjmp	.+410    	; 0xfbc <appStart+0x6fa>
		}
		
		// Check if the amount exceeds the maximum limit
		if (amount > MAX_AMOUNT){
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e4       	ldi	r19, 0x40	; 64
     e26:	4c e9       	ldi	r20, 0x9C	; 156
     e28:	55 e4       	ldi	r21, 0x45	; 69
     e2a:	c7 01       	movw	r24, r14
     e2c:	b6 01       	movw	r22, r12
     e2e:	0e 94 94 11 	call	0x2328	; 0x2328 <__gesf2>
     e32:	18 16       	cp	r1, r24
     e34:	cc f5       	brge	.+114    	; 0xea8 <appStart+0x5e6>
			LCD_clearScreen(atm_lcd);
     e36:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     e3a:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     e3e:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     e42:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     e46:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     e4a:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     e4e:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     e52:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     e56:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     e5a:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     e5e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     e62:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd, 0, 0, "Maximum limit is exceeded");
     e66:	0f 2e       	mov	r0, r31
     e68:	f2 e3       	ldi	r31, 0x32	; 50
     e6a:	8f 2e       	mov	r8, r31
     e6c:	f1 e0       	ldi	r31, 0x01	; 1
     e6e:	9f 2e       	mov	r9, r31
     e70:	f0 2d       	mov	r31, r0
     e72:	a1 2c       	mov	r10, r1
     e74:	c1 2c       	mov	r12, r1
     e76:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     e7a:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     e7e:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     e82:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     e86:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     e8a:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     e8e:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     e92:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     e96:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     e9a:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     e9e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     ea2:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
			return;
     ea6:	8a c0       	rjmp	.+276    	; 0xfbc <appStart+0x6fa>
		}
		
		accountRefrence.balance -= amount;
     ea8:	a7 01       	movw	r20, r14
     eaa:	96 01       	movw	r18, r12
     eac:	c5 01       	movw	r24, r10
     eae:	b4 01       	movw	r22, r8
     eb0:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
     eb4:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <accountRefrence>
     eb8:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <accountRefrence+0x1>
     ebc:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <accountRefrence+0x2>
     ec0:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <accountRefrence+0x3>
		LCD_clearScreen(atm_lcd);
     ec4:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     ec8:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     ecc:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     ed0:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     ed4:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     ed8:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     edc:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     ee0:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     ee4:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     ee8:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     eec:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     ef0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd, 0, 0, "Approved Transaction");
     ef4:	0f 2e       	mov	r0, r31
     ef6:	fc e4       	ldi	r31, 0x4C	; 76
     ef8:	8f 2e       	mov	r8, r31
     efa:	f1 e0       	ldi	r31, 0x01	; 1
     efc:	9f 2e       	mov	r9, r31
     efe:	f0 2d       	mov	r31, r0
     f00:	a1 2c       	mov	r10, r1
     f02:	c1 2c       	mov	r12, r1
     f04:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     f08:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     f0c:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     f10:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     f14:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     f18:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     f1c:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     f20:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     f24:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     f28:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     f2c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     f30:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
		Timer0_Delay(1000);
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	8a e7       	ldi	r24, 0x7A	; 122
     f3a:	94 e4       	ldi	r25, 0x44	; 68
     f3c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
		LCD_clearScreen(atm_lcd);
     f40:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     f44:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     f48:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     f4c:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     f50:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     f54:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     f58:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     f5c:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     f60:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     f64:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     f68:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     f6c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd, 0, 0, "Ejecting Card");
     f70:	0f 2e       	mov	r0, r31
     f72:	f1 e6       	ldi	r31, 0x61	; 97
     f74:	8f 2e       	mov	r8, r31
     f76:	f1 e0       	ldi	r31, 0x01	; 1
     f78:	9f 2e       	mov	r9, r31
     f7a:	f0 2d       	mov	r31, r0
     f7c:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <atm_lcd>
     f80:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <atm_lcd+0x1>
     f84:	00 91 7d 01 	lds	r16, 0x017D	; 0x80017d <atm_lcd+0x2>
     f88:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <atm_lcd+0x3>
     f8c:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <atm_lcd+0x4>
     f90:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <atm_lcd+0x5>
     f94:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <atm_lcd+0x6>
     f98:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <atm_lcd+0x7>
     f9c:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <atm_lcd+0x8>
     fa0:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <atm_lcd+0x9>
     fa4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <atm_lcd+0xa>
     fa8:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_displayStringRowColumn>
		Timer0_Delay(1000);
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	8a e7       	ldi	r24, 0x7A	; 122
     fb2:	94 e4       	ldi	r25, 0x44	; 68
     fb4:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
		card_trigger_signal = CARD_REMOVED;
     fb8:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <card_trigger_signal>
	}

}
     fbc:	a0 96       	adiw	r28, 0x20	; 32
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	bf 90       	pop	r11
     fda:	af 90       	pop	r10
     fdc:	9f 90       	pop	r9
     fde:	8f 90       	pop	r8
     fe0:	08 95       	ret

00000fe2 <BUTTON_init>:

void BUTTON_init(ST_PBTN_t button){
	dio_init(button.button_port,button.button_pin,DIO_IN);
}
void BUTTON_status(ST_PBTN_t button,uint8 *status){
	dio_read_pin(button.button_port,button.button_pin,status);
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	69 2f       	mov	r22, r25
     fe6:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
     fea:	08 95       	ret

00000fec <BUTTON_read_zero_enter>:
}


void BUTTON_read_zero_enter(ST_PBTN_t button,uint8 * value){
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	00 d0       	rcall	.+0      	; 0xffa <BUTTON_read_zero_enter+0xe>
     ffa:	1f 92       	push	r1
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	8b 01       	movw	r16, r22
	 uint8 button_state = 0;
    1002:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16 timeCounter = 0;
    1004:	1b 82       	std	Y+3, r1	; 0x03
    1006:	1a 82       	std	Y+2, r1	; 0x02
	dio_read_pin(button.button_port,button.button_pin,&button_state);
    1008:	f9 2e       	mov	r15, r25
    100a:	e8 2e       	mov	r14, r24
    100c:	ae 01       	movw	r20, r28
    100e:	4f 5f       	subi	r20, 0xFF	; 255
    1010:	5f 4f       	sbci	r21, 0xFF	; 255
    1012:	69 2f       	mov	r22, r25
    1014:	0e 94 8b 0c 	call	0x1916	; 0x1916 <dio_read_pin>
	if (button_state == DIO_HIGH)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	61 f5       	brne	.+88     	; 0x1076 <BUTTON_read_zero_enter+0x8a>
    101e:	27 c0       	rjmp	.+78     	; 0x106e <BUTTON_read_zero_enter+0x82>
	{
		while(button_state == DIO_HIGH){
			Timer0_Delay(BTN_MIN_SECOND);
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	88 e4       	ldi	r24, 0x48	; 72
    1026:	92 e4       	ldi	r25, 0x42	; 66
    1028:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
			timeCounter += BTN_MIN_SECOND;
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	9b 81       	ldd	r25, Y+3	; 0x03
    1030:	c2 96       	adiw	r24, 0x32	; 50
    1032:	9b 83       	std	Y+3, r25	; 0x03
    1034:	8a 83       	std	Y+2, r24	; 0x02
			dio_read_pin(button.button_port,button.button_pin,&button_state);
    1036:	ae 01       	movw	r20, r28
    1038:	4f 5f       	subi	r20, 0xFF	; 255
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	6f 2d       	mov	r22, r15
    103e:	8e 2d       	mov	r24, r14
    1040:	0e 94 8b 0c 	call	0x1916	; 0x1916 <dio_read_pin>
			if (button_state == DIO_LOW && timeCounter < BTN_2_SECOND)
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	81 11       	cpse	r24, r1
    1048:	09 c0       	rjmp	.+18     	; 0x105c <BUTTON_read_zero_enter+0x70>
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	9b 81       	ldd	r25, Y+3	; 0x03
    104e:	8c 3d       	cpi	r24, 0xDC	; 220
    1050:	95 40       	sbci	r25, 0x05	; 5
    1052:	20 f4       	brcc	.+8      	; 0x105c <BUTTON_read_zero_enter+0x70>
			{
				*value = BTN_ZERO_PRESSED;
    1054:	8a e0       	ldi	r24, 0x0A	; 10
    1056:	f8 01       	movw	r30, r16
    1058:	80 83       	st	Z, r24
    105a:	09 c0       	rjmp	.+18     	; 0x106e <BUTTON_read_zero_enter+0x82>
			}
			else if (timeCounter >= BTN_2_SECOND)
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	9b 81       	ldd	r25, Y+3	; 0x03
    1060:	8c 3d       	cpi	r24, 0xDC	; 220
    1062:	95 40       	sbci	r25, 0x05	; 5
    1064:	20 f0       	brcs	.+8      	; 0x106e <BUTTON_read_zero_enter+0x82>
			{
				*value = BTN_ENTER_PRESSED;
    1066:	8b e0       	ldi	r24, 0x0B	; 11
    1068:	f8 01       	movw	r30, r16
    106a:	80 83       	st	Z, r24
				break;
    106c:	07 c0       	rjmp	.+14     	; 0x107c <BUTTON_read_zero_enter+0x90>
	 uint8 button_state = 0;
	volatile uint16 timeCounter = 0;
	dio_read_pin(button.button_port,button.button_pin,&button_state);
	if (button_state == DIO_HIGH)
	{
		while(button_state == DIO_HIGH){
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	b1 f2       	breq	.-84     	; 0x1020 <BUTTON_read_zero_enter+0x34>
    1074:	03 c0       	rjmp	.+6      	; 0x107c <BUTTON_read_zero_enter+0x90>
			}
		}
	}
	else
	{
		*value = BTN_NO_PRESS;//NO
    1076:	8c e0       	ldi	r24, 0x0C	; 12
    1078:	f8 01       	movw	r30, r16
    107a:	80 83       	st	Z, r24
	}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	08 95       	ret

00001090 <buzzer_init>:

/*============= FUNCTION DEFINITION =============*/


void buzzer_init(ST_BUZZER_t buzzer){
	dio_init(buzzer.buzzer_port,buzzer.buzzer_pin,DIO_LOW);
    1090:	40 e0       	ldi	r20, 0x00	; 0
    1092:	69 2f       	mov	r22, r25
    1094:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    1098:	08 95       	ret

0000109a <buzzer_digitalwrite>:
}
void buzzer_digitalwrite(ST_BUZZER_t buzzer,uint8 value){
    109a:	46 2f       	mov	r20, r22
	dio_write_pin(buzzer.buzzer_port,buzzer.buzzer_pin,value);
    109c:	69 2f       	mov	r22, r25
    109e:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    10a2:	08 95       	ret

000010a4 <KPD_init>:
#include "keypad.h"
#include "../../mcal/timer0/timer0.h"
#include "../../mcal/dio/dio.h"


void KPD_init(ST_KPD_t kpd){
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <KPD_init+0xc>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <KPD_init+0xe>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <KPD_init+0x10>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	49 83       	std	Y+1, r20	; 0x01
    10ba:	5a 83       	std	Y+2, r21	; 0x02
    10bc:	6b 83       	std	Y+3, r22	; 0x03
    10be:	7c 83       	std	Y+4, r23	; 0x04
    10c0:	8d 83       	std	Y+5, r24	; 0x05
    10c2:	9e 83       	std	Y+6, r25	; 0x06
	// set cols as an input
	for (uint8 i = 0 ; i<kpd.number_of_rows;i++)
    10c4:	00 e0       	ldi	r16, 0x00	; 0
    10c6:	0e c0       	rjmp	.+28     	; 0x10e4 <KPD_init+0x40>
	{
		dio_init(kpd.rows_port,(kpd.rows_first_pin+i),DIO_IN);
    10c8:	1c 81       	ldd	r17, Y+4	; 0x04
    10ca:	10 0f       	add	r17, r16
    10cc:	fe 80       	ldd	r15, Y+6	; 0x06
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	61 2f       	mov	r22, r17
    10d2:	8f 2d       	mov	r24, r15
    10d4:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
		dio_write_pin(kpd.rows_port,(kpd.rows_first_pin+i),DIO_HIGH);
    10d8:	41 e0       	ldi	r20, 0x01	; 1
    10da:	61 2f       	mov	r22, r17
    10dc:	8f 2d       	mov	r24, r15
    10de:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
#include "../../mcal/dio/dio.h"


void KPD_init(ST_KPD_t kpd){
	// set cols as an input
	for (uint8 i = 0 ; i<kpd.number_of_rows;i++)
    10e2:	0f 5f       	subi	r16, 0xFF	; 255
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	08 17       	cp	r16, r24
    10e8:	78 f3       	brcs	.-34     	; 0x10c8 <KPD_init+0x24>
    10ea:	10 e0       	ldi	r17, 0x00	; 0
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <KPD_init+0x58>
		dio_write_pin(kpd.rows_port,(kpd.rows_first_pin+i),DIO_HIGH);
	}
	// set rows as input 
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
	{
		dio_init(kpd.cols_port,(kpd.cols_first_pin+i),DIO_OUT);
    10ee:	6b 81       	ldd	r22, Y+3	; 0x03
    10f0:	61 0f       	add	r22, r17
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
	{
		dio_init(kpd.rows_port,(kpd.rows_first_pin+i),DIO_IN);
		dio_write_pin(kpd.rows_port,(kpd.rows_first_pin+i),DIO_HIGH);
	}
	// set rows as input 
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
    10fa:	1f 5f       	subi	r17, 0xFF	; 255
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	18 17       	cp	r17, r24
    1100:	b0 f3       	brcs	.-20     	; 0x10ee <KPD_init+0x4a>
	{
		dio_init(kpd.cols_port,(kpd.cols_first_pin+i),DIO_OUT);
	}
	
}
    1102:	26 96       	adiw	r28, 0x06	; 6
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	08 95       	ret

0000111a <KPD_get_pressed_key>:
void KPD_get_pressed_key(ST_KPD_t kpd,uint8*key){
    111a:	9f 92       	push	r9
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	27 97       	sbiw	r28, 0x07	; 7
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	4a 83       	std	Y+2, r20	; 0x02
    1142:	5b 83       	std	Y+3, r21	; 0x03
    1144:	6c 83       	std	Y+4, r22	; 0x04
    1146:	7d 83       	std	Y+5, r23	; 0x05
    1148:	8e 83       	std	Y+6, r24	; 0x06
    114a:	9f 83       	std	Y+7, r25	; 0x07
    114c:	69 01       	movw	r12, r18
	uint8 value; // counters
	// cols loops
	*key= KPD_NO_KEY_PRESSED;
    114e:	8c e0       	ldi	r24, 0x0C	; 12
    1150:	f9 01       	movw	r30, r18
    1152:	80 83       	st	Z, r24
	
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
    1154:	10 e0       	ldi	r17, 0x00	; 0
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <KPD_get_pressed_key+0x4c>
	{
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+i),DIO_HIGH);
    1158:	6c 81       	ldd	r22, Y+4	; 0x04
    115a:	61 0f       	add	r22, r17
    115c:	41 e0       	ldi	r20, 0x01	; 1
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
    1160:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
void KPD_get_pressed_key(ST_KPD_t kpd,uint8*key){
	uint8 value; // counters
	// cols loops
	*key= KPD_NO_KEY_PRESSED;
	
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
    1164:	1f 5f       	subi	r17, 0xFF	; 255
    1166:	aa 80       	ldd	r10, Y+2	; 0x02
    1168:	1a 15       	cp	r17, r10
    116a:	b0 f3       	brcs	.-20     	; 0x1158 <KPD_get_pressed_key+0x3e>
    116c:	b1 2c       	mov	r11, r1
    116e:	34 c0       	rjmp	.+104    	; 0x11d8 <KPD_get_pressed_key+0xbe>
	}
	for (uint8 col = 0 ; col < kpd.number_of_cols;col++)
	{
		// activate cols
		
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_LOW);
    1170:	ec 80       	ldd	r14, Y+4	; 0x04
    1172:	eb 0c       	add	r14, r11
    1174:	9e 80       	ldd	r9, Y+6	; 0x06
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	6e 2d       	mov	r22, r14
    117a:	89 2d       	mov	r24, r9
    117c:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
		// rows loops
		
		for (uint8 row = 0;row<kpd.number_of_rows;row++)
    1180:	00 e0       	ldi	r16, 0x00	; 0
    1182:	21 c0       	rjmp	.+66     	; 0x11c6 <KPD_get_pressed_key+0xac>
		{
			dio_read_pin(kpd.rows_port,(kpd.rows_first_pin+row),&value);
    1184:	1d 81       	ldd	r17, Y+5	; 0x05
    1186:	10 0f       	add	r17, r16
    1188:	ff 80       	ldd	r15, Y+7	; 0x07
    118a:	ae 01       	movw	r20, r28
    118c:	4f 5f       	subi	r20, 0xFF	; 255
    118e:	5f 4f       	sbci	r21, 0xFF	; 255
    1190:	61 2f       	mov	r22, r17
    1192:	8f 2d       	mov	r24, r15
    1194:	0e 94 8b 0c 	call	0x1916	; 0x1916 <dio_read_pin>
			// check if button is pressed
			if (value == DIO_LOW)
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	81 11       	cpse	r24, r1
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <KPD_get_pressed_key+0xaa>
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <KPD_get_pressed_key+0x94>
			{
				// return key (row_number * numbers_of_cols) + (column number +1)
				while(value == DIO_LOW){
					dio_read_pin(kpd.rows_port,(kpd.rows_first_pin+row),&value);
    11a0:	ae 01       	movw	r20, r28
    11a2:	4f 5f       	subi	r20, 0xFF	; 255
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	61 2f       	mov	r22, r17
    11a8:	8f 2d       	mov	r24, r15
    11aa:	0e 94 8b 0c 	call	0x1916	; 0x1916 <dio_read_pin>
			dio_read_pin(kpd.rows_port,(kpd.rows_first_pin+row),&value);
			// check if button is pressed
			if (value == DIO_LOW)
			{
				// return key (row_number * numbers_of_cols) + (column number +1)
				while(value == DIO_LOW){
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	88 23       	and	r24, r24
    11b2:	b1 f3       	breq	.-20     	; 0x11a0 <KPD_get_pressed_key+0x86>
					dio_read_pin(kpd.rows_port,(kpd.rows_first_pin+row),&value);
				}
				*key =  ((row * kpd.number_of_cols) + col + 1);
    11b4:	8b 2d       	mov	r24, r11
    11b6:	0a 9d       	mul	r16, r10
    11b8:	80 0d       	add	r24, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	f6 01       	movw	r30, r12
    11c0:	80 83       	st	Z, r24
				break;
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <KPD_get_pressed_key+0xb2>
		// activate cols
		
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_LOW);
		// rows loops
		
		for (uint8 row = 0;row<kpd.number_of_rows;row++)
    11c4:	0f 5f       	subi	r16, 0xFF	; 255
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	08 17       	cp	r16, r24
    11ca:	e0 f2       	brcs	.-72     	; 0x1184 <KPD_get_pressed_key+0x6a>
				break;
			}
		
		}
		
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_HIGH);
    11cc:	41 e0       	ldi	r20, 0x01	; 1
    11ce:	6e 2d       	mov	r22, r14
    11d0:	89 2d       	mov	r24, r9
    11d2:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
	
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
	{
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+i),DIO_HIGH);
	}
	for (uint8 col = 0 ; col < kpd.number_of_cols;col++)
    11d6:	b3 94       	inc	r11
    11d8:	ba 14       	cp	r11, r10
    11da:	50 f2       	brcs	.-108    	; 0x1170 <KPD_get_pressed_key+0x56>
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_HIGH);
		
	}
	
	
    11dc:	27 96       	adiw	r28, 0x07	; 7
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	9f 90       	pop	r9
    11fe:	08 95       	ret

00001200 <LCD_sendCommand>:
 */
void LCD_intgerToString(ST_LCD_t lcd,int data){
	  char buff[16]; /* String to hold the ascii result */
	  itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	  LCD_displayString(lcd,buff); /* Display the string */
}
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	2c 97       	sbiw	r28, 0x0c	; 12
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	8e 2d       	mov	r24, r14
    1222:	fb 82       	std	Y+3, r15	; 0x03
    1224:	0c 83       	std	Y+4, r16	; 0x04
    1226:	61 2f       	mov	r22, r17
    1228:	2e 83       	std	Y+6, r18	; 0x06
    122a:	3f 83       	std	Y+7, r19	; 0x07
    122c:	48 87       	std	Y+8, r20	; 0x08
    122e:	19 82       	std	Y+1, r1	; 0x01
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	6e 81       	ldd	r22, Y+6	; 0x06
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	80 e8       	ldi	r24, 0x80	; 128
    1246:	9f e3       	ldi	r25, 0x3F	; 63
    1248:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    124c:	0f 81       	ldd	r16, Y+7	; 0x07
    124e:	1c 81       	ldd	r17, Y+4	; 0x04
    1250:	41 e0       	ldi	r20, 0x01	; 1
    1252:	60 2f       	mov	r22, r16
    1254:	81 2f       	mov	r24, r17
    1256:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	80 e8       	ldi	r24, 0x80	; 128
    1260:	9f e3       	ldi	r25, 0x3F	; 63
    1262:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    1266:	f8 84       	ldd	r15, Y+8	; 0x08
    1268:	be 01       	movw	r22, r28
    126a:	6f 5f       	subi	r22, 0xFF	; 255
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	8f 2d       	mov	r24, r15
    1270:	0e 94 c5 0c 	call	0x198a	; 0x198a <dio_read_port>
    1274:	69 81       	ldd	r22, Y+1	; 0x01
    1276:	6f 70       	andi	r22, 0x0F	; 15
    1278:	8c 2d       	mov	r24, r12
    127a:	80 7f       	andi	r24, 0xF0	; 240
    127c:	68 2b       	or	r22, r24
    127e:	69 83       	std	Y+1, r22	; 0x01
    1280:	8f 2d       	mov	r24, r15
    1282:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <dio_write_port>
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	80 e8       	ldi	r24, 0x80	; 128
    128c:	9f e3       	ldi	r25, 0x3F	; 63
    128e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	60 2f       	mov	r22, r16
    1296:	81 2f       	mov	r24, r17
    1298:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	80 e8       	ldi	r24, 0x80	; 128
    12a2:	9f e3       	ldi	r25, 0x3F	; 63
    12a4:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	60 2f       	mov	r22, r16
    12ac:	81 2f       	mov	r24, r17
    12ae:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    12b2:	be 01       	movw	r22, r28
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 2d       	mov	r24, r15
    12ba:	0e 94 c5 0c 	call	0x198a	; 0x198a <dio_read_port>
    12be:	80 e1       	ldi	r24, 0x10	; 16
    12c0:	c8 9e       	mul	r12, r24
    12c2:	60 01       	movw	r12, r0
    12c4:	11 24       	eor	r1, r1
    12c6:	69 81       	ldd	r22, Y+1	; 0x01
    12c8:	6f 70       	andi	r22, 0x0F	; 15
    12ca:	6c 29       	or	r22, r12
    12cc:	69 83       	std	Y+1, r22	; 0x01
    12ce:	8f 2d       	mov	r24, r15
    12d0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <dio_write_port>
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	80 e8       	ldi	r24, 0x80	; 128
    12da:	9f e3       	ldi	r25, 0x3F	; 63
    12dc:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	60 2f       	mov	r22, r16
    12e4:	81 2f       	mov	r24, r17
    12e6:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	80 e8       	ldi	r24, 0x80	; 128
    12f0:	9f e3       	ldi	r25, 0x3F	; 63
    12f2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    12f6:	2c 96       	adiw	r28, 0x0c	; 12
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	08 95       	ret

00001314 <LCD_init>:
    1314:	cf 92       	push	r12
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	2b 97       	sbiw	r28, 0x0b	; 11
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	e9 82       	std	Y+1, r14	; 0x01
    1334:	fa 82       	std	Y+2, r15	; 0x02
    1336:	0b 83       	std	Y+3, r16	; 0x03
    1338:	1c 83       	std	Y+4, r17	; 0x04
    133a:	2d 83       	std	Y+5, r18	; 0x05
    133c:	3e 83       	std	Y+6, r19	; 0x06
    133e:	4f 83       	std	Y+7, r20	; 0x07
    1340:	58 87       	std	Y+8, r21	; 0x08
    1342:	69 87       	std	Y+9, r22	; 0x09
    1344:	7a 87       	std	Y+10, r23	; 0x0a
    1346:	8b 87       	std	Y+11, r24	; 0x0b
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	63 2f       	mov	r22, r19
    134c:	80 2f       	mov	r24, r16
    134e:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	6c 81       	ldd	r22, Y+4	; 0x04
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	6d 81       	ldd	r22, Y+5	; 0x05
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    1366:	1f 81       	ldd	r17, Y+7	; 0x07
    1368:	41 e0       	ldi	r20, 0x01	; 1
    136a:	68 85       	ldd	r22, Y+8	; 0x08
    136c:	81 2f       	mov	r24, r17
    136e:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	69 85       	ldd	r22, Y+9	; 0x09
    1376:	81 2f       	mov	r24, r17
    1378:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    137c:	41 e0       	ldi	r20, 0x01	; 1
    137e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1380:	81 2f       	mov	r24, r17
    1382:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    1386:	41 e0       	ldi	r20, 0x01	; 1
    1388:	6b 85       	ldd	r22, Y+11	; 0x0b
    138a:	81 2f       	mov	r24, r17
    138c:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    1390:	68 94       	set
    1392:	cc 24       	eor	r12, r12
    1394:	c1 f8       	bld	r12, 1
    1396:	e9 80       	ldd	r14, Y+1	; 0x01
    1398:	fa 80       	ldd	r15, Y+2	; 0x02
    139a:	0b 81       	ldd	r16, Y+3	; 0x03
    139c:	1c 81       	ldd	r17, Y+4	; 0x04
    139e:	2d 81       	ldd	r18, Y+5	; 0x05
    13a0:	3e 81       	ldd	r19, Y+6	; 0x06
    13a2:	4f 81       	ldd	r20, Y+7	; 0x07
    13a4:	58 85       	ldd	r21, Y+8	; 0x08
    13a6:	69 85       	ldd	r22, Y+9	; 0x09
    13a8:	7a 85       	ldd	r23, Y+10	; 0x0a
    13aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ac:	0e 94 00 09 	call	0x1200	; 0x1200 <LCD_sendCommand>
    13b0:	0f 2e       	mov	r0, r31
    13b2:	f8 e2       	ldi	r31, 0x28	; 40
    13b4:	cf 2e       	mov	r12, r31
    13b6:	f0 2d       	mov	r31, r0
    13b8:	e9 80       	ldd	r14, Y+1	; 0x01
    13ba:	fa 80       	ldd	r15, Y+2	; 0x02
    13bc:	0b 81       	ldd	r16, Y+3	; 0x03
    13be:	1c 81       	ldd	r17, Y+4	; 0x04
    13c0:	2d 81       	ldd	r18, Y+5	; 0x05
    13c2:	3e 81       	ldd	r19, Y+6	; 0x06
    13c4:	4f 81       	ldd	r20, Y+7	; 0x07
    13c6:	58 85       	ldd	r21, Y+8	; 0x08
    13c8:	69 85       	ldd	r22, Y+9	; 0x09
    13ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    13cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ce:	0e 94 00 09 	call	0x1200	; 0x1200 <LCD_sendCommand>
    13d2:	0f 2e       	mov	r0, r31
    13d4:	fc e0       	ldi	r31, 0x0C	; 12
    13d6:	cf 2e       	mov	r12, r31
    13d8:	f0 2d       	mov	r31, r0
    13da:	e9 80       	ldd	r14, Y+1	; 0x01
    13dc:	fa 80       	ldd	r15, Y+2	; 0x02
    13de:	0b 81       	ldd	r16, Y+3	; 0x03
    13e0:	1c 81       	ldd	r17, Y+4	; 0x04
    13e2:	2d 81       	ldd	r18, Y+5	; 0x05
    13e4:	3e 81       	ldd	r19, Y+6	; 0x06
    13e6:	4f 81       	ldd	r20, Y+7	; 0x07
    13e8:	58 85       	ldd	r21, Y+8	; 0x08
    13ea:	69 85       	ldd	r22, Y+9	; 0x09
    13ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    13ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    13f0:	0e 94 00 09 	call	0x1200	; 0x1200 <LCD_sendCommand>
    13f4:	cc 24       	eor	r12, r12
    13f6:	c3 94       	inc	r12
    13f8:	e9 80       	ldd	r14, Y+1	; 0x01
    13fa:	fa 80       	ldd	r15, Y+2	; 0x02
    13fc:	0b 81       	ldd	r16, Y+3	; 0x03
    13fe:	1c 81       	ldd	r17, Y+4	; 0x04
    1400:	2d 81       	ldd	r18, Y+5	; 0x05
    1402:	3e 81       	ldd	r19, Y+6	; 0x06
    1404:	4f 81       	ldd	r20, Y+7	; 0x07
    1406:	58 85       	ldd	r21, Y+8	; 0x08
    1408:	69 85       	ldd	r22, Y+9	; 0x09
    140a:	7a 85       	ldd	r23, Y+10	; 0x0a
    140c:	8b 85       	ldd	r24, Y+11	; 0x0b
    140e:	0e 94 00 09 	call	0x1200	; 0x1200 <LCD_sendCommand>
    1412:	2b 96       	adiw	r28, 0x0b	; 11
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	cf 90       	pop	r12
    142c:	08 95       	ret

0000142e <LCD_displayCharacter>:
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	2c 97       	sbiw	r28, 0x0c	; 12
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	8e 2d       	mov	r24, r14
    1450:	fb 82       	std	Y+3, r15	; 0x03
    1452:	0c 83       	std	Y+4, r16	; 0x04
    1454:	61 2f       	mov	r22, r17
    1456:	2e 83       	std	Y+6, r18	; 0x06
    1458:	3f 83       	std	Y+7, r19	; 0x07
    145a:	48 87       	std	Y+8, r20	; 0x08
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	6e 81       	ldd	r22, Y+6	; 0x06
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	80 e8       	ldi	r24, 0x80	; 128
    1474:	9f e3       	ldi	r25, 0x3F	; 63
    1476:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    147a:	0f 81       	ldd	r16, Y+7	; 0x07
    147c:	1c 81       	ldd	r17, Y+4	; 0x04
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	60 2f       	mov	r22, r16
    1482:	81 2f       	mov	r24, r17
    1484:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	80 e8       	ldi	r24, 0x80	; 128
    148e:	9f e3       	ldi	r25, 0x3F	; 63
    1490:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    1494:	f8 84       	ldd	r15, Y+8	; 0x08
    1496:	be 01       	movw	r22, r28
    1498:	6f 5f       	subi	r22, 0xFF	; 255
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	8f 2d       	mov	r24, r15
    149e:	0e 94 c5 0c 	call	0x198a	; 0x198a <dio_read_port>
    14a2:	69 81       	ldd	r22, Y+1	; 0x01
    14a4:	6f 70       	andi	r22, 0x0F	; 15
    14a6:	8c 2d       	mov	r24, r12
    14a8:	80 7f       	andi	r24, 0xF0	; 240
    14aa:	68 2b       	or	r22, r24
    14ac:	69 83       	std	Y+1, r22	; 0x01
    14ae:	8f 2d       	mov	r24, r15
    14b0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <dio_write_port>
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	80 e8       	ldi	r24, 0x80	; 128
    14ba:	9f e3       	ldi	r25, 0x3F	; 63
    14bc:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	60 2f       	mov	r22, r16
    14c4:	81 2f       	mov	r24, r17
    14c6:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	80 e8       	ldi	r24, 0x80	; 128
    14d0:	9f e3       	ldi	r25, 0x3F	; 63
    14d2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    14d6:	41 e0       	ldi	r20, 0x01	; 1
    14d8:	60 2f       	mov	r22, r16
    14da:	81 2f       	mov	r24, r17
    14dc:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    14e0:	be 01       	movw	r22, r28
    14e2:	6f 5f       	subi	r22, 0xFF	; 255
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	8f 2d       	mov	r24, r15
    14e8:	0e 94 c5 0c 	call	0x198a	; 0x198a <dio_read_port>
    14ec:	80 e1       	ldi	r24, 0x10	; 16
    14ee:	c8 9e       	mul	r12, r24
    14f0:	60 01       	movw	r12, r0
    14f2:	11 24       	eor	r1, r1
    14f4:	69 81       	ldd	r22, Y+1	; 0x01
    14f6:	6f 70       	andi	r22, 0x0F	; 15
    14f8:	6c 29       	or	r22, r12
    14fa:	69 83       	std	Y+1, r22	; 0x01
    14fc:	8f 2d       	mov	r24, r15
    14fe:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <dio_write_port>
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	80 e8       	ldi	r24, 0x80	; 128
    1508:	9f e3       	ldi	r25, 0x3F	; 63
    150a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	60 2f       	mov	r22, r16
    1512:	81 2f       	mov	r24, r17
    1514:	0e 94 14 0c 	call	0x1828	; 0x1828 <dio_write_pin>
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	80 e8       	ldi	r24, 0x80	; 128
    151e:	9f e3       	ldi	r25, 0x3F	; 63
    1520:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Timer0_Delay>
    1524:	2c 96       	adiw	r28, 0x0c	; 12
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	cf 90       	pop	r12
    1540:	08 95       	ret

00001542 <LCD_displayString>:
    1542:	af 92       	push	r10
    1544:	bf 92       	push	r11
    1546:	cf 92       	push	r12
    1548:	df 92       	push	r13
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	2b 97       	sbiw	r28, 0x0b	; 11
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	e9 82       	std	Y+1, r14	; 0x01
    1568:	fa 82       	std	Y+2, r15	; 0x02
    156a:	0b 83       	std	Y+3, r16	; 0x03
    156c:	1c 83       	std	Y+4, r17	; 0x04
    156e:	2d 83       	std	Y+5, r18	; 0x05
    1570:	3e 83       	std	Y+6, r19	; 0x06
    1572:	4f 83       	std	Y+7, r20	; 0x07
    1574:	58 87       	std	Y+8, r21	; 0x08
    1576:	69 87       	std	Y+9, r22	; 0x09
    1578:	7a 87       	std	Y+10, r23	; 0x0a
    157a:	8b 87       	std	Y+11, r24	; 0x0b
    157c:	56 01       	movw	r10, r12
    157e:	d1 2c       	mov	r13, r1
    1580:	0e c0       	rjmp	.+28     	; 0x159e <LCD_displayString+0x5c>
    1582:	e9 80       	ldd	r14, Y+1	; 0x01
    1584:	fa 80       	ldd	r15, Y+2	; 0x02
    1586:	0b 81       	ldd	r16, Y+3	; 0x03
    1588:	1c 81       	ldd	r17, Y+4	; 0x04
    158a:	2d 81       	ldd	r18, Y+5	; 0x05
    158c:	3e 81       	ldd	r19, Y+6	; 0x06
    158e:	4f 81       	ldd	r20, Y+7	; 0x07
    1590:	58 85       	ldd	r21, Y+8	; 0x08
    1592:	69 85       	ldd	r22, Y+9	; 0x09
    1594:	7a 85       	ldd	r23, Y+10	; 0x0a
    1596:	8b 85       	ldd	r24, Y+11	; 0x0b
    1598:	0e 94 17 0a 	call	0x142e	; 0x142e <LCD_displayCharacter>
    159c:	d3 94       	inc	r13
    159e:	f5 01       	movw	r30, r10
    15a0:	ed 0d       	add	r30, r13
    15a2:	f1 1d       	adc	r31, r1
    15a4:	c0 80       	ld	r12, Z
    15a6:	c1 10       	cpse	r12, r1
    15a8:	ec cf       	rjmp	.-40     	; 0x1582 <LCD_displayString+0x40>
    15aa:	2b 96       	adiw	r28, 0x0b	; 11
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	bf 90       	pop	r11
    15c8:	af 90       	pop	r10
    15ca:	08 95       	ret

000015cc <LCD_moveCursor>:
    15cc:	af 92       	push	r10
    15ce:	cf 92       	push	r12
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	2b 97       	sbiw	r28, 0x0b	; 11
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	e9 82       	std	Y+1, r14	; 0x01
    15ee:	fa 82       	std	Y+2, r15	; 0x02
    15f0:	0b 83       	std	Y+3, r16	; 0x03
    15f2:	1c 83       	std	Y+4, r17	; 0x04
    15f4:	2d 83       	std	Y+5, r18	; 0x05
    15f6:	3e 83       	std	Y+6, r19	; 0x06
    15f8:	4f 83       	std	Y+7, r20	; 0x07
    15fa:	58 87       	std	Y+8, r21	; 0x08
    15fc:	69 87       	std	Y+9, r22	; 0x09
    15fe:	7a 87       	std	Y+10, r23	; 0x0a
    1600:	8b 87       	std	Y+11, r24	; 0x0b
    1602:	9c 2d       	mov	r25, r12
    1604:	8a 2d       	mov	r24, r10
    1606:	91 30       	cpi	r25, 0x01	; 1
    1608:	39 f0       	breq	.+14     	; 0x1618 <LCD_moveCursor+0x4c>
    160a:	58 f0       	brcs	.+22     	; 0x1622 <LCD_moveCursor+0x56>
    160c:	92 30       	cpi	r25, 0x02	; 2
    160e:	31 f0       	breq	.+12     	; 0x161c <LCD_moveCursor+0x50>
    1610:	93 30       	cpi	r25, 0x03	; 3
    1612:	31 f0       	breq	.+12     	; 0x1620 <LCD_moveCursor+0x54>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <LCD_moveCursor+0x56>
    1618:	80 5c       	subi	r24, 0xC0	; 192
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <LCD_moveCursor+0x56>
    161c:	80 5f       	subi	r24, 0xF0	; 240
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <LCD_moveCursor+0x56>
    1620:	80 5b       	subi	r24, 0xB0	; 176
    1622:	80 68       	ori	r24, 0x80	; 128
    1624:	c8 2e       	mov	r12, r24
    1626:	e9 80       	ldd	r14, Y+1	; 0x01
    1628:	fa 80       	ldd	r15, Y+2	; 0x02
    162a:	0b 81       	ldd	r16, Y+3	; 0x03
    162c:	1c 81       	ldd	r17, Y+4	; 0x04
    162e:	2d 81       	ldd	r18, Y+5	; 0x05
    1630:	3e 81       	ldd	r19, Y+6	; 0x06
    1632:	4f 81       	ldd	r20, Y+7	; 0x07
    1634:	58 85       	ldd	r21, Y+8	; 0x08
    1636:	69 85       	ldd	r22, Y+9	; 0x09
    1638:	7a 85       	ldd	r23, Y+10	; 0x0a
    163a:	8b 85       	ldd	r24, Y+11	; 0x0b
    163c:	0e 94 00 09 	call	0x1200	; 0x1200 <LCD_sendCommand>
    1640:	2b 96       	adiw	r28, 0x0b	; 11
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	ff 90       	pop	r15
    1656:	ef 90       	pop	r14
    1658:	cf 90       	pop	r12
    165a:	af 90       	pop	r10
    165c:	08 95       	ret

0000165e <LCD_displayStringRowColumn>:
    165e:	5f 92       	push	r5
    1660:	6f 92       	push	r6
    1662:	7f 92       	push	r7
    1664:	8f 92       	push	r8
    1666:	9f 92       	push	r9
    1668:	af 92       	push	r10
    166a:	bf 92       	push	r11
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	2b 97       	sbiw	r28, 0x0b	; 11
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	e9 82       	std	Y+1, r14	; 0x01
    168e:	fa 82       	std	Y+2, r15	; 0x02
    1690:	0b 83       	std	Y+3, r16	; 0x03
    1692:	1c 83       	std	Y+4, r17	; 0x04
    1694:	2d 83       	std	Y+5, r18	; 0x05
    1696:	3e 83       	std	Y+6, r19	; 0x06
    1698:	4f 83       	std	Y+7, r20	; 0x07
    169a:	58 87       	std	Y+8, r21	; 0x08
    169c:	69 87       	std	Y+9, r22	; 0x09
    169e:	7a 87       	std	Y+10, r23	; 0x0a
    16a0:	8b 87       	std	Y+11, r24	; 0x0b
    16a2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <LCD_moveCursor>
    16a6:	64 01       	movw	r12, r8
    16a8:	e9 80       	ldd	r14, Y+1	; 0x01
    16aa:	fa 80       	ldd	r15, Y+2	; 0x02
    16ac:	0b 81       	ldd	r16, Y+3	; 0x03
    16ae:	1c 81       	ldd	r17, Y+4	; 0x04
    16b0:	2d 81       	ldd	r18, Y+5	; 0x05
    16b2:	3e 81       	ldd	r19, Y+6	; 0x06
    16b4:	4f 81       	ldd	r20, Y+7	; 0x07
    16b6:	58 85       	ldd	r21, Y+8	; 0x08
    16b8:	69 85       	ldd	r22, Y+9	; 0x09
    16ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    16bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    16be:	0e 94 a1 0a 	call	0x1542	; 0x1542 <LCD_displayString>
    16c2:	2b 96       	adiw	r28, 0x0b	; 11
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	df 90       	pop	r13
    16dc:	cf 90       	pop	r12
    16de:	bf 90       	pop	r11
    16e0:	af 90       	pop	r10
    16e2:	9f 90       	pop	r9
    16e4:	8f 90       	pop	r8
    16e6:	7f 90       	pop	r7
    16e8:	6f 90       	pop	r6
    16ea:	5f 90       	pop	r5
    16ec:	08 95       	ret

000016ee <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(ST_LCD_t lcd){
    16ee:	cf 92       	push	r12
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	2b 97       	sbiw	r28, 0x0b	; 11
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(lcd,LCD_CLEAR_COMMAND); /* Send clear display command */
    170c:	cc 24       	eor	r12, r12
    170e:	c3 94       	inc	r12
    1710:	0e 94 00 09 	call	0x1200	; 0x1200 <LCD_sendCommand>
}
    1714:	2b 96       	adiw	r28, 0x0b	; 11
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	cf 90       	pop	r12
    172e:	08 95       	ret

00001730 <main>:

#include "Application/application.h"

int main(void)
{
	appInit();
    1730:	0e 94 7c 00 	call	0xf8	; 0xf8 <appInit>
	while (1) 
    {
		appStart();
    1734:	0e 94 61 04 	call	0x8c2	; 0x8c2 <appStart>
    1738:	fd cf       	rjmp	.-6      	; 0x1734 <main+0x4>

0000173a <dio_init>:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;

}
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	11 f1       	breq	.+68     	; 0x1782 <dio_init+0x48>
    173e:	30 f0       	brcs	.+12     	; 0x174c <dio_init+0x12>
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	d1 f1       	breq	.+116    	; 0x17b8 <dio_init+0x7e>
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	09 f4       	brne	.+2      	; 0x174a <dio_init+0x10>
    1748:	52 c0       	rjmp	.+164    	; 0x17ee <dio_init+0xb4>
    174a:	6c c0       	rjmp	.+216    	; 0x1824 <dio_init+0xea>
    174c:	41 11       	cpse	r20, r1
    174e:	0d c0       	rjmp	.+26     	; 0x176a <dio_init+0x30>
    1750:	2a b3       	in	r18, 0x1a	; 26
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 c0       	rjmp	.+4      	; 0x175c <dio_init+0x22>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	6a 95       	dec	r22
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <dio_init+0x1e>
    1760:	80 95       	com	r24
    1762:	82 23       	and	r24, r18
    1764:	8a bb       	out	0x1a, r24	; 26
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	08 95       	ret
    176a:	2a b3       	in	r18, 0x1a	; 26
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <dio_init+0x3c>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	6a 95       	dec	r22
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <dio_init+0x38>
    177a:	82 2b       	or	r24, r18
    177c:	8a bb       	out	0x1a, r24	; 26
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	08 95       	ret
    1782:	41 11       	cpse	r20, r1
    1784:	0d c0       	rjmp	.+26     	; 0x17a0 <dio_init+0x66>
    1786:	27 b3       	in	r18, 0x17	; 23
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <dio_init+0x58>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	6a 95       	dec	r22
    1794:	e2 f7       	brpl	.-8      	; 0x178e <dio_init+0x54>
    1796:	80 95       	com	r24
    1798:	82 23       	and	r24, r18
    179a:	87 bb       	out	0x17, r24	; 23
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	08 95       	ret
    17a0:	27 b3       	in	r18, 0x17	; 23
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <dio_init+0x72>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	6a 95       	dec	r22
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <dio_init+0x6e>
    17b0:	82 2b       	or	r24, r18
    17b2:	87 bb       	out	0x17, r24	; 23
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	08 95       	ret
    17b8:	41 11       	cpse	r20, r1
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <dio_init+0x9c>
    17bc:	24 b3       	in	r18, 0x14	; 20
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <dio_init+0x8e>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	6a 95       	dec	r22
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <dio_init+0x8a>
    17cc:	80 95       	com	r24
    17ce:	82 23       	and	r24, r18
    17d0:	84 bb       	out	0x14, r24	; 20
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	08 95       	ret
    17d6:	24 b3       	in	r18, 0x14	; 20
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <dio_init+0xa8>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	6a 95       	dec	r22
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <dio_init+0xa4>
    17e6:	82 2b       	or	r24, r18
    17e8:	84 bb       	out	0x14, r24	; 20
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	08 95       	ret
    17ee:	41 11       	cpse	r20, r1
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <dio_init+0xd2>
    17f2:	21 b3       	in	r18, 0x11	; 17
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <dio_init+0xc4>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	6a 95       	dec	r22
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <dio_init+0xc0>
    1802:	80 95       	com	r24
    1804:	82 23       	and	r24, r18
    1806:	81 bb       	out	0x11, r24	; 17
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	08 95       	ret
    180c:	21 b3       	in	r18, 0x11	; 17
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <dio_init+0xde>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	6a 95       	dec	r22
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <dio_init+0xda>
    181c:	82 2b       	or	r24, r18
    181e:	81 bb       	out	0x11, r24	; 17
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	08 95       	ret
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	08 95       	ret

00001828 <dio_write_pin>:
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	11 f1       	breq	.+68     	; 0x1870 <dio_write_pin+0x48>
    182c:	30 f0       	brcs	.+12     	; 0x183a <dio_write_pin+0x12>
    182e:	82 30       	cpi	r24, 0x02	; 2
    1830:	d1 f1       	breq	.+116    	; 0x18a6 <dio_write_pin+0x7e>
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	09 f4       	brne	.+2      	; 0x1838 <dio_write_pin+0x10>
    1836:	52 c0       	rjmp	.+164    	; 0x18dc <dio_write_pin+0xb4>
    1838:	6c c0       	rjmp	.+216    	; 0x1912 <dio_write_pin+0xea>
    183a:	41 11       	cpse	r20, r1
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <dio_write_pin+0x30>
    183e:	2b b3       	in	r18, 0x1b	; 27
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 c0       	rjmp	.+4      	; 0x184a <dio_write_pin+0x22>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	6a 95       	dec	r22
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <dio_write_pin+0x1e>
    184e:	80 95       	com	r24
    1850:	82 23       	and	r24, r18
    1852:	8b bb       	out	0x1b, r24	; 27
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	08 95       	ret
    1858:	2b b3       	in	r18, 0x1b	; 27
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <dio_write_pin+0x3c>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	6a 95       	dec	r22
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <dio_write_pin+0x38>
    1868:	82 2b       	or	r24, r18
    186a:	8b bb       	out	0x1b, r24	; 27
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	08 95       	ret
    1870:	41 11       	cpse	r20, r1
    1872:	0d c0       	rjmp	.+26     	; 0x188e <dio_write_pin+0x66>
    1874:	28 b3       	in	r18, 0x18	; 24
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <dio_write_pin+0x58>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	6a 95       	dec	r22
    1882:	e2 f7       	brpl	.-8      	; 0x187c <dio_write_pin+0x54>
    1884:	80 95       	com	r24
    1886:	82 23       	and	r24, r18
    1888:	88 bb       	out	0x18, r24	; 24
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	08 95       	ret
    188e:	28 b3       	in	r18, 0x18	; 24
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <dio_write_pin+0x72>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	6a 95       	dec	r22
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <dio_write_pin+0x6e>
    189e:	82 2b       	or	r24, r18
    18a0:	88 bb       	out	0x18, r24	; 24
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	08 95       	ret
    18a6:	41 11       	cpse	r20, r1
    18a8:	0d c0       	rjmp	.+26     	; 0x18c4 <dio_write_pin+0x9c>
    18aa:	25 b3       	in	r18, 0x15	; 21
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <dio_write_pin+0x8e>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	6a 95       	dec	r22
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <dio_write_pin+0x8a>
    18ba:	80 95       	com	r24
    18bc:	82 23       	and	r24, r18
    18be:	85 bb       	out	0x15, r24	; 21
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	08 95       	ret
    18c4:	25 b3       	in	r18, 0x15	; 21
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <dio_write_pin+0xa8>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	6a 95       	dec	r22
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <dio_write_pin+0xa4>
    18d4:	82 2b       	or	r24, r18
    18d6:	85 bb       	out	0x15, r24	; 21
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	08 95       	ret
    18dc:	41 11       	cpse	r20, r1
    18de:	0d c0       	rjmp	.+26     	; 0x18fa <dio_write_pin+0xd2>
    18e0:	22 b3       	in	r18, 0x12	; 18
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <dio_write_pin+0xc4>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	6a 95       	dec	r22
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <dio_write_pin+0xc0>
    18f0:	80 95       	com	r24
    18f2:	82 23       	and	r24, r18
    18f4:	82 bb       	out	0x12, r24	; 18
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	08 95       	ret
    18fa:	22 b3       	in	r18, 0x12	; 18
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <dio_write_pin+0xde>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	6a 95       	dec	r22
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <dio_write_pin+0xda>
    190a:	82 2b       	or	r24, r18
    190c:	82 bb       	out	0x12, r24	; 18
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	08 95       	ret
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	08 95       	ret

00001916 <dio_read_pin>:

EN_DIO_ERROR_t dio_read_pin(uint8 port, uint8 pin,uint8 *data)
{
    switch(port){
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	91 f0       	breq	.+36     	; 0x193e <dio_read_pin+0x28>
    191a:	28 f0       	brcs	.+10     	; 0x1926 <dio_read_pin+0x10>
    191c:	82 30       	cpi	r24, 0x02	; 2
    191e:	d9 f0       	breq	.+54     	; 0x1956 <dio_read_pin+0x40>
    1920:	83 30       	cpi	r24, 0x03	; 3
    1922:	29 f1       	breq	.+74     	; 0x196e <dio_read_pin+0x58>
    1924:	30 c0       	rjmp	.+96     	; 0x1986 <dio_read_pin+0x70>
        case PORT_A:
            *data = READ_BIT(PINA,pin);
    1926:	89 b3       	in	r24, 0x19	; 25
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <dio_read_pin+0x1a>
    192c:	95 95       	asr	r25
    192e:	87 95       	ror	r24
    1930:	6a 95       	dec	r22
    1932:	e2 f7       	brpl	.-8      	; 0x192c <dio_read_pin+0x16>
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	fa 01       	movw	r30, r20
    1938:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    193a:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_read_pin(uint8 port, uint8 pin,uint8 *data)
{
    switch(port){
        case PORT_A:
            *data = READ_BIT(PINA,pin);
            break;
    193c:	08 95       	ret
        case PORT_B:
            *data =READ_BIT(PINB,pin);
    193e:	86 b3       	in	r24, 0x16	; 22
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <dio_read_pin+0x32>
    1944:	95 95       	asr	r25
    1946:	87 95       	ror	r24
    1948:	6a 95       	dec	r22
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <dio_read_pin+0x2e>
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	fa 01       	movw	r30, r20
    1950:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    1952:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_A:
            *data = READ_BIT(PINA,pin);
            break;
        case PORT_B:
            *data =READ_BIT(PINB,pin);
            break;
    1954:	08 95       	ret
        case PORT_C:
            *data =READ_BIT(PINC,pin);
    1956:	83 b3       	in	r24, 0x13	; 19
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <dio_read_pin+0x4a>
    195c:	95 95       	asr	r25
    195e:	87 95       	ror	r24
    1960:	6a 95       	dec	r22
    1962:	e2 f7       	brpl	.-8      	; 0x195c <dio_read_pin+0x46>
    1964:	81 70       	andi	r24, 0x01	; 1
    1966:	fa 01       	movw	r30, r20
    1968:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    196a:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_B:
            *data =READ_BIT(PINB,pin);
            break;
        case PORT_C:
            *data =READ_BIT(PINC,pin);
            break;
    196c:	08 95       	ret
        case PORT_D:
            *data =READ_BIT(PIND,pin);
    196e:	80 b3       	in	r24, 0x10	; 16
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <dio_read_pin+0x62>
    1974:	95 95       	asr	r25
    1976:	87 95       	ror	r24
    1978:	6a 95       	dec	r22
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <dio_read_pin+0x5e>
    197c:	81 70       	andi	r24, 0x01	; 1
    197e:	fa 01       	movw	r30, r20
    1980:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    1982:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_C:
            *data =READ_BIT(PINC,pin);
            break;
        case PORT_D:
            *data =READ_BIT(PIND,pin);
            break;
    1984:	08 95       	ret
        default:
            return DIO_FAIL;
    1986:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }
    return DIO_SUCCESS;
}
    1988:	08 95       	ret

0000198a <dio_read_port>:

EN_DIO_ERROR_t dio_read_port(uint8 port,uint8 *data)
{
	switch(port){
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	59 f0       	breq	.+22     	; 0x19a4 <dio_read_port+0x1a>
    198e:	28 f0       	brcs	.+10     	; 0x199a <dio_read_port+0x10>
    1990:	82 30       	cpi	r24, 0x02	; 2
    1992:	69 f0       	breq	.+26     	; 0x19ae <dio_read_port+0x24>
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	81 f0       	breq	.+32     	; 0x19b8 <dio_read_port+0x2e>
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <dio_read_port+0x38>
		case PORT_A:
		*data = PINA;
    199a:	89 b3       	in	r24, 0x19	; 25
    199c:	fb 01       	movw	r30, r22
    199e:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_read_port(uint8 port,uint8 *data)
{
	switch(port){
		case PORT_A:
		*data = PINA;
		break;
    19a2:	08 95       	ret
		case PORT_B:
		*data =PINB;
    19a4:	86 b3       	in	r24, 0x16	; 22
    19a6:	fb 01       	movw	r30, r22
    19a8:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*data = PINA;
		break;
		case PORT_B:
		*data =PINB;
		break;
    19ac:	08 95       	ret
		case PORT_C:
		*data =PINC;
    19ae:	83 b3       	in	r24, 0x13	; 19
    19b0:	fb 01       	movw	r30, r22
    19b2:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*data =PINB;
		break;
		case PORT_C:
		*data =PINC;
		break;
    19b6:	08 95       	ret
		case PORT_D:
		*data =PIND;
    19b8:	80 b3       	in	r24, 0x10	; 16
    19ba:	fb 01       	movw	r30, r22
    19bc:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19be:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*data =PINC;
		break;
		case PORT_D:
		*data =PIND;
		break;
    19c0:	08 95       	ret
		default:
		return DIO_FAIL;
    19c2:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_SUCCESS;
}
    19c4:	08 95       	ret

000019c6 <dio_write_port>:


EN_DIO_ERROR_t dio_write_port(uint8 port,uint8 value)
{
	switch(port){
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	49 f0       	breq	.+18     	; 0x19dc <dio_write_port+0x16>
    19ca:	28 f0       	brcs	.+10     	; 0x19d6 <dio_write_port+0x10>
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	49 f0       	breq	.+18     	; 0x19e2 <dio_write_port+0x1c>
    19d0:	83 30       	cpi	r24, 0x03	; 3
    19d2:	51 f0       	breq	.+20     	; 0x19e8 <dio_write_port+0x22>
    19d4:	0c c0       	rjmp	.+24     	; 0x19ee <dio_write_port+0x28>
		case PORT_A:
		PORTA = value;
    19d6:	6b bb       	out	0x1b, r22	; 27
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_write_port(uint8 port,uint8 value)
{
	switch(port){
		case PORT_A:
		PORTA = value;
		break;
    19da:	08 95       	ret
		case PORT_B:
		PORTB = value;
    19dc:	68 bb       	out	0x18, r22	; 24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19de:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		PORTA = value;
		break;
		case PORT_B:
		PORTB = value;
		break;
    19e0:	08 95       	ret
		case PORT_C:
		PORTC = value;
    19e2:	65 bb       	out	0x15, r22	; 21
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		PORTB = value;
		break;
		case PORT_C:
		PORTC = value;
		break;
    19e6:	08 95       	ret
		case PORT_D:
		PORTD = value;
    19e8:	62 bb       	out	0x12, r22	; 18
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		PORTC = value;
		break;
		case PORT_D:
		PORTD = value;
		break;
    19ec:	08 95       	ret
		default:
		return DIO_FAIL;
    19ee:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_SUCCESS;
    19f0:	08 95       	ret

000019f2 <SPI_initSlave>:
{
	/* Start transmission */
	SPDR = cData;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
}
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	64 e0       	ldi	r22, 0x04	; 4
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	65 e0       	ldi	r22, 0x05	; 5
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	66 e0       	ldi	r22, 0x06	; 6
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	67 e0       	ldi	r22, 0x07	; 7
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	0e 94 9d 0b 	call	0x173a	; 0x173a <dio_init>
    1a1a:	80 e4       	ldi	r24, 0x40	; 64
    1a1c:	8d b9       	out	0x0d, r24	; 13
    1a1e:	8e b1       	in	r24, 0x0e	; 14
    1a20:	8e 7f       	andi	r24, 0xFE	; 254
    1a22:	8e b9       	out	0x0e, r24	; 14
    1a24:	08 95       	ret

00001a26 <SPI_sendReceiveByte>:
    1a26:	8f b9       	out	0x0f, r24	; 15
    1a28:	77 9b       	sbis	0x0e, 7	; 14
    1a2a:	fe cf       	rjmp	.-4      	; 0x1a28 <SPI_sendReceiveByte+0x2>
    1a2c:	8f b1       	in	r24, 0x0f	; 15
    1a2e:	08 95       	ret

00001a30 <SPI_SlaveReceive>:

uint8 SPI_SlaveReceive(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
    1a30:	77 9b       	sbis	0x0e, 7	; 14
    1a32:	fe cf       	rjmp	.-4      	; 0x1a30 <SPI_SlaveReceive>
	/* Return data register */
	return SPDR;
    1a34:	8f b1       	in	r24, 0x0f	; 15
    1a36:	08 95       	ret

00001a38 <calc_prescaler>:
		init_value=0;
	}
	TCNT0=init_value;
	g_callBackPtr_0=g_ptr;
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
}
    1a38:	cf 92       	push	r12
    1a3a:	df 92       	push	r13
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	6b 01       	movw	r12, r22
    1a46:	7c 01       	movw	r14, r24
    1a48:	ea 01       	movw	r28, r20
    1a4a:	2c ee       	ldi	r18, 0xEC	; 236
    1a4c:	31 e1       	ldi	r19, 0x11	; 17
    1a4e:	43 e8       	ldi	r20, 0x83	; 131
    1a50:	53 e4       	ldi	r21, 0x43	; 67
    1a52:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	0c f4       	brge	.+2      	; 0x1a5c <calc_prescaler+0x24>
    1a5a:	53 c0       	rjmp	.+166    	; 0x1b02 <calc_prescaler+0xca>
    1a5c:	28 eb       	ldi	r18, 0xB8	; 184
    1a5e:	3e e1       	ldi	r19, 0x1E	; 30
    1a60:	45 e8       	ldi	r20, 0x85	; 133
    1a62:	5e e3       	ldi	r21, 0x3E	; 62
    1a64:	c7 01       	movw	r24, r14
    1a66:	b6 01       	movw	r22, r12
    1a68:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1a6c:	18 16       	cp	r1, r24
    1a6e:	2c f0       	brlt	.+10     	; 0x1a7a <calc_prescaler+0x42>
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	99 83       	std	Y+1, r25	; 0x01
    1a76:	88 83       	st	Y, r24
    1a78:	45 c0       	rjmp	.+138    	; 0x1b04 <calc_prescaler+0xcc>
    1a7a:	23 e3       	ldi	r18, 0x33	; 51
    1a7c:	33 e3       	ldi	r19, 0x33	; 51
    1a7e:	43 e0       	ldi	r20, 0x03	; 3
    1a80:	50 e4       	ldi	r21, 0x40	; 64
    1a82:	c7 01       	movw	r24, r14
    1a84:	b6 01       	movw	r22, r12
    1a86:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	34 f0       	brlt	.+12     	; 0x1a9a <calc_prescaler+0x62>
    1a8e:	88 e0       	ldi	r24, 0x08	; 8
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	99 83       	std	Y+1, r25	; 0x01
    1a94:	88 83       	st	Y, r24
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	35 c0       	rjmp	.+106    	; 0x1b04 <calc_prescaler+0xcc>
    1a9a:	2d e3       	ldi	r18, 0x3D	; 61
    1a9c:	3a e0       	ldi	r19, 0x0A	; 10
    1a9e:	43 e8       	ldi	r20, 0x83	; 131
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	c7 01       	movw	r24, r14
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1aaa:	18 16       	cp	r1, r24
    1aac:	34 f0       	brlt	.+12     	; 0x1aba <calc_prescaler+0x82>
    1aae:	80 e4       	ldi	r24, 0x40	; 64
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	99 83       	std	Y+1, r25	; 0x01
    1ab4:	88 83       	st	Y, r24
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	25 c0       	rjmp	.+74     	; 0x1b04 <calc_prescaler+0xcc>
    1aba:	2b e7       	ldi	r18, 0x7B	; 123
    1abc:	34 e1       	ldi	r19, 0x14	; 20
    1abe:	43 e8       	ldi	r20, 0x83	; 131
    1ac0:	52 e4       	ldi	r21, 0x42	; 66
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	b6 01       	movw	r22, r12
    1ac6:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	34 f0       	brlt	.+12     	; 0x1ada <calc_prescaler+0xa2>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	99 83       	std	Y+1, r25	; 0x01
    1ad4:	88 83       	st	Y, r24
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	15 c0       	rjmp	.+42     	; 0x1b04 <calc_prescaler+0xcc>
    1ada:	2c ee       	ldi	r18, 0xEC	; 236
    1adc:	31 e1       	ldi	r19, 0x11	; 17
    1ade:	43 e8       	ldi	r20, 0x83	; 131
    1ae0:	53 e4       	ldi	r21, 0x43	; 67
    1ae2:	c7 01       	movw	r24, r14
    1ae4:	b6 01       	movw	r22, r12
    1ae6:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	34 f0       	brlt	.+12     	; 0x1afa <calc_prescaler+0xc2>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	94 e0       	ldi	r25, 0x04	; 4
    1af2:	99 83       	std	Y+1, r25	; 0x01
    1af4:	88 83       	st	Y, r24
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <calc_prescaler+0xcc>
    1afa:	19 82       	std	Y+1, r1	; 0x01
    1afc:	18 82       	st	Y, r1
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <calc_prescaler+0xcc>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	df 90       	pop	r13
    1b0e:	cf 90       	pop	r12
    1b10:	08 95       	ret

00001b12 <calc_initialValue>:
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	eb 01       	movw	r28, r22
    1b18:	80 34       	cpi	r24, 0x40	; 64
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	81 f1       	breq	.+96     	; 0x1b7e <calc_initialValue+0x6c>
    1b1e:	30 f4       	brcc	.+12     	; 0x1b2c <calc_initialValue+0x1a>
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	91 05       	cpc	r25, r1
    1b24:	61 f0       	breq	.+24     	; 0x1b3e <calc_initialValue+0x2c>
    1b26:	08 97       	sbiw	r24, 0x08	; 8
    1b28:	d1 f0       	breq	.+52     	; 0x1b5e <calc_initialValue+0x4c>
    1b2a:	59 c0       	rjmp	.+178    	; 0x1bde <calc_initialValue+0xcc>
    1b2c:	81 15       	cp	r24, r1
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	96 07       	cpc	r25, r22
    1b32:	a9 f1       	breq	.+106    	; 0x1b9e <calc_initialValue+0x8c>
    1b34:	81 15       	cp	r24, r1
    1b36:	94 40       	sbci	r25, 0x04	; 4
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <calc_initialValue+0x2a>
    1b3a:	41 c0       	rjmp	.+130    	; 0x1bbe <calc_initialValue+0xac>
    1b3c:	50 c0       	rjmp	.+160    	; 0x1bde <calc_initialValue+0xcc>
    1b3e:	68 eb       	ldi	r22, 0xB8	; 184
    1b40:	7e e1       	ldi	r23, 0x1E	; 30
    1b42:	85 e8       	ldi	r24, 0x85	; 133
    1b44:	9e e3       	ldi	r25, 0x3E	; 62
    1b46:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1b4a:	2f e6       	ldi	r18, 0x6F	; 111
    1b4c:	32 e1       	ldi	r19, 0x12	; 18
    1b4e:	43 e8       	ldi	r20, 0x83	; 131
    1b50:	5a e3       	ldi	r21, 0x3A	; 58
    1b52:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1b56:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1b5a:	68 83       	st	Y, r22
    1b5c:	41 c0       	rjmp	.+130    	; 0x1be0 <calc_initialValue+0xce>
    1b5e:	63 e3       	ldi	r22, 0x33	; 51
    1b60:	73 e3       	ldi	r23, 0x33	; 51
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	90 e4       	ldi	r25, 0x40	; 64
    1b66:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1b6a:	2f e6       	ldi	r18, 0x6F	; 111
    1b6c:	32 e1       	ldi	r19, 0x12	; 18
    1b6e:	43 e0       	ldi	r20, 0x03	; 3
    1b70:	5c e3       	ldi	r21, 0x3C	; 60
    1b72:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1b76:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1b7a:	68 83       	st	Y, r22
    1b7c:	31 c0       	rjmp	.+98     	; 0x1be0 <calc_initialValue+0xce>
    1b7e:	6d e3       	ldi	r22, 0x3D	; 61
    1b80:	7a e0       	ldi	r23, 0x0A	; 10
    1b82:	83 e8       	ldi	r24, 0x83	; 131
    1b84:	91 e4       	ldi	r25, 0x41	; 65
    1b86:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1b8a:	2f e6       	ldi	r18, 0x6F	; 111
    1b8c:	32 e1       	ldi	r19, 0x12	; 18
    1b8e:	43 e8       	ldi	r20, 0x83	; 131
    1b90:	5d e3       	ldi	r21, 0x3D	; 61
    1b92:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1b96:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1b9a:	68 83       	st	Y, r22
    1b9c:	21 c0       	rjmp	.+66     	; 0x1be0 <calc_initialValue+0xce>
    1b9e:	6b e7       	ldi	r22, 0x7B	; 123
    1ba0:	74 e1       	ldi	r23, 0x14	; 20
    1ba2:	83 e8       	ldi	r24, 0x83	; 131
    1ba4:	92 e4       	ldi	r25, 0x42	; 66
    1ba6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1baa:	2f e6       	ldi	r18, 0x6F	; 111
    1bac:	32 e1       	ldi	r19, 0x12	; 18
    1bae:	43 e8       	ldi	r20, 0x83	; 131
    1bb0:	5e e3       	ldi	r21, 0x3E	; 62
    1bb2:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1bb6:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1bba:	68 83       	st	Y, r22
    1bbc:	11 c0       	rjmp	.+34     	; 0x1be0 <calc_initialValue+0xce>
    1bbe:	6c ee       	ldi	r22, 0xEC	; 236
    1bc0:	71 e1       	ldi	r23, 0x11	; 17
    1bc2:	83 e8       	ldi	r24, 0x83	; 131
    1bc4:	93 e4       	ldi	r25, 0x43	; 67
    1bc6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1bca:	2f e6       	ldi	r18, 0x6F	; 111
    1bcc:	32 e1       	ldi	r19, 0x12	; 18
    1bce:	43 e8       	ldi	r20, 0x83	; 131
    1bd0:	5f e3       	ldi	r21, 0x3F	; 63
    1bd2:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1bd6:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1bda:	68 83       	st	Y, r22
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <calc_initialValue+0xce>
    1bde:	18 82       	st	Y, r1
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	08 95       	ret

00001be6 <set_prescale>:
    1be6:	80 34       	cpi	r24, 0x40	; 64
    1be8:	91 05       	cpc	r25, r1
    1bea:	a9 f0       	breq	.+42     	; 0x1c16 <set_prescale+0x30>
    1bec:	30 f4       	brcc	.+12     	; 0x1bfa <set_prescale+0x14>
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	59 f0       	breq	.+22     	; 0x1c0a <set_prescale+0x24>
    1bf4:	08 97       	sbiw	r24, 0x08	; 8
    1bf6:	61 f0       	breq	.+24     	; 0x1c10 <set_prescale+0x2a>
    1bf8:	17 c0       	rjmp	.+46     	; 0x1c28 <set_prescale+0x42>
    1bfa:	81 15       	cp	r24, r1
    1bfc:	21 e0       	ldi	r18, 0x01	; 1
    1bfe:	92 07       	cpc	r25, r18
    1c00:	69 f0       	breq	.+26     	; 0x1c1c <set_prescale+0x36>
    1c02:	81 15       	cp	r24, r1
    1c04:	94 40       	sbci	r25, 0x04	; 4
    1c06:	69 f0       	breq	.+26     	; 0x1c22 <set_prescale+0x3c>
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <set_prescale+0x42>
    1c0a:	81 e8       	ldi	r24, 0x81	; 129
    1c0c:	83 bf       	out	0x33, r24	; 51
    1c0e:	08 95       	ret
    1c10:	82 e8       	ldi	r24, 0x82	; 130
    1c12:	83 bf       	out	0x33, r24	; 51
    1c14:	08 95       	ret
    1c16:	83 e8       	ldi	r24, 0x83	; 131
    1c18:	83 bf       	out	0x33, r24	; 51
    1c1a:	08 95       	ret
    1c1c:	84 e8       	ldi	r24, 0x84	; 132
    1c1e:	83 bf       	out	0x33, r24	; 51
    1c20:	08 95       	ret
    1c22:	85 e8       	ldi	r24, 0x85	; 133
    1c24:	83 bf       	out	0x33, r24	; 51
    1c26:	08 95       	ret
    1c28:	13 be       	out	0x33, r1	; 51
    1c2a:	08 95       	ret

00001c2c <Timer0_Delay>:
    1c2c:	8f 92       	push	r8
    1c2e:	9f 92       	push	r9
    1c30:	af 92       	push	r10
    1c32:	bf 92       	push	r11
    1c34:	cf 92       	push	r12
    1c36:	df 92       	push	r13
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	27 97       	sbiw	r28, 0x07	; 7
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	6b 01       	movw	r12, r22
    1c54:	7c 01       	movw	r14, r24
    1c56:	ae 01       	movw	r20, r28
    1c58:	4f 5f       	subi	r20, 0xFF	; 255
    1c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <calc_prescaler>
    1c60:	88 23       	and	r24, r24
    1c62:	71 f0       	breq	.+28     	; 0x1c80 <Timer0_Delay+0x54>
    1c64:	a7 01       	movw	r20, r14
    1c66:	96 01       	movw	r18, r12
    1c68:	be 01       	movw	r22, r28
    1c6a:	6d 5f       	subi	r22, 0xFD	; 253
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <calc_initialValue>
    1c76:	1c 82       	std	Y+4, r1	; 0x04
    1c78:	1d 82       	std	Y+5, r1	; 0x05
    1c7a:	1e 82       	std	Y+6, r1	; 0x06
    1c7c:	1f 82       	std	Y+7, r1	; 0x07
    1c7e:	11 c0       	rjmp	.+34     	; 0x1ca2 <Timer0_Delay+0x76>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	94 e0       	ldi	r25, 0x04	; 4
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	2c ee       	ldi	r18, 0xEC	; 236
    1c8a:	31 e1       	ldi	r19, 0x11	; 17
    1c8c:	43 e8       	ldi	r20, 0x83	; 131
    1c8e:	53 e4       	ldi	r21, 0x43	; 67
    1c90:	c7 01       	movw	r24, r14
    1c92:	b6 01       	movw	r22, r12
    1c94:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1c98:	6c 83       	std	Y+4, r22	; 0x04
    1c9a:	7d 83       	std	Y+5, r23	; 0x05
    1c9c:	8e 83       	std	Y+6, r24	; 0x06
    1c9e:	9f 83       	std	Y+7, r25	; 0x07
    1ca0:	1b 82       	std	Y+3, r1	; 0x03
    1ca2:	cc 80       	ldd	r12, Y+4	; 0x04
    1ca4:	dd 80       	ldd	r13, Y+5	; 0x05
    1ca6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca8:	ff 80       	ldd	r15, Y+7	; 0x07
    1caa:	c7 01       	movw	r24, r14
    1cac:	b6 01       	movw	r22, r12
    1cae:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1cb2:	16 2f       	mov	r17, r22
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatsisf>
    1cbe:	9b 01       	movw	r18, r22
    1cc0:	ac 01       	movw	r20, r24
    1cc2:	c7 01       	movw	r24, r14
    1cc4:	b6 01       	movw	r22, r12
    1cc6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1cca:	2c ee       	ldi	r18, 0xEC	; 236
    1ccc:	31 e1       	ldi	r19, 0x11	; 17
    1cce:	43 e8       	ldi	r20, 0x83	; 131
    1cd0:	53 e4       	ldi	r21, 0x43	; 67
    1cd2:	0e 94 99 11 	call	0x2332	; 0x2332 <__mulsf3>
    1cd6:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1cda:	f6 2e       	mov	r15, r22
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	82 bf       	out	0x32, r24	; 50
    1ce0:	11 11       	cpse	r17, r1
    1ce2:	08 c0       	rjmp	.+16     	; 0x1cf4 <Timer0_Delay+0xc8>
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <set_prescale>
    1cec:	08 b6       	in	r0, 0x38	; 56
    1cee:	00 fe       	sbrs	r0, 0
    1cf0:	fd cf       	rjmp	.-6      	; 0x1cec <Timer0_Delay+0xc0>
    1cf2:	00 c1       	rjmp	.+512    	; 0x1ef4 <Timer0_Delay+0x2c8>
    1cf4:	85 e8       	ldi	r24, 0x85	; 133
    1cf6:	83 bf       	out	0x33, r24	; 51
    1cf8:	07 c0       	rjmp	.+14     	; 0x1d08 <Timer0_Delay+0xdc>
    1cfa:	08 b6       	in	r0, 0x38	; 56
    1cfc:	00 fe       	sbrs	r0, 0
    1cfe:	fd cf       	rjmp	.-6      	; 0x1cfa <Timer0_Delay+0xce>
    1d00:	11 50       	subi	r17, 0x01	; 1
    1d02:	88 b7       	in	r24, 0x38	; 56
    1d04:	81 60       	ori	r24, 0x01	; 1
    1d06:	88 bf       	out	0x38, r24	; 56
    1d08:	11 11       	cpse	r17, r1
    1d0a:	f7 cf       	rjmp	.-18     	; 0x1cfa <Timer0_Delay+0xce>
    1d0c:	ff 20       	and	r15, r15
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <Timer0_Delay+0xe6>
    1d10:	53 c0       	rjmp	.+166    	; 0x1db8 <Timer0_Delay+0x18c>
    1d12:	6f 2d       	mov	r22, r15
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatsisf>
    1d1e:	4b 01       	movw	r8, r22
    1d20:	5c 01       	movw	r10, r24
    1d22:	28 eb       	ldi	r18, 0xB8	; 184
    1d24:	3e e1       	ldi	r19, 0x1E	; 30
    1d26:	45 e8       	ldi	r20, 0x85	; 133
    1d28:	5e e3       	ldi	r21, 0x3E	; 62
    1d2a:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	2c f0       	brlt	.+10     	; 0x1d3c <Timer0_Delay+0x110>
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	3e c0       	rjmp	.+124    	; 0x1db8 <Timer0_Delay+0x18c>
    1d3c:	23 e3       	ldi	r18, 0x33	; 51
    1d3e:	33 e3       	ldi	r19, 0x33	; 51
    1d40:	43 e0       	ldi	r20, 0x03	; 3
    1d42:	50 e4       	ldi	r21, 0x40	; 64
    1d44:	c5 01       	movw	r24, r10
    1d46:	b4 01       	movw	r22, r8
    1d48:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	2c f0       	brlt	.+10     	; 0x1d5a <Timer0_Delay+0x12e>
    1d50:	88 e0       	ldi	r24, 0x08	; 8
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	2f c0       	rjmp	.+94     	; 0x1db8 <Timer0_Delay+0x18c>
    1d5a:	2d e3       	ldi	r18, 0x3D	; 61
    1d5c:	3a e0       	ldi	r19, 0x0A	; 10
    1d5e:	43 e8       	ldi	r20, 0x83	; 131
    1d60:	51 e4       	ldi	r21, 0x41	; 65
    1d62:	c5 01       	movw	r24, r10
    1d64:	b4 01       	movw	r22, r8
    1d66:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	2c f0       	brlt	.+10     	; 0x1d78 <Timer0_Delay+0x14c>
    1d6e:	80 e4       	ldi	r24, 0x40	; 64
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	20 c0       	rjmp	.+64     	; 0x1db8 <Timer0_Delay+0x18c>
    1d78:	2b e7       	ldi	r18, 0x7B	; 123
    1d7a:	34 e1       	ldi	r19, 0x14	; 20
    1d7c:	43 e8       	ldi	r20, 0x83	; 131
    1d7e:	52 e4       	ldi	r21, 0x42	; 66
    1d80:	c5 01       	movw	r24, r10
    1d82:	b4 01       	movw	r22, r8
    1d84:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	2c f0       	brlt	.+10     	; 0x1d96 <Timer0_Delay+0x16a>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	11 c0       	rjmp	.+34     	; 0x1db8 <Timer0_Delay+0x18c>
    1d96:	2c ee       	ldi	r18, 0xEC	; 236
    1d98:	31 e1       	ldi	r19, 0x11	; 17
    1d9a:	43 e8       	ldi	r20, 0x83	; 131
    1d9c:	53 e4       	ldi	r21, 0x43	; 67
    1d9e:	c5 01       	movw	r24, r10
    1da0:	b4 01       	movw	r22, r8
    1da2:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	2c f0       	brlt	.+10     	; 0x1db4 <Timer0_Delay+0x188>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	94 e0       	ldi	r25, 0x04	; 4
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <Timer0_Delay+0x18c>
    1db4:	1a 82       	std	Y+2, r1	; 0x02
    1db6:	19 82       	std	Y+1, r1	; 0x01
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	80 34       	cpi	r24, 0x40	; 64
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <Timer0_Delay+0x198>
    1dc2:	45 c0       	rjmp	.+138    	; 0x1e4e <Timer0_Delay+0x222>
    1dc4:	30 f4       	brcc	.+12     	; 0x1dd2 <Timer0_Delay+0x1a6>
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	91 05       	cpc	r25, r1
    1dca:	69 f0       	breq	.+26     	; 0x1de6 <Timer0_Delay+0x1ba>
    1dcc:	08 97       	sbiw	r24, 0x08	; 8
    1dce:	29 f1       	breq	.+74     	; 0x1e1a <Timer0_Delay+0x1ee>
    1dd0:	8c c0       	rjmp	.+280    	; 0x1eea <Timer0_Delay+0x2be>
    1dd2:	81 15       	cp	r24, r1
    1dd4:	21 e0       	ldi	r18, 0x01	; 1
    1dd6:	92 07       	cpc	r25, r18
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <Timer0_Delay+0x1b0>
    1dda:	53 c0       	rjmp	.+166    	; 0x1e82 <Timer0_Delay+0x256>
    1ddc:	81 15       	cp	r24, r1
    1dde:	94 40       	sbci	r25, 0x04	; 4
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <Timer0_Delay+0x1b8>
    1de2:	69 c0       	rjmp	.+210    	; 0x1eb6 <Timer0_Delay+0x28a>
    1de4:	82 c0       	rjmp	.+260    	; 0x1eea <Timer0_Delay+0x2be>
    1de6:	6f 2d       	mov	r22, r15
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatsisf>
    1df2:	9b 01       	movw	r18, r22
    1df4:	ac 01       	movw	r20, r24
    1df6:	68 eb       	ldi	r22, 0xB8	; 184
    1df8:	7e e1       	ldi	r23, 0x1E	; 30
    1dfa:	85 e8       	ldi	r24, 0x85	; 133
    1dfc:	9e e3       	ldi	r25, 0x3E	; 62
    1dfe:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1e02:	2f e6       	ldi	r18, 0x6F	; 111
    1e04:	32 e1       	ldi	r19, 0x12	; 18
    1e06:	43 e8       	ldi	r20, 0x83	; 131
    1e08:	5a e3       	ldi	r21, 0x3A	; 58
    1e0a:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1e0e:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1e12:	62 bf       	out	0x32, r22	; 50
    1e14:	81 e8       	ldi	r24, 0x81	; 129
    1e16:	83 bf       	out	0x33, r24	; 51
    1e18:	6a c0       	rjmp	.+212    	; 0x1eee <Timer0_Delay+0x2c2>
    1e1a:	6f 2d       	mov	r22, r15
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatsisf>
    1e26:	9b 01       	movw	r18, r22
    1e28:	ac 01       	movw	r20, r24
    1e2a:	63 e3       	ldi	r22, 0x33	; 51
    1e2c:	73 e3       	ldi	r23, 0x33	; 51
    1e2e:	83 e0       	ldi	r24, 0x03	; 3
    1e30:	90 e4       	ldi	r25, 0x40	; 64
    1e32:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1e36:	2f e6       	ldi	r18, 0x6F	; 111
    1e38:	32 e1       	ldi	r19, 0x12	; 18
    1e3a:	43 e0       	ldi	r20, 0x03	; 3
    1e3c:	5c e3       	ldi	r21, 0x3C	; 60
    1e3e:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1e42:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1e46:	62 bf       	out	0x32, r22	; 50
    1e48:	82 e8       	ldi	r24, 0x82	; 130
    1e4a:	83 bf       	out	0x33, r24	; 51
    1e4c:	50 c0       	rjmp	.+160    	; 0x1eee <Timer0_Delay+0x2c2>
    1e4e:	6f 2d       	mov	r22, r15
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatsisf>
    1e5a:	9b 01       	movw	r18, r22
    1e5c:	ac 01       	movw	r20, r24
    1e5e:	6d e3       	ldi	r22, 0x3D	; 61
    1e60:	7a e0       	ldi	r23, 0x0A	; 10
    1e62:	83 e8       	ldi	r24, 0x83	; 131
    1e64:	91 e4       	ldi	r25, 0x41	; 65
    1e66:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1e6a:	2f e6       	ldi	r18, 0x6F	; 111
    1e6c:	32 e1       	ldi	r19, 0x12	; 18
    1e6e:	43 e8       	ldi	r20, 0x83	; 131
    1e70:	5d e3       	ldi	r21, 0x3D	; 61
    1e72:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1e76:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1e7a:	62 bf       	out	0x32, r22	; 50
    1e7c:	83 e8       	ldi	r24, 0x83	; 131
    1e7e:	83 bf       	out	0x33, r24	; 51
    1e80:	36 c0       	rjmp	.+108    	; 0x1eee <Timer0_Delay+0x2c2>
    1e82:	6f 2d       	mov	r22, r15
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatsisf>
    1e8e:	9b 01       	movw	r18, r22
    1e90:	ac 01       	movw	r20, r24
    1e92:	6b e7       	ldi	r22, 0x7B	; 123
    1e94:	74 e1       	ldi	r23, 0x14	; 20
    1e96:	83 e8       	ldi	r24, 0x83	; 131
    1e98:	92 e4       	ldi	r25, 0x42	; 66
    1e9a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1e9e:	2f e6       	ldi	r18, 0x6F	; 111
    1ea0:	32 e1       	ldi	r19, 0x12	; 18
    1ea2:	43 e8       	ldi	r20, 0x83	; 131
    1ea4:	5e e3       	ldi	r21, 0x3E	; 62
    1ea6:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1eaa:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1eae:	62 bf       	out	0x32, r22	; 50
    1eb0:	84 e8       	ldi	r24, 0x84	; 132
    1eb2:	83 bf       	out	0x33, r24	; 51
    1eb4:	1c c0       	rjmp	.+56     	; 0x1eee <Timer0_Delay+0x2c2>
    1eb6:	6f 2d       	mov	r22, r15
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatsisf>
    1ec2:	9b 01       	movw	r18, r22
    1ec4:	ac 01       	movw	r20, r24
    1ec6:	6c ee       	ldi	r22, 0xEC	; 236
    1ec8:	71 e1       	ldi	r23, 0x11	; 17
    1eca:	83 e8       	ldi	r24, 0x83	; 131
    1ecc:	93 e4       	ldi	r25, 0x43	; 67
    1ece:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__subsf3>
    1ed2:	2f e6       	ldi	r18, 0x6F	; 111
    1ed4:	32 e1       	ldi	r19, 0x12	; 18
    1ed6:	43 e8       	ldi	r20, 0x83	; 131
    1ed8:	5f e3       	ldi	r21, 0x3F	; 63
    1eda:	0e 94 41 10 	call	0x2082	; 0x2082 <__divsf3>
    1ede:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixunssfsi>
    1ee2:	62 bf       	out	0x32, r22	; 50
    1ee4:	85 e8       	ldi	r24, 0x85	; 133
    1ee6:	83 bf       	out	0x33, r24	; 51
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <Timer0_Delay+0x2c2>
    1eea:	12 be       	out	0x32, r1	; 50
    1eec:	13 be       	out	0x33, r1	; 51
    1eee:	08 b6       	in	r0, 0x38	; 56
    1ef0:	00 fe       	sbrs	r0, 0
    1ef2:	fd cf       	rjmp	.-6      	; 0x1eee <Timer0_Delay+0x2c2>
    1ef4:	88 b7       	in	r24, 0x38	; 56
    1ef6:	81 60       	ori	r24, 0x01	; 1
    1ef8:	88 bf       	out	0x38, r24	; 56
    1efa:	13 be       	out	0x33, r1	; 51
    1efc:	27 96       	adiw	r28, 0x07	; 7
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	df 90       	pop	r13
    1f14:	cf 90       	pop	r12
    1f16:	bf 90       	pop	r11
    1f18:	af 90       	pop	r10
    1f1a:	9f 90       	pop	r9
    1f1c:	8f 90       	pop	r8
    1f1e:	08 95       	ret

00001f20 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1f20:	1f 92       	push	r1
    1f22:	0f 92       	push	r0
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	0f 92       	push	r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	2f 93       	push	r18
    1f2c:	3f 93       	push	r19
    1f2e:	4f 93       	push	r20
    1f30:	5f 93       	push	r21
    1f32:	6f 93       	push	r22
    1f34:	7f 93       	push	r23
    1f36:	8f 93       	push	r24
    1f38:	9f 93       	push	r25
    1f3a:	af 93       	push	r26
    1f3c:	bf 93       	push	r27
    1f3e:	ef 93       	push	r30
    1f40:	ff 93       	push	r31
	if(g_callBackPtr_0 !=  ((void*)0))
    1f42:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <g_callBackPtr_0>
    1f46:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <g_callBackPtr_0+0x1>
    1f4a:	30 97       	sbiw	r30, 0x00	; 0
    1f4c:	b9 f0       	breq	.+46     	; 0x1f7c <__vector_11+0x5c>
	{
		if(NO_OF_OVERFLOWS > 0)
    1f4e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <NO_OF_OVERFLOWS>
    1f52:	88 23       	and	r24, r24
    1f54:	79 f0       	breq	.+30     	; 0x1f74 <__vector_11+0x54>
		{
			g_tick++;
    1f56:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <g_tick>
    1f5a:	8f 5f       	subi	r24, 0xFF	; 255
    1f5c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <g_tick>
			if(g_tick == NO_OF_OVERFLOWS)
    1f60:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <g_tick>
    1f64:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <NO_OF_OVERFLOWS>
    1f68:	98 13       	cpse	r25, r24
    1f6a:	08 c0       	rjmp	.+16     	; 0x1f7c <__vector_11+0x5c>
			{
				g_callBackPtr_0();
    1f6c:	09 95       	icall
				g_tick = 0; //clear the tick counter again to start new count
    1f6e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <g_tick>
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <__vector_11+0x5c>
			}
		}
		else
		{
			g_callBackPtr_0();
    1f74:	09 95       	icall
			TCNT0=init_value;
    1f76:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
    1f7a:	82 bf       	out	0x32, r24	; 50
		}
	}
}
    1f7c:	ff 91       	pop	r31
    1f7e:	ef 91       	pop	r30
    1f80:	bf 91       	pop	r27
    1f82:	af 91       	pop	r26
    1f84:	9f 91       	pop	r25
    1f86:	8f 91       	pop	r24
    1f88:	7f 91       	pop	r23
    1f8a:	6f 91       	pop	r22
    1f8c:	5f 91       	pop	r21
    1f8e:	4f 91       	pop	r20
    1f90:	3f 91       	pop	r19
    1f92:	2f 91       	pop	r18
    1f94:	0f 90       	pop	r0
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	0f 90       	pop	r0
    1f9a:	1f 90       	pop	r1
    1f9c:	18 95       	reti

00001f9e <__subsf3>:
    1f9e:	50 58       	subi	r21, 0x80	; 128

00001fa0 <__addsf3>:
    1fa0:	bb 27       	eor	r27, r27
    1fa2:	aa 27       	eor	r26, r26
    1fa4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__addsf3x>
    1fa8:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__fp_round>
    1fac:	0e 94 4c 11 	call	0x2298	; 0x2298 <__fp_pscA>
    1fb0:	38 f0       	brcs	.+14     	; 0x1fc0 <__addsf3+0x20>
    1fb2:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__fp_pscB>
    1fb6:	20 f0       	brcs	.+8      	; 0x1fc0 <__addsf3+0x20>
    1fb8:	39 f4       	brne	.+14     	; 0x1fc8 <__addsf3+0x28>
    1fba:	9f 3f       	cpi	r25, 0xFF	; 255
    1fbc:	19 f4       	brne	.+6      	; 0x1fc4 <__addsf3+0x24>
    1fbe:	26 f4       	brtc	.+8      	; 0x1fc8 <__addsf3+0x28>
    1fc0:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__fp_nan>
    1fc4:	0e f4       	brtc	.+2      	; 0x1fc8 <__addsf3+0x28>
    1fc6:	e0 95       	com	r30
    1fc8:	e7 fb       	bst	r30, 7
    1fca:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__fp_inf>

00001fce <__addsf3x>:
    1fce:	e9 2f       	mov	r30, r25
    1fd0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fp_split3>
    1fd4:	58 f3       	brcs	.-42     	; 0x1fac <__addsf3+0xc>
    1fd6:	ba 17       	cp	r27, r26
    1fd8:	62 07       	cpc	r22, r18
    1fda:	73 07       	cpc	r23, r19
    1fdc:	84 07       	cpc	r24, r20
    1fde:	95 07       	cpc	r25, r21
    1fe0:	20 f0       	brcs	.+8      	; 0x1fea <__addsf3x+0x1c>
    1fe2:	79 f4       	brne	.+30     	; 0x2002 <__addsf3x+0x34>
    1fe4:	a6 f5       	brtc	.+104    	; 0x204e <__addsf3x+0x80>
    1fe6:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__fp_zero>
    1fea:	0e f4       	brtc	.+2      	; 0x1fee <__addsf3x+0x20>
    1fec:	e0 95       	com	r30
    1fee:	0b 2e       	mov	r0, r27
    1ff0:	ba 2f       	mov	r27, r26
    1ff2:	a0 2d       	mov	r26, r0
    1ff4:	0b 01       	movw	r0, r22
    1ff6:	b9 01       	movw	r22, r18
    1ff8:	90 01       	movw	r18, r0
    1ffa:	0c 01       	movw	r0, r24
    1ffc:	ca 01       	movw	r24, r20
    1ffe:	a0 01       	movw	r20, r0
    2000:	11 24       	eor	r1, r1
    2002:	ff 27       	eor	r31, r31
    2004:	59 1b       	sub	r21, r25
    2006:	99 f0       	breq	.+38     	; 0x202e <__addsf3x+0x60>
    2008:	59 3f       	cpi	r21, 0xF9	; 249
    200a:	50 f4       	brcc	.+20     	; 0x2020 <__addsf3x+0x52>
    200c:	50 3e       	cpi	r21, 0xE0	; 224
    200e:	68 f1       	brcs	.+90     	; 0x206a <__addsf3x+0x9c>
    2010:	1a 16       	cp	r1, r26
    2012:	f0 40       	sbci	r31, 0x00	; 0
    2014:	a2 2f       	mov	r26, r18
    2016:	23 2f       	mov	r18, r19
    2018:	34 2f       	mov	r19, r20
    201a:	44 27       	eor	r20, r20
    201c:	58 5f       	subi	r21, 0xF8	; 248
    201e:	f3 cf       	rjmp	.-26     	; 0x2006 <__addsf3x+0x38>
    2020:	46 95       	lsr	r20
    2022:	37 95       	ror	r19
    2024:	27 95       	ror	r18
    2026:	a7 95       	ror	r26
    2028:	f0 40       	sbci	r31, 0x00	; 0
    202a:	53 95       	inc	r21
    202c:	c9 f7       	brne	.-14     	; 0x2020 <__addsf3x+0x52>
    202e:	7e f4       	brtc	.+30     	; 0x204e <__addsf3x+0x80>
    2030:	1f 16       	cp	r1, r31
    2032:	ba 0b       	sbc	r27, r26
    2034:	62 0b       	sbc	r22, r18
    2036:	73 0b       	sbc	r23, r19
    2038:	84 0b       	sbc	r24, r20
    203a:	ba f0       	brmi	.+46     	; 0x206a <__addsf3x+0x9c>
    203c:	91 50       	subi	r25, 0x01	; 1
    203e:	a1 f0       	breq	.+40     	; 0x2068 <__addsf3x+0x9a>
    2040:	ff 0f       	add	r31, r31
    2042:	bb 1f       	adc	r27, r27
    2044:	66 1f       	adc	r22, r22
    2046:	77 1f       	adc	r23, r23
    2048:	88 1f       	adc	r24, r24
    204a:	c2 f7       	brpl	.-16     	; 0x203c <__addsf3x+0x6e>
    204c:	0e c0       	rjmp	.+28     	; 0x206a <__addsf3x+0x9c>
    204e:	ba 0f       	add	r27, r26
    2050:	62 1f       	adc	r22, r18
    2052:	73 1f       	adc	r23, r19
    2054:	84 1f       	adc	r24, r20
    2056:	48 f4       	brcc	.+18     	; 0x206a <__addsf3x+0x9c>
    2058:	87 95       	ror	r24
    205a:	77 95       	ror	r23
    205c:	67 95       	ror	r22
    205e:	b7 95       	ror	r27
    2060:	f7 95       	ror	r31
    2062:	9e 3f       	cpi	r25, 0xFE	; 254
    2064:	08 f0       	brcs	.+2      	; 0x2068 <__addsf3x+0x9a>
    2066:	b0 cf       	rjmp	.-160    	; 0x1fc8 <__addsf3+0x28>
    2068:	93 95       	inc	r25
    206a:	88 0f       	add	r24, r24
    206c:	08 f0       	brcs	.+2      	; 0x2070 <__addsf3x+0xa2>
    206e:	99 27       	eor	r25, r25
    2070:	ee 0f       	add	r30, r30
    2072:	97 95       	ror	r25
    2074:	87 95       	ror	r24
    2076:	08 95       	ret

00002078 <__cmpsf2>:
    2078:	0e 94 1f 11 	call	0x223e	; 0x223e <__fp_cmp>
    207c:	08 f4       	brcc	.+2      	; 0x2080 <__cmpsf2+0x8>
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	08 95       	ret

00002082 <__divsf3>:
    2082:	0e 94 55 10 	call	0x20aa	; 0x20aa <__divsf3x>
    2086:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__fp_round>
    208a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__fp_pscB>
    208e:	58 f0       	brcs	.+22     	; 0x20a6 <__divsf3+0x24>
    2090:	0e 94 4c 11 	call	0x2298	; 0x2298 <__fp_pscA>
    2094:	40 f0       	brcs	.+16     	; 0x20a6 <__divsf3+0x24>
    2096:	29 f4       	brne	.+10     	; 0x20a2 <__divsf3+0x20>
    2098:	5f 3f       	cpi	r21, 0xFF	; 255
    209a:	29 f0       	breq	.+10     	; 0x20a6 <__divsf3+0x24>
    209c:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__fp_inf>
    20a0:	51 11       	cpse	r21, r1
    20a2:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__fp_szero>
    20a6:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__fp_nan>

000020aa <__divsf3x>:
    20aa:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fp_split3>
    20ae:	68 f3       	brcs	.-38     	; 0x208a <__divsf3+0x8>

000020b0 <__divsf3_pse>:
    20b0:	99 23       	and	r25, r25
    20b2:	b1 f3       	breq	.-20     	; 0x20a0 <__divsf3+0x1e>
    20b4:	55 23       	and	r21, r21
    20b6:	91 f3       	breq	.-28     	; 0x209c <__divsf3+0x1a>
    20b8:	95 1b       	sub	r25, r21
    20ba:	55 0b       	sbc	r21, r21
    20bc:	bb 27       	eor	r27, r27
    20be:	aa 27       	eor	r26, r26
    20c0:	62 17       	cp	r22, r18
    20c2:	73 07       	cpc	r23, r19
    20c4:	84 07       	cpc	r24, r20
    20c6:	38 f0       	brcs	.+14     	; 0x20d6 <__divsf3_pse+0x26>
    20c8:	9f 5f       	subi	r25, 0xFF	; 255
    20ca:	5f 4f       	sbci	r21, 0xFF	; 255
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	44 1f       	adc	r20, r20
    20d2:	aa 1f       	adc	r26, r26
    20d4:	a9 f3       	breq	.-22     	; 0x20c0 <__divsf3_pse+0x10>
    20d6:	35 d0       	rcall	.+106    	; 0x2142 <__divsf3_pse+0x92>
    20d8:	0e 2e       	mov	r0, r30
    20da:	3a f0       	brmi	.+14     	; 0x20ea <__divsf3_pse+0x3a>
    20dc:	e0 e8       	ldi	r30, 0x80	; 128
    20de:	32 d0       	rcall	.+100    	; 0x2144 <__divsf3_pse+0x94>
    20e0:	91 50       	subi	r25, 0x01	; 1
    20e2:	50 40       	sbci	r21, 0x00	; 0
    20e4:	e6 95       	lsr	r30
    20e6:	00 1c       	adc	r0, r0
    20e8:	ca f7       	brpl	.-14     	; 0x20dc <__divsf3_pse+0x2c>
    20ea:	2b d0       	rcall	.+86     	; 0x2142 <__divsf3_pse+0x92>
    20ec:	fe 2f       	mov	r31, r30
    20ee:	29 d0       	rcall	.+82     	; 0x2142 <__divsf3_pse+0x92>
    20f0:	66 0f       	add	r22, r22
    20f2:	77 1f       	adc	r23, r23
    20f4:	88 1f       	adc	r24, r24
    20f6:	bb 1f       	adc	r27, r27
    20f8:	26 17       	cp	r18, r22
    20fa:	37 07       	cpc	r19, r23
    20fc:	48 07       	cpc	r20, r24
    20fe:	ab 07       	cpc	r26, r27
    2100:	b0 e8       	ldi	r27, 0x80	; 128
    2102:	09 f0       	breq	.+2      	; 0x2106 <__divsf3_pse+0x56>
    2104:	bb 0b       	sbc	r27, r27
    2106:	80 2d       	mov	r24, r0
    2108:	bf 01       	movw	r22, r30
    210a:	ff 27       	eor	r31, r31
    210c:	93 58       	subi	r25, 0x83	; 131
    210e:	5f 4f       	sbci	r21, 0xFF	; 255
    2110:	3a f0       	brmi	.+14     	; 0x2120 <__divsf3_pse+0x70>
    2112:	9e 3f       	cpi	r25, 0xFE	; 254
    2114:	51 05       	cpc	r21, r1
    2116:	78 f0       	brcs	.+30     	; 0x2136 <__divsf3_pse+0x86>
    2118:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__fp_inf>
    211c:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__fp_szero>
    2120:	5f 3f       	cpi	r21, 0xFF	; 255
    2122:	e4 f3       	brlt	.-8      	; 0x211c <__divsf3_pse+0x6c>
    2124:	98 3e       	cpi	r25, 0xE8	; 232
    2126:	d4 f3       	brlt	.-12     	; 0x211c <__divsf3_pse+0x6c>
    2128:	86 95       	lsr	r24
    212a:	77 95       	ror	r23
    212c:	67 95       	ror	r22
    212e:	b7 95       	ror	r27
    2130:	f7 95       	ror	r31
    2132:	9f 5f       	subi	r25, 0xFF	; 255
    2134:	c9 f7       	brne	.-14     	; 0x2128 <__divsf3_pse+0x78>
    2136:	88 0f       	add	r24, r24
    2138:	91 1d       	adc	r25, r1
    213a:	96 95       	lsr	r25
    213c:	87 95       	ror	r24
    213e:	97 f9       	bld	r25, 7
    2140:	08 95       	ret
    2142:	e1 e0       	ldi	r30, 0x01	; 1
    2144:	66 0f       	add	r22, r22
    2146:	77 1f       	adc	r23, r23
    2148:	88 1f       	adc	r24, r24
    214a:	bb 1f       	adc	r27, r27
    214c:	62 17       	cp	r22, r18
    214e:	73 07       	cpc	r23, r19
    2150:	84 07       	cpc	r24, r20
    2152:	ba 07       	cpc	r27, r26
    2154:	20 f0       	brcs	.+8      	; 0x215e <__divsf3_pse+0xae>
    2156:	62 1b       	sub	r22, r18
    2158:	73 0b       	sbc	r23, r19
    215a:	84 0b       	sbc	r24, r20
    215c:	ba 0b       	sbc	r27, r26
    215e:	ee 1f       	adc	r30, r30
    2160:	88 f7       	brcc	.-30     	; 0x2144 <__divsf3_pse+0x94>
    2162:	e0 95       	com	r30
    2164:	08 95       	ret

00002166 <__fixunssfsi>:
    2166:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__fp_splitA>
    216a:	88 f0       	brcs	.+34     	; 0x218e <__fixunssfsi+0x28>
    216c:	9f 57       	subi	r25, 0x7F	; 127
    216e:	98 f0       	brcs	.+38     	; 0x2196 <__fixunssfsi+0x30>
    2170:	b9 2f       	mov	r27, r25
    2172:	99 27       	eor	r25, r25
    2174:	b7 51       	subi	r27, 0x17	; 23
    2176:	b0 f0       	brcs	.+44     	; 0x21a4 <__fixunssfsi+0x3e>
    2178:	e1 f0       	breq	.+56     	; 0x21b2 <__fixunssfsi+0x4c>
    217a:	66 0f       	add	r22, r22
    217c:	77 1f       	adc	r23, r23
    217e:	88 1f       	adc	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	1a f0       	brmi	.+6      	; 0x218a <__fixunssfsi+0x24>
    2184:	ba 95       	dec	r27
    2186:	c9 f7       	brne	.-14     	; 0x217a <__fixunssfsi+0x14>
    2188:	14 c0       	rjmp	.+40     	; 0x21b2 <__fixunssfsi+0x4c>
    218a:	b1 30       	cpi	r27, 0x01	; 1
    218c:	91 f0       	breq	.+36     	; 0x21b2 <__fixunssfsi+0x4c>
    218e:	0e 94 8d 11 	call	0x231a	; 0x231a <__fp_zero>
    2192:	b1 e0       	ldi	r27, 0x01	; 1
    2194:	08 95       	ret
    2196:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__fp_zero>
    219a:	67 2f       	mov	r22, r23
    219c:	78 2f       	mov	r23, r24
    219e:	88 27       	eor	r24, r24
    21a0:	b8 5f       	subi	r27, 0xF8	; 248
    21a2:	39 f0       	breq	.+14     	; 0x21b2 <__fixunssfsi+0x4c>
    21a4:	b9 3f       	cpi	r27, 0xF9	; 249
    21a6:	cc f3       	brlt	.-14     	; 0x219a <__fixunssfsi+0x34>
    21a8:	86 95       	lsr	r24
    21aa:	77 95       	ror	r23
    21ac:	67 95       	ror	r22
    21ae:	b3 95       	inc	r27
    21b0:	d9 f7       	brne	.-10     	; 0x21a8 <__fixunssfsi+0x42>
    21b2:	3e f4       	brtc	.+14     	; 0x21c2 <__fixunssfsi+0x5c>
    21b4:	90 95       	com	r25
    21b6:	80 95       	com	r24
    21b8:	70 95       	com	r23
    21ba:	61 95       	neg	r22
    21bc:	7f 4f       	sbci	r23, 0xFF	; 255
    21be:	8f 4f       	sbci	r24, 0xFF	; 255
    21c0:	9f 4f       	sbci	r25, 0xFF	; 255
    21c2:	08 95       	ret

000021c4 <__floatunsisf>:
    21c4:	e8 94       	clt
    21c6:	09 c0       	rjmp	.+18     	; 0x21da <__floatsisf+0x12>

000021c8 <__floatsisf>:
    21c8:	97 fb       	bst	r25, 7
    21ca:	3e f4       	brtc	.+14     	; 0x21da <__floatsisf+0x12>
    21cc:	90 95       	com	r25
    21ce:	80 95       	com	r24
    21d0:	70 95       	com	r23
    21d2:	61 95       	neg	r22
    21d4:	7f 4f       	sbci	r23, 0xFF	; 255
    21d6:	8f 4f       	sbci	r24, 0xFF	; 255
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	99 23       	and	r25, r25
    21dc:	a9 f0       	breq	.+42     	; 0x2208 <__floatsisf+0x40>
    21de:	f9 2f       	mov	r31, r25
    21e0:	96 e9       	ldi	r25, 0x96	; 150
    21e2:	bb 27       	eor	r27, r27
    21e4:	93 95       	inc	r25
    21e6:	f6 95       	lsr	r31
    21e8:	87 95       	ror	r24
    21ea:	77 95       	ror	r23
    21ec:	67 95       	ror	r22
    21ee:	b7 95       	ror	r27
    21f0:	f1 11       	cpse	r31, r1
    21f2:	f8 cf       	rjmp	.-16     	; 0x21e4 <__floatsisf+0x1c>
    21f4:	fa f4       	brpl	.+62     	; 0x2234 <__floatsisf+0x6c>
    21f6:	bb 0f       	add	r27, r27
    21f8:	11 f4       	brne	.+4      	; 0x21fe <__floatsisf+0x36>
    21fa:	60 ff       	sbrs	r22, 0
    21fc:	1b c0       	rjmp	.+54     	; 0x2234 <__floatsisf+0x6c>
    21fe:	6f 5f       	subi	r22, 0xFF	; 255
    2200:	7f 4f       	sbci	r23, 0xFF	; 255
    2202:	8f 4f       	sbci	r24, 0xFF	; 255
    2204:	9f 4f       	sbci	r25, 0xFF	; 255
    2206:	16 c0       	rjmp	.+44     	; 0x2234 <__floatsisf+0x6c>
    2208:	88 23       	and	r24, r24
    220a:	11 f0       	breq	.+4      	; 0x2210 <__floatsisf+0x48>
    220c:	96 e9       	ldi	r25, 0x96	; 150
    220e:	11 c0       	rjmp	.+34     	; 0x2232 <__floatsisf+0x6a>
    2210:	77 23       	and	r23, r23
    2212:	21 f0       	breq	.+8      	; 0x221c <__floatsisf+0x54>
    2214:	9e e8       	ldi	r25, 0x8E	; 142
    2216:	87 2f       	mov	r24, r23
    2218:	76 2f       	mov	r23, r22
    221a:	05 c0       	rjmp	.+10     	; 0x2226 <__floatsisf+0x5e>
    221c:	66 23       	and	r22, r22
    221e:	71 f0       	breq	.+28     	; 0x223c <__floatsisf+0x74>
    2220:	96 e8       	ldi	r25, 0x86	; 134
    2222:	86 2f       	mov	r24, r22
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	2a f0       	brmi	.+10     	; 0x2234 <__floatsisf+0x6c>
    222a:	9a 95       	dec	r25
    222c:	66 0f       	add	r22, r22
    222e:	77 1f       	adc	r23, r23
    2230:	88 1f       	adc	r24, r24
    2232:	da f7       	brpl	.-10     	; 0x222a <__floatsisf+0x62>
    2234:	88 0f       	add	r24, r24
    2236:	96 95       	lsr	r25
    2238:	87 95       	ror	r24
    223a:	97 f9       	bld	r25, 7
    223c:	08 95       	ret

0000223e <__fp_cmp>:
    223e:	99 0f       	add	r25, r25
    2240:	00 08       	sbc	r0, r0
    2242:	55 0f       	add	r21, r21
    2244:	aa 0b       	sbc	r26, r26
    2246:	e0 e8       	ldi	r30, 0x80	; 128
    2248:	fe ef       	ldi	r31, 0xFE	; 254
    224a:	16 16       	cp	r1, r22
    224c:	17 06       	cpc	r1, r23
    224e:	e8 07       	cpc	r30, r24
    2250:	f9 07       	cpc	r31, r25
    2252:	c0 f0       	brcs	.+48     	; 0x2284 <__fp_cmp+0x46>
    2254:	12 16       	cp	r1, r18
    2256:	13 06       	cpc	r1, r19
    2258:	e4 07       	cpc	r30, r20
    225a:	f5 07       	cpc	r31, r21
    225c:	98 f0       	brcs	.+38     	; 0x2284 <__fp_cmp+0x46>
    225e:	62 1b       	sub	r22, r18
    2260:	73 0b       	sbc	r23, r19
    2262:	84 0b       	sbc	r24, r20
    2264:	95 0b       	sbc	r25, r21
    2266:	39 f4       	brne	.+14     	; 0x2276 <__fp_cmp+0x38>
    2268:	0a 26       	eor	r0, r26
    226a:	61 f0       	breq	.+24     	; 0x2284 <__fp_cmp+0x46>
    226c:	23 2b       	or	r18, r19
    226e:	24 2b       	or	r18, r20
    2270:	25 2b       	or	r18, r21
    2272:	21 f4       	brne	.+8      	; 0x227c <__fp_cmp+0x3e>
    2274:	08 95       	ret
    2276:	0a 26       	eor	r0, r26
    2278:	09 f4       	brne	.+2      	; 0x227c <__fp_cmp+0x3e>
    227a:	a1 40       	sbci	r26, 0x01	; 1
    227c:	a6 95       	lsr	r26
    227e:	8f ef       	ldi	r24, 0xFF	; 255
    2280:	81 1d       	adc	r24, r1
    2282:	81 1d       	adc	r24, r1
    2284:	08 95       	ret

00002286 <__fp_inf>:
    2286:	97 f9       	bld	r25, 7
    2288:	9f 67       	ori	r25, 0x7F	; 127
    228a:	80 e8       	ldi	r24, 0x80	; 128
    228c:	70 e0       	ldi	r23, 0x00	; 0
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	08 95       	ret

00002292 <__fp_nan>:
    2292:	9f ef       	ldi	r25, 0xFF	; 255
    2294:	80 ec       	ldi	r24, 0xC0	; 192
    2296:	08 95       	ret

00002298 <__fp_pscA>:
    2298:	00 24       	eor	r0, r0
    229a:	0a 94       	dec	r0
    229c:	16 16       	cp	r1, r22
    229e:	17 06       	cpc	r1, r23
    22a0:	18 06       	cpc	r1, r24
    22a2:	09 06       	cpc	r0, r25
    22a4:	08 95       	ret

000022a6 <__fp_pscB>:
    22a6:	00 24       	eor	r0, r0
    22a8:	0a 94       	dec	r0
    22aa:	12 16       	cp	r1, r18
    22ac:	13 06       	cpc	r1, r19
    22ae:	14 06       	cpc	r1, r20
    22b0:	05 06       	cpc	r0, r21
    22b2:	08 95       	ret

000022b4 <__fp_round>:
    22b4:	09 2e       	mov	r0, r25
    22b6:	03 94       	inc	r0
    22b8:	00 0c       	add	r0, r0
    22ba:	11 f4       	brne	.+4      	; 0x22c0 <__fp_round+0xc>
    22bc:	88 23       	and	r24, r24
    22be:	52 f0       	brmi	.+20     	; 0x22d4 <__fp_round+0x20>
    22c0:	bb 0f       	add	r27, r27
    22c2:	40 f4       	brcc	.+16     	; 0x22d4 <__fp_round+0x20>
    22c4:	bf 2b       	or	r27, r31
    22c6:	11 f4       	brne	.+4      	; 0x22cc <__fp_round+0x18>
    22c8:	60 ff       	sbrs	r22, 0
    22ca:	04 c0       	rjmp	.+8      	; 0x22d4 <__fp_round+0x20>
    22cc:	6f 5f       	subi	r22, 0xFF	; 255
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	8f 4f       	sbci	r24, 0xFF	; 255
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	08 95       	ret

000022d6 <__fp_split3>:
    22d6:	57 fd       	sbrc	r21, 7
    22d8:	90 58       	subi	r25, 0x80	; 128
    22da:	44 0f       	add	r20, r20
    22dc:	55 1f       	adc	r21, r21
    22de:	59 f0       	breq	.+22     	; 0x22f6 <__fp_splitA+0x10>
    22e0:	5f 3f       	cpi	r21, 0xFF	; 255
    22e2:	71 f0       	breq	.+28     	; 0x2300 <__fp_splitA+0x1a>
    22e4:	47 95       	ror	r20

000022e6 <__fp_splitA>:
    22e6:	88 0f       	add	r24, r24
    22e8:	97 fb       	bst	r25, 7
    22ea:	99 1f       	adc	r25, r25
    22ec:	61 f0       	breq	.+24     	; 0x2306 <__fp_splitA+0x20>
    22ee:	9f 3f       	cpi	r25, 0xFF	; 255
    22f0:	79 f0       	breq	.+30     	; 0x2310 <__fp_splitA+0x2a>
    22f2:	87 95       	ror	r24
    22f4:	08 95       	ret
    22f6:	12 16       	cp	r1, r18
    22f8:	13 06       	cpc	r1, r19
    22fa:	14 06       	cpc	r1, r20
    22fc:	55 1f       	adc	r21, r21
    22fe:	f2 cf       	rjmp	.-28     	; 0x22e4 <__fp_split3+0xe>
    2300:	46 95       	lsr	r20
    2302:	f1 df       	rcall	.-30     	; 0x22e6 <__fp_splitA>
    2304:	08 c0       	rjmp	.+16     	; 0x2316 <__fp_splitA+0x30>
    2306:	16 16       	cp	r1, r22
    2308:	17 06       	cpc	r1, r23
    230a:	18 06       	cpc	r1, r24
    230c:	99 1f       	adc	r25, r25
    230e:	f1 cf       	rjmp	.-30     	; 0x22f2 <__fp_splitA+0xc>
    2310:	86 95       	lsr	r24
    2312:	71 05       	cpc	r23, r1
    2314:	61 05       	cpc	r22, r1
    2316:	08 94       	sec
    2318:	08 95       	ret

0000231a <__fp_zero>:
    231a:	e8 94       	clt

0000231c <__fp_szero>:
    231c:	bb 27       	eor	r27, r27
    231e:	66 27       	eor	r22, r22
    2320:	77 27       	eor	r23, r23
    2322:	cb 01       	movw	r24, r22
    2324:	97 f9       	bld	r25, 7
    2326:	08 95       	ret

00002328 <__gesf2>:
    2328:	0e 94 1f 11 	call	0x223e	; 0x223e <__fp_cmp>
    232c:	08 f4       	brcc	.+2      	; 0x2330 <__gesf2+0x8>
    232e:	8f ef       	ldi	r24, 0xFF	; 255
    2330:	08 95       	ret

00002332 <__mulsf3>:
    2332:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3x>
    2336:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__fp_round>
    233a:	0e 94 4c 11 	call	0x2298	; 0x2298 <__fp_pscA>
    233e:	38 f0       	brcs	.+14     	; 0x234e <__mulsf3+0x1c>
    2340:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__fp_pscB>
    2344:	20 f0       	brcs	.+8      	; 0x234e <__mulsf3+0x1c>
    2346:	95 23       	and	r25, r21
    2348:	11 f0       	breq	.+4      	; 0x234e <__mulsf3+0x1c>
    234a:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__fp_inf>
    234e:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__fp_nan>
    2352:	11 24       	eor	r1, r1
    2354:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__fp_szero>

00002358 <__mulsf3x>:
    2358:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fp_split3>
    235c:	70 f3       	brcs	.-36     	; 0x233a <__mulsf3+0x8>

0000235e <__mulsf3_pse>:
    235e:	95 9f       	mul	r25, r21
    2360:	c1 f3       	breq	.-16     	; 0x2352 <__mulsf3+0x20>
    2362:	95 0f       	add	r25, r21
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	55 1f       	adc	r21, r21
    2368:	62 9f       	mul	r22, r18
    236a:	f0 01       	movw	r30, r0
    236c:	72 9f       	mul	r23, r18
    236e:	bb 27       	eor	r27, r27
    2370:	f0 0d       	add	r31, r0
    2372:	b1 1d       	adc	r27, r1
    2374:	63 9f       	mul	r22, r19
    2376:	aa 27       	eor	r26, r26
    2378:	f0 0d       	add	r31, r0
    237a:	b1 1d       	adc	r27, r1
    237c:	aa 1f       	adc	r26, r26
    237e:	64 9f       	mul	r22, r20
    2380:	66 27       	eor	r22, r22
    2382:	b0 0d       	add	r27, r0
    2384:	a1 1d       	adc	r26, r1
    2386:	66 1f       	adc	r22, r22
    2388:	82 9f       	mul	r24, r18
    238a:	22 27       	eor	r18, r18
    238c:	b0 0d       	add	r27, r0
    238e:	a1 1d       	adc	r26, r1
    2390:	62 1f       	adc	r22, r18
    2392:	73 9f       	mul	r23, r19
    2394:	b0 0d       	add	r27, r0
    2396:	a1 1d       	adc	r26, r1
    2398:	62 1f       	adc	r22, r18
    239a:	83 9f       	mul	r24, r19
    239c:	a0 0d       	add	r26, r0
    239e:	61 1d       	adc	r22, r1
    23a0:	22 1f       	adc	r18, r18
    23a2:	74 9f       	mul	r23, r20
    23a4:	33 27       	eor	r19, r19
    23a6:	a0 0d       	add	r26, r0
    23a8:	61 1d       	adc	r22, r1
    23aa:	23 1f       	adc	r18, r19
    23ac:	84 9f       	mul	r24, r20
    23ae:	60 0d       	add	r22, r0
    23b0:	21 1d       	adc	r18, r1
    23b2:	82 2f       	mov	r24, r18
    23b4:	76 2f       	mov	r23, r22
    23b6:	6a 2f       	mov	r22, r26
    23b8:	11 24       	eor	r1, r1
    23ba:	9f 57       	subi	r25, 0x7F	; 127
    23bc:	50 40       	sbci	r21, 0x00	; 0
    23be:	9a f0       	brmi	.+38     	; 0x23e6 <__mulsf3_pse+0x88>
    23c0:	f1 f0       	breq	.+60     	; 0x23fe <__mulsf3_pse+0xa0>
    23c2:	88 23       	and	r24, r24
    23c4:	4a f0       	brmi	.+18     	; 0x23d8 <__mulsf3_pse+0x7a>
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	bb 1f       	adc	r27, r27
    23cc:	66 1f       	adc	r22, r22
    23ce:	77 1f       	adc	r23, r23
    23d0:	88 1f       	adc	r24, r24
    23d2:	91 50       	subi	r25, 0x01	; 1
    23d4:	50 40       	sbci	r21, 0x00	; 0
    23d6:	a9 f7       	brne	.-22     	; 0x23c2 <__mulsf3_pse+0x64>
    23d8:	9e 3f       	cpi	r25, 0xFE	; 254
    23da:	51 05       	cpc	r21, r1
    23dc:	80 f0       	brcs	.+32     	; 0x23fe <__mulsf3_pse+0xa0>
    23de:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__fp_inf>
    23e2:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__fp_szero>
    23e6:	5f 3f       	cpi	r21, 0xFF	; 255
    23e8:	e4 f3       	brlt	.-8      	; 0x23e2 <__mulsf3_pse+0x84>
    23ea:	98 3e       	cpi	r25, 0xE8	; 232
    23ec:	d4 f3       	brlt	.-12     	; 0x23e2 <__mulsf3_pse+0x84>
    23ee:	86 95       	lsr	r24
    23f0:	77 95       	ror	r23
    23f2:	67 95       	ror	r22
    23f4:	b7 95       	ror	r27
    23f6:	f7 95       	ror	r31
    23f8:	e7 95       	ror	r30
    23fa:	9f 5f       	subi	r25, 0xFF	; 255
    23fc:	c1 f7       	brne	.-16     	; 0x23ee <__mulsf3_pse+0x90>
    23fe:	fe 2b       	or	r31, r30
    2400:	88 0f       	add	r24, r24
    2402:	91 1d       	adc	r25, r1
    2404:	96 95       	lsr	r25
    2406:	87 95       	ror	r24
    2408:	97 f9       	bld	r25, 7
    240a:	08 95       	ret

0000240c <atof>:
    240c:	66 27       	eor	r22, r22
    240e:	77 27       	eor	r23, r23
    2410:	0c 94 22 12 	jmp	0x2444	; 0x2444 <strtod>

00002414 <strcmp>:
    2414:	fb 01       	movw	r30, r22
    2416:	dc 01       	movw	r26, r24
    2418:	8d 91       	ld	r24, X+
    241a:	01 90       	ld	r0, Z+
    241c:	80 19       	sub	r24, r0
    241e:	01 10       	cpse	r0, r1
    2420:	d9 f3       	breq	.-10     	; 0x2418 <strcmp+0x4>
    2422:	99 0b       	sbc	r25, r25
    2424:	08 95       	ret

00002426 <strncpy>:
    2426:	fb 01       	movw	r30, r22
    2428:	dc 01       	movw	r26, r24
    242a:	41 50       	subi	r20, 0x01	; 1
    242c:	50 40       	sbci	r21, 0x00	; 0
    242e:	48 f0       	brcs	.+18     	; 0x2442 <strncpy+0x1c>
    2430:	01 90       	ld	r0, Z+
    2432:	0d 92       	st	X+, r0
    2434:	00 20       	and	r0, r0
    2436:	c9 f7       	brne	.-14     	; 0x242a <strncpy+0x4>
    2438:	01 c0       	rjmp	.+2      	; 0x243c <strncpy+0x16>
    243a:	1d 92       	st	X+, r1
    243c:	41 50       	subi	r20, 0x01	; 1
    243e:	50 40       	sbci	r21, 0x00	; 0
    2440:	e0 f7       	brcc	.-8      	; 0x243a <strncpy+0x14>
    2442:	08 95       	ret

00002444 <strtod>:
    2444:	a0 e0       	ldi	r26, 0x00	; 0
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e8 e2       	ldi	r30, 0x28	; 40
    244a:	f2 e1       	ldi	r31, 0x12	; 18
    244c:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__prologue_saves__+0xc>
    2450:	ec 01       	movw	r28, r24
    2452:	6b 01       	movw	r12, r22
    2454:	61 15       	cp	r22, r1
    2456:	71 05       	cpc	r23, r1
    2458:	19 f0       	breq	.+6      	; 0x2460 <strtod+0x1c>
    245a:	fb 01       	movw	r30, r22
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
    2460:	7e 01       	movw	r14, r28
    2462:	ff ef       	ldi	r31, 0xFF	; 255
    2464:	ef 1a       	sub	r14, r31
    2466:	ff 0a       	sbc	r15, r31
    2468:	08 81       	ld	r16, Y
    246a:	80 2f       	mov	r24, r16
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <isspace>
    2472:	89 2b       	or	r24, r25
    2474:	11 f0       	breq	.+4      	; 0x247a <strtod+0x36>
    2476:	e7 01       	movw	r28, r14
    2478:	f3 cf       	rjmp	.-26     	; 0x2460 <strtod+0x1c>
    247a:	0d 32       	cpi	r16, 0x2D	; 45
    247c:	39 f4       	brne	.+14     	; 0x248c <strtod+0x48>
    247e:	7e 01       	movw	r14, r28
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	e8 0e       	add	r14, r24
    2484:	f1 1c       	adc	r15, r1
    2486:	09 81       	ldd	r16, Y+1	; 0x01
    2488:	11 e0       	ldi	r17, 0x01	; 1
    248a:	08 c0       	rjmp	.+16     	; 0x249c <strtod+0x58>
    248c:	0b 32       	cpi	r16, 0x2B	; 43
    248e:	29 f4       	brne	.+10     	; 0x249a <strtod+0x56>
    2490:	7e 01       	movw	r14, r28
    2492:	92 e0       	ldi	r25, 0x02	; 2
    2494:	e9 0e       	add	r14, r25
    2496:	f1 1c       	adc	r15, r1
    2498:	09 81       	ldd	r16, Y+1	; 0x01
    249a:	10 e0       	ldi	r17, 0x00	; 0
    249c:	e7 01       	movw	r28, r14
    249e:	21 97       	sbiw	r28, 0x01	; 1
    24a0:	43 e0       	ldi	r20, 0x03	; 3
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	6c e5       	ldi	r22, 0x5C	; 92
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	ce 01       	movw	r24, r28
    24aa:	0e 94 79 13 	call	0x26f2	; 0x26f2 <strncasecmp_P>
    24ae:	89 2b       	or	r24, r25
    24b0:	c1 f4       	brne	.+48     	; 0x24e2 <strtod+0x9e>
    24b2:	23 96       	adiw	r28, 0x03	; 3
    24b4:	45 e0       	ldi	r20, 0x05	; 5
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	67 e5       	ldi	r22, 0x57	; 87
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	ce 01       	movw	r24, r28
    24be:	0e 94 79 13 	call	0x26f2	; 0x26f2 <strncasecmp_P>
    24c2:	89 2b       	or	r24, r25
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <strtod+0x84>
    24c6:	25 96       	adiw	r28, 0x05	; 5
    24c8:	c1 14       	cp	r12, r1
    24ca:	d1 04       	cpc	r13, r1
    24cc:	19 f0       	breq	.+6      	; 0x24d4 <strtod+0x90>
    24ce:	f6 01       	movw	r30, r12
    24d0:	d1 83       	std	Z+1, r29	; 0x01
    24d2:	c0 83       	st	Z, r28
    24d4:	11 11       	cpse	r17, r1
    24d6:	f6 c0       	rjmp	.+492    	; 0x26c4 <strtod+0x280>
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	80 e8       	ldi	r24, 0x80	; 128
    24de:	9f e7       	ldi	r25, 0x7F	; 127
    24e0:	fa c0       	rjmp	.+500    	; 0x26d6 <strtod+0x292>
    24e2:	43 e0       	ldi	r20, 0x03	; 3
    24e4:	50 e0       	ldi	r21, 0x00	; 0
    24e6:	64 e5       	ldi	r22, 0x54	; 84
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	ce 01       	movw	r24, r28
    24ec:	0e 94 79 13 	call	0x26f2	; 0x26f2 <strncasecmp_P>
    24f0:	89 2b       	or	r24, r25
    24f2:	59 f4       	brne	.+22     	; 0x250a <strtod+0xc6>
    24f4:	c1 14       	cp	r12, r1
    24f6:	d1 04       	cpc	r13, r1
    24f8:	09 f4       	brne	.+2      	; 0x24fc <strtod+0xb8>
    24fa:	e9 c0       	rjmp	.+466    	; 0x26ce <strtod+0x28a>
    24fc:	f2 e0       	ldi	r31, 0x02	; 2
    24fe:	ef 0e       	add	r14, r31
    2500:	f1 1c       	adc	r15, r1
    2502:	f6 01       	movw	r30, r12
    2504:	f1 82       	std	Z+1, r15	; 0x01
    2506:	e0 82       	st	Z, r14
    2508:	e2 c0       	rjmp	.+452    	; 0x26ce <strtod+0x28a>
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	a9 01       	movw	r20, r18
    2510:	c0 e0       	ldi	r28, 0x00	; 0
    2512:	d0 e0       	ldi	r29, 0x00	; 0
    2514:	f7 01       	movw	r30, r14
    2516:	80 ed       	ldi	r24, 0xD0	; 208
    2518:	a8 2e       	mov	r10, r24
    251a:	a0 0e       	add	r10, r16
    251c:	89 e0       	ldi	r24, 0x09	; 9
    251e:	8a 15       	cp	r24, r10
    2520:	30 f1       	brcs	.+76     	; 0x256e <strtod+0x12a>
    2522:	91 2f       	mov	r25, r17
    2524:	92 60       	ori	r25, 0x02	; 2
    2526:	b9 2e       	mov	r11, r25
    2528:	81 2f       	mov	r24, r17
    252a:	88 70       	andi	r24, 0x08	; 8
    252c:	12 ff       	sbrs	r17, 2
    252e:	04 c0       	rjmp	.+8      	; 0x2538 <strtod+0xf4>
    2530:	81 11       	cpse	r24, r1
    2532:	24 c0       	rjmp	.+72     	; 0x257c <strtod+0x138>
    2534:	21 96       	adiw	r28, 0x01	; 1
    2536:	22 c0       	rjmp	.+68     	; 0x257c <strtod+0x138>
    2538:	81 11       	cpse	r24, r1
    253a:	21 97       	sbiw	r28, 0x01	; 1
    253c:	a5 e0       	ldi	r26, 0x05	; 5
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	0e 94 94 13 	call	0x2728	; 0x2728 <__muluhisi3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	aa 1f       	adc	r26, r26
    254e:	bb 1f       	adc	r27, r27
    2550:	9c 01       	movw	r18, r24
    2552:	ad 01       	movw	r20, r26
    2554:	2a 0d       	add	r18, r10
    2556:	31 1d       	adc	r19, r1
    2558:	41 1d       	adc	r20, r1
    255a:	51 1d       	adc	r21, r1
    255c:	28 39       	cpi	r18, 0x98	; 152
    255e:	89 e9       	ldi	r24, 0x99	; 153
    2560:	38 07       	cpc	r19, r24
    2562:	48 07       	cpc	r20, r24
    2564:	89 e1       	ldi	r24, 0x19	; 25
    2566:	58 07       	cpc	r21, r24
    2568:	48 f0       	brcs	.+18     	; 0x257c <strtod+0x138>
    256a:	16 60       	ori	r17, 0x06	; 6
    256c:	06 c0       	rjmp	.+12     	; 0x257a <strtod+0x136>
    256e:	9e ef       	ldi	r25, 0xFE	; 254
    2570:	a9 12       	cpse	r10, r25
    2572:	0a c0       	rjmp	.+20     	; 0x2588 <strtod+0x144>
    2574:	13 fd       	sbrc	r17, 3
    2576:	40 c0       	rjmp	.+128    	; 0x25f8 <strtod+0x1b4>
    2578:	18 60       	ori	r17, 0x08	; 8
    257a:	b1 2e       	mov	r11, r17
    257c:	8f ef       	ldi	r24, 0xFF	; 255
    257e:	e8 1a       	sub	r14, r24
    2580:	f8 0a       	sbc	r15, r24
    2582:	00 81       	ld	r16, Z
    2584:	1b 2d       	mov	r17, r11
    2586:	c6 cf       	rjmp	.-116    	; 0x2514 <strtod+0xd0>
    2588:	80 2f       	mov	r24, r16
    258a:	8f 7d       	andi	r24, 0xDF	; 223
    258c:	85 34       	cpi	r24, 0x45	; 69
    258e:	a1 f5       	brne	.+104    	; 0x25f8 <strtod+0x1b4>
    2590:	80 81       	ld	r24, Z
    2592:	8d 32       	cpi	r24, 0x2D	; 45
    2594:	11 f4       	brne	.+4      	; 0x259a <strtod+0x156>
    2596:	10 61       	ori	r17, 0x10	; 16
    2598:	06 c0       	rjmp	.+12     	; 0x25a6 <strtod+0x162>
    259a:	8b 32       	cpi	r24, 0x2B	; 43
    259c:	21 f0       	breq	.+8      	; 0x25a6 <strtod+0x162>
    259e:	31 96       	adiw	r30, 0x01	; 1
    25a0:	61 e0       	ldi	r22, 0x01	; 1
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <strtod+0x16a>
    25a6:	81 81       	ldd	r24, Z+1	; 0x01
    25a8:	32 96       	adiw	r30, 0x02	; 2
    25aa:	62 e0       	ldi	r22, 0x02	; 2
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	80 53       	subi	r24, 0x30	; 48
    25b0:	8a 30       	cpi	r24, 0x0A	; 10
    25b2:	18 f0       	brcs	.+6      	; 0x25ba <strtod+0x176>
    25b4:	e6 1b       	sub	r30, r22
    25b6:	f7 0b       	sbc	r31, r23
    25b8:	1f c0       	rjmp	.+62     	; 0x25f8 <strtod+0x1b4>
    25ba:	60 e0       	ldi	r22, 0x00	; 0
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	60 38       	cpi	r22, 0x80	; 128
    25c0:	9c e0       	ldi	r25, 0x0C	; 12
    25c2:	79 07       	cpc	r23, r25
    25c4:	5c f4       	brge	.+22     	; 0x25dc <strtod+0x198>
    25c6:	db 01       	movw	r26, r22
    25c8:	aa 0f       	add	r26, r26
    25ca:	bb 1f       	adc	r27, r27
    25cc:	aa 0f       	add	r26, r26
    25ce:	bb 1f       	adc	r27, r27
    25d0:	6a 0f       	add	r22, r26
    25d2:	7b 1f       	adc	r23, r27
    25d4:	66 0f       	add	r22, r22
    25d6:	77 1f       	adc	r23, r23
    25d8:	68 0f       	add	r22, r24
    25da:	71 1d       	adc	r23, r1
    25dc:	31 96       	adiw	r30, 0x01	; 1
    25de:	df 01       	movw	r26, r30
    25e0:	11 97       	sbiw	r26, 0x01	; 1
    25e2:	8c 91       	ld	r24, X
    25e4:	80 53       	subi	r24, 0x30	; 48
    25e6:	8a 30       	cpi	r24, 0x0A	; 10
    25e8:	50 f3       	brcs	.-44     	; 0x25be <strtod+0x17a>
    25ea:	14 ff       	sbrs	r17, 4
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <strtod+0x1b0>
    25ee:	71 95       	neg	r23
    25f0:	61 95       	neg	r22
    25f2:	71 09       	sbc	r23, r1
    25f4:	c6 0f       	add	r28, r22
    25f6:	d7 1f       	adc	r29, r23
    25f8:	11 ff       	sbrs	r17, 1
    25fa:	08 c0       	rjmp	.+16     	; 0x260c <strtod+0x1c8>
    25fc:	c1 14       	cp	r12, r1
    25fe:	d1 04       	cpc	r13, r1
    2600:	29 f0       	breq	.+10     	; 0x260c <strtod+0x1c8>
    2602:	cf 01       	movw	r24, r30
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f6 01       	movw	r30, r12
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	80 83       	st	Z, r24
    260c:	ca 01       	movw	r24, r20
    260e:	b9 01       	movw	r22, r18
    2610:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__floatunsisf>
    2614:	21 2f       	mov	r18, r17
    2616:	23 70       	andi	r18, 0x03	; 3
    2618:	23 30       	cpi	r18, 0x03	; 3
    261a:	19 f0       	breq	.+6      	; 0x2622 <strtod+0x1de>
    261c:	4b 01       	movw	r8, r22
    261e:	5c 01       	movw	r10, r24
    2620:	06 c0       	rjmp	.+12     	; 0x262e <strtod+0x1ea>
    2622:	4b 01       	movw	r8, r22
    2624:	5c 01       	movw	r10, r24
    2626:	b7 fa       	bst	r11, 7
    2628:	b0 94       	com	r11
    262a:	b7 f8       	bld	r11, 7
    262c:	b0 94       	com	r11
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	a9 01       	movw	r20, r18
    2634:	c5 01       	movw	r24, r10
    2636:	b4 01       	movw	r22, r8
    2638:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    263c:	88 23       	and	r24, r24
    263e:	09 f4       	brne	.+2      	; 0x2642 <strtod+0x1fe>
    2640:	3e c0       	rjmp	.+124    	; 0x26be <strtod+0x27a>
    2642:	d7 ff       	sbrs	r29, 7
    2644:	06 c0       	rjmp	.+12     	; 0x2652 <strtod+0x20e>
    2646:	d1 95       	neg	r29
    2648:	c1 95       	neg	r28
    264a:	d1 09       	sbc	r29, r1
    264c:	03 e7       	ldi	r16, 0x73	; 115
    264e:	10 e0       	ldi	r17, 0x00	; 0
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <strtod+0x212>
    2652:	0b e8       	ldi	r16, 0x8B	; 139
    2654:	10 e0       	ldi	r17, 0x00	; 0
    2656:	68 01       	movw	r12, r16
    2658:	f8 e1       	ldi	r31, 0x18	; 24
    265a:	cf 1a       	sub	r12, r31
    265c:	d1 08       	sbc	r13, r1
    265e:	90 e2       	ldi	r25, 0x20	; 32
    2660:	e9 2e       	mov	r14, r25
    2662:	f1 2c       	mov	r15, r1
    2664:	ce 15       	cp	r28, r14
    2666:	df 05       	cpc	r29, r15
    2668:	74 f0       	brlt	.+28     	; 0x2686 <strtod+0x242>
    266a:	f8 01       	movw	r30, r16
    266c:	25 91       	lpm	r18, Z+
    266e:	35 91       	lpm	r19, Z+
    2670:	45 91       	lpm	r20, Z+
    2672:	54 91       	lpm	r21, Z
    2674:	c5 01       	movw	r24, r10
    2676:	b4 01       	movw	r22, r8
    2678:	0e 94 99 11 	call	0x2332	; 0x2332 <__mulsf3>
    267c:	4b 01       	movw	r8, r22
    267e:	5c 01       	movw	r10, r24
    2680:	ce 19       	sub	r28, r14
    2682:	df 09       	sbc	r29, r15
    2684:	ef cf       	rjmp	.-34     	; 0x2664 <strtod+0x220>
    2686:	04 50       	subi	r16, 0x04	; 4
    2688:	11 09       	sbc	r17, r1
    268a:	f5 94       	asr	r15
    268c:	e7 94       	ror	r14
    268e:	0c 15       	cp	r16, r12
    2690:	1d 05       	cpc	r17, r13
    2692:	41 f7       	brne	.-48     	; 0x2664 <strtod+0x220>
    2694:	8a 2d       	mov	r24, r10
    2696:	88 0f       	add	r24, r24
    2698:	8b 2d       	mov	r24, r11
    269a:	88 1f       	adc	r24, r24
    269c:	8f 3f       	cpi	r24, 0xFF	; 255
    269e:	49 f0       	breq	.+18     	; 0x26b2 <strtod+0x26e>
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	a9 01       	movw	r20, r18
    26a6:	c5 01       	movw	r24, r10
    26a8:	b4 01       	movw	r22, r8
    26aa:	0e 94 3c 10 	call	0x2078	; 0x2078 <__cmpsf2>
    26ae:	81 11       	cpse	r24, r1
    26b0:	06 c0       	rjmp	.+12     	; 0x26be <strtod+0x27a>
    26b2:	82 e2       	ldi	r24, 0x22	; 34
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <errno+0x1>
    26ba:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <errno>
    26be:	c5 01       	movw	r24, r10
    26c0:	b4 01       	movw	r22, r8
    26c2:	09 c0       	rjmp	.+18     	; 0x26d6 <strtod+0x292>
    26c4:	60 e0       	ldi	r22, 0x00	; 0
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	80 e8       	ldi	r24, 0x80	; 128
    26ca:	9f ef       	ldi	r25, 0xFF	; 255
    26cc:	04 c0       	rjmp	.+8      	; 0x26d6 <strtod+0x292>
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	80 ec       	ldi	r24, 0xC0	; 192
    26d4:	9f e7       	ldi	r25, 0x7F	; 127
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	ec e0       	ldi	r30, 0x0C	; 12
    26dc:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__epilogue_restores__+0xc>

000026e0 <isspace>:
    26e0:	91 11       	cpse	r25, r1
    26e2:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__ctype_isfalse>
    26e6:	80 32       	cpi	r24, 0x20	; 32
    26e8:	19 f0       	breq	.+6      	; 0x26f0 <isspace+0x10>
    26ea:	89 50       	subi	r24, 0x09	; 9
    26ec:	85 50       	subi	r24, 0x05	; 5
    26ee:	c8 f7       	brcc	.-14     	; 0x26e2 <isspace+0x2>
    26f0:	08 95       	ret

000026f2 <strncasecmp_P>:
    26f2:	fb 01       	movw	r30, r22
    26f4:	dc 01       	movw	r26, r24
    26f6:	41 50       	subi	r20, 0x01	; 1
    26f8:	50 40       	sbci	r21, 0x00	; 0
    26fa:	88 f0       	brcs	.+34     	; 0x271e <strncasecmp_P+0x2c>
    26fc:	8d 91       	ld	r24, X+
    26fe:	81 34       	cpi	r24, 0x41	; 65
    2700:	1c f0       	brlt	.+6      	; 0x2708 <strncasecmp_P+0x16>
    2702:	8b 35       	cpi	r24, 0x5B	; 91
    2704:	0c f4       	brge	.+2      	; 0x2708 <strncasecmp_P+0x16>
    2706:	80 5e       	subi	r24, 0xE0	; 224
    2708:	65 91       	lpm	r22, Z+
    270a:	61 34       	cpi	r22, 0x41	; 65
    270c:	1c f0       	brlt	.+6      	; 0x2714 <strncasecmp_P+0x22>
    270e:	6b 35       	cpi	r22, 0x5B	; 91
    2710:	0c f4       	brge	.+2      	; 0x2714 <strncasecmp_P+0x22>
    2712:	60 5e       	subi	r22, 0xE0	; 224
    2714:	86 1b       	sub	r24, r22
    2716:	61 11       	cpse	r22, r1
    2718:	71 f3       	breq	.-36     	; 0x26f6 <strncasecmp_P+0x4>
    271a:	99 0b       	sbc	r25, r25
    271c:	08 95       	ret
    271e:	88 1b       	sub	r24, r24
    2720:	fc cf       	rjmp	.-8      	; 0x271a <strncasecmp_P+0x28>

00002722 <__ctype_isfalse>:
    2722:	99 27       	eor	r25, r25
    2724:	88 27       	eor	r24, r24

00002726 <__ctype_istrue>:
    2726:	08 95       	ret

00002728 <__muluhisi3>:
    2728:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__umulhisi3>
    272c:	a5 9f       	mul	r26, r21
    272e:	90 0d       	add	r25, r0
    2730:	b4 9f       	mul	r27, r20
    2732:	90 0d       	add	r25, r0
    2734:	a4 9f       	mul	r26, r20
    2736:	80 0d       	add	r24, r0
    2738:	91 1d       	adc	r25, r1
    273a:	11 24       	eor	r1, r1
    273c:	08 95       	ret

0000273e <__prologue_saves__>:
    273e:	2f 92       	push	r2
    2740:	3f 92       	push	r3
    2742:	4f 92       	push	r4
    2744:	5f 92       	push	r5
    2746:	6f 92       	push	r6
    2748:	7f 92       	push	r7
    274a:	8f 92       	push	r8
    274c:	9f 92       	push	r9
    274e:	af 92       	push	r10
    2750:	bf 92       	push	r11
    2752:	cf 92       	push	r12
    2754:	df 92       	push	r13
    2756:	ef 92       	push	r14
    2758:	ff 92       	push	r15
    275a:	0f 93       	push	r16
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	ca 1b       	sub	r28, r26
    2768:	db 0b       	sbc	r29, r27
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	09 94       	ijmp

00002776 <__epilogue_restores__>:
    2776:	2a 88       	ldd	r2, Y+18	; 0x12
    2778:	39 88       	ldd	r3, Y+17	; 0x11
    277a:	48 88       	ldd	r4, Y+16	; 0x10
    277c:	5f 84       	ldd	r5, Y+15	; 0x0f
    277e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2780:	7d 84       	ldd	r7, Y+13	; 0x0d
    2782:	8c 84       	ldd	r8, Y+12	; 0x0c
    2784:	9b 84       	ldd	r9, Y+11	; 0x0b
    2786:	aa 84       	ldd	r10, Y+10	; 0x0a
    2788:	b9 84       	ldd	r11, Y+9	; 0x09
    278a:	c8 84       	ldd	r12, Y+8	; 0x08
    278c:	df 80       	ldd	r13, Y+7	; 0x07
    278e:	ee 80       	ldd	r14, Y+6	; 0x06
    2790:	fd 80       	ldd	r15, Y+5	; 0x05
    2792:	0c 81       	ldd	r16, Y+4	; 0x04
    2794:	1b 81       	ldd	r17, Y+3	; 0x03
    2796:	aa 81       	ldd	r26, Y+2	; 0x02
    2798:	b9 81       	ldd	r27, Y+1	; 0x01
    279a:	ce 0f       	add	r28, r30
    279c:	d1 1d       	adc	r29, r1
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	ed 01       	movw	r28, r26
    27aa:	08 95       	ret

000027ac <__umulhisi3>:
    27ac:	a2 9f       	mul	r26, r18
    27ae:	b0 01       	movw	r22, r0
    27b0:	b3 9f       	mul	r27, r19
    27b2:	c0 01       	movw	r24, r0
    27b4:	a3 9f       	mul	r26, r19
    27b6:	70 0d       	add	r23, r0
    27b8:	81 1d       	adc	r24, r1
    27ba:	11 24       	eor	r1, r1
    27bc:	91 1d       	adc	r25, r1
    27be:	b2 9f       	mul	r27, r18
    27c0:	70 0d       	add	r23, r0
    27c2:	81 1d       	adc	r24, r1
    27c4:	11 24       	eor	r1, r1
    27c6:	91 1d       	adc	r25, r1
    27c8:	08 95       	ret

000027ca <_exit>:
    27ca:	f8 94       	cli

000027cc <__stop_program>:
    27cc:	ff cf       	rjmp	.-2      	; 0x27cc <__stop_program>
