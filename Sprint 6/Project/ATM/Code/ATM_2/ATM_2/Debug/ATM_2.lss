
ATM_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000279a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  0000279a  0000282e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  0080016e  0080016e  0000293c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002998  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c78  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9c  00000000  00000000  00005884  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000199b  00000000  00000000  00006720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000082c  00000000  00000000  000080bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f1  00000000  00000000  000088e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e24  00000000  00000000  000092d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000b0fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__vector_11>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea e9       	ldi	r30, 0x9A	; 154
      a4:	f7 e2       	ldi	r31, 0x27	; 39
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 36       	cpi	r26, 0x6E	; 110
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ae e6       	ldi	r26, 0x6E	; 110
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 3a       	cpi	r26, 0xAF	; 175
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <main>
      c6:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <appInit>:
};

#define MAX_AMOUNT 5000

ST_accountsDB_t accountRefrence;
void appInit(void){
      ce:	df 92       	push	r13
      d0:	ef 92       	push	r14
      d2:	ff 92       	push	r15
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
	 atm_mode = FRIST_RUN;
      dc:	0f 2e       	mov	r0, r31
      de:	f5 e0       	ldi	r31, 0x05	; 5
      e0:	df 2e       	mov	r13, r31
      e2:	f0 2d       	mov	r31, r0
      e4:	d0 92 9e 01 	sts	0x019E, r13	; 0x80019e <atm_mode>
	 card_trigger_signal = 0;
      e8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <card_trigger_signal>
	 ATM_STATUS = ATM_NORMAL_MODE;
      ec:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <ATM_STATUS>
	// init LCD
	atm_lcd.E_port = PORT_C;
      f0:	e9 e7       	ldi	r30, 0x79	; 121
      f2:	f1 e0       	ldi	r31, 0x01	; 1
      f4:	c2 e0       	ldi	r28, 0x02	; 2
      f6:	0c 2f       	mov	r16, r28
      f8:	c2 83       	std	Z+2, r28	; 0x02
	atm_lcd.E_pin = PINC3;
      fa:	d3 e0       	ldi	r29, 0x03	; 3
      fc:	3d 2f       	mov	r19, r29
      fe:	d5 83       	std	Z+5, r29	; 0x05
	atm_lcd.RS_port = PORT_C;
     100:	ec 2e       	mov	r14, r28
     102:	c0 83       	st	Z, r28
	atm_lcd.RS_pin = PINC1;
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	18 2f       	mov	r17, r24
     108:	83 83       	std	Z+3, r24	; 0x03
	atm_lcd.RW_port = PORT_C;
     10a:	fc 2e       	mov	r15, r28
     10c:	c1 83       	std	Z+1, r28	; 0x01
	atm_lcd.RW_pin = PINC2;
     10e:	2c 2f       	mov	r18, r28
     110:	c4 83       	std	Z+4, r28	; 0x04
	// data pins
	atm_lcd.lcd_data_port = PORT_C;
     112:	4c 2f       	mov	r20, r28
     114:	c6 83       	std	Z+6, r28	; 0x06
	atm_lcd.lcd_data1_pin = PINC4;
     116:	84 e0       	ldi	r24, 0x04	; 4
     118:	58 2f       	mov	r21, r24
     11a:	87 83       	std	Z+7, r24	; 0x07
	atm_lcd.lcd_data2_pin = PINC5;
     11c:	6d 2d       	mov	r22, r13
     11e:	d0 86       	std	Z+8, r13	; 0x08
	atm_lcd.lcd_data3_pin = PINC6;
     120:	86 e0       	ldi	r24, 0x06	; 6
     122:	78 2f       	mov	r23, r24
     124:	81 87       	std	Z+9, r24	; 0x09
	atm_lcd.lcd_data4_pin = PINC7;
     126:	87 e0       	ldi	r24, 0x07	; 7
     128:	82 87       	std	Z+10, r24	; 0x0a
	LCD_init(atm_lcd);
     12a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <LCD_init>
	// keypad 
	kpd.cols_port = PORT_A;
     12e:	e4 ea       	ldi	r30, 0xA4	; 164
     130:	f1 e0       	ldi	r31, 0x01	; 1
     132:	14 82       	std	Z+4, r1	; 0x04
	kpd.rows_port = PORT_A;
     134:	15 82       	std	Z+5, r1	; 0x05
	kpd.number_of_cols = 3;
     136:	4d 2f       	mov	r20, r29
     138:	d0 83       	st	Z, r29
	kpd.number_of_rows = 3;
     13a:	5d 2f       	mov	r21, r29
     13c:	d1 83       	std	Z+1, r29	; 0x01
	kpd.cols_first_pin = PINA2;
     13e:	6c 2f       	mov	r22, r28
     140:	c2 83       	std	Z+2, r28	; 0x02
	kpd.rows_first_pin = PINA5;
     142:	7d 2d       	mov	r23, r13
     144:	d3 82       	std	Z+3, r13	; 0x03
	
	KPD_init(kpd);
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 4e 08 	call	0x109c	; 0x109c <KPD_init>
	// Buzzer
	buzzer.buzzer_port = PORT_D;
     14e:	e6 e7       	ldi	r30, 0x76	; 118
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	d0 83       	st	Z, r29
	buzzer.buzzer_pin = PIND3;
     154:	d1 83       	std	Z+1, r29	; 0x01
	buzzer_init(buzzer);
     156:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <buzzer>
     15a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <buzzer+0x1>
     15e:	0e 94 44 08 	call	0x1088	; 0x1088 <buzzer_init>
	// button 
	zero_enter_btn.button_port = PORT_D;
     162:	e3 e7       	ldi	r30, 0x73	; 115
     164:	f1 e0       	ldi	r31, 0x01	; 1
     166:	d0 83       	st	Z, r29
	zero_enter_btn.button_pin = PIND2;
     168:	c1 83       	std	Z+1, r28	; 0x01
	BUTTON_init(zero_enter_btn);
     16a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <zero_enter_btn>
     16e:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <zero_enter_btn+0x1>
     172:	0e 94 ed 07 	call	0xfda	; 0xfda <BUTTON_init>
	// init pin as input
	dio_init(PORT_B,PINB2,DIO_IN);
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	62 e0       	ldi	r22, 0x02	; 2
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
	
	
	
	// init SPI
	SPI_initSlave();
     180:	0e 94 df 0c 	call	0x19be	; 0x19be <SPI_initSlave>
	
	// TODO: MOVE REGISTERS TO EINT FILE
	
	// enable INTERRRUPT 
	// enable interrupt mode 
	SET_BIT(MCUCSR,ISC2);
     184:	84 b7       	in	r24, 0x34	; 52
     186:	80 64       	ori	r24, 0x40	; 64
     188:	84 bf       	out	0x34, r24	; 52
	//enable GICR
	//SET_BIT(GICR,GICR_INT_2);
	SET_BIT(GICR,5);
     18a:	8b b7       	in	r24, 0x3b	; 59
     18c:	80 62       	ori	r24, 0x20	; 32
     18e:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(SREG,1);
     190:	8f b7       	in	r24, 0x3f	; 63
     192:	82 60       	ori	r24, 0x02	; 2
     194:	8f bf       	out	0x3f, r24	; 63
	sei();
     196:	78 94       	sei
	
}
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	ff 90       	pop	r15
     1a2:	ef 90       	pop	r14
     1a4:	df 90       	pop	r13
     1a6:	08 95       	ret

000001a8 <idelMenu>:

void idelMenu(void){
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	cf 92       	push	r12
     1b0:	df 92       	push	r13
     1b2:	ef 92       	push	r14
     1b4:	ff 92       	push	r15
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
	LCD_clearScreen(atm_lcd);
     1ba:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     1be:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     1c2:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     1c6:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     1ca:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     1ce:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     1d2:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     1d6:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     1da:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     1de:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     1e2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     1e6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd,0,5,"WELCOME");
     1ea:	0f 2e       	mov	r0, r31
     1ec:	f0 e6       	ldi	r31, 0x60	; 96
     1ee:	8f 2e       	mov	r8, r31
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	9f 2e       	mov	r9, r31
     1f4:	f0 2d       	mov	r31, r0
     1f6:	0f 2e       	mov	r0, r31
     1f8:	f5 e0       	ldi	r31, 0x05	; 5
     1fa:	af 2e       	mov	r10, r31
     1fc:	f0 2d       	mov	r31, r0
     1fe:	c1 2c       	mov	r12, r1
     200:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     204:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     208:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     20c:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     210:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     214:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     218:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     21c:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     220:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     224:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     228:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     22c:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
	// delay 1 second
	Timer0_Delay(1000);
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	8a e7       	ldi	r24, 0x7A	; 122
     236:	94 e4       	ldi	r25, 0x44	; 68
     238:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
	LCD_clearScreen(atm_lcd);
     23c:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     240:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     244:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     248:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     24c:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     250:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     254:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     258:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     25c:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     260:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     264:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     268:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
	LCD_displayString(atm_lcd,"Insert a Card");
     26c:	0f 2e       	mov	r0, r31
     26e:	f8 e6       	ldi	r31, 0x68	; 104
     270:	cf 2e       	mov	r12, r31
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	df 2e       	mov	r13, r31
     276:	f0 2d       	mov	r31, r0
     278:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     27c:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     280:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     284:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     288:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     28c:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     290:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     294:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     298:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     29c:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     2a0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     2a4:	0e 94 87 0a 	call	0x150e	; 0x150e <LCD_displayString>
	
}
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	cf 90       	pop	r12
     2b4:	af 90       	pop	r10
     2b6:	9f 90       	pop	r9
     2b8:	8f 90       	pop	r8
     2ba:	08 95       	ret

000002bc <readNumber>:

void readNumber(ST_KPD_t a_kpd,ST_PBTN_t a_zero_enter_btn,uint8 *a_key){
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	28 97       	sbiw	r28, 0x08	; 8
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	f8 94       	cli
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	cd bf       	out	0x3d, r28	; 61
     2d8:	4b 83       	std	Y+3, r20	; 0x03
     2da:	5c 83       	std	Y+4, r21	; 0x04
     2dc:	6d 83       	std	Y+5, r22	; 0x05
     2de:	7e 83       	std	Y+6, r23	; 0x06
     2e0:	8f 83       	std	Y+7, r24	; 0x07
     2e2:	98 87       	std	Y+8, r25	; 0x08
     2e4:	79 01       	movw	r14, r18
	// read numbers from keypad and zero btn 
	uint8 kpd_value ,btn_value; 
	KPD_get_pressed_key(a_kpd,&kpd_value);
     2e6:	9e 01       	movw	r18, r28
     2e8:	2f 5f       	subi	r18, 0xFF	; 255
     2ea:	3f 4f       	sbci	r19, 0xFF	; 255
     2ec:	0e 94 7e 08 	call	0x10fc	; 0x10fc <KPD_get_pressed_key>
	Timer0_Delay(50);
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	88 e4       	ldi	r24, 0x48	; 72
     2f6:	92 e4       	ldi	r25, 0x42	; 66
     2f8:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
	BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
     2fc:	be 01       	movw	r22, r28
     2fe:	6e 5f       	subi	r22, 0xFE	; 254
     300:	7f 4f       	sbci	r23, 0xFF	; 255
     302:	c7 01       	movw	r24, r14
     304:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <BUTTON_read_zero_enter>
	Timer0_Delay(20);
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	80 ea       	ldi	r24, 0xA0	; 160
     30e:	91 e4       	ldi	r25, 0x41	; 65
     310:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
	while(kpd_value ==KPD_NO_KEY_PRESSED && btn_value==BTN_NO_PRESS){
     314:	1d c0       	rjmp	.+58     	; 0x350 <readNumber+0x94>
			 KPD_get_pressed_key(a_kpd,&kpd_value);
     316:	9e 01       	movw	r18, r28
     318:	2f 5f       	subi	r18, 0xFF	; 255
     31a:	3f 4f       	sbci	r19, 0xFF	; 255
     31c:	4b 81       	ldd	r20, Y+3	; 0x03
     31e:	5c 81       	ldd	r21, Y+4	; 0x04
     320:	6d 81       	ldd	r22, Y+5	; 0x05
     322:	7e 81       	ldd	r23, Y+6	; 0x06
     324:	8f 81       	ldd	r24, Y+7	; 0x07
     326:	98 85       	ldd	r25, Y+8	; 0x08
     328:	0e 94 7e 08 	call	0x10fc	; 0x10fc <KPD_get_pressed_key>
			 	Timer0_Delay(50);
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	88 e4       	ldi	r24, 0x48	; 72
     332:	92 e4       	ldi	r25, 0x42	; 66
     334:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
			 BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
     338:	be 01       	movw	r22, r28
     33a:	6e 5f       	subi	r22, 0xFE	; 254
     33c:	7f 4f       	sbci	r23, 0xFF	; 255
     33e:	c7 01       	movw	r24, r14
     340:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <BUTTON_read_zero_enter>
				Timer0_Delay(10);
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	80 e2       	ldi	r24, 0x20	; 32
     34a:	91 e4       	ldi	r25, 0x41	; 65
     34c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
	uint8 kpd_value ,btn_value; 
	KPD_get_pressed_key(a_kpd,&kpd_value);
	Timer0_Delay(50);
	BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
	Timer0_Delay(20);
	while(kpd_value ==KPD_NO_KEY_PRESSED && btn_value==BTN_NO_PRESS){
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	8c 30       	cpi	r24, 0x0C	; 12
     354:	19 f4       	brne	.+6      	; 0x35c <readNumber+0xa0>
     356:	9a 81       	ldd	r25, Y+2	; 0x02
     358:	9c 30       	cpi	r25, 0x0C	; 12
     35a:	e9 f2       	breq	.-70     	; 0x316 <readNumber+0x5a>
			 KPD_get_pressed_key(a_kpd,&kpd_value);
			 	Timer0_Delay(50);
			 BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
				Timer0_Delay(10);
	}
	if (kpd_value != KPD_NO_KEY_PRESSED)
     35c:	8c 30       	cpi	r24, 0x0C	; 12
     35e:	19 f0       	breq	.+6      	; 0x366 <readNumber+0xaa>
	{
		*a_key=kpd_value;
     360:	f8 01       	movw	r30, r16
     362:	80 83       	st	Z, r24
     364:	05 c0       	rjmp	.+10     	; 0x370 <readNumber+0xb4>
	} 
	else if (btn_value != BTN_NO_PRESS)
     366:	8a 81       	ldd	r24, Y+2	; 0x02
     368:	8c 30       	cpi	r24, 0x0C	; 12
     36a:	11 f0       	breq	.+4      	; 0x370 <readNumber+0xb4>
	{
		*a_key = btn_value;
     36c:	f8 01       	movw	r30, r16
     36e:	80 83       	st	Z, r24
	}
}
     370:	28 96       	adiw	r28, 0x08	; 8
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	08 95       	ret

0000038a <readPIN>:



// read PIN from User
void readPIN(uint8 *pin[]){
     38a:	6f 92       	push	r6
     38c:	7f 92       	push	r7
     38e:	8f 92       	push	r8
     390:	9f 92       	push	r9
     392:	af 92       	push	r10
     394:	cf 92       	push	r12
     396:	df 92       	push	r13
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <readPIN+0x1c>
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <readPIN+0x1e>
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	3c 01       	movw	r6, r24
	uint8 pin_temp [PIN_LENTH];
	// 4 numeric number
	LCD_clearScreen(atm_lcd);
     3ae:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     3b2:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     3b6:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     3ba:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     3be:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     3c2:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     3c6:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     3ca:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     3ce:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     3d2:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     3d6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     3da:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd,0,0,"ENTER YOUR PIN");
     3de:	0f 2e       	mov	r0, r31
     3e0:	f6 e7       	ldi	r31, 0x76	; 118
     3e2:	8f 2e       	mov	r8, r31
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	9f 2e       	mov	r9, r31
     3e8:	f0 2d       	mov	r31, r0
     3ea:	a1 2c       	mov	r10, r1
     3ec:	c1 2c       	mov	r12, r1
     3ee:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     3f2:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     3f6:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     3fa:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     3fe:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     402:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     406:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     40a:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     40e:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     412:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     416:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     41a:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
	
	// read PIN
	for (uint8 i = 0;i<PIN_LENTH;i++ )
     41e:	d1 2c       	mov	r13, r1
     420:	41 c0       	rjmp	.+130    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
	{
		readNumber(kpd,zero_enter_btn,&pin_temp[0]);
     422:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <zero_enter_btn>
     426:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <zero_enter_btn+0x1>
     42a:	8e 01       	movw	r16, r28
     42c:	0f 5f       	subi	r16, 0xFF	; 255
     42e:	1f 4f       	sbci	r17, 0xFF	; 255
     430:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <kpd>
     434:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <kpd+0x1>
     438:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <kpd+0x2>
     43c:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <kpd+0x3>
     440:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <kpd+0x4>
     444:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <kpd+0x5>
     448:	0e 94 5e 01 	call	0x2bc	; 0x2bc <readNumber>
		LCD_displayStringRowColumn(atm_lcd,1,(5+i),"X");
     44c:	0f 2e       	mov	r0, r31
     44e:	f5 e0       	ldi	r31, 0x05	; 5
     450:	af 2e       	mov	r10, r31
     452:	f0 2d       	mov	r31, r0
     454:	ad 0c       	add	r10, r13
     456:	0f 2e       	mov	r0, r31
     458:	f5 e8       	ldi	r31, 0x85	; 133
     45a:	8f 2e       	mov	r8, r31
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	9f 2e       	mov	r9, r31
     460:	f0 2d       	mov	r31, r0
     462:	cc 24       	eor	r12, r12
     464:	c3 94       	inc	r12
     466:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     46a:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     46e:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     472:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     476:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     47a:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     47e:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     482:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     486:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     48a:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     48e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     492:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
		Timer0_Delay(50);
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	88 e4       	ldi	r24, 0x48	; 72
     49c:	92 e4       	ldi	r25, 0x42	; 66
     49e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
	// 4 numeric number
	LCD_clearScreen(atm_lcd);
	LCD_displayStringRowColumn(atm_lcd,0,0,"ENTER YOUR PIN");
	
	// read PIN
	for (uint8 i = 0;i<PIN_LENTH;i++ )
     4a2:	d3 94       	inc	r13
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	8d 15       	cp	r24, r13
     4a8:	08 f0       	brcs	.+2      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4aa:	bb cf       	rjmp	.-138    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		LCD_displayStringRowColumn(atm_lcd,1,(5+i),"X");
		Timer0_Delay(50);
	}
	
	// wait for enter
	readNumber(kpd,zero_enter_btn,&btn_value_temp);
     4ac:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <zero_enter_btn>
     4b0:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <zero_enter_btn+0x1>
     4b4:	0b ea       	ldi	r16, 0xAB	; 171
     4b6:	11 e0       	ldi	r17, 0x01	; 1
     4b8:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <kpd>
     4bc:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <kpd+0x1>
     4c0:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <kpd+0x2>
     4c4:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <kpd+0x3>
     4c8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <kpd+0x4>
     4cc:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <kpd+0x5>
     4d0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <readNumber>
	while(btn_value_temp != BTN_ENTER_PRESSED){
     4d4:	14 c0       	rjmp	.+40     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
		readNumber(kpd,zero_enter_btn,&btn_value_temp);
     4d6:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <zero_enter_btn>
     4da:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <zero_enter_btn+0x1>
     4de:	0b ea       	ldi	r16, 0xAB	; 171
     4e0:	11 e0       	ldi	r17, 0x01	; 1
     4e2:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <kpd>
     4e6:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <kpd+0x1>
     4ea:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <kpd+0x2>
     4ee:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <kpd+0x3>
     4f2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <kpd+0x4>
     4f6:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <kpd+0x5>
     4fa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <readNumber>
		Timer0_Delay(50);
	}
	
	// wait for enter
	readNumber(kpd,zero_enter_btn,&btn_value_temp);
	while(btn_value_temp != BTN_ENTER_PRESSED){
     4fe:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <btn_value_temp>
     502:	8b 30       	cpi	r24, 0x0B	; 11
     504:	41 f7       	brne	.-48     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
		readNumber(kpd,zero_enter_btn,&btn_value_temp);
	}
	*pin = pin_temp;
     506:	ce 01       	movw	r24, r28
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	f3 01       	movw	r30, r6
     50c:	91 83       	std	Z+1, r25	; 0x01
     50e:	80 83       	st	Z, r24
}
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	df 90       	pop	r13
     526:	cf 90       	pop	r12
     528:	af 90       	pop	r10
     52a:	9f 90       	pop	r9
     52c:	8f 90       	pop	r8
     52e:	7f 90       	pop	r7
     530:	6f 90       	pop	r6
     532:	08 95       	ret

00000534 <checkCardInfo>:
// 			return ACC_FOUND;
// 		}
// 	}
// 	return ACC_NOT_FOUNT;
// }
uint8 checkCardInfo(ST_transaction_t *card, uint8 *pin, ST_accountsDB_t *accRef) {
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	ec 01       	movw	r28, r24
     546:	7a 01       	movw	r14, r20
	uint8 count = 0;
	uint8 length;
	
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
     548:	44 96       	adiw	r24, 0x14	; 20
     54a:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <strcmp>
     54e:	89 2b       	or	r24, r25
     550:	31 f5       	brne	.+76     	; 0x59e <checkCardInfo+0x6a>
		return INVALID_PIN;
	}
	
	length = strlen((const char *)card->PAN);
     552:	cc 2e       	mov	r12, r28
     554:	dd 2e       	mov	r13, r29
	for (int x = 0; x < ACCOUNTS_DB_SIZE; x++) {
     556:	00 e0       	ldi	r16, 0x00	; 0
     558:	10 e0       	ldi	r17, 0x00	; 0
     55a:	1c c0       	rjmp	.+56     	; 0x594 <checkCardInfo+0x60>
		if (strcmp((const char *)card->PAN, (const char *)accRef[x].primaryAccountNumber) == 0) {
     55c:	89 e1       	ldi	r24, 0x19	; 25
     55e:	80 9f       	mul	r24, r16
     560:	e0 01       	movw	r28, r0
     562:	81 9f       	mul	r24, r17
     564:	d0 0d       	add	r29, r0
     566:	11 24       	eor	r1, r1
     568:	ce 0d       	add	r28, r14
     56a:	df 1d       	adc	r29, r15
     56c:	be 01       	movw	r22, r28
     56e:	6b 5f       	subi	r22, 0xFB	; 251
     570:	7f 4f       	sbci	r23, 0xFF	; 255
     572:	8c 2d       	mov	r24, r12
     574:	9d 2d       	mov	r25, r13
     576:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <strcmp>
     57a:	89 2b       	or	r24, r25
     57c:	49 f4       	brne	.+18     	; 0x590 <checkCardInfo+0x5c>
			*accRef = accRef[x];
     57e:	89 e1       	ldi	r24, 0x19	; 25
     580:	fe 01       	movw	r30, r28
     582:	d7 01       	movw	r26, r14
     584:	01 90       	ld	r0, Z+
     586:	0d 92       	st	X+, r0
     588:	8a 95       	dec	r24
     58a:	e1 f7       	brne	.-8      	; 0x584 <checkCardInfo+0x50>
			return ACC_FOUND;
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	08 c0       	rjmp	.+16     	; 0x5a0 <checkCardInfo+0x6c>
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
		return INVALID_PIN;
	}
	
	length = strlen((const char *)card->PAN);
	for (int x = 0; x < ACCOUNTS_DB_SIZE; x++) {
     590:	0f 5f       	subi	r16, 0xFF	; 255
     592:	1f 4f       	sbci	r17, 0xFF	; 255
     594:	0f 3f       	cpi	r16, 0xFF	; 255
     596:	11 05       	cpc	r17, r1
     598:	0c f3       	brlt	.-62     	; 0x55c <checkCardInfo+0x28>
			*accRef = accRef[x];
			return ACC_FOUND;
		}
	}
	
	return ACC_NOT_FOUNT;
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <checkCardInfo+0x6c>
uint8 checkCardInfo(ST_transaction_t *card, uint8 *pin, ST_accountsDB_t *accRef) {
	uint8 count = 0;
	uint8 length;
	
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
		return INVALID_PIN;
     59e:	80 e0       	ldi	r24, 0x00	; 0
			return ACC_FOUND;
		}
	}
	
	return ACC_NOT_FOUNT;
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	08 95       	ret

000005b2 <readCardInfo>:



void readCardInfo(ST_transaction_t *card){
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	68 97       	sbiw	r28, 0x18	; 24
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	6c 01       	movw	r12, r24
	//////////////////////////////////////////////////////////////////////////
	// recive PAN 
	// recive PIN 
	uint8 str_pan[PAN_size]={0},str_pin[PIN_LENTH] = {0};
     5d4:	fe 01       	movw	r30, r28
     5d6:	31 96       	adiw	r30, 0x01	; 1
     5d8:	84 e1       	ldi	r24, 0x14	; 20
     5da:	df 01       	movw	r26, r30
     5dc:	1d 92       	st	X+, r1
     5de:	8a 95       	dec	r24
     5e0:	e9 f7       	brne	.-6      	; 0x5dc <readCardInfo+0x2a>
     5e2:	1d 8a       	std	Y+21, r1	; 0x15
     5e4:	1e 8a       	std	Y+22, r1	; 0x16
     5e6:	1f 8a       	std	Y+23, r1	; 0x17
     5e8:	18 8e       	std	Y+24, r1	; 0x18
	uint8 str_length=0;
     5ea:	00 e0       	ldi	r16, 0x00	; 0
	uint8 i=0;
	uint8 key=0;
	// recive PAN 
	while(!str_length)
     5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <readCardInfo+0x44>
	{
		str_length = SPI_sendReceiveByte(0xAA);
     5ee:	8a ea       	ldi	r24, 0xAA	; 170
     5f0:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <SPI_sendReceiveByte>
     5f4:	08 2f       	mov	r16, r24
	uint8 str_pan[PAN_size]={0},str_pin[PIN_LENTH] = {0};
	uint8 str_length=0;
	uint8 i=0;
	uint8 key=0;
	// recive PAN 
	while(!str_length)
     5f6:	00 23       	and	r16, r16
     5f8:	d1 f3       	breq	.-12     	; 0x5ee <readCardInfo+0x3c>
     5fa:	10 e0       	ldi	r17, 0x00	; 0
     5fc:	12 c0       	rjmp	.+36     	; 0x622 <readCardInfo+0x70>
		str_length = SPI_sendReceiveByte(0xAA);
	}
	
	for(i=0; i<str_length;i++)
	{
		str_pan[i] = SPI_SlaveReceive();
     5fe:	e1 2e       	mov	r14, r17
     600:	f1 2c       	mov	r15, r1
     602:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <SPI_SlaveReceive>
     606:	e1 e0       	ldi	r30, 0x01	; 1
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	ec 0f       	add	r30, r28
     60c:	fd 1f       	adc	r31, r29
     60e:	ee 0d       	add	r30, r14
     610:	ff 1d       	adc	r31, r15
     612:	80 83       	st	Z, r24
		Timer0_Delay(10);
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e2       	ldi	r24, 0x20	; 32
     61a:	91 e4       	ldi	r25, 0x41	; 65
     61c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
	while(!str_length)
	{
		str_length = SPI_sendReceiveByte(0xAA);
	}
	
	for(i=0; i<str_length;i++)
     620:	1f 5f       	subi	r17, 0xFF	; 255
     622:	10 17       	cp	r17, r16
     624:	60 f3       	brcs	.-40     	; 0x5fe <readCardInfo+0x4c>
	{
		str_pan[i] = SPI_SlaveReceive();
		Timer0_Delay(10);
	}
	
	str_pan[i]='\0';
     626:	e1 e0       	ldi	r30, 0x01	; 1
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	ec 0f       	add	r30, r28
     62c:	fd 1f       	adc	r31, r29
     62e:	e1 0f       	add	r30, r17
     630:	f1 1d       	adc	r31, r1
     632:	10 82       	st	Z, r1
	// recive PAN 
	// recive PIN 
	uint8 str_pan[PAN_size]={0},str_pin[PIN_LENTH] = {0};
	uint8 str_length=0;
	uint8 i=0;
	uint8 key=0;
     634:	10 e0       	ldi	r17, 0x00	; 0
		Timer0_Delay(10);
	}
	
	str_pan[i]='\0';
	
	while(key != 0xBB)
     636:	0a c0       	rjmp	.+20     	; 0x64c <readCardInfo+0x9a>
	{
		key = SPI_sendReceiveByte(0xFF);
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <SPI_sendReceiveByte>
     63e:	18 2f       	mov	r17, r24
		Timer0_Delay(10);
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	80 e2       	ldi	r24, 0x20	; 32
     646:	91 e4       	ldi	r25, 0x41	; 65
     648:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
		Timer0_Delay(10);
	}
	
	str_pan[i]='\0';
	
	while(key != 0xBB)
     64c:	1b 3b       	cpi	r17, 0xBB	; 187
     64e:	a1 f7       	brne	.-24     	; 0x638 <readCardInfo+0x86>
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	12 c0       	rjmp	.+36     	; 0x678 <readCardInfo+0xc6>
		Timer0_Delay(10);
	}
	
	for(i=0;i<PIN_LENTH;i++)
	{
		str_pin[i] = SPI_SlaveReceive();
     654:	e1 2e       	mov	r14, r17
     656:	f1 2c       	mov	r15, r1
     658:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <SPI_SlaveReceive>
     65c:	e5 e1       	ldi	r30, 0x15	; 21
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	ec 0f       	add	r30, r28
     662:	fd 1f       	adc	r31, r29
     664:	ee 0d       	add	r30, r14
     666:	ff 1d       	adc	r31, r15
     668:	80 83       	st	Z, r24
		Timer0_Delay(10);
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	80 e2       	ldi	r24, 0x20	; 32
     670:	91 e4       	ldi	r25, 0x41	; 65
     672:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
	{
		key = SPI_sendReceiveByte(0xFF);
		Timer0_Delay(10);
	}
	
	for(i=0;i<PIN_LENTH;i++)
     676:	1f 5f       	subi	r17, 0xFF	; 255
     678:	14 30       	cpi	r17, 0x04	; 4
     67a:	60 f3       	brcs	.-40     	; 0x654 <readCardInfo+0xa2>
	{
		str_pin[i] = SPI_SlaveReceive();
		Timer0_Delay(10);
	}
	str_pin[i]='\0';
     67c:	e5 e1       	ldi	r30, 0x15	; 21
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	ec 0f       	add	r30, r28
     682:	fd 1f       	adc	r31, r29
     684:	e1 0f       	add	r30, r17
     686:	f1 1d       	adc	r31, r1
     688:	10 82       	st	Z, r1
	strncpy(*card->PAN, str_pan, str_length);
     68a:	f6 01       	movw	r30, r12
     68c:	80 81       	ld	r24, Z
     68e:	40 2f       	mov	r20, r16
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	be 01       	movw	r22, r28
     694:	6f 5f       	subi	r22, 0xFF	; 255
     696:	7f 4f       	sbci	r23, 0xFF	; 255
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <strncpy>
	strncpy(*card->pin, str_pin, PIN_LENTH);
     69e:	d6 01       	movw	r26, r12
     6a0:	54 96       	adiw	r26, 0x14	; 20
     6a2:	8c 91       	ld	r24, X
     6a4:	44 e0       	ldi	r20, 0x04	; 4
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	be 01       	movw	r22, r28
     6aa:	6b 5e       	subi	r22, 0xEB	; 235
     6ac:	7f 4f       	sbci	r23, 0xFF	; 255
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <strncpy>
// 
// 	*card->PAN = str_pan;
// 	*card->pin = str_pin;

}
     6b4:	68 96       	adiw	r28, 0x18	; 24
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	08 95       	ret

000006d2 <readAmount>:


void readAmount(float *amount){
     6d2:	6f 92       	push	r6
     6d4:	7f 92       	push	r7
     6d6:	8f 92       	push	r8
     6d8:	9f 92       	push	r9
     6da:	af 92       	push	r10
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	29 97       	sbiw	r28, 0x09	; 9
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	3c 01       	movw	r6, r24
	uint8 amount_display[8] = "0000.00",num;
     6fe:	88 e0       	ldi	r24, 0x08	; 8
     700:	e4 e9       	ldi	r30, 0x94	; 148
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	de 01       	movw	r26, r28
     706:	11 96       	adiw	r26, 0x01	; 1
     708:	01 90       	ld	r0, Z+
     70a:	0d 92       	st	X+, r0
     70c:	8a 95       	dec	r24
     70e:	e1 f7       	brne	.-8      	; 0x708 <readAmount+0x36>
	LCD_clearScreen(atm_lcd);
     710:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     714:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     718:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     71c:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     720:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     724:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     728:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     72c:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     730:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     734:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     738:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     73c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd,0,3,"ENTER AMOUNT");
     740:	0f 2e       	mov	r0, r31
     742:	f7 e8       	ldi	r31, 0x87	; 135
     744:	8f 2e       	mov	r8, r31
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	9f 2e       	mov	r9, r31
     74a:	f0 2d       	mov	r31, r0
     74c:	0f 2e       	mov	r0, r31
     74e:	f3 e0       	ldi	r31, 0x03	; 3
     750:	af 2e       	mov	r10, r31
     752:	f0 2d       	mov	r31, r0
     754:	c1 2c       	mov	r12, r1
     756:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     75a:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     75e:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     762:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     766:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     76a:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     76e:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     772:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     776:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     77a:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     77e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     782:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(atm_lcd,1,3,amount_display);
     786:	ce 01       	movw	r24, r28
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	4c 01       	movw	r8, r24
     78c:	cc 24       	eor	r12, r12
     78e:	c3 94       	inc	r12
     790:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     794:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     798:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     79c:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     7a0:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     7a4:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     7a8:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     7ac:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     7b0:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     7b4:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     7b8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     7bc:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
	for(uint8 i = 0 ; i <= 6;i++){
     7c0:	d1 2c       	mov	r13, r1
     7c2:	45 c0       	rjmp	.+138    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		if (i == 4)
     7c4:	94 e0       	ldi	r25, 0x04	; 4
     7c6:	d9 12       	cpse	r13, r25
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <readAmount+0xfa>
		{
			// skip decimal point 
			i++;
     7ca:	d3 94       	inc	r13
		}
		readNumber(kpd,zero_enter_btn,&num);
     7cc:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <zero_enter_btn>
     7d0:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <zero_enter_btn+0x1>
     7d4:	8e 01       	movw	r16, r28
     7d6:	07 5f       	subi	r16, 0xF7	; 247
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
     7da:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <kpd>
     7de:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <kpd+0x1>
     7e2:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <kpd+0x2>
     7e6:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <kpd+0x3>
     7ea:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <kpd+0x4>
     7ee:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <kpd+0x5>
     7f2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <readNumber>
		amount_display[i] = num +'0' ;
     7f6:	e1 e0       	ldi	r30, 0x01	; 1
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	ec 0f       	add	r30, r28
     7fc:	fd 1f       	adc	r31, r29
     7fe:	ed 0d       	add	r30, r13
     800:	f1 1d       	adc	r31, r1
     802:	89 85       	ldd	r24, Y+9	; 0x09
     804:	80 5d       	subi	r24, 0xD0	; 208
     806:	80 83       	st	Z, r24
		LCD_displayStringRowColumn(atm_lcd,1,(3+i),amount_display);
     808:	0f 2e       	mov	r0, r31
     80a:	f3 e0       	ldi	r31, 0x03	; 3
     80c:	af 2e       	mov	r10, r31
     80e:	f0 2d       	mov	r31, r0
     810:	ad 0c       	add	r10, r13
     812:	fe 01       	movw	r30, r28
     814:	31 96       	adiw	r30, 0x01	; 1
     816:	4f 01       	movw	r8, r30
     818:	cc 24       	eor	r12, r12
     81a:	c3 94       	inc	r12
     81c:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     820:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     824:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     828:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     82c:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     830:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     834:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     838:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     83c:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     840:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     844:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     848:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
void readAmount(float *amount){
	uint8 amount_display[8] = "0000.00",num;
	LCD_clearScreen(atm_lcd);
	LCD_displayStringRowColumn(atm_lcd,0,3,"ENTER AMOUNT");
	LCD_displayStringRowColumn(atm_lcd,1,3,amount_display);
	for(uint8 i = 0 ; i <= 6;i++){
     84c:	d3 94       	inc	r13
     84e:	f6 e0       	ldi	r31, 0x06	; 6
     850:	fd 15       	cp	r31, r13
     852:	08 f0       	brcs	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     854:	b7 cf       	rjmp	.-146    	; 0x7c4 <readAmount+0xf2>
		readNumber(kpd,zero_enter_btn,&num);
		amount_display[i] = num +'0' ;
		LCD_displayStringRowColumn(atm_lcd,1,(3+i),amount_display);

	}
	*amount = atof((const char *)amount_display);
     856:	ce 01       	movw	r24, r28
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <atof>
     85e:	f3 01       	movw	r30, r6
     860:	60 83       	st	Z, r22
     862:	71 83       	std	Z+1, r23	; 0x01
     864:	82 83       	std	Z+2, r24	; 0x02
     866:	93 83       	std	Z+3, r25	; 0x03
}
     868:	29 96       	adiw	r28, 0x09	; 9
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	df 90       	pop	r13
     882:	cf 90       	pop	r12
     884:	af 90       	pop	r10
     886:	9f 90       	pop	r9
     888:	8f 90       	pop	r8
     88a:	7f 90       	pop	r7
     88c:	6f 90       	pop	r6
     88e:	08 95       	ret

00000890 <appStart>:

void appStart(void){	
     890:	8f 92       	push	r8
     892:	9f 92       	push	r9
     894:	af 92       	push	r10
     896:	bf 92       	push	r11
     898:	cf 92       	push	r12
     89a:	df 92       	push	r13
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	a0 97       	sbiw	r28, 0x20	; 32
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	cd bf       	out	0x3d, r28	; 61
	uint8 pin_temp[PIN_LENTH],card_status;
	ST_transaction_t card ;
	if (ATM_STATUS == ATM_BLOKED_MODE)
     8b8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ATM_STATUS>
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	e1 f5       	brne	.+120    	; 0x938 <appStart+0xa8>
	{
		LCD_clearScreen(atm_lcd);
     8c0:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     8c4:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     8c8:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     8cc:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     8d0:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     8d4:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     8d8:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     8dc:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     8e0:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     8e4:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     8e8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     8ec:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"OUT FOR MENTENANCE");
     8f0:	0f 2e       	mov	r0, r31
     8f2:	fc e9       	ldi	r31, 0x9C	; 156
     8f4:	8f 2e       	mov	r8, r31
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	9f 2e       	mov	r9, r31
     8fa:	f0 2d       	mov	r31, r0
     8fc:	0f 2e       	mov	r0, r31
     8fe:	f3 e0       	ldi	r31, 0x03	; 3
     900:	af 2e       	mov	r10, r31
     902:	f0 2d       	mov	r31, r0
     904:	c1 2c       	mov	r12, r1
     906:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     90a:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     90e:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     912:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     916:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     91a:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     91e:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     922:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     926:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     92a:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     92e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     932:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
		return;	
     936:	29 c3       	rjmp	.+1618   	; 0xf8a <appStart+0x6fa>
	}	
	if (atm_mode == FRIST_RUN)
     938:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <atm_mode>
     93c:	85 30       	cpi	r24, 0x05	; 5
     93e:	31 f4       	brne	.+12     	; 0x94c <appStart+0xbc>
	{
		idelMenu();
     940:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <idelMenu>
		atm_mode = NORMAL_MODE;
     944:	84 e0       	ldi	r24, 0x04	; 4
     946:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <atm_mode>
		return;
     94a:	1f c3       	rjmp	.+1598   	; 0xf8a <appStart+0x6fa>
	}
	if (card_trigger_signal == CARD_INSERTED)
     94c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <card_trigger_signal>
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	09 f0       	breq	.+2      	; 0x956 <appStart+0xc6>
     954:	1a c3       	rjmp	.+1588   	; 0xf8a <appStart+0x6fa>
	{
		LCD_clearScreen(atm_lcd);
     956:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     95a:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     95e:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     962:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     966:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     96a:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     96e:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     972:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     976:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     97a:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     97e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     982:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"CARD Detected");
     986:	0f 2e       	mov	r0, r31
     988:	ff ea       	ldi	r31, 0xAF	; 175
     98a:	8f 2e       	mov	r8, r31
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	9f 2e       	mov	r9, r31
     990:	f0 2d       	mov	r31, r0
     992:	0f 2e       	mov	r0, r31
     994:	f3 e0       	ldi	r31, 0x03	; 3
     996:	af 2e       	mov	r10, r31
     998:	f0 2d       	mov	r31, r0
     99a:	c1 2c       	mov	r12, r1
     99c:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     9a0:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     9a4:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     9a8:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     9ac:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     9b0:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     9b4:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     9b8:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     9bc:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     9c0:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     9c4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     9c8:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
		
		LCD_displayStringRowColumn(atm_lcd,1,0,"READING ...");
     9cc:	0f 2e       	mov	r0, r31
     9ce:	fd eb       	ldi	r31, 0xBD	; 189
     9d0:	8f 2e       	mov	r8, r31
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	9f 2e       	mov	r9, r31
     9d6:	f0 2d       	mov	r31, r0
     9d8:	a1 2c       	mov	r10, r1
     9da:	cc 24       	eor	r12, r12
     9dc:	c3 94       	inc	r12
     9de:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     9e2:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     9e6:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     9ea:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     9ee:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     9f2:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     9f6:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     9fa:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     9fe:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     a02:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     a06:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     a0a:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
		// read Card info
		readCardInfo(&card);
     a0e:	ce 01       	movw	r24, r28
     a10:	05 96       	adiw	r24, 0x05	; 5
     a12:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <readCardInfo>
		LCD_clearScreen(atm_lcd);
     a16:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     a1a:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     a1e:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     a22:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     a26:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     a2a:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     a2e:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     a32:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     a36:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     a3a:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     a3e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     a42:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"OK...");
     a46:	0f 2e       	mov	r0, r31
     a48:	f9 ec       	ldi	r31, 0xC9	; 201
     a4a:	8f 2e       	mov	r8, r31
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	9f 2e       	mov	r9, r31
     a50:	f0 2d       	mov	r31, r0
     a52:	0f 2e       	mov	r0, r31
     a54:	f3 e0       	ldi	r31, 0x03	; 3
     a56:	af 2e       	mov	r10, r31
     a58:	f0 2d       	mov	r31, r0
     a5a:	c1 2c       	mov	r12, r1
     a5c:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     a60:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     a64:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     a68:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     a6c:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     a70:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     a74:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     a78:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     a7c:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     a80:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     a84:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     a88:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
		Timer0_Delay(1000);
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	8a e7       	ldi	r24, 0x7A	; 122
     a92:	94 e4       	ldi	r25, 0x44	; 68
     a94:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
		// READ PIN
		counter1 = 0;
     a98:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <counter1>
		card_status = VALID_PIN;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
		do{
			if (card_status == INVALID_PIN && counter1 != 0)
     a9e:	81 11       	cpse	r24, r1
     aa0:	42 c0       	rjmp	.+132    	; 0xb26 <appStart+0x296>
     aa2:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <counter1>
     aa6:	88 23       	and	r24, r24
     aa8:	f1 f1       	breq	.+124    	; 0xb26 <appStart+0x296>
			{
				LCD_clearScreen(atm_lcd);
     aaa:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     aae:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     ab2:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     ab6:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     aba:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     abe:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     ac2:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     ac6:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     aca:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     ace:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     ad2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     ad6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
				LCD_displayStringRowColumn(atm_lcd,0,0,"INVALID PIN");
     ada:	0f 2e       	mov	r0, r31
     adc:	ff ec       	ldi	r31, 0xCF	; 207
     ade:	8f 2e       	mov	r8, r31
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	9f 2e       	mov	r9, r31
     ae4:	f0 2d       	mov	r31, r0
     ae6:	a1 2c       	mov	r10, r1
     ae8:	c1 2c       	mov	r12, r1
     aea:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     aee:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     af2:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     af6:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     afa:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     afe:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     b02:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     b06:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     b0a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     b0e:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     b12:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     b16:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
				Timer0_Delay(2000);
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	8a ef       	ldi	r24, 0xFA	; 250
     b20:	94 e4       	ldi	r25, 0x44	; 68
     b22:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
			}
			
			// read PIN			
			readPIN(&pin_temp);
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	0e 94 c5 01 	call	0x38a	; 0x38a <readPIN>
			
			
			// check if PIN is correct
			card_status = checkCardInfo(&card,pin_temp,&accountRefrence);
     b2e:	44 e8       	ldi	r20, 0x84	; 132
     b30:	51 e0       	ldi	r21, 0x01	; 1
     b32:	be 01       	movw	r22, r28
     b34:	6f 5f       	subi	r22, 0xFF	; 255
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	ce 01       	movw	r24, r28
     b3a:	05 96       	adiw	r24, 0x05	; 5
     b3c:	0e 94 9a 02 	call	0x534	; 0x534 <checkCardInfo>
			counter1++;
     b40:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <counter1>
     b44:	9f 5f       	subi	r25, 0xFF	; 255
     b46:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <counter1>
			//if (counter1 == 1)
			//{
				//is_pin_correct = 0;
			//}
		}while((counter1<2)&&!card_status);
     b4a:	92 30       	cpi	r25, 0x02	; 2
     b4c:	18 f4       	brcc	.+6      	; 0xb54 <appStart+0x2c4>
     b4e:	88 23       	and	r24, r24
     b50:	09 f4       	brne	.+2      	; 0xb54 <appStart+0x2c4>
     b52:	a5 cf       	rjmp	.-182    	; 0xa9e <appStart+0x20e>
				
		// check if PIN entered twise wrong
		if (counter1>=2)
     b54:	92 30       	cpi	r25, 0x02	; 2
     b56:	08 f4       	brcc	.+2      	; 0xb5a <appStart+0x2ca>
     b58:	6d c0       	rjmp	.+218    	; 0xc34 <appStart+0x3a4>
		{
			// Turn Alarm ON
			LCD_clearScreen(atm_lcd);
     b5a:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     b5e:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     b62:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     b66:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     b6a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     b6e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     b72:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     b76:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     b7a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     b7e:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     b82:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     b86:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,3,"ATM BLOCKED");
     b8a:	0f 2e       	mov	r0, r31
     b8c:	fb ed       	ldi	r31, 0xDB	; 219
     b8e:	8f 2e       	mov	r8, r31
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	9f 2e       	mov	r9, r31
     b94:	f0 2d       	mov	r31, r0
     b96:	0f 2e       	mov	r0, r31
     b98:	f3 e0       	ldi	r31, 0x03	; 3
     b9a:	af 2e       	mov	r10, r31
     b9c:	f0 2d       	mov	r31, r0
     b9e:	c1 2c       	mov	r12, r1
     ba0:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     ba4:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     ba8:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     bac:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     bb0:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     bb4:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     bb8:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     bbc:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     bc0:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     bc4:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     bc8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     bcc:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(atm_lcd,1,0,"INVALIDS TRYS");
     bd0:	0f 2e       	mov	r0, r31
     bd2:	f7 ee       	ldi	r31, 0xE7	; 231
     bd4:	8f 2e       	mov	r8, r31
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	9f 2e       	mov	r9, r31
     bda:	f0 2d       	mov	r31, r0
     bdc:	a1 2c       	mov	r10, r1
     bde:	cc 24       	eor	r12, r12
     be0:	c3 94       	inc	r12
     be2:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     be6:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     bea:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     bee:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     bf2:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     bf6:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     bfa:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     bfe:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     c02:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     c06:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     c0a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     c0e:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
			Timer0_Delay(1000);
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	8a e7       	ldi	r24, 0x7A	; 122
     c18:	94 e4       	ldi	r25, 0x44	; 68
     c1a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
			buzzer_digitalwrite(buzzer,DIO_HIGH);
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <buzzer>
     c24:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <buzzer+0x1>
     c28:	0e 94 49 08 	call	0x1092	; 0x1092 <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ATM_STATUS>
			return;
     c32:	ab c1       	rjmp	.+854    	; 0xf8a <appStart+0x6fa>
		}
		
		
		
		if(card_status == ACC_NOT_FOUNT){
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	09 f0       	breq	.+2      	; 0xc3a <appStart+0x3aa>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <appStart+0x430>
			LCD_clearScreen(atm_lcd);
     c3a:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     c3e:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     c42:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     c46:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     c4a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     c4e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     c52:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     c56:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     c5a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     c5e:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     c62:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     c66:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"This is a fraud card");
     c6a:	0f 2e       	mov	r0, r31
     c6c:	f5 ef       	ldi	r31, 0xF5	; 245
     c6e:	8f 2e       	mov	r8, r31
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	9f 2e       	mov	r9, r31
     c74:	f0 2d       	mov	r31, r0
     c76:	a1 2c       	mov	r10, r1
     c78:	c1 2c       	mov	r12, r1
     c7a:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     c7e:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     c82:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     c86:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     c8a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     c8e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     c92:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     c96:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     c9a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     c9e:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     ca2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     ca6:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
			// start ALARM
			buzzer_digitalwrite(buzzer,DIO_HIGH);
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <buzzer>
     cb0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <buzzer+0x1>
     cb4:	0e 94 49 08 	call	0x1092	; 0x1092 <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ATM_STATUS>
			return;
     cbe:	65 c1       	rjmp	.+714    	; 0xf8a <appStart+0x6fa>
		}
		if(accountRefrence.en_state == BLOCKED){
     cc0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <accountRefrence+0x4>
     cc4:	81 11       	cpse	r24, r1
     cc6:	43 c0       	rjmp	.+134    	; 0xd4e <appStart+0x4be>
			LCD_clearScreen(atm_lcd);
     cc8:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     ccc:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     cd0:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     cd4:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     cd8:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     cdc:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     ce0:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     ce4:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     ce8:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     cec:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     cf0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     cf4:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"This card is stolen");
     cf8:	0f 2e       	mov	r0, r31
     cfa:	fa e0       	ldi	r31, 0x0A	; 10
     cfc:	8f 2e       	mov	r8, r31
     cfe:	f1 e0       	ldi	r31, 0x01	; 1
     d00:	9f 2e       	mov	r9, r31
     d02:	f0 2d       	mov	r31, r0
     d04:	a1 2c       	mov	r10, r1
     d06:	c1 2c       	mov	r12, r1
     d08:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     d0c:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     d10:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     d14:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     d18:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     d1c:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     d20:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     d24:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     d28:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     d2c:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     d30:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     d34:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
			// start ALARM
			buzzer_digitalwrite(buzzer,DIO_HIGH);
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <buzzer>
     d3e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <buzzer+0x1>
     d42:	0e 94 49 08 	call	0x1092	; 0x1092 <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ATM_STATUS>
			return;
     d4c:	1e c1       	rjmp	.+572    	; 0xf8a <appStart+0x6fa>
		}
		
		
		float amount;
		// read amounts 
		readAmount(&amount);
     d4e:	ce 01       	movw	r24, r28
     d50:	4d 96       	adiw	r24, 0x1d	; 29
     d52:	0e 94 69 03 	call	0x6d2	; 0x6d2 <readAmount>
		// if amount 
		if(accountRefrence.balance > amount){
     d56:	80 90 84 01 	lds	r8, 0x0184	; 0x800184 <accountRefrence>
     d5a:	90 90 85 01 	lds	r9, 0x0185	; 0x800185 <accountRefrence+0x1>
     d5e:	a0 90 86 01 	lds	r10, 0x0186	; 0x800186 <accountRefrence+0x2>
     d62:	b0 90 87 01 	lds	r11, 0x0187	; 0x800187 <accountRefrence+0x3>
     d66:	cd 8c       	ldd	r12, Y+29	; 0x1d
     d68:	de 8c       	ldd	r13, Y+30	; 0x1e
     d6a:	ef 8c       	ldd	r14, Y+31	; 0x1f
     d6c:	f8 a0       	ldd	r15, Y+32	; 0x20
     d6e:	a7 01       	movw	r20, r14
     d70:	96 01       	movw	r18, r12
     d72:	c5 01       	movw	r24, r10
     d74:	b4 01       	movw	r22, r8
     d76:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__gesf2>
     d7a:	18 16       	cp	r1, r24
     d7c:	cc f5       	brge	.+114    	; 0xdf0 <appStart+0x560>
			LCD_clearScreen(atm_lcd);
     d7e:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     d82:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     d86:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     d8a:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     d8e:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     d92:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     d96:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     d9a:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     d9e:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     da2:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     da6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     daa:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"Insufficient fund");
     dae:	0f 2e       	mov	r0, r31
     db0:	fe e1       	ldi	r31, 0x1E	; 30
     db2:	8f 2e       	mov	r8, r31
     db4:	f1 e0       	ldi	r31, 0x01	; 1
     db6:	9f 2e       	mov	r9, r31
     db8:	f0 2d       	mov	r31, r0
     dba:	a1 2c       	mov	r10, r1
     dbc:	c1 2c       	mov	r12, r1
     dbe:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     dc2:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     dc6:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     dca:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     dce:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     dd2:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     dd6:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     dda:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     dde:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     de2:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     de6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     dea:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
			return;
     dee:	cd c0       	rjmp	.+410    	; 0xf8a <appStart+0x6fa>
		}
		if(amount > MAX_AMOUNT){
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e4       	ldi	r19, 0x40	; 64
     df4:	4c e9       	ldi	r20, 0x9C	; 156
     df6:	55 e4       	ldi	r21, 0x45	; 69
     df8:	c7 01       	movw	r24, r14
     dfa:	b6 01       	movw	r22, r12
     dfc:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__gesf2>
     e00:	18 16       	cp	r1, r24
     e02:	cc f5       	brge	.+114    	; 0xe76 <appStart+0x5e6>
			LCD_clearScreen(atm_lcd);
     e04:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     e08:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     e0c:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     e10:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     e14:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     e18:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     e1c:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     e20:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     e24:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     e28:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     e2c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     e30:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"Maximum limit is exceeded");
     e34:	0f 2e       	mov	r0, r31
     e36:	f0 e3       	ldi	r31, 0x30	; 48
     e38:	8f 2e       	mov	r8, r31
     e3a:	f1 e0       	ldi	r31, 0x01	; 1
     e3c:	9f 2e       	mov	r9, r31
     e3e:	f0 2d       	mov	r31, r0
     e40:	a1 2c       	mov	r10, r1
     e42:	c1 2c       	mov	r12, r1
     e44:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     e48:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     e4c:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     e50:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     e54:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     e58:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     e5c:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     e60:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     e64:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     e68:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     e6c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     e70:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
			return;
     e74:	8a c0       	rjmp	.+276    	; 0xf8a <appStart+0x6fa>
		}
		
		accountRefrence.balance -= amount;
     e76:	a7 01       	movw	r20, r14
     e78:	96 01       	movw	r18, r12
     e7a:	c5 01       	movw	r24, r10
     e7c:	b4 01       	movw	r22, r8
     e7e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
     e82:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <accountRefrence>
     e86:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <accountRefrence+0x1>
     e8a:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <accountRefrence+0x2>
     e8e:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <accountRefrence+0x3>
		LCD_clearScreen(atm_lcd);
     e92:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     e96:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     e9a:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     e9e:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     ea2:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     ea6:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     eaa:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     eae:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     eb2:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     eb6:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     eba:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     ebe:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,0,"Approved Transaction");
     ec2:	0f 2e       	mov	r0, r31
     ec4:	fa e4       	ldi	r31, 0x4A	; 74
     ec6:	8f 2e       	mov	r8, r31
     ec8:	f1 e0       	ldi	r31, 0x01	; 1
     eca:	9f 2e       	mov	r9, r31
     ecc:	f0 2d       	mov	r31, r0
     ece:	a1 2c       	mov	r10, r1
     ed0:	c1 2c       	mov	r12, r1
     ed2:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     ed6:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     eda:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     ede:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     ee2:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     ee6:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     eea:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     eee:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     ef2:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     ef6:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     efa:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     efe:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>

		Timer0_Delay(1000);
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	8a e7       	ldi	r24, 0x7A	; 122
     f08:	94 e4       	ldi	r25, 0x44	; 68
     f0a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
		LCD_clearScreen(atm_lcd);
     f0e:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     f12:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     f16:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     f1a:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     f1e:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     f22:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     f26:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     f2a:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     f2e:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     f32:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     f36:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     f3a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,0,"Ejecting Card");
     f3e:	0f 2e       	mov	r0, r31
     f40:	ff e5       	ldi	r31, 0x5F	; 95
     f42:	8f 2e       	mov	r8, r31
     f44:	f1 e0       	ldi	r31, 0x01	; 1
     f46:	9f 2e       	mov	r9, r31
     f48:	f0 2d       	mov	r31, r0
     f4a:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     f4e:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     f52:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     f56:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     f5a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     f5e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     f62:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     f66:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     f6a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     f6e:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     f72:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     f76:	0e 94 15 0b 	call	0x162a	; 0x162a <LCD_displayStringRowColumn>
		Timer0_Delay(1000);
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	8a e7       	ldi	r24, 0x7A	; 122
     f80:	94 e4       	ldi	r25, 0x44	; 68
     f82:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
		card_trigger_signal = CARD_REMOVED;
     f86:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <card_trigger_signal>
	}
}
     f8a:	a0 96       	adiw	r28, 0x20	; 32
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	9f 90       	pop	r9
     fac:	8f 90       	pop	r8
     fae:	08 95       	ret

00000fb0 <__vector_3>:


ISR(INT2_vect){
     fb0:	1f 92       	push	r1
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	0f 92       	push	r0
     fb8:	11 24       	eor	r1, r1
     fba:	8f 93       	push	r24
     fbc:	9f 93       	push	r25
	card_trigger_signal = !card_trigger_signal;
     fbe:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <card_trigger_signal>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	91 11       	cpse	r25, r1
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <card_trigger_signal>
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	0f 90       	pop	r0
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	0f 90       	pop	r0
     fd6:	1f 90       	pop	r1
     fd8:	18 95       	reti

00000fda <BUTTON_init>:

void BUTTON_init(ST_PBTN_t button){
	dio_init(button.button_port,button.button_pin,DIO_IN);
}
void BUTTON_status(ST_PBTN_t button,uint8 *status){
	dio_read_pin(button.button_port,button.button_pin,status);
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	69 2f       	mov	r22, r25
     fde:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
     fe2:	08 95       	ret

00000fe4 <BUTTON_read_zero_enter>:
}


void BUTTON_read_zero_enter(ST_PBTN_t button,uint8 * value){
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <BUTTON_read_zero_enter+0xe>
     ff2:	1f 92       	push	r1
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	8b 01       	movw	r16, r22
	 uint8 button_state = 0;
     ffa:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16 timeCounter = 0;
     ffc:	1b 82       	std	Y+3, r1	; 0x03
     ffe:	1a 82       	std	Y+2, r1	; 0x02
	dio_read_pin(button.button_port,button.button_pin,&button_state);
    1000:	f9 2e       	mov	r15, r25
    1002:	e8 2e       	mov	r14, r24
    1004:	ae 01       	movw	r20, r28
    1006:	4f 5f       	subi	r20, 0xFF	; 255
    1008:	5f 4f       	sbci	r21, 0xFF	; 255
    100a:	69 2f       	mov	r22, r25
    100c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <dio_read_pin>
	if (button_state == DIO_HIGH)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	61 f5       	brne	.+88     	; 0x106e <BUTTON_read_zero_enter+0x8a>
    1016:	27 c0       	rjmp	.+78     	; 0x1066 <BUTTON_read_zero_enter+0x82>
	{
		while(button_state == DIO_HIGH){
			Timer0_Delay(BTN_MIN_SECOND);
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	88 e4       	ldi	r24, 0x48	; 72
    101e:	92 e4       	ldi	r25, 0x42	; 66
    1020:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
			timeCounter += BTN_MIN_SECOND;
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	c2 96       	adiw	r24, 0x32	; 50
    102a:	9b 83       	std	Y+3, r25	; 0x03
    102c:	8a 83       	std	Y+2, r24	; 0x02
			dio_read_pin(button.button_port,button.button_pin,&button_state);
    102e:	ae 01       	movw	r20, r28
    1030:	4f 5f       	subi	r20, 0xFF	; 255
    1032:	5f 4f       	sbci	r21, 0xFF	; 255
    1034:	6f 2d       	mov	r22, r15
    1036:	8e 2d       	mov	r24, r14
    1038:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <dio_read_pin>
			if (button_state == DIO_LOW && timeCounter < BTN_2_SECOND)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	81 11       	cpse	r24, r1
    1040:	09 c0       	rjmp	.+18     	; 0x1054 <BUTTON_read_zero_enter+0x70>
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	8c 3d       	cpi	r24, 0xDC	; 220
    1048:	95 40       	sbci	r25, 0x05	; 5
    104a:	20 f4       	brcc	.+8      	; 0x1054 <BUTTON_read_zero_enter+0x70>
			{
				*value = BTN_ZERO_PRESSED;
    104c:	8a e0       	ldi	r24, 0x0A	; 10
    104e:	f8 01       	movw	r30, r16
    1050:	80 83       	st	Z, r24
    1052:	09 c0       	rjmp	.+18     	; 0x1066 <BUTTON_read_zero_enter+0x82>
			}
			else if (timeCounter >= BTN_2_SECOND)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	9b 81       	ldd	r25, Y+3	; 0x03
    1058:	8c 3d       	cpi	r24, 0xDC	; 220
    105a:	95 40       	sbci	r25, 0x05	; 5
    105c:	20 f0       	brcs	.+8      	; 0x1066 <BUTTON_read_zero_enter+0x82>
			{
				*value = BTN_ENTER_PRESSED;
    105e:	8b e0       	ldi	r24, 0x0B	; 11
    1060:	f8 01       	movw	r30, r16
    1062:	80 83       	st	Z, r24
				break;
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <BUTTON_read_zero_enter+0x90>
	 uint8 button_state = 0;
	volatile uint16 timeCounter = 0;
	dio_read_pin(button.button_port,button.button_pin,&button_state);
	if (button_state == DIO_HIGH)
	{
		while(button_state == DIO_HIGH){
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	b1 f2       	breq	.-84     	; 0x1018 <BUTTON_read_zero_enter+0x34>
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <BUTTON_read_zero_enter+0x90>
			}
		}
	}
	else
	{
		*value = BTN_NO_PRESS;//NO
    106e:	8c e0       	ldi	r24, 0x0C	; 12
    1070:	f8 01       	movw	r30, r16
    1072:	80 83       	st	Z, r24
	}
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	08 95       	ret

00001088 <buzzer_init>:

/*============= FUNCTION DEFINITION =============*/


void buzzer_init(ST_BUZZER_t buzzer){
	dio_init(buzzer.buzzer_port,buzzer.buzzer_pin,DIO_LOW);
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	69 2f       	mov	r22, r25
    108c:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    1090:	08 95       	ret

00001092 <buzzer_digitalwrite>:
}
void buzzer_digitalwrite(ST_BUZZER_t buzzer,uint8 value){
    1092:	46 2f       	mov	r20, r22
	dio_write_pin(buzzer.buzzer_port,buzzer.buzzer_pin,value);
    1094:	69 2f       	mov	r22, r25
    1096:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    109a:	08 95       	ret

0000109c <KPD_init>:
#include "keypad.h"
#include "../../mcal/timer0/timer0.h"
#include "../../mcal/dio/dio.h"


void KPD_init(ST_KPD_t kpd){
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <KPD_init+0x8>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <KPD_init+0xa>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <KPD_init+0xc>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	49 83       	std	Y+1, r20	; 0x01
    10ae:	5a 83       	std	Y+2, r21	; 0x02
    10b0:	6b 83       	std	Y+3, r22	; 0x03
    10b2:	7c 83       	std	Y+4, r23	; 0x04
    10b4:	8d 83       	std	Y+5, r24	; 0x05
    10b6:	9e 83       	std	Y+6, r25	; 0x06
	// set cols as an input
	for (uint8 i = 0 ; i<kpd.number_of_rows;i++)
    10b8:	10 e0       	ldi	r17, 0x00	; 0
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <KPD_init+0x2e>
	{
		dio_init(kpd.rows_port,(kpd.rows_first_pin+i),DIO_IN);
    10bc:	6c 81       	ldd	r22, Y+4	; 0x04
    10be:	61 0f       	add	r22, r17
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	8e 81       	ldd	r24, Y+6	; 0x06
    10c4:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
#include "../../mcal/dio/dio.h"


void KPD_init(ST_KPD_t kpd){
	// set cols as an input
	for (uint8 i = 0 ; i<kpd.number_of_rows;i++)
    10c8:	1f 5f       	subi	r17, 0xFF	; 255
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	18 17       	cp	r17, r24
    10ce:	b0 f3       	brcs	.-20     	; 0x10bc <KPD_init+0x20>
    10d0:	10 e0       	ldi	r17, 0x00	; 0
    10d2:	07 c0       	rjmp	.+14     	; 0x10e2 <KPD_init+0x46>
		dio_init(kpd.rows_port,(kpd.rows_first_pin+i),DIO_IN);
	}
	// set rows as input 
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
	{
		dio_init(kpd.cols_port,(kpd.cols_first_pin+i),DIO_OUT);
    10d4:	6b 81       	ldd	r22, Y+3	; 0x03
    10d6:	61 0f       	add	r22, r17
    10d8:	41 e0       	ldi	r20, 0x01	; 1
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
	for (uint8 i = 0 ; i<kpd.number_of_rows;i++)
	{
		dio_init(kpd.rows_port,(kpd.rows_first_pin+i),DIO_IN);
	}
	// set rows as input 
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
    10e0:	1f 5f       	subi	r17, 0xFF	; 255
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	18 17       	cp	r17, r24
    10e6:	b0 f3       	brcs	.-20     	; 0x10d4 <KPD_init+0x38>
	{
		dio_init(kpd.cols_port,(kpd.cols_first_pin+i),DIO_OUT);
	}
	
}
    10e8:	26 96       	adiw	r28, 0x06	; 6
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	08 95       	ret

000010fc <KPD_get_pressed_key>:
void KPD_get_pressed_key(ST_KPD_t kpd,uint8*key){
    10fc:	bf 92       	push	r11
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	27 97       	sbiw	r28, 0x07	; 7
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	4a 83       	std	Y+2, r20	; 0x02
    1120:	5b 83       	std	Y+3, r21	; 0x03
    1122:	6c 83       	std	Y+4, r22	; 0x04
    1124:	7d 83       	std	Y+5, r23	; 0x05
    1126:	8e 83       	std	Y+6, r24	; 0x06
    1128:	9f 83       	std	Y+7, r25	; 0x07
    112a:	79 01       	movw	r14, r18
	uint8 value; // counters
	// cols loops
	*key= KPD_NO_KEY_PRESSED;
    112c:	8c e0       	ldi	r24, 0x0C	; 12
    112e:	f9 01       	movw	r30, r18
    1130:	80 83       	st	Z, r24
	for (uint8 col = 0 ; col < kpd.number_of_cols;col++)
    1132:	00 e0       	ldi	r16, 0x00	; 0
    1134:	38 c0       	rjmp	.+112    	; 0x11a6 <KPD_get_pressed_key+0xaa>
	{
		// activate cols
		
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_HIGH);
    1136:	dc 80       	ldd	r13, Y+4	; 0x04
    1138:	d0 0e       	add	r13, r16
    113a:	be 80       	ldd	r11, Y+6	; 0x06
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	6d 2d       	mov	r22, r13
    1140:	8b 2d       	mov	r24, r11
    1142:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
		// rows loops
		
		for (uint8 row = 0;row<kpd.number_of_rows;row++)
    1146:	10 e0       	ldi	r17, 0x00	; 0
    1148:	1f c0       	rjmp	.+62     	; 0x1188 <KPD_get_pressed_key+0x8c>
		{
			// get read 
			Timer0_Delay(30);
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	80 ef       	ldi	r24, 0xF0	; 240
    1150:	91 e4       	ldi	r25, 0x41	; 65
    1152:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
			dio_read_pin(kpd.rows_port,(kpd.rows_first_pin+row),&value);
    1156:	6d 81       	ldd	r22, Y+5	; 0x05
    1158:	61 0f       	add	r22, r17
    115a:	ae 01       	movw	r20, r28
    115c:	4f 5f       	subi	r20, 0xFF	; 255
    115e:	5f 4f       	sbci	r21, 0xFF	; 255
    1160:	8f 81       	ldd	r24, Y+7	; 0x07
    1162:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <dio_read_pin>
			// check if button is pressed
			if (value == DIO_HIGH)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	69 f4       	brne	.+26     	; 0x1186 <KPD_get_pressed_key+0x8a>
			{
				// return key (row_number * numbers_of_cols) + (column number +1)
				
				*key =  ((row * kpd.number_of_cols) + col + 1);
    116c:	1c 9d       	mul	r17, r12
    116e:	00 0d       	add	r16, r0
    1170:	11 24       	eor	r1, r1
    1172:	0f 5f       	subi	r16, 0xFF	; 255
    1174:	f7 01       	movw	r30, r14
    1176:	00 83       	st	Z, r16
				Timer0_Delay(50);
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	88 e4       	ldi	r24, 0x48	; 72
    117e:	92 e4       	ldi	r25, 0x42	; 66
    1180:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    1184:	13 c0       	rjmp	.+38     	; 0x11ac <KPD_get_pressed_key+0xb0>
		// activate cols
		
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_HIGH);
		// rows loops
		
		for (uint8 row = 0;row<kpd.number_of_rows;row++)
    1186:	1f 5f       	subi	r17, 0xFF	; 255
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	18 17       	cp	r17, r24
    118c:	f0 f2       	brcs	.-68     	; 0x114a <KPD_get_pressed_key+0x4e>
				Timer0_Delay(50);
				return;
			}
		
		}
		Timer0_Delay(30);
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	80 ef       	ldi	r24, 0xF0	; 240
    1194:	91 e4       	ldi	r25, 0x41	; 65
    1196:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_LOW);
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	6d 2d       	mov	r22, r13
    119e:	8b 2d       	mov	r24, r11
    11a0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
}
void KPD_get_pressed_key(ST_KPD_t kpd,uint8*key){
	uint8 value; // counters
	// cols loops
	*key= KPD_NO_KEY_PRESSED;
	for (uint8 col = 0 ; col < kpd.number_of_cols;col++)
    11a4:	0f 5f       	subi	r16, 0xFF	; 255
    11a6:	ca 80       	ldd	r12, Y+2	; 0x02
    11a8:	0c 15       	cp	r16, r12
    11aa:	28 f2       	brcs	.-118    	; 0x1136 <KPD_get_pressed_key+0x3a>
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_LOW);
		
	}
	
	
    11ac:	27 96       	adiw	r28, 0x07	; 7
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	08 95       	ret

000011cc <LCD_sendCommand>:
 */
void LCD_intgerToString(ST_LCD_t lcd,int data){
	  char buff[16]; /* String to hold the ascii result */
	  itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	  LCD_displayString(lcd,buff); /* Display the string */
}
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	2c 97       	sbiw	r28, 0x0c	; 12
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	8e 2d       	mov	r24, r14
    11ee:	fb 82       	std	Y+3, r15	; 0x03
    11f0:	0c 83       	std	Y+4, r16	; 0x04
    11f2:	61 2f       	mov	r22, r17
    11f4:	2e 83       	std	Y+6, r18	; 0x06
    11f6:	3f 83       	std	Y+7, r19	; 0x07
    11f8:	48 87       	std	Y+8, r20	; 0x08
    11fa:	19 82       	std	Y+1, r1	; 0x01
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	6e 81       	ldd	r22, Y+6	; 0x06
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	9f e3       	ldi	r25, 0x3F	; 63
    1214:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    1218:	0f 81       	ldd	r16, Y+7	; 0x07
    121a:	1c 81       	ldd	r17, Y+4	; 0x04
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	60 2f       	mov	r22, r16
    1220:	81 2f       	mov	r24, r17
    1222:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	80 e8       	ldi	r24, 0x80	; 128
    122c:	9f e3       	ldi	r25, 0x3F	; 63
    122e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    1232:	f8 84       	ldd	r15, Y+8	; 0x08
    1234:	be 01       	movw	r22, r28
    1236:	6f 5f       	subi	r22, 0xFF	; 255
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	8f 2d       	mov	r24, r15
    123c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <dio_read_port>
    1240:	69 81       	ldd	r22, Y+1	; 0x01
    1242:	6f 70       	andi	r22, 0x0F	; 15
    1244:	8c 2d       	mov	r24, r12
    1246:	80 7f       	andi	r24, 0xF0	; 240
    1248:	68 2b       	or	r22, r24
    124a:	69 83       	std	Y+1, r22	; 0x01
    124c:	8f 2d       	mov	r24, r15
    124e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <dio_write_port>
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	80 e8       	ldi	r24, 0x80	; 128
    1258:	9f e3       	ldi	r25, 0x3F	; 63
    125a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	60 2f       	mov	r22, r16
    1262:	81 2f       	mov	r24, r17
    1264:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	80 e8       	ldi	r24, 0x80	; 128
    126e:	9f e3       	ldi	r25, 0x3F	; 63
    1270:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    1274:	41 e0       	ldi	r20, 0x01	; 1
    1276:	60 2f       	mov	r22, r16
    1278:	81 2f       	mov	r24, r17
    127a:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    127e:	be 01       	movw	r22, r28
    1280:	6f 5f       	subi	r22, 0xFF	; 255
    1282:	7f 4f       	sbci	r23, 0xFF	; 255
    1284:	8f 2d       	mov	r24, r15
    1286:	0e 94 ab 0c 	call	0x1956	; 0x1956 <dio_read_port>
    128a:	80 e1       	ldi	r24, 0x10	; 16
    128c:	c8 9e       	mul	r12, r24
    128e:	60 01       	movw	r12, r0
    1290:	11 24       	eor	r1, r1
    1292:	69 81       	ldd	r22, Y+1	; 0x01
    1294:	6f 70       	andi	r22, 0x0F	; 15
    1296:	6c 29       	or	r22, r12
    1298:	69 83       	std	Y+1, r22	; 0x01
    129a:	8f 2d       	mov	r24, r15
    129c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <dio_write_port>
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	80 e8       	ldi	r24, 0x80	; 128
    12a6:	9f e3       	ldi	r25, 0x3F	; 63
    12a8:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	60 2f       	mov	r22, r16
    12b0:	81 2f       	mov	r24, r17
    12b2:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	80 e8       	ldi	r24, 0x80	; 128
    12bc:	9f e3       	ldi	r25, 0x3F	; 63
    12be:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    12c2:	2c 96       	adiw	r28, 0x0c	; 12
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	df 90       	pop	r13
    12dc:	cf 90       	pop	r12
    12de:	08 95       	ret

000012e0 <LCD_init>:
    12e0:	cf 92       	push	r12
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	2b 97       	sbiw	r28, 0x0b	; 11
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	e9 82       	std	Y+1, r14	; 0x01
    1300:	fa 82       	std	Y+2, r15	; 0x02
    1302:	0b 83       	std	Y+3, r16	; 0x03
    1304:	1c 83       	std	Y+4, r17	; 0x04
    1306:	2d 83       	std	Y+5, r18	; 0x05
    1308:	3e 83       	std	Y+6, r19	; 0x06
    130a:	4f 83       	std	Y+7, r20	; 0x07
    130c:	58 87       	std	Y+8, r21	; 0x08
    130e:	69 87       	std	Y+9, r22	; 0x09
    1310:	7a 87       	std	Y+10, r23	; 0x0a
    1312:	8b 87       	std	Y+11, r24	; 0x0b
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	63 2f       	mov	r22, r19
    1318:	80 2f       	mov	r24, r16
    131a:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    131e:	41 e0       	ldi	r20, 0x01	; 1
    1320:	6c 81       	ldd	r22, Y+4	; 0x04
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    1328:	41 e0       	ldi	r20, 0x01	; 1
    132a:	6d 81       	ldd	r22, Y+5	; 0x05
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    1332:	1f 81       	ldd	r17, Y+7	; 0x07
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	68 85       	ldd	r22, Y+8	; 0x08
    1338:	81 2f       	mov	r24, r17
    133a:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	69 85       	ldd	r22, Y+9	; 0x09
    1342:	81 2f       	mov	r24, r17
    1344:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	6a 85       	ldd	r22, Y+10	; 0x0a
    134c:	81 2f       	mov	r24, r17
    134e:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	6b 85       	ldd	r22, Y+11	; 0x0b
    1356:	81 2f       	mov	r24, r17
    1358:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    135c:	68 94       	set
    135e:	cc 24       	eor	r12, r12
    1360:	c1 f8       	bld	r12, 1
    1362:	e9 80       	ldd	r14, Y+1	; 0x01
    1364:	fa 80       	ldd	r15, Y+2	; 0x02
    1366:	0b 81       	ldd	r16, Y+3	; 0x03
    1368:	1c 81       	ldd	r17, Y+4	; 0x04
    136a:	2d 81       	ldd	r18, Y+5	; 0x05
    136c:	3e 81       	ldd	r19, Y+6	; 0x06
    136e:	4f 81       	ldd	r20, Y+7	; 0x07
    1370:	58 85       	ldd	r21, Y+8	; 0x08
    1372:	69 85       	ldd	r22, Y+9	; 0x09
    1374:	7a 85       	ldd	r23, Y+10	; 0x0a
    1376:	8b 85       	ldd	r24, Y+11	; 0x0b
    1378:	0e 94 e6 08 	call	0x11cc	; 0x11cc <LCD_sendCommand>
    137c:	0f 2e       	mov	r0, r31
    137e:	f8 e2       	ldi	r31, 0x28	; 40
    1380:	cf 2e       	mov	r12, r31
    1382:	f0 2d       	mov	r31, r0
    1384:	e9 80       	ldd	r14, Y+1	; 0x01
    1386:	fa 80       	ldd	r15, Y+2	; 0x02
    1388:	0b 81       	ldd	r16, Y+3	; 0x03
    138a:	1c 81       	ldd	r17, Y+4	; 0x04
    138c:	2d 81       	ldd	r18, Y+5	; 0x05
    138e:	3e 81       	ldd	r19, Y+6	; 0x06
    1390:	4f 81       	ldd	r20, Y+7	; 0x07
    1392:	58 85       	ldd	r21, Y+8	; 0x08
    1394:	69 85       	ldd	r22, Y+9	; 0x09
    1396:	7a 85       	ldd	r23, Y+10	; 0x0a
    1398:	8b 85       	ldd	r24, Y+11	; 0x0b
    139a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <LCD_sendCommand>
    139e:	0f 2e       	mov	r0, r31
    13a0:	fc e0       	ldi	r31, 0x0C	; 12
    13a2:	cf 2e       	mov	r12, r31
    13a4:	f0 2d       	mov	r31, r0
    13a6:	e9 80       	ldd	r14, Y+1	; 0x01
    13a8:	fa 80       	ldd	r15, Y+2	; 0x02
    13aa:	0b 81       	ldd	r16, Y+3	; 0x03
    13ac:	1c 81       	ldd	r17, Y+4	; 0x04
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	4f 81       	ldd	r20, Y+7	; 0x07
    13b4:	58 85       	ldd	r21, Y+8	; 0x08
    13b6:	69 85       	ldd	r22, Y+9	; 0x09
    13b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    13ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    13bc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <LCD_sendCommand>
    13c0:	cc 24       	eor	r12, r12
    13c2:	c3 94       	inc	r12
    13c4:	e9 80       	ldd	r14, Y+1	; 0x01
    13c6:	fa 80       	ldd	r15, Y+2	; 0x02
    13c8:	0b 81       	ldd	r16, Y+3	; 0x03
    13ca:	1c 81       	ldd	r17, Y+4	; 0x04
    13cc:	2d 81       	ldd	r18, Y+5	; 0x05
    13ce:	3e 81       	ldd	r19, Y+6	; 0x06
    13d0:	4f 81       	ldd	r20, Y+7	; 0x07
    13d2:	58 85       	ldd	r21, Y+8	; 0x08
    13d4:	69 85       	ldd	r22, Y+9	; 0x09
    13d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    13d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    13da:	0e 94 e6 08 	call	0x11cc	; 0x11cc <LCD_sendCommand>
    13de:	2b 96       	adiw	r28, 0x0b	; 11
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	cf 90       	pop	r12
    13f8:	08 95       	ret

000013fa <LCD_displayCharacter>:
    13fa:	cf 92       	push	r12
    13fc:	df 92       	push	r13
    13fe:	ef 92       	push	r14
    1400:	ff 92       	push	r15
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	2c 97       	sbiw	r28, 0x0c	; 12
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	8e 2d       	mov	r24, r14
    141c:	fb 82       	std	Y+3, r15	; 0x03
    141e:	0c 83       	std	Y+4, r16	; 0x04
    1420:	61 2f       	mov	r22, r17
    1422:	2e 83       	std	Y+6, r18	; 0x06
    1424:	3f 83       	std	Y+7, r19	; 0x07
    1426:	48 87       	std	Y+8, r20	; 0x08
    1428:	19 82       	std	Y+1, r1	; 0x01
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	6e 81       	ldd	r22, Y+6	; 0x06
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	80 e8       	ldi	r24, 0x80	; 128
    1440:	9f e3       	ldi	r25, 0x3F	; 63
    1442:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    1446:	0f 81       	ldd	r16, Y+7	; 0x07
    1448:	1c 81       	ldd	r17, Y+4	; 0x04
    144a:	41 e0       	ldi	r20, 0x01	; 1
    144c:	60 2f       	mov	r22, r16
    144e:	81 2f       	mov	r24, r17
    1450:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	80 e8       	ldi	r24, 0x80	; 128
    145a:	9f e3       	ldi	r25, 0x3F	; 63
    145c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    1460:	f8 84       	ldd	r15, Y+8	; 0x08
    1462:	be 01       	movw	r22, r28
    1464:	6f 5f       	subi	r22, 0xFF	; 255
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 2d       	mov	r24, r15
    146a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <dio_read_port>
    146e:	69 81       	ldd	r22, Y+1	; 0x01
    1470:	6f 70       	andi	r22, 0x0F	; 15
    1472:	8c 2d       	mov	r24, r12
    1474:	80 7f       	andi	r24, 0xF0	; 240
    1476:	68 2b       	or	r22, r24
    1478:	69 83       	std	Y+1, r22	; 0x01
    147a:	8f 2d       	mov	r24, r15
    147c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <dio_write_port>
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	80 e8       	ldi	r24, 0x80	; 128
    1486:	9f e3       	ldi	r25, 0x3F	; 63
    1488:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	60 2f       	mov	r22, r16
    1490:	81 2f       	mov	r24, r17
    1492:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	80 e8       	ldi	r24, 0x80	; 128
    149c:	9f e3       	ldi	r25, 0x3F	; 63
    149e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    14a2:	41 e0       	ldi	r20, 0x01	; 1
    14a4:	60 2f       	mov	r22, r16
    14a6:	81 2f       	mov	r24, r17
    14a8:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    14ac:	be 01       	movw	r22, r28
    14ae:	6f 5f       	subi	r22, 0xFF	; 255
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	8f 2d       	mov	r24, r15
    14b4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <dio_read_port>
    14b8:	80 e1       	ldi	r24, 0x10	; 16
    14ba:	c8 9e       	mul	r12, r24
    14bc:	60 01       	movw	r12, r0
    14be:	11 24       	eor	r1, r1
    14c0:	69 81       	ldd	r22, Y+1	; 0x01
    14c2:	6f 70       	andi	r22, 0x0F	; 15
    14c4:	6c 29       	or	r22, r12
    14c6:	69 83       	std	Y+1, r22	; 0x01
    14c8:	8f 2d       	mov	r24, r15
    14ca:	0e 94 c9 0c 	call	0x1992	; 0x1992 <dio_write_port>
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	80 e8       	ldi	r24, 0x80	; 128
    14d4:	9f e3       	ldi	r25, 0x3F	; 63
    14d6:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	60 2f       	mov	r22, r16
    14de:	81 2f       	mov	r24, r17
    14e0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <dio_write_pin>
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	80 e8       	ldi	r24, 0x80	; 128
    14ea:	9f e3       	ldi	r25, 0x3F	; 63
    14ec:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timer0_Delay>
    14f0:	2c 96       	adiw	r28, 0x0c	; 12
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	08 95       	ret

0000150e <LCD_displayString>:
    150e:	af 92       	push	r10
    1510:	bf 92       	push	r11
    1512:	cf 92       	push	r12
    1514:	df 92       	push	r13
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	2b 97       	sbiw	r28, 0x0b	; 11
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	e9 82       	std	Y+1, r14	; 0x01
    1534:	fa 82       	std	Y+2, r15	; 0x02
    1536:	0b 83       	std	Y+3, r16	; 0x03
    1538:	1c 83       	std	Y+4, r17	; 0x04
    153a:	2d 83       	std	Y+5, r18	; 0x05
    153c:	3e 83       	std	Y+6, r19	; 0x06
    153e:	4f 83       	std	Y+7, r20	; 0x07
    1540:	58 87       	std	Y+8, r21	; 0x08
    1542:	69 87       	std	Y+9, r22	; 0x09
    1544:	7a 87       	std	Y+10, r23	; 0x0a
    1546:	8b 87       	std	Y+11, r24	; 0x0b
    1548:	56 01       	movw	r10, r12
    154a:	d1 2c       	mov	r13, r1
    154c:	0e c0       	rjmp	.+28     	; 0x156a <LCD_displayString+0x5c>
    154e:	e9 80       	ldd	r14, Y+1	; 0x01
    1550:	fa 80       	ldd	r15, Y+2	; 0x02
    1552:	0b 81       	ldd	r16, Y+3	; 0x03
    1554:	1c 81       	ldd	r17, Y+4	; 0x04
    1556:	2d 81       	ldd	r18, Y+5	; 0x05
    1558:	3e 81       	ldd	r19, Y+6	; 0x06
    155a:	4f 81       	ldd	r20, Y+7	; 0x07
    155c:	58 85       	ldd	r21, Y+8	; 0x08
    155e:	69 85       	ldd	r22, Y+9	; 0x09
    1560:	7a 85       	ldd	r23, Y+10	; 0x0a
    1562:	8b 85       	ldd	r24, Y+11	; 0x0b
    1564:	0e 94 fd 09 	call	0x13fa	; 0x13fa <LCD_displayCharacter>
    1568:	d3 94       	inc	r13
    156a:	f5 01       	movw	r30, r10
    156c:	ed 0d       	add	r30, r13
    156e:	f1 1d       	adc	r31, r1
    1570:	c0 80       	ld	r12, Z
    1572:	c1 10       	cpse	r12, r1
    1574:	ec cf       	rjmp	.-40     	; 0x154e <LCD_displayString+0x40>
    1576:	2b 96       	adiw	r28, 0x0b	; 11
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	08 95       	ret

00001598 <LCD_moveCursor>:
    1598:	af 92       	push	r10
    159a:	cf 92       	push	r12
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	2b 97       	sbiw	r28, 0x0b	; 11
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	e9 82       	std	Y+1, r14	; 0x01
    15ba:	fa 82       	std	Y+2, r15	; 0x02
    15bc:	0b 83       	std	Y+3, r16	; 0x03
    15be:	1c 83       	std	Y+4, r17	; 0x04
    15c0:	2d 83       	std	Y+5, r18	; 0x05
    15c2:	3e 83       	std	Y+6, r19	; 0x06
    15c4:	4f 83       	std	Y+7, r20	; 0x07
    15c6:	58 87       	std	Y+8, r21	; 0x08
    15c8:	69 87       	std	Y+9, r22	; 0x09
    15ca:	7a 87       	std	Y+10, r23	; 0x0a
    15cc:	8b 87       	std	Y+11, r24	; 0x0b
    15ce:	9c 2d       	mov	r25, r12
    15d0:	8a 2d       	mov	r24, r10
    15d2:	91 30       	cpi	r25, 0x01	; 1
    15d4:	39 f0       	breq	.+14     	; 0x15e4 <LCD_moveCursor+0x4c>
    15d6:	58 f0       	brcs	.+22     	; 0x15ee <LCD_moveCursor+0x56>
    15d8:	92 30       	cpi	r25, 0x02	; 2
    15da:	31 f0       	breq	.+12     	; 0x15e8 <LCD_moveCursor+0x50>
    15dc:	93 30       	cpi	r25, 0x03	; 3
    15de:	31 f0       	breq	.+12     	; 0x15ec <LCD_moveCursor+0x54>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	05 c0       	rjmp	.+10     	; 0x15ee <LCD_moveCursor+0x56>
    15e4:	80 5c       	subi	r24, 0xC0	; 192
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <LCD_moveCursor+0x56>
    15e8:	80 5f       	subi	r24, 0xF0	; 240
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <LCD_moveCursor+0x56>
    15ec:	80 5b       	subi	r24, 0xB0	; 176
    15ee:	80 68       	ori	r24, 0x80	; 128
    15f0:	c8 2e       	mov	r12, r24
    15f2:	e9 80       	ldd	r14, Y+1	; 0x01
    15f4:	fa 80       	ldd	r15, Y+2	; 0x02
    15f6:	0b 81       	ldd	r16, Y+3	; 0x03
    15f8:	1c 81       	ldd	r17, Y+4	; 0x04
    15fa:	2d 81       	ldd	r18, Y+5	; 0x05
    15fc:	3e 81       	ldd	r19, Y+6	; 0x06
    15fe:	4f 81       	ldd	r20, Y+7	; 0x07
    1600:	58 85       	ldd	r21, Y+8	; 0x08
    1602:	69 85       	ldd	r22, Y+9	; 0x09
    1604:	7a 85       	ldd	r23, Y+10	; 0x0a
    1606:	8b 85       	ldd	r24, Y+11	; 0x0b
    1608:	0e 94 e6 08 	call	0x11cc	; 0x11cc <LCD_sendCommand>
    160c:	2b 96       	adiw	r28, 0x0b	; 11
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	cf 90       	pop	r12
    1626:	af 90       	pop	r10
    1628:	08 95       	ret

0000162a <LCD_displayStringRowColumn>:
    162a:	5f 92       	push	r5
    162c:	6f 92       	push	r6
    162e:	7f 92       	push	r7
    1630:	8f 92       	push	r8
    1632:	9f 92       	push	r9
    1634:	af 92       	push	r10
    1636:	bf 92       	push	r11
    1638:	cf 92       	push	r12
    163a:	df 92       	push	r13
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	2b 97       	sbiw	r28, 0x0b	; 11
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	e9 82       	std	Y+1, r14	; 0x01
    165a:	fa 82       	std	Y+2, r15	; 0x02
    165c:	0b 83       	std	Y+3, r16	; 0x03
    165e:	1c 83       	std	Y+4, r17	; 0x04
    1660:	2d 83       	std	Y+5, r18	; 0x05
    1662:	3e 83       	std	Y+6, r19	; 0x06
    1664:	4f 83       	std	Y+7, r20	; 0x07
    1666:	58 87       	std	Y+8, r21	; 0x08
    1668:	69 87       	std	Y+9, r22	; 0x09
    166a:	7a 87       	std	Y+10, r23	; 0x0a
    166c:	8b 87       	std	Y+11, r24	; 0x0b
    166e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <LCD_moveCursor>
    1672:	64 01       	movw	r12, r8
    1674:	e9 80       	ldd	r14, Y+1	; 0x01
    1676:	fa 80       	ldd	r15, Y+2	; 0x02
    1678:	0b 81       	ldd	r16, Y+3	; 0x03
    167a:	1c 81       	ldd	r17, Y+4	; 0x04
    167c:	2d 81       	ldd	r18, Y+5	; 0x05
    167e:	3e 81       	ldd	r19, Y+6	; 0x06
    1680:	4f 81       	ldd	r20, Y+7	; 0x07
    1682:	58 85       	ldd	r21, Y+8	; 0x08
    1684:	69 85       	ldd	r22, Y+9	; 0x09
    1686:	7a 85       	ldd	r23, Y+10	; 0x0a
    1688:	8b 85       	ldd	r24, Y+11	; 0x0b
    168a:	0e 94 87 0a 	call	0x150e	; 0x150e <LCD_displayString>
    168e:	2b 96       	adiw	r28, 0x0b	; 11
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	bf 90       	pop	r11
    16ac:	af 90       	pop	r10
    16ae:	9f 90       	pop	r9
    16b0:	8f 90       	pop	r8
    16b2:	7f 90       	pop	r7
    16b4:	6f 90       	pop	r6
    16b6:	5f 90       	pop	r5
    16b8:	08 95       	ret

000016ba <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(ST_LCD_t lcd){
    16ba:	cf 92       	push	r12
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	2b 97       	sbiw	r28, 0x0b	; 11
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(lcd,LCD_CLEAR_COMMAND); /* Send clear display command */
    16d8:	cc 24       	eor	r12, r12
    16da:	c3 94       	inc	r12
    16dc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <LCD_sendCommand>
}
    16e0:	2b 96       	adiw	r28, 0x0b	; 11
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	cf 90       	pop	r12
    16fa:	08 95       	ret

000016fc <main>:

#include "Application/application.h"

int main(void)
{
	appInit();
    16fc:	0e 94 67 00 	call	0xce	; 0xce <appInit>
	while (1) 
    {
		appStart();
    1700:	0e 94 48 04 	call	0x890	; 0x890 <appStart>
    1704:	fd cf       	rjmp	.-6      	; 0x1700 <main+0x4>

00001706 <dio_init>:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;

}
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	11 f1       	breq	.+68     	; 0x174e <dio_init+0x48>
    170a:	30 f0       	brcs	.+12     	; 0x1718 <dio_init+0x12>
    170c:	82 30       	cpi	r24, 0x02	; 2
    170e:	d1 f1       	breq	.+116    	; 0x1784 <dio_init+0x7e>
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	09 f4       	brne	.+2      	; 0x1716 <dio_init+0x10>
    1714:	52 c0       	rjmp	.+164    	; 0x17ba <dio_init+0xb4>
    1716:	6c c0       	rjmp	.+216    	; 0x17f0 <dio_init+0xea>
    1718:	41 11       	cpse	r20, r1
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <dio_init+0x30>
    171c:	2a b3       	in	r18, 0x1a	; 26
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <dio_init+0x22>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	6a 95       	dec	r22
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <dio_init+0x1e>
    172c:	80 95       	com	r24
    172e:	82 23       	and	r24, r18
    1730:	8a bb       	out	0x1a, r24	; 26
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	08 95       	ret
    1736:	2a b3       	in	r18, 0x1a	; 26
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <dio_init+0x3c>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	6a 95       	dec	r22
    1744:	e2 f7       	brpl	.-8      	; 0x173e <dio_init+0x38>
    1746:	82 2b       	or	r24, r18
    1748:	8a bb       	out	0x1a, r24	; 26
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	08 95       	ret
    174e:	41 11       	cpse	r20, r1
    1750:	0d c0       	rjmp	.+26     	; 0x176c <dio_init+0x66>
    1752:	27 b3       	in	r18, 0x17	; 23
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 c0       	rjmp	.+4      	; 0x175e <dio_init+0x58>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	6a 95       	dec	r22
    1760:	e2 f7       	brpl	.-8      	; 0x175a <dio_init+0x54>
    1762:	80 95       	com	r24
    1764:	82 23       	and	r24, r18
    1766:	87 bb       	out	0x17, r24	; 23
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	08 95       	ret
    176c:	27 b3       	in	r18, 0x17	; 23
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <dio_init+0x72>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	6a 95       	dec	r22
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <dio_init+0x6e>
    177c:	82 2b       	or	r24, r18
    177e:	87 bb       	out	0x17, r24	; 23
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	08 95       	ret
    1784:	41 11       	cpse	r20, r1
    1786:	0d c0       	rjmp	.+26     	; 0x17a2 <dio_init+0x9c>
    1788:	24 b3       	in	r18, 0x14	; 20
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <dio_init+0x8e>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	6a 95       	dec	r22
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <dio_init+0x8a>
    1798:	80 95       	com	r24
    179a:	82 23       	and	r24, r18
    179c:	84 bb       	out	0x14, r24	; 20
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	08 95       	ret
    17a2:	24 b3       	in	r18, 0x14	; 20
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <dio_init+0xa8>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	6a 95       	dec	r22
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <dio_init+0xa4>
    17b2:	82 2b       	or	r24, r18
    17b4:	84 bb       	out	0x14, r24	; 20
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	08 95       	ret
    17ba:	41 11       	cpse	r20, r1
    17bc:	0d c0       	rjmp	.+26     	; 0x17d8 <dio_init+0xd2>
    17be:	21 b3       	in	r18, 0x11	; 17
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <dio_init+0xc4>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	6a 95       	dec	r22
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <dio_init+0xc0>
    17ce:	80 95       	com	r24
    17d0:	82 23       	and	r24, r18
    17d2:	81 bb       	out	0x11, r24	; 17
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	08 95       	ret
    17d8:	21 b3       	in	r18, 0x11	; 17
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <dio_init+0xde>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	6a 95       	dec	r22
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <dio_init+0xda>
    17e8:	82 2b       	or	r24, r18
    17ea:	81 bb       	out	0x11, r24	; 17
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	08 95       	ret
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	08 95       	ret

000017f4 <dio_write_pin>:
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	11 f1       	breq	.+68     	; 0x183c <dio_write_pin+0x48>
    17f8:	30 f0       	brcs	.+12     	; 0x1806 <dio_write_pin+0x12>
    17fa:	82 30       	cpi	r24, 0x02	; 2
    17fc:	d1 f1       	breq	.+116    	; 0x1872 <dio_write_pin+0x7e>
    17fe:	83 30       	cpi	r24, 0x03	; 3
    1800:	09 f4       	brne	.+2      	; 0x1804 <dio_write_pin+0x10>
    1802:	52 c0       	rjmp	.+164    	; 0x18a8 <dio_write_pin+0xb4>
    1804:	6c c0       	rjmp	.+216    	; 0x18de <dio_write_pin+0xea>
    1806:	41 11       	cpse	r20, r1
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <dio_write_pin+0x30>
    180a:	2b b3       	in	r18, 0x1b	; 27
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <dio_write_pin+0x22>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	6a 95       	dec	r22
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <dio_write_pin+0x1e>
    181a:	80 95       	com	r24
    181c:	82 23       	and	r24, r18
    181e:	8b bb       	out	0x1b, r24	; 27
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	08 95       	ret
    1824:	2b b3       	in	r18, 0x1b	; 27
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <dio_write_pin+0x3c>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	6a 95       	dec	r22
    1832:	e2 f7       	brpl	.-8      	; 0x182c <dio_write_pin+0x38>
    1834:	82 2b       	or	r24, r18
    1836:	8b bb       	out	0x1b, r24	; 27
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	08 95       	ret
    183c:	41 11       	cpse	r20, r1
    183e:	0d c0       	rjmp	.+26     	; 0x185a <dio_write_pin+0x66>
    1840:	28 b3       	in	r18, 0x18	; 24
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 c0       	rjmp	.+4      	; 0x184c <dio_write_pin+0x58>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	6a 95       	dec	r22
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <dio_write_pin+0x54>
    1850:	80 95       	com	r24
    1852:	82 23       	and	r24, r18
    1854:	88 bb       	out	0x18, r24	; 24
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	08 95       	ret
    185a:	28 b3       	in	r18, 0x18	; 24
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <dio_write_pin+0x72>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	6a 95       	dec	r22
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <dio_write_pin+0x6e>
    186a:	82 2b       	or	r24, r18
    186c:	88 bb       	out	0x18, r24	; 24
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	08 95       	ret
    1872:	41 11       	cpse	r20, r1
    1874:	0d c0       	rjmp	.+26     	; 0x1890 <dio_write_pin+0x9c>
    1876:	25 b3       	in	r18, 0x15	; 21
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <dio_write_pin+0x8e>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	6a 95       	dec	r22
    1884:	e2 f7       	brpl	.-8      	; 0x187e <dio_write_pin+0x8a>
    1886:	80 95       	com	r24
    1888:	82 23       	and	r24, r18
    188a:	85 bb       	out	0x15, r24	; 21
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	08 95       	ret
    1890:	25 b3       	in	r18, 0x15	; 21
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 c0       	rjmp	.+4      	; 0x189c <dio_write_pin+0xa8>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	6a 95       	dec	r22
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <dio_write_pin+0xa4>
    18a0:	82 2b       	or	r24, r18
    18a2:	85 bb       	out	0x15, r24	; 21
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	08 95       	ret
    18a8:	41 11       	cpse	r20, r1
    18aa:	0d c0       	rjmp	.+26     	; 0x18c6 <dio_write_pin+0xd2>
    18ac:	22 b3       	in	r18, 0x12	; 18
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <dio_write_pin+0xc4>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	6a 95       	dec	r22
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <dio_write_pin+0xc0>
    18bc:	80 95       	com	r24
    18be:	82 23       	and	r24, r18
    18c0:	82 bb       	out	0x12, r24	; 18
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	08 95       	ret
    18c6:	22 b3       	in	r18, 0x12	; 18
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <dio_write_pin+0xde>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	6a 95       	dec	r22
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <dio_write_pin+0xda>
    18d6:	82 2b       	or	r24, r18
    18d8:	82 bb       	out	0x12, r24	; 18
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	08 95       	ret
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	08 95       	ret

000018e2 <dio_read_pin>:

EN_DIO_ERROR_t dio_read_pin(uint8 port, uint8 pin,uint8 *data)
{
    switch(port){
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	91 f0       	breq	.+36     	; 0x190a <dio_read_pin+0x28>
    18e6:	28 f0       	brcs	.+10     	; 0x18f2 <dio_read_pin+0x10>
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	d9 f0       	breq	.+54     	; 0x1922 <dio_read_pin+0x40>
    18ec:	83 30       	cpi	r24, 0x03	; 3
    18ee:	29 f1       	breq	.+74     	; 0x193a <dio_read_pin+0x58>
    18f0:	30 c0       	rjmp	.+96     	; 0x1952 <dio_read_pin+0x70>
        case PORT_A:
            *data = READ_BIT(PINA,pin);
    18f2:	89 b3       	in	r24, 0x19	; 25
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <dio_read_pin+0x1a>
    18f8:	95 95       	asr	r25
    18fa:	87 95       	ror	r24
    18fc:	6a 95       	dec	r22
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <dio_read_pin+0x16>
    1900:	81 70       	andi	r24, 0x01	; 1
    1902:	fa 01       	movw	r30, r20
    1904:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    1906:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_read_pin(uint8 port, uint8 pin,uint8 *data)
{
    switch(port){
        case PORT_A:
            *data = READ_BIT(PINA,pin);
            break;
    1908:	08 95       	ret
        case PORT_B:
            *data =READ_BIT(PINB,pin);
    190a:	86 b3       	in	r24, 0x16	; 22
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <dio_read_pin+0x32>
    1910:	95 95       	asr	r25
    1912:	87 95       	ror	r24
    1914:	6a 95       	dec	r22
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <dio_read_pin+0x2e>
    1918:	81 70       	andi	r24, 0x01	; 1
    191a:	fa 01       	movw	r30, r20
    191c:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    191e:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_A:
            *data = READ_BIT(PINA,pin);
            break;
        case PORT_B:
            *data =READ_BIT(PINB,pin);
            break;
    1920:	08 95       	ret
        case PORT_C:
            *data =READ_BIT(PINC,pin);
    1922:	83 b3       	in	r24, 0x13	; 19
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 c0       	rjmp	.+4      	; 0x192c <dio_read_pin+0x4a>
    1928:	95 95       	asr	r25
    192a:	87 95       	ror	r24
    192c:	6a 95       	dec	r22
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <dio_read_pin+0x46>
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	fa 01       	movw	r30, r20
    1934:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    1936:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_B:
            *data =READ_BIT(PINB,pin);
            break;
        case PORT_C:
            *data =READ_BIT(PINC,pin);
            break;
    1938:	08 95       	ret
        case PORT_D:
            *data =READ_BIT(PIND,pin);
    193a:	80 b3       	in	r24, 0x10	; 16
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <dio_read_pin+0x62>
    1940:	95 95       	asr	r25
    1942:	87 95       	ror	r24
    1944:	6a 95       	dec	r22
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <dio_read_pin+0x5e>
    1948:	81 70       	andi	r24, 0x01	; 1
    194a:	fa 01       	movw	r30, r20
    194c:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    194e:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_C:
            *data =READ_BIT(PINC,pin);
            break;
        case PORT_D:
            *data =READ_BIT(PIND,pin);
            break;
    1950:	08 95       	ret
        default:
            return DIO_FAIL;
    1952:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }
    return DIO_SUCCESS;
}
    1954:	08 95       	ret

00001956 <dio_read_port>:

EN_DIO_ERROR_t dio_read_port(uint8 port,uint8 *data)
{
	switch(port){
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	59 f0       	breq	.+22     	; 0x1970 <dio_read_port+0x1a>
    195a:	28 f0       	brcs	.+10     	; 0x1966 <dio_read_port+0x10>
    195c:	82 30       	cpi	r24, 0x02	; 2
    195e:	69 f0       	breq	.+26     	; 0x197a <dio_read_port+0x24>
    1960:	83 30       	cpi	r24, 0x03	; 3
    1962:	81 f0       	breq	.+32     	; 0x1984 <dio_read_port+0x2e>
    1964:	14 c0       	rjmp	.+40     	; 0x198e <dio_read_port+0x38>
		case PORT_A:
		*data = PINA;
    1966:	89 b3       	in	r24, 0x19	; 25
    1968:	fb 01       	movw	r30, r22
    196a:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    196c:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_read_port(uint8 port,uint8 *data)
{
	switch(port){
		case PORT_A:
		*data = PINA;
		break;
    196e:	08 95       	ret
		case PORT_B:
		*data =PINB;
    1970:	86 b3       	in	r24, 0x16	; 22
    1972:	fb 01       	movw	r30, r22
    1974:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    1976:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*data = PINA;
		break;
		case PORT_B:
		*data =PINB;
		break;
    1978:	08 95       	ret
		case PORT_C:
		*data =PINC;
    197a:	83 b3       	in	r24, 0x13	; 19
    197c:	fb 01       	movw	r30, r22
    197e:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    1980:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*data =PINB;
		break;
		case PORT_C:
		*data =PINC;
		break;
    1982:	08 95       	ret
		case PORT_D:
		*data =PIND;
    1984:	80 b3       	in	r24, 0x10	; 16
    1986:	fb 01       	movw	r30, r22
    1988:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    198a:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*data =PINC;
		break;
		case PORT_D:
		*data =PIND;
		break;
    198c:	08 95       	ret
		default:
		return DIO_FAIL;
    198e:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_SUCCESS;
}
    1990:	08 95       	ret

00001992 <dio_write_port>:


EN_DIO_ERROR_t dio_write_port(uint8 port,uint8 value)
{
	switch(port){
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	49 f0       	breq	.+18     	; 0x19a8 <dio_write_port+0x16>
    1996:	28 f0       	brcs	.+10     	; 0x19a2 <dio_write_port+0x10>
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	49 f0       	breq	.+18     	; 0x19ae <dio_write_port+0x1c>
    199c:	83 30       	cpi	r24, 0x03	; 3
    199e:	51 f0       	breq	.+20     	; 0x19b4 <dio_write_port+0x22>
    19a0:	0c c0       	rjmp	.+24     	; 0x19ba <dio_write_port+0x28>
		case PORT_A:
		PORTA = value;
    19a2:	6b bb       	out	0x1b, r22	; 27
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_write_port(uint8 port,uint8 value)
{
	switch(port){
		case PORT_A:
		PORTA = value;
		break;
    19a6:	08 95       	ret
		case PORT_B:
		PORTB = value;
    19a8:	68 bb       	out	0x18, r22	; 24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		PORTA = value;
		break;
		case PORT_B:
		PORTB = value;
		break;
    19ac:	08 95       	ret
		case PORT_C:
		PORTC = value;
    19ae:	65 bb       	out	0x15, r22	; 21
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		PORTB = value;
		break;
		case PORT_C:
		PORTC = value;
		break;
    19b2:	08 95       	ret
		case PORT_D:
		PORTD = value;
    19b4:	62 bb       	out	0x12, r22	; 18
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		PORTC = value;
		break;
		case PORT_D:
		PORTD = value;
		break;
    19b8:	08 95       	ret
		default:
		return DIO_FAIL;
    19ba:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_SUCCESS;
    19bc:	08 95       	ret

000019be <SPI_initSlave>:
{
	/* Start transmission */
	SPDR = cData;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
}
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	64 e0       	ldi	r22, 0x04	; 4
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	65 e0       	ldi	r22, 0x05	; 5
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	66 e0       	ldi	r22, 0x06	; 6
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	67 e0       	ldi	r22, 0x07	; 7
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	0e 94 83 0b 	call	0x1706	; 0x1706 <dio_init>
    19e6:	80 e4       	ldi	r24, 0x40	; 64
    19e8:	8d b9       	out	0x0d, r24	; 13
    19ea:	8e b1       	in	r24, 0x0e	; 14
    19ec:	8e 7f       	andi	r24, 0xFE	; 254
    19ee:	8e b9       	out	0x0e, r24	; 14
    19f0:	08 95       	ret

000019f2 <SPI_sendReceiveByte>:
    19f2:	8f b9       	out	0x0f, r24	; 15
    19f4:	77 9b       	sbis	0x0e, 7	; 14
    19f6:	fe cf       	rjmp	.-4      	; 0x19f4 <SPI_sendReceiveByte+0x2>
    19f8:	8f b1       	in	r24, 0x0f	; 15
    19fa:	08 95       	ret

000019fc <SPI_SlaveReceive>:

uint8 SPI_SlaveReceive(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
    19fc:	77 9b       	sbis	0x0e, 7	; 14
    19fe:	fe cf       	rjmp	.-4      	; 0x19fc <SPI_SlaveReceive>
	/* Return data register */
	return SPDR;
    1a00:	8f b1       	in	r24, 0x0f	; 15
    1a02:	08 95       	ret

00001a04 <calc_prescaler>:
		init_value=0;
	}
	TCNT0=init_value;
	g_callBackPtr_0=g_ptr;
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
}
    1a04:	cf 92       	push	r12
    1a06:	df 92       	push	r13
    1a08:	ef 92       	push	r14
    1a0a:	ff 92       	push	r15
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	6b 01       	movw	r12, r22
    1a12:	7c 01       	movw	r14, r24
    1a14:	ea 01       	movw	r28, r20
    1a16:	2c ee       	ldi	r18, 0xEC	; 236
    1a18:	31 e1       	ldi	r19, 0x11	; 17
    1a1a:	43 e8       	ldi	r20, 0x83	; 131
    1a1c:	53 e4       	ldi	r21, 0x43	; 67
    1a1e:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	0c f4       	brge	.+2      	; 0x1a28 <calc_prescaler+0x24>
    1a26:	53 c0       	rjmp	.+166    	; 0x1ace <calc_prescaler+0xca>
    1a28:	28 eb       	ldi	r18, 0xB8	; 184
    1a2a:	3e e1       	ldi	r19, 0x1E	; 30
    1a2c:	45 e8       	ldi	r20, 0x85	; 133
    1a2e:	5e e3       	ldi	r21, 0x3E	; 62
    1a30:	c7 01       	movw	r24, r14
    1a32:	b6 01       	movw	r22, r12
    1a34:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	2c f0       	brlt	.+10     	; 0x1a46 <calc_prescaler+0x42>
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	99 83       	std	Y+1, r25	; 0x01
    1a42:	88 83       	st	Y, r24
    1a44:	45 c0       	rjmp	.+138    	; 0x1ad0 <calc_prescaler+0xcc>
    1a46:	23 e3       	ldi	r18, 0x33	; 51
    1a48:	33 e3       	ldi	r19, 0x33	; 51
    1a4a:	43 e0       	ldi	r20, 0x03	; 3
    1a4c:	50 e4       	ldi	r21, 0x40	; 64
    1a4e:	c7 01       	movw	r24, r14
    1a50:	b6 01       	movw	r22, r12
    1a52:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	34 f0       	brlt	.+12     	; 0x1a66 <calc_prescaler+0x62>
    1a5a:	88 e0       	ldi	r24, 0x08	; 8
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	99 83       	std	Y+1, r25	; 0x01
    1a60:	88 83       	st	Y, r24
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	35 c0       	rjmp	.+106    	; 0x1ad0 <calc_prescaler+0xcc>
    1a66:	2d e3       	ldi	r18, 0x3D	; 61
    1a68:	3a e0       	ldi	r19, 0x0A	; 10
    1a6a:	43 e8       	ldi	r20, 0x83	; 131
    1a6c:	51 e4       	ldi	r21, 0x41	; 65
    1a6e:	c7 01       	movw	r24, r14
    1a70:	b6 01       	movw	r22, r12
    1a72:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	34 f0       	brlt	.+12     	; 0x1a86 <calc_prescaler+0x82>
    1a7a:	80 e4       	ldi	r24, 0x40	; 64
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	99 83       	std	Y+1, r25	; 0x01
    1a80:	88 83       	st	Y, r24
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	25 c0       	rjmp	.+74     	; 0x1ad0 <calc_prescaler+0xcc>
    1a86:	2b e7       	ldi	r18, 0x7B	; 123
    1a88:	34 e1       	ldi	r19, 0x14	; 20
    1a8a:	43 e8       	ldi	r20, 0x83	; 131
    1a8c:	52 e4       	ldi	r21, 0x42	; 66
    1a8e:	c7 01       	movw	r24, r14
    1a90:	b6 01       	movw	r22, r12
    1a92:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	34 f0       	brlt	.+12     	; 0x1aa6 <calc_prescaler+0xa2>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	99 83       	std	Y+1, r25	; 0x01
    1aa0:	88 83       	st	Y, r24
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	15 c0       	rjmp	.+42     	; 0x1ad0 <calc_prescaler+0xcc>
    1aa6:	2c ee       	ldi	r18, 0xEC	; 236
    1aa8:	31 e1       	ldi	r19, 0x11	; 17
    1aaa:	43 e8       	ldi	r20, 0x83	; 131
    1aac:	53 e4       	ldi	r21, 0x43	; 67
    1aae:	c7 01       	movw	r24, r14
    1ab0:	b6 01       	movw	r22, r12
    1ab2:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	34 f0       	brlt	.+12     	; 0x1ac6 <calc_prescaler+0xc2>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	94 e0       	ldi	r25, 0x04	; 4
    1abe:	99 83       	std	Y+1, r25	; 0x01
    1ac0:	88 83       	st	Y, r24
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	05 c0       	rjmp	.+10     	; 0x1ad0 <calc_prescaler+0xcc>
    1ac6:	19 82       	std	Y+1, r1	; 0x01
    1ac8:	18 82       	st	Y, r1
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <calc_prescaler+0xcc>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	ff 90       	pop	r15
    1ad6:	ef 90       	pop	r14
    1ad8:	df 90       	pop	r13
    1ada:	cf 90       	pop	r12
    1adc:	08 95       	ret

00001ade <calc_initialValue>:
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	eb 01       	movw	r28, r22
    1ae4:	80 34       	cpi	r24, 0x40	; 64
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	81 f1       	breq	.+96     	; 0x1b4a <calc_initialValue+0x6c>
    1aea:	30 f4       	brcc	.+12     	; 0x1af8 <calc_initialValue+0x1a>
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <calc_initialValue+0x2c>
    1af2:	08 97       	sbiw	r24, 0x08	; 8
    1af4:	d1 f0       	breq	.+52     	; 0x1b2a <calc_initialValue+0x4c>
    1af6:	59 c0       	rjmp	.+178    	; 0x1baa <calc_initialValue+0xcc>
    1af8:	81 15       	cp	r24, r1
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	96 07       	cpc	r25, r22
    1afe:	a9 f1       	breq	.+106    	; 0x1b6a <calc_initialValue+0x8c>
    1b00:	81 15       	cp	r24, r1
    1b02:	94 40       	sbci	r25, 0x04	; 4
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <calc_initialValue+0x2a>
    1b06:	41 c0       	rjmp	.+130    	; 0x1b8a <calc_initialValue+0xac>
    1b08:	50 c0       	rjmp	.+160    	; 0x1baa <calc_initialValue+0xcc>
    1b0a:	68 eb       	ldi	r22, 0xB8	; 184
    1b0c:	7e e1       	ldi	r23, 0x1E	; 30
    1b0e:	85 e8       	ldi	r24, 0x85	; 133
    1b10:	9e e3       	ldi	r25, 0x3E	; 62
    1b12:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1b16:	2f e6       	ldi	r18, 0x6F	; 111
    1b18:	32 e1       	ldi	r19, 0x12	; 18
    1b1a:	43 e8       	ldi	r20, 0x83	; 131
    1b1c:	5a e3       	ldi	r21, 0x3A	; 58
    1b1e:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1b22:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1b26:	68 83       	st	Y, r22
    1b28:	41 c0       	rjmp	.+130    	; 0x1bac <calc_initialValue+0xce>
    1b2a:	63 e3       	ldi	r22, 0x33	; 51
    1b2c:	73 e3       	ldi	r23, 0x33	; 51
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	90 e4       	ldi	r25, 0x40	; 64
    1b32:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1b36:	2f e6       	ldi	r18, 0x6F	; 111
    1b38:	32 e1       	ldi	r19, 0x12	; 18
    1b3a:	43 e0       	ldi	r20, 0x03	; 3
    1b3c:	5c e3       	ldi	r21, 0x3C	; 60
    1b3e:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1b42:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1b46:	68 83       	st	Y, r22
    1b48:	31 c0       	rjmp	.+98     	; 0x1bac <calc_initialValue+0xce>
    1b4a:	6d e3       	ldi	r22, 0x3D	; 61
    1b4c:	7a e0       	ldi	r23, 0x0A	; 10
    1b4e:	83 e8       	ldi	r24, 0x83	; 131
    1b50:	91 e4       	ldi	r25, 0x41	; 65
    1b52:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1b56:	2f e6       	ldi	r18, 0x6F	; 111
    1b58:	32 e1       	ldi	r19, 0x12	; 18
    1b5a:	43 e8       	ldi	r20, 0x83	; 131
    1b5c:	5d e3       	ldi	r21, 0x3D	; 61
    1b5e:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1b62:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1b66:	68 83       	st	Y, r22
    1b68:	21 c0       	rjmp	.+66     	; 0x1bac <calc_initialValue+0xce>
    1b6a:	6b e7       	ldi	r22, 0x7B	; 123
    1b6c:	74 e1       	ldi	r23, 0x14	; 20
    1b6e:	83 e8       	ldi	r24, 0x83	; 131
    1b70:	92 e4       	ldi	r25, 0x42	; 66
    1b72:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1b76:	2f e6       	ldi	r18, 0x6F	; 111
    1b78:	32 e1       	ldi	r19, 0x12	; 18
    1b7a:	43 e8       	ldi	r20, 0x83	; 131
    1b7c:	5e e3       	ldi	r21, 0x3E	; 62
    1b7e:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1b82:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1b86:	68 83       	st	Y, r22
    1b88:	11 c0       	rjmp	.+34     	; 0x1bac <calc_initialValue+0xce>
    1b8a:	6c ee       	ldi	r22, 0xEC	; 236
    1b8c:	71 e1       	ldi	r23, 0x11	; 17
    1b8e:	83 e8       	ldi	r24, 0x83	; 131
    1b90:	93 e4       	ldi	r25, 0x43	; 67
    1b92:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1b96:	2f e6       	ldi	r18, 0x6F	; 111
    1b98:	32 e1       	ldi	r19, 0x12	; 18
    1b9a:	43 e8       	ldi	r20, 0x83	; 131
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1ba2:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1ba6:	68 83       	st	Y, r22
    1ba8:	01 c0       	rjmp	.+2      	; 0x1bac <calc_initialValue+0xce>
    1baa:	18 82       	st	Y, r1
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <set_prescale>:
    1bb2:	80 34       	cpi	r24, 0x40	; 64
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	a9 f0       	breq	.+42     	; 0x1be2 <set_prescale+0x30>
    1bb8:	30 f4       	brcc	.+12     	; 0x1bc6 <set_prescale+0x14>
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	59 f0       	breq	.+22     	; 0x1bd6 <set_prescale+0x24>
    1bc0:	08 97       	sbiw	r24, 0x08	; 8
    1bc2:	61 f0       	breq	.+24     	; 0x1bdc <set_prescale+0x2a>
    1bc4:	17 c0       	rjmp	.+46     	; 0x1bf4 <set_prescale+0x42>
    1bc6:	81 15       	cp	r24, r1
    1bc8:	21 e0       	ldi	r18, 0x01	; 1
    1bca:	92 07       	cpc	r25, r18
    1bcc:	69 f0       	breq	.+26     	; 0x1be8 <set_prescale+0x36>
    1bce:	81 15       	cp	r24, r1
    1bd0:	94 40       	sbci	r25, 0x04	; 4
    1bd2:	69 f0       	breq	.+26     	; 0x1bee <set_prescale+0x3c>
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <set_prescale+0x42>
    1bd6:	81 e8       	ldi	r24, 0x81	; 129
    1bd8:	83 bf       	out	0x33, r24	; 51
    1bda:	08 95       	ret
    1bdc:	82 e8       	ldi	r24, 0x82	; 130
    1bde:	83 bf       	out	0x33, r24	; 51
    1be0:	08 95       	ret
    1be2:	83 e8       	ldi	r24, 0x83	; 131
    1be4:	83 bf       	out	0x33, r24	; 51
    1be6:	08 95       	ret
    1be8:	84 e8       	ldi	r24, 0x84	; 132
    1bea:	83 bf       	out	0x33, r24	; 51
    1bec:	08 95       	ret
    1bee:	85 e8       	ldi	r24, 0x85	; 133
    1bf0:	83 bf       	out	0x33, r24	; 51
    1bf2:	08 95       	ret
    1bf4:	13 be       	out	0x33, r1	; 51
    1bf6:	08 95       	ret

00001bf8 <Timer0_Delay>:
    1bf8:	8f 92       	push	r8
    1bfa:	9f 92       	push	r9
    1bfc:	af 92       	push	r10
    1bfe:	bf 92       	push	r11
    1c00:	cf 92       	push	r12
    1c02:	df 92       	push	r13
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	27 97       	sbiw	r28, 0x07	; 7
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	6b 01       	movw	r12, r22
    1c20:	7c 01       	movw	r14, r24
    1c22:	ae 01       	movw	r20, r28
    1c24:	4f 5f       	subi	r20, 0xFF	; 255
    1c26:	5f 4f       	sbci	r21, 0xFF	; 255
    1c28:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <calc_prescaler>
    1c2c:	88 23       	and	r24, r24
    1c2e:	71 f0       	breq	.+28     	; 0x1c4c <Timer0_Delay+0x54>
    1c30:	a7 01       	movw	r20, r14
    1c32:	96 01       	movw	r18, r12
    1c34:	be 01       	movw	r22, r28
    1c36:	6d 5f       	subi	r22, 0xFD	; 253
    1c38:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <calc_initialValue>
    1c42:	1c 82       	std	Y+4, r1	; 0x04
    1c44:	1d 82       	std	Y+5, r1	; 0x05
    1c46:	1e 82       	std	Y+6, r1	; 0x06
    1c48:	1f 82       	std	Y+7, r1	; 0x07
    1c4a:	11 c0       	rjmp	.+34     	; 0x1c6e <Timer0_Delay+0x76>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	94 e0       	ldi	r25, 0x04	; 4
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	2c ee       	ldi	r18, 0xEC	; 236
    1c56:	31 e1       	ldi	r19, 0x11	; 17
    1c58:	43 e8       	ldi	r20, 0x83	; 131
    1c5a:	53 e4       	ldi	r21, 0x43	; 67
    1c5c:	c7 01       	movw	r24, r14
    1c5e:	b6 01       	movw	r22, r12
    1c60:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1c64:	6c 83       	std	Y+4, r22	; 0x04
    1c66:	7d 83       	std	Y+5, r23	; 0x05
    1c68:	8e 83       	std	Y+6, r24	; 0x06
    1c6a:	9f 83       	std	Y+7, r25	; 0x07
    1c6c:	1b 82       	std	Y+3, r1	; 0x03
    1c6e:	cc 80       	ldd	r12, Y+4	; 0x04
    1c70:	dd 80       	ldd	r13, Y+5	; 0x05
    1c72:	ee 80       	ldd	r14, Y+6	; 0x06
    1c74:	ff 80       	ldd	r15, Y+7	; 0x07
    1c76:	c7 01       	movw	r24, r14
    1c78:	b6 01       	movw	r22, r12
    1c7a:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1c7e:	16 2f       	mov	r17, r22
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatsisf>
    1c8a:	9b 01       	movw	r18, r22
    1c8c:	ac 01       	movw	r20, r24
    1c8e:	c7 01       	movw	r24, r14
    1c90:	b6 01       	movw	r22, r12
    1c92:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1c96:	2c ee       	ldi	r18, 0xEC	; 236
    1c98:	31 e1       	ldi	r19, 0x11	; 17
    1c9a:	43 e8       	ldi	r20, 0x83	; 131
    1c9c:	53 e4       	ldi	r21, 0x43	; 67
    1c9e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__mulsf3>
    1ca2:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1ca6:	f6 2e       	mov	r15, r22
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	82 bf       	out	0x32, r24	; 50
    1cac:	11 11       	cpse	r17, r1
    1cae:	08 c0       	rjmp	.+16     	; 0x1cc0 <Timer0_Delay+0xc8>
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <set_prescale>
    1cb8:	08 b6       	in	r0, 0x38	; 56
    1cba:	00 fe       	sbrs	r0, 0
    1cbc:	fd cf       	rjmp	.-6      	; 0x1cb8 <Timer0_Delay+0xc0>
    1cbe:	00 c1       	rjmp	.+512    	; 0x1ec0 <Timer0_Delay+0x2c8>
    1cc0:	85 e8       	ldi	r24, 0x85	; 133
    1cc2:	83 bf       	out	0x33, r24	; 51
    1cc4:	07 c0       	rjmp	.+14     	; 0x1cd4 <Timer0_Delay+0xdc>
    1cc6:	08 b6       	in	r0, 0x38	; 56
    1cc8:	00 fe       	sbrs	r0, 0
    1cca:	fd cf       	rjmp	.-6      	; 0x1cc6 <Timer0_Delay+0xce>
    1ccc:	11 50       	subi	r17, 0x01	; 1
    1cce:	88 b7       	in	r24, 0x38	; 56
    1cd0:	81 60       	ori	r24, 0x01	; 1
    1cd2:	88 bf       	out	0x38, r24	; 56
    1cd4:	11 11       	cpse	r17, r1
    1cd6:	f7 cf       	rjmp	.-18     	; 0x1cc6 <Timer0_Delay+0xce>
    1cd8:	ff 20       	and	r15, r15
    1cda:	09 f4       	brne	.+2      	; 0x1cde <Timer0_Delay+0xe6>
    1cdc:	53 c0       	rjmp	.+166    	; 0x1d84 <Timer0_Delay+0x18c>
    1cde:	6f 2d       	mov	r22, r15
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatsisf>
    1cea:	4b 01       	movw	r8, r22
    1cec:	5c 01       	movw	r10, r24
    1cee:	28 eb       	ldi	r18, 0xB8	; 184
    1cf0:	3e e1       	ldi	r19, 0x1E	; 30
    1cf2:	45 e8       	ldi	r20, 0x85	; 133
    1cf4:	5e e3       	ldi	r21, 0x3E	; 62
    1cf6:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	2c f0       	brlt	.+10     	; 0x1d08 <Timer0_Delay+0x110>
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	3e c0       	rjmp	.+124    	; 0x1d84 <Timer0_Delay+0x18c>
    1d08:	23 e3       	ldi	r18, 0x33	; 51
    1d0a:	33 e3       	ldi	r19, 0x33	; 51
    1d0c:	43 e0       	ldi	r20, 0x03	; 3
    1d0e:	50 e4       	ldi	r21, 0x40	; 64
    1d10:	c5 01       	movw	r24, r10
    1d12:	b4 01       	movw	r22, r8
    1d14:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1d18:	18 16       	cp	r1, r24
    1d1a:	2c f0       	brlt	.+10     	; 0x1d26 <Timer0_Delay+0x12e>
    1d1c:	88 e0       	ldi	r24, 0x08	; 8
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	2f c0       	rjmp	.+94     	; 0x1d84 <Timer0_Delay+0x18c>
    1d26:	2d e3       	ldi	r18, 0x3D	; 61
    1d28:	3a e0       	ldi	r19, 0x0A	; 10
    1d2a:	43 e8       	ldi	r20, 0x83	; 131
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	c5 01       	movw	r24, r10
    1d30:	b4 01       	movw	r22, r8
    1d32:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1d36:	18 16       	cp	r1, r24
    1d38:	2c f0       	brlt	.+10     	; 0x1d44 <Timer0_Delay+0x14c>
    1d3a:	80 e4       	ldi	r24, 0x40	; 64
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	20 c0       	rjmp	.+64     	; 0x1d84 <Timer0_Delay+0x18c>
    1d44:	2b e7       	ldi	r18, 0x7B	; 123
    1d46:	34 e1       	ldi	r19, 0x14	; 20
    1d48:	43 e8       	ldi	r20, 0x83	; 131
    1d4a:	52 e4       	ldi	r21, 0x42	; 66
    1d4c:	c5 01       	movw	r24, r10
    1d4e:	b4 01       	movw	r22, r8
    1d50:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	2c f0       	brlt	.+10     	; 0x1d62 <Timer0_Delay+0x16a>
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	91 e0       	ldi	r25, 0x01	; 1
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	11 c0       	rjmp	.+34     	; 0x1d84 <Timer0_Delay+0x18c>
    1d62:	2c ee       	ldi	r18, 0xEC	; 236
    1d64:	31 e1       	ldi	r19, 0x11	; 17
    1d66:	43 e8       	ldi	r20, 0x83	; 131
    1d68:	53 e4       	ldi	r21, 0x43	; 67
    1d6a:	c5 01       	movw	r24, r10
    1d6c:	b4 01       	movw	r22, r8
    1d6e:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	2c f0       	brlt	.+10     	; 0x1d80 <Timer0_Delay+0x188>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	94 e0       	ldi	r25, 0x04	; 4
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <Timer0_Delay+0x18c>
    1d80:	1a 82       	std	Y+2, r1	; 0x02
    1d82:	19 82       	std	Y+1, r1	; 0x01
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	80 34       	cpi	r24, 0x40	; 64
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <Timer0_Delay+0x198>
    1d8e:	45 c0       	rjmp	.+138    	; 0x1e1a <Timer0_Delay+0x222>
    1d90:	30 f4       	brcc	.+12     	; 0x1d9e <Timer0_Delay+0x1a6>
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	91 05       	cpc	r25, r1
    1d96:	69 f0       	breq	.+26     	; 0x1db2 <Timer0_Delay+0x1ba>
    1d98:	08 97       	sbiw	r24, 0x08	; 8
    1d9a:	29 f1       	breq	.+74     	; 0x1de6 <Timer0_Delay+0x1ee>
    1d9c:	8c c0       	rjmp	.+280    	; 0x1eb6 <Timer0_Delay+0x2be>
    1d9e:	81 15       	cp	r24, r1
    1da0:	21 e0       	ldi	r18, 0x01	; 1
    1da2:	92 07       	cpc	r25, r18
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <Timer0_Delay+0x1b0>
    1da6:	53 c0       	rjmp	.+166    	; 0x1e4e <Timer0_Delay+0x256>
    1da8:	81 15       	cp	r24, r1
    1daa:	94 40       	sbci	r25, 0x04	; 4
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <Timer0_Delay+0x1b8>
    1dae:	69 c0       	rjmp	.+210    	; 0x1e82 <Timer0_Delay+0x28a>
    1db0:	82 c0       	rjmp	.+260    	; 0x1eb6 <Timer0_Delay+0x2be>
    1db2:	6f 2d       	mov	r22, r15
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatsisf>
    1dbe:	9b 01       	movw	r18, r22
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	68 eb       	ldi	r22, 0xB8	; 184
    1dc4:	7e e1       	ldi	r23, 0x1E	; 30
    1dc6:	85 e8       	ldi	r24, 0x85	; 133
    1dc8:	9e e3       	ldi	r25, 0x3E	; 62
    1dca:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1dce:	2f e6       	ldi	r18, 0x6F	; 111
    1dd0:	32 e1       	ldi	r19, 0x12	; 18
    1dd2:	43 e8       	ldi	r20, 0x83	; 131
    1dd4:	5a e3       	ldi	r21, 0x3A	; 58
    1dd6:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1dda:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1dde:	62 bf       	out	0x32, r22	; 50
    1de0:	81 e8       	ldi	r24, 0x81	; 129
    1de2:	83 bf       	out	0x33, r24	; 51
    1de4:	6a c0       	rjmp	.+212    	; 0x1eba <Timer0_Delay+0x2c2>
    1de6:	6f 2d       	mov	r22, r15
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatsisf>
    1df2:	9b 01       	movw	r18, r22
    1df4:	ac 01       	movw	r20, r24
    1df6:	63 e3       	ldi	r22, 0x33	; 51
    1df8:	73 e3       	ldi	r23, 0x33	; 51
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	90 e4       	ldi	r25, 0x40	; 64
    1dfe:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1e02:	2f e6       	ldi	r18, 0x6F	; 111
    1e04:	32 e1       	ldi	r19, 0x12	; 18
    1e06:	43 e0       	ldi	r20, 0x03	; 3
    1e08:	5c e3       	ldi	r21, 0x3C	; 60
    1e0a:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1e0e:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1e12:	62 bf       	out	0x32, r22	; 50
    1e14:	82 e8       	ldi	r24, 0x82	; 130
    1e16:	83 bf       	out	0x33, r24	; 51
    1e18:	50 c0       	rjmp	.+160    	; 0x1eba <Timer0_Delay+0x2c2>
    1e1a:	6f 2d       	mov	r22, r15
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatsisf>
    1e26:	9b 01       	movw	r18, r22
    1e28:	ac 01       	movw	r20, r24
    1e2a:	6d e3       	ldi	r22, 0x3D	; 61
    1e2c:	7a e0       	ldi	r23, 0x0A	; 10
    1e2e:	83 e8       	ldi	r24, 0x83	; 131
    1e30:	91 e4       	ldi	r25, 0x41	; 65
    1e32:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1e36:	2f e6       	ldi	r18, 0x6F	; 111
    1e38:	32 e1       	ldi	r19, 0x12	; 18
    1e3a:	43 e8       	ldi	r20, 0x83	; 131
    1e3c:	5d e3       	ldi	r21, 0x3D	; 61
    1e3e:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1e42:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1e46:	62 bf       	out	0x32, r22	; 50
    1e48:	83 e8       	ldi	r24, 0x83	; 131
    1e4a:	83 bf       	out	0x33, r24	; 51
    1e4c:	36 c0       	rjmp	.+108    	; 0x1eba <Timer0_Delay+0x2c2>
    1e4e:	6f 2d       	mov	r22, r15
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatsisf>
    1e5a:	9b 01       	movw	r18, r22
    1e5c:	ac 01       	movw	r20, r24
    1e5e:	6b e7       	ldi	r22, 0x7B	; 123
    1e60:	74 e1       	ldi	r23, 0x14	; 20
    1e62:	83 e8       	ldi	r24, 0x83	; 131
    1e64:	92 e4       	ldi	r25, 0x42	; 66
    1e66:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1e6a:	2f e6       	ldi	r18, 0x6F	; 111
    1e6c:	32 e1       	ldi	r19, 0x12	; 18
    1e6e:	43 e8       	ldi	r20, 0x83	; 131
    1e70:	5e e3       	ldi	r21, 0x3E	; 62
    1e72:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1e76:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1e7a:	62 bf       	out	0x32, r22	; 50
    1e7c:	84 e8       	ldi	r24, 0x84	; 132
    1e7e:	83 bf       	out	0x33, r24	; 51
    1e80:	1c c0       	rjmp	.+56     	; 0x1eba <Timer0_Delay+0x2c2>
    1e82:	6f 2d       	mov	r22, r15
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatsisf>
    1e8e:	9b 01       	movw	r18, r22
    1e90:	ac 01       	movw	r20, r24
    1e92:	6c ee       	ldi	r22, 0xEC	; 236
    1e94:	71 e1       	ldi	r23, 0x11	; 17
    1e96:	83 e8       	ldi	r24, 0x83	; 131
    1e98:	93 e4       	ldi	r25, 0x43	; 67
    1e9a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1e9e:	2f e6       	ldi	r18, 0x6F	; 111
    1ea0:	32 e1       	ldi	r19, 0x12	; 18
    1ea2:	43 e8       	ldi	r20, 0x83	; 131
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 27 10 	call	0x204e	; 0x204e <__divsf3>
    1eaa:	0e 94 99 10 	call	0x2132	; 0x2132 <__fixunssfsi>
    1eae:	62 bf       	out	0x32, r22	; 50
    1eb0:	85 e8       	ldi	r24, 0x85	; 133
    1eb2:	83 bf       	out	0x33, r24	; 51
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <Timer0_Delay+0x2c2>
    1eb6:	12 be       	out	0x32, r1	; 50
    1eb8:	13 be       	out	0x33, r1	; 51
    1eba:	08 b6       	in	r0, 0x38	; 56
    1ebc:	00 fe       	sbrs	r0, 0
    1ebe:	fd cf       	rjmp	.-6      	; 0x1eba <Timer0_Delay+0x2c2>
    1ec0:	88 b7       	in	r24, 0x38	; 56
    1ec2:	81 60       	ori	r24, 0x01	; 1
    1ec4:	88 bf       	out	0x38, r24	; 56
    1ec6:	13 be       	out	0x33, r1	; 51
    1ec8:	27 96       	adiw	r28, 0x07	; 7
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	1f 91       	pop	r17
    1eda:	ff 90       	pop	r15
    1edc:	ef 90       	pop	r14
    1ede:	df 90       	pop	r13
    1ee0:	cf 90       	pop	r12
    1ee2:	bf 90       	pop	r11
    1ee4:	af 90       	pop	r10
    1ee6:	9f 90       	pop	r9
    1ee8:	8f 90       	pop	r8
    1eea:	08 95       	ret

00001eec <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1eec:	1f 92       	push	r1
    1eee:	0f 92       	push	r0
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	0f 92       	push	r0
    1ef4:	11 24       	eor	r1, r1
    1ef6:	2f 93       	push	r18
    1ef8:	3f 93       	push	r19
    1efa:	4f 93       	push	r20
    1efc:	5f 93       	push	r21
    1efe:	6f 93       	push	r22
    1f00:	7f 93       	push	r23
    1f02:	8f 93       	push	r24
    1f04:	9f 93       	push	r25
    1f06:	af 93       	push	r26
    1f08:	bf 93       	push	r27
    1f0a:	ef 93       	push	r30
    1f0c:	ff 93       	push	r31
	if(g_callBackPtr_0 !=  ((void*)0))
    1f0e:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <g_callBackPtr_0>
    1f12:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <g_callBackPtr_0+0x1>
    1f16:	30 97       	sbiw	r30, 0x00	; 0
    1f18:	b9 f0       	breq	.+46     	; 0x1f48 <__vector_11+0x5c>
	{
		if(NO_OF_OVERFLOWS > 0)
    1f1a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <NO_OF_OVERFLOWS>
    1f1e:	88 23       	and	r24, r24
    1f20:	79 f0       	breq	.+30     	; 0x1f40 <__vector_11+0x54>
		{
			g_tick++;
    1f22:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <g_tick>
    1f26:	8f 5f       	subi	r24, 0xFF	; 255
    1f28:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <g_tick>
			if(g_tick == NO_OF_OVERFLOWS)
    1f2c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <g_tick>
    1f30:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <NO_OF_OVERFLOWS>
    1f34:	98 13       	cpse	r25, r24
    1f36:	08 c0       	rjmp	.+16     	; 0x1f48 <__vector_11+0x5c>
			{
				g_callBackPtr_0();
    1f38:	09 95       	icall
				g_tick = 0; //clear the tick counter again to start new count
    1f3a:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <g_tick>
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <__vector_11+0x5c>
			}
		}
		else
		{
			g_callBackPtr_0();
    1f40:	09 95       	icall
			TCNT0=init_value;
    1f42:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
    1f46:	82 bf       	out	0x32, r24	; 50
		}
	}
}
    1f48:	ff 91       	pop	r31
    1f4a:	ef 91       	pop	r30
    1f4c:	bf 91       	pop	r27
    1f4e:	af 91       	pop	r26
    1f50:	9f 91       	pop	r25
    1f52:	8f 91       	pop	r24
    1f54:	7f 91       	pop	r23
    1f56:	6f 91       	pop	r22
    1f58:	5f 91       	pop	r21
    1f5a:	4f 91       	pop	r20
    1f5c:	3f 91       	pop	r19
    1f5e:	2f 91       	pop	r18
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	0f 90       	pop	r0
    1f66:	1f 90       	pop	r1
    1f68:	18 95       	reti

00001f6a <__subsf3>:
    1f6a:	50 58       	subi	r21, 0x80	; 128

00001f6c <__addsf3>:
    1f6c:	bb 27       	eor	r27, r27
    1f6e:	aa 27       	eor	r26, r26
    1f70:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__addsf3x>
    1f74:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__fp_round>
    1f78:	0e 94 32 11 	call	0x2264	; 0x2264 <__fp_pscA>
    1f7c:	38 f0       	brcs	.+14     	; 0x1f8c <__addsf3+0x20>
    1f7e:	0e 94 39 11 	call	0x2272	; 0x2272 <__fp_pscB>
    1f82:	20 f0       	brcs	.+8      	; 0x1f8c <__addsf3+0x20>
    1f84:	39 f4       	brne	.+14     	; 0x1f94 <__addsf3+0x28>
    1f86:	9f 3f       	cpi	r25, 0xFF	; 255
    1f88:	19 f4       	brne	.+6      	; 0x1f90 <__addsf3+0x24>
    1f8a:	26 f4       	brtc	.+8      	; 0x1f94 <__addsf3+0x28>
    1f8c:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__fp_nan>
    1f90:	0e f4       	brtc	.+2      	; 0x1f94 <__addsf3+0x28>
    1f92:	e0 95       	com	r30
    1f94:	e7 fb       	bst	r30, 7
    1f96:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__fp_inf>

00001f9a <__addsf3x>:
    1f9a:	e9 2f       	mov	r30, r25
    1f9c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__fp_split3>
    1fa0:	58 f3       	brcs	.-42     	; 0x1f78 <__addsf3+0xc>
    1fa2:	ba 17       	cp	r27, r26
    1fa4:	62 07       	cpc	r22, r18
    1fa6:	73 07       	cpc	r23, r19
    1fa8:	84 07       	cpc	r24, r20
    1faa:	95 07       	cpc	r25, r21
    1fac:	20 f0       	brcs	.+8      	; 0x1fb6 <__addsf3x+0x1c>
    1fae:	79 f4       	brne	.+30     	; 0x1fce <__addsf3x+0x34>
    1fb0:	a6 f5       	brtc	.+104    	; 0x201a <__addsf3x+0x80>
    1fb2:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__fp_zero>
    1fb6:	0e f4       	brtc	.+2      	; 0x1fba <__addsf3x+0x20>
    1fb8:	e0 95       	com	r30
    1fba:	0b 2e       	mov	r0, r27
    1fbc:	ba 2f       	mov	r27, r26
    1fbe:	a0 2d       	mov	r26, r0
    1fc0:	0b 01       	movw	r0, r22
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	90 01       	movw	r18, r0
    1fc6:	0c 01       	movw	r0, r24
    1fc8:	ca 01       	movw	r24, r20
    1fca:	a0 01       	movw	r20, r0
    1fcc:	11 24       	eor	r1, r1
    1fce:	ff 27       	eor	r31, r31
    1fd0:	59 1b       	sub	r21, r25
    1fd2:	99 f0       	breq	.+38     	; 0x1ffa <__addsf3x+0x60>
    1fd4:	59 3f       	cpi	r21, 0xF9	; 249
    1fd6:	50 f4       	brcc	.+20     	; 0x1fec <__addsf3x+0x52>
    1fd8:	50 3e       	cpi	r21, 0xE0	; 224
    1fda:	68 f1       	brcs	.+90     	; 0x2036 <__addsf3x+0x9c>
    1fdc:	1a 16       	cp	r1, r26
    1fde:	f0 40       	sbci	r31, 0x00	; 0
    1fe0:	a2 2f       	mov	r26, r18
    1fe2:	23 2f       	mov	r18, r19
    1fe4:	34 2f       	mov	r19, r20
    1fe6:	44 27       	eor	r20, r20
    1fe8:	58 5f       	subi	r21, 0xF8	; 248
    1fea:	f3 cf       	rjmp	.-26     	; 0x1fd2 <__addsf3x+0x38>
    1fec:	46 95       	lsr	r20
    1fee:	37 95       	ror	r19
    1ff0:	27 95       	ror	r18
    1ff2:	a7 95       	ror	r26
    1ff4:	f0 40       	sbci	r31, 0x00	; 0
    1ff6:	53 95       	inc	r21
    1ff8:	c9 f7       	brne	.-14     	; 0x1fec <__addsf3x+0x52>
    1ffa:	7e f4       	brtc	.+30     	; 0x201a <__addsf3x+0x80>
    1ffc:	1f 16       	cp	r1, r31
    1ffe:	ba 0b       	sbc	r27, r26
    2000:	62 0b       	sbc	r22, r18
    2002:	73 0b       	sbc	r23, r19
    2004:	84 0b       	sbc	r24, r20
    2006:	ba f0       	brmi	.+46     	; 0x2036 <__addsf3x+0x9c>
    2008:	91 50       	subi	r25, 0x01	; 1
    200a:	a1 f0       	breq	.+40     	; 0x2034 <__addsf3x+0x9a>
    200c:	ff 0f       	add	r31, r31
    200e:	bb 1f       	adc	r27, r27
    2010:	66 1f       	adc	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	88 1f       	adc	r24, r24
    2016:	c2 f7       	brpl	.-16     	; 0x2008 <__addsf3x+0x6e>
    2018:	0e c0       	rjmp	.+28     	; 0x2036 <__addsf3x+0x9c>
    201a:	ba 0f       	add	r27, r26
    201c:	62 1f       	adc	r22, r18
    201e:	73 1f       	adc	r23, r19
    2020:	84 1f       	adc	r24, r20
    2022:	48 f4       	brcc	.+18     	; 0x2036 <__addsf3x+0x9c>
    2024:	87 95       	ror	r24
    2026:	77 95       	ror	r23
    2028:	67 95       	ror	r22
    202a:	b7 95       	ror	r27
    202c:	f7 95       	ror	r31
    202e:	9e 3f       	cpi	r25, 0xFE	; 254
    2030:	08 f0       	brcs	.+2      	; 0x2034 <__addsf3x+0x9a>
    2032:	b0 cf       	rjmp	.-160    	; 0x1f94 <__addsf3+0x28>
    2034:	93 95       	inc	r25
    2036:	88 0f       	add	r24, r24
    2038:	08 f0       	brcs	.+2      	; 0x203c <__addsf3x+0xa2>
    203a:	99 27       	eor	r25, r25
    203c:	ee 0f       	add	r30, r30
    203e:	97 95       	ror	r25
    2040:	87 95       	ror	r24
    2042:	08 95       	ret

00002044 <__cmpsf2>:
    2044:	0e 94 05 11 	call	0x220a	; 0x220a <__fp_cmp>
    2048:	08 f4       	brcc	.+2      	; 0x204c <__cmpsf2+0x8>
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	08 95       	ret

0000204e <__divsf3>:
    204e:	0e 94 3b 10 	call	0x2076	; 0x2076 <__divsf3x>
    2052:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__fp_round>
    2056:	0e 94 39 11 	call	0x2272	; 0x2272 <__fp_pscB>
    205a:	58 f0       	brcs	.+22     	; 0x2072 <__divsf3+0x24>
    205c:	0e 94 32 11 	call	0x2264	; 0x2264 <__fp_pscA>
    2060:	40 f0       	brcs	.+16     	; 0x2072 <__divsf3+0x24>
    2062:	29 f4       	brne	.+10     	; 0x206e <__divsf3+0x20>
    2064:	5f 3f       	cpi	r21, 0xFF	; 255
    2066:	29 f0       	breq	.+10     	; 0x2072 <__divsf3+0x24>
    2068:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__fp_inf>
    206c:	51 11       	cpse	r21, r1
    206e:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__fp_szero>
    2072:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__fp_nan>

00002076 <__divsf3x>:
    2076:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__fp_split3>
    207a:	68 f3       	brcs	.-38     	; 0x2056 <__divsf3+0x8>

0000207c <__divsf3_pse>:
    207c:	99 23       	and	r25, r25
    207e:	b1 f3       	breq	.-20     	; 0x206c <__divsf3+0x1e>
    2080:	55 23       	and	r21, r21
    2082:	91 f3       	breq	.-28     	; 0x2068 <__divsf3+0x1a>
    2084:	95 1b       	sub	r25, r21
    2086:	55 0b       	sbc	r21, r21
    2088:	bb 27       	eor	r27, r27
    208a:	aa 27       	eor	r26, r26
    208c:	62 17       	cp	r22, r18
    208e:	73 07       	cpc	r23, r19
    2090:	84 07       	cpc	r24, r20
    2092:	38 f0       	brcs	.+14     	; 0x20a2 <__divsf3_pse+0x26>
    2094:	9f 5f       	subi	r25, 0xFF	; 255
    2096:	5f 4f       	sbci	r21, 0xFF	; 255
    2098:	22 0f       	add	r18, r18
    209a:	33 1f       	adc	r19, r19
    209c:	44 1f       	adc	r20, r20
    209e:	aa 1f       	adc	r26, r26
    20a0:	a9 f3       	breq	.-22     	; 0x208c <__divsf3_pse+0x10>
    20a2:	35 d0       	rcall	.+106    	; 0x210e <__divsf3_pse+0x92>
    20a4:	0e 2e       	mov	r0, r30
    20a6:	3a f0       	brmi	.+14     	; 0x20b6 <__divsf3_pse+0x3a>
    20a8:	e0 e8       	ldi	r30, 0x80	; 128
    20aa:	32 d0       	rcall	.+100    	; 0x2110 <__divsf3_pse+0x94>
    20ac:	91 50       	subi	r25, 0x01	; 1
    20ae:	50 40       	sbci	r21, 0x00	; 0
    20b0:	e6 95       	lsr	r30
    20b2:	00 1c       	adc	r0, r0
    20b4:	ca f7       	brpl	.-14     	; 0x20a8 <__divsf3_pse+0x2c>
    20b6:	2b d0       	rcall	.+86     	; 0x210e <__divsf3_pse+0x92>
    20b8:	fe 2f       	mov	r31, r30
    20ba:	29 d0       	rcall	.+82     	; 0x210e <__divsf3_pse+0x92>
    20bc:	66 0f       	add	r22, r22
    20be:	77 1f       	adc	r23, r23
    20c0:	88 1f       	adc	r24, r24
    20c2:	bb 1f       	adc	r27, r27
    20c4:	26 17       	cp	r18, r22
    20c6:	37 07       	cpc	r19, r23
    20c8:	48 07       	cpc	r20, r24
    20ca:	ab 07       	cpc	r26, r27
    20cc:	b0 e8       	ldi	r27, 0x80	; 128
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <__divsf3_pse+0x56>
    20d0:	bb 0b       	sbc	r27, r27
    20d2:	80 2d       	mov	r24, r0
    20d4:	bf 01       	movw	r22, r30
    20d6:	ff 27       	eor	r31, r31
    20d8:	93 58       	subi	r25, 0x83	; 131
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	3a f0       	brmi	.+14     	; 0x20ec <__divsf3_pse+0x70>
    20de:	9e 3f       	cpi	r25, 0xFE	; 254
    20e0:	51 05       	cpc	r21, r1
    20e2:	78 f0       	brcs	.+30     	; 0x2102 <__divsf3_pse+0x86>
    20e4:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__fp_inf>
    20e8:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__fp_szero>
    20ec:	5f 3f       	cpi	r21, 0xFF	; 255
    20ee:	e4 f3       	brlt	.-8      	; 0x20e8 <__divsf3_pse+0x6c>
    20f0:	98 3e       	cpi	r25, 0xE8	; 232
    20f2:	d4 f3       	brlt	.-12     	; 0x20e8 <__divsf3_pse+0x6c>
    20f4:	86 95       	lsr	r24
    20f6:	77 95       	ror	r23
    20f8:	67 95       	ror	r22
    20fa:	b7 95       	ror	r27
    20fc:	f7 95       	ror	r31
    20fe:	9f 5f       	subi	r25, 0xFF	; 255
    2100:	c9 f7       	brne	.-14     	; 0x20f4 <__divsf3_pse+0x78>
    2102:	88 0f       	add	r24, r24
    2104:	91 1d       	adc	r25, r1
    2106:	96 95       	lsr	r25
    2108:	87 95       	ror	r24
    210a:	97 f9       	bld	r25, 7
    210c:	08 95       	ret
    210e:	e1 e0       	ldi	r30, 0x01	; 1
    2110:	66 0f       	add	r22, r22
    2112:	77 1f       	adc	r23, r23
    2114:	88 1f       	adc	r24, r24
    2116:	bb 1f       	adc	r27, r27
    2118:	62 17       	cp	r22, r18
    211a:	73 07       	cpc	r23, r19
    211c:	84 07       	cpc	r24, r20
    211e:	ba 07       	cpc	r27, r26
    2120:	20 f0       	brcs	.+8      	; 0x212a <__divsf3_pse+0xae>
    2122:	62 1b       	sub	r22, r18
    2124:	73 0b       	sbc	r23, r19
    2126:	84 0b       	sbc	r24, r20
    2128:	ba 0b       	sbc	r27, r26
    212a:	ee 1f       	adc	r30, r30
    212c:	88 f7       	brcc	.-30     	; 0x2110 <__divsf3_pse+0x94>
    212e:	e0 95       	com	r30
    2130:	08 95       	ret

00002132 <__fixunssfsi>:
    2132:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fp_splitA>
    2136:	88 f0       	brcs	.+34     	; 0x215a <__fixunssfsi+0x28>
    2138:	9f 57       	subi	r25, 0x7F	; 127
    213a:	98 f0       	brcs	.+38     	; 0x2162 <__fixunssfsi+0x30>
    213c:	b9 2f       	mov	r27, r25
    213e:	99 27       	eor	r25, r25
    2140:	b7 51       	subi	r27, 0x17	; 23
    2142:	b0 f0       	brcs	.+44     	; 0x2170 <__fixunssfsi+0x3e>
    2144:	e1 f0       	breq	.+56     	; 0x217e <__fixunssfsi+0x4c>
    2146:	66 0f       	add	r22, r22
    2148:	77 1f       	adc	r23, r23
    214a:	88 1f       	adc	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	1a f0       	brmi	.+6      	; 0x2156 <__fixunssfsi+0x24>
    2150:	ba 95       	dec	r27
    2152:	c9 f7       	brne	.-14     	; 0x2146 <__fixunssfsi+0x14>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <__fixunssfsi+0x4c>
    2156:	b1 30       	cpi	r27, 0x01	; 1
    2158:	91 f0       	breq	.+36     	; 0x217e <__fixunssfsi+0x4c>
    215a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__fp_zero>
    215e:	b1 e0       	ldi	r27, 0x01	; 1
    2160:	08 95       	ret
    2162:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__fp_zero>
    2166:	67 2f       	mov	r22, r23
    2168:	78 2f       	mov	r23, r24
    216a:	88 27       	eor	r24, r24
    216c:	b8 5f       	subi	r27, 0xF8	; 248
    216e:	39 f0       	breq	.+14     	; 0x217e <__fixunssfsi+0x4c>
    2170:	b9 3f       	cpi	r27, 0xF9	; 249
    2172:	cc f3       	brlt	.-14     	; 0x2166 <__fixunssfsi+0x34>
    2174:	86 95       	lsr	r24
    2176:	77 95       	ror	r23
    2178:	67 95       	ror	r22
    217a:	b3 95       	inc	r27
    217c:	d9 f7       	brne	.-10     	; 0x2174 <__fixunssfsi+0x42>
    217e:	3e f4       	brtc	.+14     	; 0x218e <__fixunssfsi+0x5c>
    2180:	90 95       	com	r25
    2182:	80 95       	com	r24
    2184:	70 95       	com	r23
    2186:	61 95       	neg	r22
    2188:	7f 4f       	sbci	r23, 0xFF	; 255
    218a:	8f 4f       	sbci	r24, 0xFF	; 255
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	08 95       	ret

00002190 <__floatunsisf>:
    2190:	e8 94       	clt
    2192:	09 c0       	rjmp	.+18     	; 0x21a6 <__floatsisf+0x12>

00002194 <__floatsisf>:
    2194:	97 fb       	bst	r25, 7
    2196:	3e f4       	brtc	.+14     	; 0x21a6 <__floatsisf+0x12>
    2198:	90 95       	com	r25
    219a:	80 95       	com	r24
    219c:	70 95       	com	r23
    219e:	61 95       	neg	r22
    21a0:	7f 4f       	sbci	r23, 0xFF	; 255
    21a2:	8f 4f       	sbci	r24, 0xFF	; 255
    21a4:	9f 4f       	sbci	r25, 0xFF	; 255
    21a6:	99 23       	and	r25, r25
    21a8:	a9 f0       	breq	.+42     	; 0x21d4 <__floatsisf+0x40>
    21aa:	f9 2f       	mov	r31, r25
    21ac:	96 e9       	ldi	r25, 0x96	; 150
    21ae:	bb 27       	eor	r27, r27
    21b0:	93 95       	inc	r25
    21b2:	f6 95       	lsr	r31
    21b4:	87 95       	ror	r24
    21b6:	77 95       	ror	r23
    21b8:	67 95       	ror	r22
    21ba:	b7 95       	ror	r27
    21bc:	f1 11       	cpse	r31, r1
    21be:	f8 cf       	rjmp	.-16     	; 0x21b0 <__floatsisf+0x1c>
    21c0:	fa f4       	brpl	.+62     	; 0x2200 <__floatsisf+0x6c>
    21c2:	bb 0f       	add	r27, r27
    21c4:	11 f4       	brne	.+4      	; 0x21ca <__floatsisf+0x36>
    21c6:	60 ff       	sbrs	r22, 0
    21c8:	1b c0       	rjmp	.+54     	; 0x2200 <__floatsisf+0x6c>
    21ca:	6f 5f       	subi	r22, 0xFF	; 255
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	8f 4f       	sbci	r24, 0xFF	; 255
    21d0:	9f 4f       	sbci	r25, 0xFF	; 255
    21d2:	16 c0       	rjmp	.+44     	; 0x2200 <__floatsisf+0x6c>
    21d4:	88 23       	and	r24, r24
    21d6:	11 f0       	breq	.+4      	; 0x21dc <__floatsisf+0x48>
    21d8:	96 e9       	ldi	r25, 0x96	; 150
    21da:	11 c0       	rjmp	.+34     	; 0x21fe <__floatsisf+0x6a>
    21dc:	77 23       	and	r23, r23
    21de:	21 f0       	breq	.+8      	; 0x21e8 <__floatsisf+0x54>
    21e0:	9e e8       	ldi	r25, 0x8E	; 142
    21e2:	87 2f       	mov	r24, r23
    21e4:	76 2f       	mov	r23, r22
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <__floatsisf+0x5e>
    21e8:	66 23       	and	r22, r22
    21ea:	71 f0       	breq	.+28     	; 0x2208 <__floatsisf+0x74>
    21ec:	96 e8       	ldi	r25, 0x86	; 134
    21ee:	86 2f       	mov	r24, r22
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	2a f0       	brmi	.+10     	; 0x2200 <__floatsisf+0x6c>
    21f6:	9a 95       	dec	r25
    21f8:	66 0f       	add	r22, r22
    21fa:	77 1f       	adc	r23, r23
    21fc:	88 1f       	adc	r24, r24
    21fe:	da f7       	brpl	.-10     	; 0x21f6 <__floatsisf+0x62>
    2200:	88 0f       	add	r24, r24
    2202:	96 95       	lsr	r25
    2204:	87 95       	ror	r24
    2206:	97 f9       	bld	r25, 7
    2208:	08 95       	ret

0000220a <__fp_cmp>:
    220a:	99 0f       	add	r25, r25
    220c:	00 08       	sbc	r0, r0
    220e:	55 0f       	add	r21, r21
    2210:	aa 0b       	sbc	r26, r26
    2212:	e0 e8       	ldi	r30, 0x80	; 128
    2214:	fe ef       	ldi	r31, 0xFE	; 254
    2216:	16 16       	cp	r1, r22
    2218:	17 06       	cpc	r1, r23
    221a:	e8 07       	cpc	r30, r24
    221c:	f9 07       	cpc	r31, r25
    221e:	c0 f0       	brcs	.+48     	; 0x2250 <__fp_cmp+0x46>
    2220:	12 16       	cp	r1, r18
    2222:	13 06       	cpc	r1, r19
    2224:	e4 07       	cpc	r30, r20
    2226:	f5 07       	cpc	r31, r21
    2228:	98 f0       	brcs	.+38     	; 0x2250 <__fp_cmp+0x46>
    222a:	62 1b       	sub	r22, r18
    222c:	73 0b       	sbc	r23, r19
    222e:	84 0b       	sbc	r24, r20
    2230:	95 0b       	sbc	r25, r21
    2232:	39 f4       	brne	.+14     	; 0x2242 <__fp_cmp+0x38>
    2234:	0a 26       	eor	r0, r26
    2236:	61 f0       	breq	.+24     	; 0x2250 <__fp_cmp+0x46>
    2238:	23 2b       	or	r18, r19
    223a:	24 2b       	or	r18, r20
    223c:	25 2b       	or	r18, r21
    223e:	21 f4       	brne	.+8      	; 0x2248 <__fp_cmp+0x3e>
    2240:	08 95       	ret
    2242:	0a 26       	eor	r0, r26
    2244:	09 f4       	brne	.+2      	; 0x2248 <__fp_cmp+0x3e>
    2246:	a1 40       	sbci	r26, 0x01	; 1
    2248:	a6 95       	lsr	r26
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	81 1d       	adc	r24, r1
    224e:	81 1d       	adc	r24, r1
    2250:	08 95       	ret

00002252 <__fp_inf>:
    2252:	97 f9       	bld	r25, 7
    2254:	9f 67       	ori	r25, 0x7F	; 127
    2256:	80 e8       	ldi	r24, 0x80	; 128
    2258:	70 e0       	ldi	r23, 0x00	; 0
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	08 95       	ret

0000225e <__fp_nan>:
    225e:	9f ef       	ldi	r25, 0xFF	; 255
    2260:	80 ec       	ldi	r24, 0xC0	; 192
    2262:	08 95       	ret

00002264 <__fp_pscA>:
    2264:	00 24       	eor	r0, r0
    2266:	0a 94       	dec	r0
    2268:	16 16       	cp	r1, r22
    226a:	17 06       	cpc	r1, r23
    226c:	18 06       	cpc	r1, r24
    226e:	09 06       	cpc	r0, r25
    2270:	08 95       	ret

00002272 <__fp_pscB>:
    2272:	00 24       	eor	r0, r0
    2274:	0a 94       	dec	r0
    2276:	12 16       	cp	r1, r18
    2278:	13 06       	cpc	r1, r19
    227a:	14 06       	cpc	r1, r20
    227c:	05 06       	cpc	r0, r21
    227e:	08 95       	ret

00002280 <__fp_round>:
    2280:	09 2e       	mov	r0, r25
    2282:	03 94       	inc	r0
    2284:	00 0c       	add	r0, r0
    2286:	11 f4       	brne	.+4      	; 0x228c <__fp_round+0xc>
    2288:	88 23       	and	r24, r24
    228a:	52 f0       	brmi	.+20     	; 0x22a0 <__fp_round+0x20>
    228c:	bb 0f       	add	r27, r27
    228e:	40 f4       	brcc	.+16     	; 0x22a0 <__fp_round+0x20>
    2290:	bf 2b       	or	r27, r31
    2292:	11 f4       	brne	.+4      	; 0x2298 <__fp_round+0x18>
    2294:	60 ff       	sbrs	r22, 0
    2296:	04 c0       	rjmp	.+8      	; 0x22a0 <__fp_round+0x20>
    2298:	6f 5f       	subi	r22, 0xFF	; 255
    229a:	7f 4f       	sbci	r23, 0xFF	; 255
    229c:	8f 4f       	sbci	r24, 0xFF	; 255
    229e:	9f 4f       	sbci	r25, 0xFF	; 255
    22a0:	08 95       	ret

000022a2 <__fp_split3>:
    22a2:	57 fd       	sbrc	r21, 7
    22a4:	90 58       	subi	r25, 0x80	; 128
    22a6:	44 0f       	add	r20, r20
    22a8:	55 1f       	adc	r21, r21
    22aa:	59 f0       	breq	.+22     	; 0x22c2 <__fp_splitA+0x10>
    22ac:	5f 3f       	cpi	r21, 0xFF	; 255
    22ae:	71 f0       	breq	.+28     	; 0x22cc <__fp_splitA+0x1a>
    22b0:	47 95       	ror	r20

000022b2 <__fp_splitA>:
    22b2:	88 0f       	add	r24, r24
    22b4:	97 fb       	bst	r25, 7
    22b6:	99 1f       	adc	r25, r25
    22b8:	61 f0       	breq	.+24     	; 0x22d2 <__fp_splitA+0x20>
    22ba:	9f 3f       	cpi	r25, 0xFF	; 255
    22bc:	79 f0       	breq	.+30     	; 0x22dc <__fp_splitA+0x2a>
    22be:	87 95       	ror	r24
    22c0:	08 95       	ret
    22c2:	12 16       	cp	r1, r18
    22c4:	13 06       	cpc	r1, r19
    22c6:	14 06       	cpc	r1, r20
    22c8:	55 1f       	adc	r21, r21
    22ca:	f2 cf       	rjmp	.-28     	; 0x22b0 <__fp_split3+0xe>
    22cc:	46 95       	lsr	r20
    22ce:	f1 df       	rcall	.-30     	; 0x22b2 <__fp_splitA>
    22d0:	08 c0       	rjmp	.+16     	; 0x22e2 <__fp_splitA+0x30>
    22d2:	16 16       	cp	r1, r22
    22d4:	17 06       	cpc	r1, r23
    22d6:	18 06       	cpc	r1, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	f1 cf       	rjmp	.-30     	; 0x22be <__fp_splitA+0xc>
    22dc:	86 95       	lsr	r24
    22de:	71 05       	cpc	r23, r1
    22e0:	61 05       	cpc	r22, r1
    22e2:	08 94       	sec
    22e4:	08 95       	ret

000022e6 <__fp_zero>:
    22e6:	e8 94       	clt

000022e8 <__fp_szero>:
    22e8:	bb 27       	eor	r27, r27
    22ea:	66 27       	eor	r22, r22
    22ec:	77 27       	eor	r23, r23
    22ee:	cb 01       	movw	r24, r22
    22f0:	97 f9       	bld	r25, 7
    22f2:	08 95       	ret

000022f4 <__gesf2>:
    22f4:	0e 94 05 11 	call	0x220a	; 0x220a <__fp_cmp>
    22f8:	08 f4       	brcc	.+2      	; 0x22fc <__gesf2+0x8>
    22fa:	8f ef       	ldi	r24, 0xFF	; 255
    22fc:	08 95       	ret

000022fe <__mulsf3>:
    22fe:	0e 94 92 11 	call	0x2324	; 0x2324 <__mulsf3x>
    2302:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__fp_round>
    2306:	0e 94 32 11 	call	0x2264	; 0x2264 <__fp_pscA>
    230a:	38 f0       	brcs	.+14     	; 0x231a <__mulsf3+0x1c>
    230c:	0e 94 39 11 	call	0x2272	; 0x2272 <__fp_pscB>
    2310:	20 f0       	brcs	.+8      	; 0x231a <__mulsf3+0x1c>
    2312:	95 23       	and	r25, r21
    2314:	11 f0       	breq	.+4      	; 0x231a <__mulsf3+0x1c>
    2316:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__fp_inf>
    231a:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__fp_nan>
    231e:	11 24       	eor	r1, r1
    2320:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__fp_szero>

00002324 <__mulsf3x>:
    2324:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__fp_split3>
    2328:	70 f3       	brcs	.-36     	; 0x2306 <__mulsf3+0x8>

0000232a <__mulsf3_pse>:
    232a:	95 9f       	mul	r25, r21
    232c:	c1 f3       	breq	.-16     	; 0x231e <__mulsf3+0x20>
    232e:	95 0f       	add	r25, r21
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	55 1f       	adc	r21, r21
    2334:	62 9f       	mul	r22, r18
    2336:	f0 01       	movw	r30, r0
    2338:	72 9f       	mul	r23, r18
    233a:	bb 27       	eor	r27, r27
    233c:	f0 0d       	add	r31, r0
    233e:	b1 1d       	adc	r27, r1
    2340:	63 9f       	mul	r22, r19
    2342:	aa 27       	eor	r26, r26
    2344:	f0 0d       	add	r31, r0
    2346:	b1 1d       	adc	r27, r1
    2348:	aa 1f       	adc	r26, r26
    234a:	64 9f       	mul	r22, r20
    234c:	66 27       	eor	r22, r22
    234e:	b0 0d       	add	r27, r0
    2350:	a1 1d       	adc	r26, r1
    2352:	66 1f       	adc	r22, r22
    2354:	82 9f       	mul	r24, r18
    2356:	22 27       	eor	r18, r18
    2358:	b0 0d       	add	r27, r0
    235a:	a1 1d       	adc	r26, r1
    235c:	62 1f       	adc	r22, r18
    235e:	73 9f       	mul	r23, r19
    2360:	b0 0d       	add	r27, r0
    2362:	a1 1d       	adc	r26, r1
    2364:	62 1f       	adc	r22, r18
    2366:	83 9f       	mul	r24, r19
    2368:	a0 0d       	add	r26, r0
    236a:	61 1d       	adc	r22, r1
    236c:	22 1f       	adc	r18, r18
    236e:	74 9f       	mul	r23, r20
    2370:	33 27       	eor	r19, r19
    2372:	a0 0d       	add	r26, r0
    2374:	61 1d       	adc	r22, r1
    2376:	23 1f       	adc	r18, r19
    2378:	84 9f       	mul	r24, r20
    237a:	60 0d       	add	r22, r0
    237c:	21 1d       	adc	r18, r1
    237e:	82 2f       	mov	r24, r18
    2380:	76 2f       	mov	r23, r22
    2382:	6a 2f       	mov	r22, r26
    2384:	11 24       	eor	r1, r1
    2386:	9f 57       	subi	r25, 0x7F	; 127
    2388:	50 40       	sbci	r21, 0x00	; 0
    238a:	9a f0       	brmi	.+38     	; 0x23b2 <__mulsf3_pse+0x88>
    238c:	f1 f0       	breq	.+60     	; 0x23ca <__mulsf3_pse+0xa0>
    238e:	88 23       	and	r24, r24
    2390:	4a f0       	brmi	.+18     	; 0x23a4 <__mulsf3_pse+0x7a>
    2392:	ee 0f       	add	r30, r30
    2394:	ff 1f       	adc	r31, r31
    2396:	bb 1f       	adc	r27, r27
    2398:	66 1f       	adc	r22, r22
    239a:	77 1f       	adc	r23, r23
    239c:	88 1f       	adc	r24, r24
    239e:	91 50       	subi	r25, 0x01	; 1
    23a0:	50 40       	sbci	r21, 0x00	; 0
    23a2:	a9 f7       	brne	.-22     	; 0x238e <__mulsf3_pse+0x64>
    23a4:	9e 3f       	cpi	r25, 0xFE	; 254
    23a6:	51 05       	cpc	r21, r1
    23a8:	80 f0       	brcs	.+32     	; 0x23ca <__mulsf3_pse+0xa0>
    23aa:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__fp_inf>
    23ae:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__fp_szero>
    23b2:	5f 3f       	cpi	r21, 0xFF	; 255
    23b4:	e4 f3       	brlt	.-8      	; 0x23ae <__mulsf3_pse+0x84>
    23b6:	98 3e       	cpi	r25, 0xE8	; 232
    23b8:	d4 f3       	brlt	.-12     	; 0x23ae <__mulsf3_pse+0x84>
    23ba:	86 95       	lsr	r24
    23bc:	77 95       	ror	r23
    23be:	67 95       	ror	r22
    23c0:	b7 95       	ror	r27
    23c2:	f7 95       	ror	r31
    23c4:	e7 95       	ror	r30
    23c6:	9f 5f       	subi	r25, 0xFF	; 255
    23c8:	c1 f7       	brne	.-16     	; 0x23ba <__mulsf3_pse+0x90>
    23ca:	fe 2b       	or	r31, r30
    23cc:	88 0f       	add	r24, r24
    23ce:	91 1d       	adc	r25, r1
    23d0:	96 95       	lsr	r25
    23d2:	87 95       	ror	r24
    23d4:	97 f9       	bld	r25, 7
    23d6:	08 95       	ret

000023d8 <atof>:
    23d8:	66 27       	eor	r22, r22
    23da:	77 27       	eor	r23, r23
    23dc:	0c 94 08 12 	jmp	0x2410	; 0x2410 <strtod>

000023e0 <strcmp>:
    23e0:	fb 01       	movw	r30, r22
    23e2:	dc 01       	movw	r26, r24
    23e4:	8d 91       	ld	r24, X+
    23e6:	01 90       	ld	r0, Z+
    23e8:	80 19       	sub	r24, r0
    23ea:	01 10       	cpse	r0, r1
    23ec:	d9 f3       	breq	.-10     	; 0x23e4 <strcmp+0x4>
    23ee:	99 0b       	sbc	r25, r25
    23f0:	08 95       	ret

000023f2 <strncpy>:
    23f2:	fb 01       	movw	r30, r22
    23f4:	dc 01       	movw	r26, r24
    23f6:	41 50       	subi	r20, 0x01	; 1
    23f8:	50 40       	sbci	r21, 0x00	; 0
    23fa:	48 f0       	brcs	.+18     	; 0x240e <strncpy+0x1c>
    23fc:	01 90       	ld	r0, Z+
    23fe:	0d 92       	st	X+, r0
    2400:	00 20       	and	r0, r0
    2402:	c9 f7       	brne	.-14     	; 0x23f6 <strncpy+0x4>
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <strncpy+0x16>
    2406:	1d 92       	st	X+, r1
    2408:	41 50       	subi	r20, 0x01	; 1
    240a:	50 40       	sbci	r21, 0x00	; 0
    240c:	e0 f7       	brcc	.-8      	; 0x2406 <strncpy+0x14>
    240e:	08 95       	ret

00002410 <strtod>:
    2410:	a0 e0       	ldi	r26, 0x00	; 0
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	ee e0       	ldi	r30, 0x0E	; 14
    2416:	f2 e1       	ldi	r31, 0x12	; 18
    2418:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__+0xc>
    241c:	ec 01       	movw	r28, r24
    241e:	6b 01       	movw	r12, r22
    2420:	61 15       	cp	r22, r1
    2422:	71 05       	cpc	r23, r1
    2424:	19 f0       	breq	.+6      	; 0x242c <strtod+0x1c>
    2426:	fb 01       	movw	r30, r22
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
    242c:	7e 01       	movw	r14, r28
    242e:	ff ef       	ldi	r31, 0xFF	; 255
    2430:	ef 1a       	sub	r14, r31
    2432:	ff 0a       	sbc	r15, r31
    2434:	08 81       	ld	r16, Y
    2436:	80 2f       	mov	r24, r16
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	0e 94 56 13 	call	0x26ac	; 0x26ac <isspace>
    243e:	89 2b       	or	r24, r25
    2440:	11 f0       	breq	.+4      	; 0x2446 <strtod+0x36>
    2442:	e7 01       	movw	r28, r14
    2444:	f3 cf       	rjmp	.-26     	; 0x242c <strtod+0x1c>
    2446:	0d 32       	cpi	r16, 0x2D	; 45
    2448:	39 f4       	brne	.+14     	; 0x2458 <strtod+0x48>
    244a:	7e 01       	movw	r14, r28
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	e8 0e       	add	r14, r24
    2450:	f1 1c       	adc	r15, r1
    2452:	09 81       	ldd	r16, Y+1	; 0x01
    2454:	11 e0       	ldi	r17, 0x01	; 1
    2456:	08 c0       	rjmp	.+16     	; 0x2468 <strtod+0x58>
    2458:	0b 32       	cpi	r16, 0x2B	; 43
    245a:	29 f4       	brne	.+10     	; 0x2466 <strtod+0x56>
    245c:	7e 01       	movw	r14, r28
    245e:	92 e0       	ldi	r25, 0x02	; 2
    2460:	e9 0e       	add	r14, r25
    2462:	f1 1c       	adc	r15, r1
    2464:	09 81       	ldd	r16, Y+1	; 0x01
    2466:	10 e0       	ldi	r17, 0x00	; 0
    2468:	e7 01       	movw	r28, r14
    246a:	21 97       	sbiw	r28, 0x01	; 1
    246c:	43 e0       	ldi	r20, 0x03	; 3
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	6c e5       	ldi	r22, 0x5C	; 92
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	ce 01       	movw	r24, r28
    2476:	0e 94 5f 13 	call	0x26be	; 0x26be <strncasecmp_P>
    247a:	89 2b       	or	r24, r25
    247c:	c1 f4       	brne	.+48     	; 0x24ae <strtod+0x9e>
    247e:	23 96       	adiw	r28, 0x03	; 3
    2480:	45 e0       	ldi	r20, 0x05	; 5
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	67 e5       	ldi	r22, 0x57	; 87
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	ce 01       	movw	r24, r28
    248a:	0e 94 5f 13 	call	0x26be	; 0x26be <strncasecmp_P>
    248e:	89 2b       	or	r24, r25
    2490:	09 f4       	brne	.+2      	; 0x2494 <strtod+0x84>
    2492:	25 96       	adiw	r28, 0x05	; 5
    2494:	c1 14       	cp	r12, r1
    2496:	d1 04       	cpc	r13, r1
    2498:	19 f0       	breq	.+6      	; 0x24a0 <strtod+0x90>
    249a:	f6 01       	movw	r30, r12
    249c:	d1 83       	std	Z+1, r29	; 0x01
    249e:	c0 83       	st	Z, r28
    24a0:	11 11       	cpse	r17, r1
    24a2:	f6 c0       	rjmp	.+492    	; 0x2690 <strtod+0x280>
    24a4:	60 e0       	ldi	r22, 0x00	; 0
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	80 e8       	ldi	r24, 0x80	; 128
    24aa:	9f e7       	ldi	r25, 0x7F	; 127
    24ac:	fa c0       	rjmp	.+500    	; 0x26a2 <strtod+0x292>
    24ae:	43 e0       	ldi	r20, 0x03	; 3
    24b0:	50 e0       	ldi	r21, 0x00	; 0
    24b2:	64 e5       	ldi	r22, 0x54	; 84
    24b4:	70 e0       	ldi	r23, 0x00	; 0
    24b6:	ce 01       	movw	r24, r28
    24b8:	0e 94 5f 13 	call	0x26be	; 0x26be <strncasecmp_P>
    24bc:	89 2b       	or	r24, r25
    24be:	59 f4       	brne	.+22     	; 0x24d6 <strtod+0xc6>
    24c0:	c1 14       	cp	r12, r1
    24c2:	d1 04       	cpc	r13, r1
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <strtod+0xb8>
    24c6:	e9 c0       	rjmp	.+466    	; 0x269a <strtod+0x28a>
    24c8:	f2 e0       	ldi	r31, 0x02	; 2
    24ca:	ef 0e       	add	r14, r31
    24cc:	f1 1c       	adc	r15, r1
    24ce:	f6 01       	movw	r30, r12
    24d0:	f1 82       	std	Z+1, r15	; 0x01
    24d2:	e0 82       	st	Z, r14
    24d4:	e2 c0       	rjmp	.+452    	; 0x269a <strtod+0x28a>
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	a9 01       	movw	r20, r18
    24dc:	c0 e0       	ldi	r28, 0x00	; 0
    24de:	d0 e0       	ldi	r29, 0x00	; 0
    24e0:	f7 01       	movw	r30, r14
    24e2:	80 ed       	ldi	r24, 0xD0	; 208
    24e4:	a8 2e       	mov	r10, r24
    24e6:	a0 0e       	add	r10, r16
    24e8:	89 e0       	ldi	r24, 0x09	; 9
    24ea:	8a 15       	cp	r24, r10
    24ec:	30 f1       	brcs	.+76     	; 0x253a <strtod+0x12a>
    24ee:	91 2f       	mov	r25, r17
    24f0:	92 60       	ori	r25, 0x02	; 2
    24f2:	b9 2e       	mov	r11, r25
    24f4:	81 2f       	mov	r24, r17
    24f6:	88 70       	andi	r24, 0x08	; 8
    24f8:	12 ff       	sbrs	r17, 2
    24fa:	04 c0       	rjmp	.+8      	; 0x2504 <strtod+0xf4>
    24fc:	81 11       	cpse	r24, r1
    24fe:	24 c0       	rjmp	.+72     	; 0x2548 <strtod+0x138>
    2500:	21 96       	adiw	r28, 0x01	; 1
    2502:	22 c0       	rjmp	.+68     	; 0x2548 <strtod+0x138>
    2504:	81 11       	cpse	r24, r1
    2506:	21 97       	sbiw	r28, 0x01	; 1
    2508:	a5 e0       	ldi	r26, 0x05	; 5
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__muluhisi3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	aa 1f       	adc	r26, r26
    251a:	bb 1f       	adc	r27, r27
    251c:	9c 01       	movw	r18, r24
    251e:	ad 01       	movw	r20, r26
    2520:	2a 0d       	add	r18, r10
    2522:	31 1d       	adc	r19, r1
    2524:	41 1d       	adc	r20, r1
    2526:	51 1d       	adc	r21, r1
    2528:	28 39       	cpi	r18, 0x98	; 152
    252a:	89 e9       	ldi	r24, 0x99	; 153
    252c:	38 07       	cpc	r19, r24
    252e:	48 07       	cpc	r20, r24
    2530:	89 e1       	ldi	r24, 0x19	; 25
    2532:	58 07       	cpc	r21, r24
    2534:	48 f0       	brcs	.+18     	; 0x2548 <strtod+0x138>
    2536:	16 60       	ori	r17, 0x06	; 6
    2538:	06 c0       	rjmp	.+12     	; 0x2546 <strtod+0x136>
    253a:	9e ef       	ldi	r25, 0xFE	; 254
    253c:	a9 12       	cpse	r10, r25
    253e:	0a c0       	rjmp	.+20     	; 0x2554 <strtod+0x144>
    2540:	13 fd       	sbrc	r17, 3
    2542:	40 c0       	rjmp	.+128    	; 0x25c4 <strtod+0x1b4>
    2544:	18 60       	ori	r17, 0x08	; 8
    2546:	b1 2e       	mov	r11, r17
    2548:	8f ef       	ldi	r24, 0xFF	; 255
    254a:	e8 1a       	sub	r14, r24
    254c:	f8 0a       	sbc	r15, r24
    254e:	00 81       	ld	r16, Z
    2550:	1b 2d       	mov	r17, r11
    2552:	c6 cf       	rjmp	.-116    	; 0x24e0 <strtod+0xd0>
    2554:	80 2f       	mov	r24, r16
    2556:	8f 7d       	andi	r24, 0xDF	; 223
    2558:	85 34       	cpi	r24, 0x45	; 69
    255a:	a1 f5       	brne	.+104    	; 0x25c4 <strtod+0x1b4>
    255c:	80 81       	ld	r24, Z
    255e:	8d 32       	cpi	r24, 0x2D	; 45
    2560:	11 f4       	brne	.+4      	; 0x2566 <strtod+0x156>
    2562:	10 61       	ori	r17, 0x10	; 16
    2564:	06 c0       	rjmp	.+12     	; 0x2572 <strtod+0x162>
    2566:	8b 32       	cpi	r24, 0x2B	; 43
    2568:	21 f0       	breq	.+8      	; 0x2572 <strtod+0x162>
    256a:	31 96       	adiw	r30, 0x01	; 1
    256c:	61 e0       	ldi	r22, 0x01	; 1
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	04 c0       	rjmp	.+8      	; 0x257a <strtod+0x16a>
    2572:	81 81       	ldd	r24, Z+1	; 0x01
    2574:	32 96       	adiw	r30, 0x02	; 2
    2576:	62 e0       	ldi	r22, 0x02	; 2
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	80 53       	subi	r24, 0x30	; 48
    257c:	8a 30       	cpi	r24, 0x0A	; 10
    257e:	18 f0       	brcs	.+6      	; 0x2586 <strtod+0x176>
    2580:	e6 1b       	sub	r30, r22
    2582:	f7 0b       	sbc	r31, r23
    2584:	1f c0       	rjmp	.+62     	; 0x25c4 <strtod+0x1b4>
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	60 38       	cpi	r22, 0x80	; 128
    258c:	9c e0       	ldi	r25, 0x0C	; 12
    258e:	79 07       	cpc	r23, r25
    2590:	5c f4       	brge	.+22     	; 0x25a8 <strtod+0x198>
    2592:	db 01       	movw	r26, r22
    2594:	aa 0f       	add	r26, r26
    2596:	bb 1f       	adc	r27, r27
    2598:	aa 0f       	add	r26, r26
    259a:	bb 1f       	adc	r27, r27
    259c:	6a 0f       	add	r22, r26
    259e:	7b 1f       	adc	r23, r27
    25a0:	66 0f       	add	r22, r22
    25a2:	77 1f       	adc	r23, r23
    25a4:	68 0f       	add	r22, r24
    25a6:	71 1d       	adc	r23, r1
    25a8:	31 96       	adiw	r30, 0x01	; 1
    25aa:	df 01       	movw	r26, r30
    25ac:	11 97       	sbiw	r26, 0x01	; 1
    25ae:	8c 91       	ld	r24, X
    25b0:	80 53       	subi	r24, 0x30	; 48
    25b2:	8a 30       	cpi	r24, 0x0A	; 10
    25b4:	50 f3       	brcs	.-44     	; 0x258a <strtod+0x17a>
    25b6:	14 ff       	sbrs	r17, 4
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <strtod+0x1b0>
    25ba:	71 95       	neg	r23
    25bc:	61 95       	neg	r22
    25be:	71 09       	sbc	r23, r1
    25c0:	c6 0f       	add	r28, r22
    25c2:	d7 1f       	adc	r29, r23
    25c4:	11 ff       	sbrs	r17, 1
    25c6:	08 c0       	rjmp	.+16     	; 0x25d8 <strtod+0x1c8>
    25c8:	c1 14       	cp	r12, r1
    25ca:	d1 04       	cpc	r13, r1
    25cc:	29 f0       	breq	.+10     	; 0x25d8 <strtod+0x1c8>
    25ce:	cf 01       	movw	r24, r30
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f6 01       	movw	r30, r12
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24
    25d8:	ca 01       	movw	r24, r20
    25da:	b9 01       	movw	r22, r18
    25dc:	0e 94 c8 10 	call	0x2190	; 0x2190 <__floatunsisf>
    25e0:	21 2f       	mov	r18, r17
    25e2:	23 70       	andi	r18, 0x03	; 3
    25e4:	23 30       	cpi	r18, 0x03	; 3
    25e6:	19 f0       	breq	.+6      	; 0x25ee <strtod+0x1de>
    25e8:	4b 01       	movw	r8, r22
    25ea:	5c 01       	movw	r10, r24
    25ec:	06 c0       	rjmp	.+12     	; 0x25fa <strtod+0x1ea>
    25ee:	4b 01       	movw	r8, r22
    25f0:	5c 01       	movw	r10, r24
    25f2:	b7 fa       	bst	r11, 7
    25f4:	b0 94       	com	r11
    25f6:	b7 f8       	bld	r11, 7
    25f8:	b0 94       	com	r11
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	a9 01       	movw	r20, r18
    2600:	c5 01       	movw	r24, r10
    2602:	b4 01       	movw	r22, r8
    2604:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    2608:	88 23       	and	r24, r24
    260a:	09 f4       	brne	.+2      	; 0x260e <strtod+0x1fe>
    260c:	3e c0       	rjmp	.+124    	; 0x268a <strtod+0x27a>
    260e:	d7 ff       	sbrs	r29, 7
    2610:	06 c0       	rjmp	.+12     	; 0x261e <strtod+0x20e>
    2612:	d1 95       	neg	r29
    2614:	c1 95       	neg	r28
    2616:	d1 09       	sbc	r29, r1
    2618:	03 e7       	ldi	r16, 0x73	; 115
    261a:	10 e0       	ldi	r17, 0x00	; 0
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <strtod+0x212>
    261e:	0b e8       	ldi	r16, 0x8B	; 139
    2620:	10 e0       	ldi	r17, 0x00	; 0
    2622:	68 01       	movw	r12, r16
    2624:	f8 e1       	ldi	r31, 0x18	; 24
    2626:	cf 1a       	sub	r12, r31
    2628:	d1 08       	sbc	r13, r1
    262a:	90 e2       	ldi	r25, 0x20	; 32
    262c:	e9 2e       	mov	r14, r25
    262e:	f1 2c       	mov	r15, r1
    2630:	ce 15       	cp	r28, r14
    2632:	df 05       	cpc	r29, r15
    2634:	74 f0       	brlt	.+28     	; 0x2652 <strtod+0x242>
    2636:	f8 01       	movw	r30, r16
    2638:	25 91       	lpm	r18, Z+
    263a:	35 91       	lpm	r19, Z+
    263c:	45 91       	lpm	r20, Z+
    263e:	54 91       	lpm	r21, Z
    2640:	c5 01       	movw	r24, r10
    2642:	b4 01       	movw	r22, r8
    2644:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__mulsf3>
    2648:	4b 01       	movw	r8, r22
    264a:	5c 01       	movw	r10, r24
    264c:	ce 19       	sub	r28, r14
    264e:	df 09       	sbc	r29, r15
    2650:	ef cf       	rjmp	.-34     	; 0x2630 <strtod+0x220>
    2652:	04 50       	subi	r16, 0x04	; 4
    2654:	11 09       	sbc	r17, r1
    2656:	f5 94       	asr	r15
    2658:	e7 94       	ror	r14
    265a:	0c 15       	cp	r16, r12
    265c:	1d 05       	cpc	r17, r13
    265e:	41 f7       	brne	.-48     	; 0x2630 <strtod+0x220>
    2660:	8a 2d       	mov	r24, r10
    2662:	88 0f       	add	r24, r24
    2664:	8b 2d       	mov	r24, r11
    2666:	88 1f       	adc	r24, r24
    2668:	8f 3f       	cpi	r24, 0xFF	; 255
    266a:	49 f0       	breq	.+18     	; 0x267e <strtod+0x26e>
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	a9 01       	movw	r20, r18
    2672:	c5 01       	movw	r24, r10
    2674:	b4 01       	movw	r22, r8
    2676:	0e 94 22 10 	call	0x2044	; 0x2044 <__cmpsf2>
    267a:	81 11       	cpse	r24, r1
    267c:	06 c0       	rjmp	.+12     	; 0x268a <strtod+0x27a>
    267e:	82 e2       	ldi	r24, 0x22	; 34
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <errno+0x1>
    2686:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <errno>
    268a:	c5 01       	movw	r24, r10
    268c:	b4 01       	movw	r22, r8
    268e:	09 c0       	rjmp	.+18     	; 0x26a2 <strtod+0x292>
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	80 e8       	ldi	r24, 0x80	; 128
    2696:	9f ef       	ldi	r25, 0xFF	; 255
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <strtod+0x292>
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	80 ec       	ldi	r24, 0xC0	; 192
    26a0:	9f e7       	ldi	r25, 0x7F	; 127
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	ec e0       	ldi	r30, 0x0C	; 12
    26a8:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__+0xc>

000026ac <isspace>:
    26ac:	91 11       	cpse	r25, r1
    26ae:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__ctype_isfalse>
    26b2:	80 32       	cpi	r24, 0x20	; 32
    26b4:	19 f0       	breq	.+6      	; 0x26bc <isspace+0x10>
    26b6:	89 50       	subi	r24, 0x09	; 9
    26b8:	85 50       	subi	r24, 0x05	; 5
    26ba:	c8 f7       	brcc	.-14     	; 0x26ae <isspace+0x2>
    26bc:	08 95       	ret

000026be <strncasecmp_P>:
    26be:	fb 01       	movw	r30, r22
    26c0:	dc 01       	movw	r26, r24
    26c2:	41 50       	subi	r20, 0x01	; 1
    26c4:	50 40       	sbci	r21, 0x00	; 0
    26c6:	88 f0       	brcs	.+34     	; 0x26ea <strncasecmp_P+0x2c>
    26c8:	8d 91       	ld	r24, X+
    26ca:	81 34       	cpi	r24, 0x41	; 65
    26cc:	1c f0       	brlt	.+6      	; 0x26d4 <strncasecmp_P+0x16>
    26ce:	8b 35       	cpi	r24, 0x5B	; 91
    26d0:	0c f4       	brge	.+2      	; 0x26d4 <strncasecmp_P+0x16>
    26d2:	80 5e       	subi	r24, 0xE0	; 224
    26d4:	65 91       	lpm	r22, Z+
    26d6:	61 34       	cpi	r22, 0x41	; 65
    26d8:	1c f0       	brlt	.+6      	; 0x26e0 <strncasecmp_P+0x22>
    26da:	6b 35       	cpi	r22, 0x5B	; 91
    26dc:	0c f4       	brge	.+2      	; 0x26e0 <strncasecmp_P+0x22>
    26de:	60 5e       	subi	r22, 0xE0	; 224
    26e0:	86 1b       	sub	r24, r22
    26e2:	61 11       	cpse	r22, r1
    26e4:	71 f3       	breq	.-36     	; 0x26c2 <strncasecmp_P+0x4>
    26e6:	99 0b       	sbc	r25, r25
    26e8:	08 95       	ret
    26ea:	88 1b       	sub	r24, r24
    26ec:	fc cf       	rjmp	.-8      	; 0x26e6 <strncasecmp_P+0x28>

000026ee <__ctype_isfalse>:
    26ee:	99 27       	eor	r25, r25
    26f0:	88 27       	eor	r24, r24

000026f2 <__ctype_istrue>:
    26f2:	08 95       	ret

000026f4 <__muluhisi3>:
    26f4:	0e 94 bc 13 	call	0x2778	; 0x2778 <__umulhisi3>
    26f8:	a5 9f       	mul	r26, r21
    26fa:	90 0d       	add	r25, r0
    26fc:	b4 9f       	mul	r27, r20
    26fe:	90 0d       	add	r25, r0
    2700:	a4 9f       	mul	r26, r20
    2702:	80 0d       	add	r24, r0
    2704:	91 1d       	adc	r25, r1
    2706:	11 24       	eor	r1, r1
    2708:	08 95       	ret

0000270a <__prologue_saves__>:
    270a:	2f 92       	push	r2
    270c:	3f 92       	push	r3
    270e:	4f 92       	push	r4
    2710:	5f 92       	push	r5
    2712:	6f 92       	push	r6
    2714:	7f 92       	push	r7
    2716:	8f 92       	push	r8
    2718:	9f 92       	push	r9
    271a:	af 92       	push	r10
    271c:	bf 92       	push	r11
    271e:	cf 92       	push	r12
    2720:	df 92       	push	r13
    2722:	ef 92       	push	r14
    2724:	ff 92       	push	r15
    2726:	0f 93       	push	r16
    2728:	1f 93       	push	r17
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	ca 1b       	sub	r28, r26
    2734:	db 0b       	sbc	r29, r27
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	09 94       	ijmp

00002742 <__epilogue_restores__>:
    2742:	2a 88       	ldd	r2, Y+18	; 0x12
    2744:	39 88       	ldd	r3, Y+17	; 0x11
    2746:	48 88       	ldd	r4, Y+16	; 0x10
    2748:	5f 84       	ldd	r5, Y+15	; 0x0f
    274a:	6e 84       	ldd	r6, Y+14	; 0x0e
    274c:	7d 84       	ldd	r7, Y+13	; 0x0d
    274e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2750:	9b 84       	ldd	r9, Y+11	; 0x0b
    2752:	aa 84       	ldd	r10, Y+10	; 0x0a
    2754:	b9 84       	ldd	r11, Y+9	; 0x09
    2756:	c8 84       	ldd	r12, Y+8	; 0x08
    2758:	df 80       	ldd	r13, Y+7	; 0x07
    275a:	ee 80       	ldd	r14, Y+6	; 0x06
    275c:	fd 80       	ldd	r15, Y+5	; 0x05
    275e:	0c 81       	ldd	r16, Y+4	; 0x04
    2760:	1b 81       	ldd	r17, Y+3	; 0x03
    2762:	aa 81       	ldd	r26, Y+2	; 0x02
    2764:	b9 81       	ldd	r27, Y+1	; 0x01
    2766:	ce 0f       	add	r28, r30
    2768:	d1 1d       	adc	r29, r1
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	ed 01       	movw	r28, r26
    2776:	08 95       	ret

00002778 <__umulhisi3>:
    2778:	a2 9f       	mul	r26, r18
    277a:	b0 01       	movw	r22, r0
    277c:	b3 9f       	mul	r27, r19
    277e:	c0 01       	movw	r24, r0
    2780:	a3 9f       	mul	r26, r19
    2782:	70 0d       	add	r23, r0
    2784:	81 1d       	adc	r24, r1
    2786:	11 24       	eor	r1, r1
    2788:	91 1d       	adc	r25, r1
    278a:	b2 9f       	mul	r27, r18
    278c:	70 0d       	add	r23, r0
    278e:	81 1d       	adc	r24, r1
    2790:	11 24       	eor	r1, r1
    2792:	91 1d       	adc	r25, r1
    2794:	08 95       	ret

00002796 <_exit>:
    2796:	f8 94       	cli

00002798 <__stop_program>:
    2798:	ff cf       	rjmp	.-2      	; 0x2798 <__stop_program>
