
ATM_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  000027ca  0000285e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  0080016e  0080016e  0000296c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000029c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c42  00000000  00000000  00002c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e64  00000000  00000000  0000587e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001995  00000000  00000000  000066e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000840  00000000  00000000  00008078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f1  00000000  00000000  000088b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e60  00000000  00000000  000092a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000b109  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__vector_11>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea ec       	ldi	r30, 0xCA	; 202
      a4:	f7 e2       	ldi	r31, 0x27	; 39
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 36       	cpi	r26, 0x6E	; 110
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ae e6       	ldi	r26, 0x6E	; 110
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 3a       	cpi	r26, 0xAF	; 175
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 96 0b 	call	0x172c	; 0x172c <main>
      c6:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <appInit>:
};

#define MAX_AMOUNT 5000

ST_accountsDB_t accountRefrence;
void appInit(void){
      ce:	df 92       	push	r13
      d0:	ef 92       	push	r14
      d2:	ff 92       	push	r15
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
	 atm_mode = FRIST_RUN;
      dc:	0f 2e       	mov	r0, r31
      de:	f5 e0       	ldi	r31, 0x05	; 5
      e0:	df 2e       	mov	r13, r31
      e2:	f0 2d       	mov	r31, r0
      e4:	d0 92 9e 01 	sts	0x019E, r13	; 0x80019e <atm_mode>
	 card_trigger_signal = 0;
      e8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <card_trigger_signal>
	 ATM_STATUS = ATM_NORMAL_MODE;
      ec:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <ATM_STATUS>
	// init LCD
	atm_lcd.E_port = PORT_C;
      f0:	e9 e7       	ldi	r30, 0x79	; 121
      f2:	f1 e0       	ldi	r31, 0x01	; 1
      f4:	c2 e0       	ldi	r28, 0x02	; 2
      f6:	0c 2f       	mov	r16, r28
      f8:	c2 83       	std	Z+2, r28	; 0x02
	atm_lcd.E_pin = PINC3;
      fa:	d3 e0       	ldi	r29, 0x03	; 3
      fc:	3d 2f       	mov	r19, r29
      fe:	d5 83       	std	Z+5, r29	; 0x05
	atm_lcd.RS_port = PORT_C;
     100:	ec 2e       	mov	r14, r28
     102:	c0 83       	st	Z, r28
	atm_lcd.RS_pin = PINC1;
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	18 2f       	mov	r17, r24
     108:	83 83       	std	Z+3, r24	; 0x03
	atm_lcd.RW_port = PORT_C;
     10a:	fc 2e       	mov	r15, r28
     10c:	c1 83       	std	Z+1, r28	; 0x01
	atm_lcd.RW_pin = PINC2;
     10e:	2c 2f       	mov	r18, r28
     110:	c4 83       	std	Z+4, r28	; 0x04
	// data pins
	atm_lcd.lcd_data_port = PORT_C;
     112:	4c 2f       	mov	r20, r28
     114:	c6 83       	std	Z+6, r28	; 0x06
	atm_lcd.lcd_data1_pin = PINC4;
     116:	84 e0       	ldi	r24, 0x04	; 4
     118:	58 2f       	mov	r21, r24
     11a:	87 83       	std	Z+7, r24	; 0x07
	atm_lcd.lcd_data2_pin = PINC5;
     11c:	6d 2d       	mov	r22, r13
     11e:	d0 86       	std	Z+8, r13	; 0x08
	atm_lcd.lcd_data3_pin = PINC6;
     120:	86 e0       	ldi	r24, 0x06	; 6
     122:	78 2f       	mov	r23, r24
     124:	81 87       	std	Z+9, r24	; 0x09
	atm_lcd.lcd_data4_pin = PINC7;
     126:	87 e0       	ldi	r24, 0x07	; 7
     128:	82 87       	std	Z+10, r24	; 0x0a
	LCD_init(atm_lcd);
     12a:	0e 94 88 09 	call	0x1310	; 0x1310 <LCD_init>
	// keypad 
	kpd.cols_port = PORT_A;
     12e:	e4 ea       	ldi	r30, 0xA4	; 164
     130:	f1 e0       	ldi	r31, 0x01	; 1
     132:	14 82       	std	Z+4, r1	; 0x04
	kpd.rows_port = PORT_A;
     134:	15 82       	std	Z+5, r1	; 0x05
	kpd.number_of_cols = 3;
     136:	4d 2f       	mov	r20, r29
     138:	d0 83       	st	Z, r29
	kpd.number_of_rows = 3;
     13a:	5d 2f       	mov	r21, r29
     13c:	d1 83       	std	Z+1, r29	; 0x01
	kpd.cols_first_pin = PINA2;
     13e:	6c 2f       	mov	r22, r28
     140:	c2 83       	std	Z+2, r28	; 0x02
	kpd.rows_first_pin = PINA5;
     142:	7d 2d       	mov	r23, r13
     144:	d3 82       	std	Z+3, r13	; 0x03
	
	KPD_init(kpd);
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <KPD_init>
	// Buzzer
	buzzer.buzzer_port = PORT_D;
     14e:	e6 e7       	ldi	r30, 0x76	; 118
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	d0 83       	st	Z, r29
	buzzer.buzzer_pin = PIND3;
     154:	d1 83       	std	Z+1, r29	; 0x01
	buzzer_init(buzzer);
     156:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <buzzer>
     15a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <buzzer+0x1>
     15e:	0e 94 46 08 	call	0x108c	; 0x108c <buzzer_init>
	// button 
	zero_enter_btn.button_port = PORT_D;
     162:	e3 e7       	ldi	r30, 0x73	; 115
     164:	f1 e0       	ldi	r31, 0x01	; 1
     166:	d0 83       	st	Z, r29
	zero_enter_btn.button_pin = PIND2;
     168:	c1 83       	std	Z+1, r28	; 0x01
	BUTTON_init(zero_enter_btn);
     16a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <zero_enter_btn>
     16e:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <zero_enter_btn+0x1>
     172:	0e 94 ef 07 	call	0xfde	; 0xfde <BUTTON_init>
	// init pin as input
	dio_init(PORT_B,PINB2,DIO_IN);
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	62 e0       	ldi	r22, 0x02	; 2
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
	
	
	
	// init SPI
	SPI_initSlave();
     180:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <SPI_initSlave>
	
	// enable INTERRRUPT 
	// enable interrupt mode 
	SET_BIT(MCUCSR,ISC2);
     184:	84 b7       	in	r24, 0x34	; 52
     186:	80 64       	ori	r24, 0x40	; 64
     188:	84 bf       	out	0x34, r24	; 52
	//enable GICR
	//SET_BIT(GICR,GICR_INT_2);
	SET_BIT(GICR,5);
     18a:	8b b7       	in	r24, 0x3b	; 59
     18c:	80 62       	ori	r24, 0x20	; 32
     18e:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(SREG,1);
     190:	8f b7       	in	r24, 0x3f	; 63
     192:	82 60       	ori	r24, 0x02	; 2
     194:	8f bf       	out	0x3f, r24	; 63
	sei();
     196:	78 94       	sei
	

}
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	ff 90       	pop	r15
     1a2:	ef 90       	pop	r14
     1a4:	df 90       	pop	r13
     1a6:	08 95       	ret

000001a8 <idelMenu>:

void idelMenu(void){
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	cf 92       	push	r12
     1b0:	df 92       	push	r13
     1b2:	ef 92       	push	r14
     1b4:	ff 92       	push	r15
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
	LCD_clearScreen(atm_lcd);
     1ba:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     1be:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     1c2:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     1c6:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     1ca:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     1ce:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     1d2:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     1d6:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     1da:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     1de:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     1e2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     1e6:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd,0,5,"WELCOME");
     1ea:	0f 2e       	mov	r0, r31
     1ec:	f0 e6       	ldi	r31, 0x60	; 96
     1ee:	8f 2e       	mov	r8, r31
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	9f 2e       	mov	r9, r31
     1f4:	f0 2d       	mov	r31, r0
     1f6:	0f 2e       	mov	r0, r31
     1f8:	f5 e0       	ldi	r31, 0x05	; 5
     1fa:	af 2e       	mov	r10, r31
     1fc:	f0 2d       	mov	r31, r0
     1fe:	c1 2c       	mov	r12, r1
     200:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     204:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     208:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     20c:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     210:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     214:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     218:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     21c:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     220:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     224:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     228:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     22c:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
	// delay 1 second
	Timer0_Delay(1000);
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	8a e7       	ldi	r24, 0x7A	; 122
     236:	94 e4       	ldi	r25, 0x44	; 68
     238:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
	LCD_clearScreen(atm_lcd);
     23c:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     240:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     244:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     248:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     24c:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     250:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     254:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     258:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     25c:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     260:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     264:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     268:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
	LCD_displayString(atm_lcd,"Insert a Card");
     26c:	0f 2e       	mov	r0, r31
     26e:	f8 e6       	ldi	r31, 0x68	; 104
     270:	cf 2e       	mov	r12, r31
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	df 2e       	mov	r13, r31
     276:	f0 2d       	mov	r31, r0
     278:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     27c:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     280:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     284:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     288:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     28c:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     290:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     294:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     298:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     29c:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     2a0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     2a4:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_displayString>
	
}
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	cf 90       	pop	r12
     2b4:	af 90       	pop	r10
     2b6:	9f 90       	pop	r9
     2b8:	8f 90       	pop	r8
     2ba:	08 95       	ret

000002bc <readNumber>:

void readNumber(ST_KPD_t a_kpd,ST_PBTN_t a_zero_enter_btn,uint8 *a_key){
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	28 97       	sbiw	r28, 0x08	; 8
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	f8 94       	cli
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	cd bf       	out	0x3d, r28	; 61
     2d8:	4b 83       	std	Y+3, r20	; 0x03
     2da:	5c 83       	std	Y+4, r21	; 0x04
     2dc:	6d 83       	std	Y+5, r22	; 0x05
     2de:	7e 83       	std	Y+6, r23	; 0x06
     2e0:	8f 83       	std	Y+7, r24	; 0x07
     2e2:	98 87       	std	Y+8, r25	; 0x08
     2e4:	79 01       	movw	r14, r18
	// read numbers from keypad and zero btn 
	uint8 kpd_value ,btn_value; 
	KPD_get_pressed_key(a_kpd,&kpd_value);
     2e6:	9e 01       	movw	r18, r28
     2e8:	2f 5f       	subi	r18, 0xFF	; 255
     2ea:	3f 4f       	sbci	r19, 0xFF	; 255
     2ec:	0e 94 8b 08 	call	0x1116	; 0x1116 <KPD_get_pressed_key>
	Timer0_Delay(50);
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	88 e4       	ldi	r24, 0x48	; 72
     2f6:	92 e4       	ldi	r25, 0x42	; 66
     2f8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
	BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
     2fc:	be 01       	movw	r22, r28
     2fe:	6e 5f       	subi	r22, 0xFE	; 254
     300:	7f 4f       	sbci	r23, 0xFF	; 255
     302:	c7 01       	movw	r24, r14
     304:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <BUTTON_read_zero_enter>
	Timer0_Delay(20);
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	80 ea       	ldi	r24, 0xA0	; 160
     30e:	91 e4       	ldi	r25, 0x41	; 65
     310:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
	while(kpd_value ==KPD_NO_KEY_PRESSED && btn_value==BTN_NO_PRESS){
     314:	1d c0       	rjmp	.+58     	; 0x350 <readNumber+0x94>
			 KPD_get_pressed_key(a_kpd,&kpd_value);
     316:	9e 01       	movw	r18, r28
     318:	2f 5f       	subi	r18, 0xFF	; 255
     31a:	3f 4f       	sbci	r19, 0xFF	; 255
     31c:	4b 81       	ldd	r20, Y+3	; 0x03
     31e:	5c 81       	ldd	r21, Y+4	; 0x04
     320:	6d 81       	ldd	r22, Y+5	; 0x05
     322:	7e 81       	ldd	r23, Y+6	; 0x06
     324:	8f 81       	ldd	r24, Y+7	; 0x07
     326:	98 85       	ldd	r25, Y+8	; 0x08
     328:	0e 94 8b 08 	call	0x1116	; 0x1116 <KPD_get_pressed_key>
			 	Timer0_Delay(50);
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	88 e4       	ldi	r24, 0x48	; 72
     332:	92 e4       	ldi	r25, 0x42	; 66
     334:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
			 BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
     338:	be 01       	movw	r22, r28
     33a:	6e 5f       	subi	r22, 0xFE	; 254
     33c:	7f 4f       	sbci	r23, 0xFF	; 255
     33e:	c7 01       	movw	r24, r14
     340:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <BUTTON_read_zero_enter>
				Timer0_Delay(10);
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	80 e2       	ldi	r24, 0x20	; 32
     34a:	91 e4       	ldi	r25, 0x41	; 65
     34c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
	uint8 kpd_value ,btn_value; 
	KPD_get_pressed_key(a_kpd,&kpd_value);
	Timer0_Delay(50);
	BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
	Timer0_Delay(20);
	while(kpd_value ==KPD_NO_KEY_PRESSED && btn_value==BTN_NO_PRESS){
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	8c 30       	cpi	r24, 0x0C	; 12
     354:	19 f4       	brne	.+6      	; 0x35c <readNumber+0xa0>
     356:	9a 81       	ldd	r25, Y+2	; 0x02
     358:	9c 30       	cpi	r25, 0x0C	; 12
     35a:	e9 f2       	breq	.-70     	; 0x316 <readNumber+0x5a>
			 KPD_get_pressed_key(a_kpd,&kpd_value);
			 	Timer0_Delay(50);
			 BUTTON_read_zero_enter(a_zero_enter_btn,&btn_value);
				Timer0_Delay(10);
	}
	if (kpd_value != KPD_NO_KEY_PRESSED)
     35c:	8c 30       	cpi	r24, 0x0C	; 12
     35e:	19 f0       	breq	.+6      	; 0x366 <readNumber+0xaa>
	{
		*a_key=kpd_value;
     360:	f8 01       	movw	r30, r16
     362:	80 83       	st	Z, r24
     364:	0a c0       	rjmp	.+20     	; 0x37a <readNumber+0xbe>
	} 
	else if (btn_value != BTN_NO_PRESS)
     366:	8a 81       	ldd	r24, Y+2	; 0x02
     368:	8c 30       	cpi	r24, 0x0C	; 12
     36a:	39 f0       	breq	.+14     	; 0x37a <readNumber+0xbe>
	{
		
		*a_key = (btn_value == BTN_ZERO_PRESSED ? 0 : BTN_ENTER_PRESSED);
     36c:	8a 30       	cpi	r24, 0x0A	; 10
     36e:	11 f4       	brne	.+4      	; 0x374 <readNumber+0xb8>
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	01 c0       	rjmp	.+2      	; 0x376 <readNumber+0xba>
     374:	8b e0       	ldi	r24, 0x0B	; 11
     376:	f8 01       	movw	r30, r16
     378:	80 83       	st	Z, r24
	}
}
     37a:	28 96       	adiw	r28, 0x08	; 8
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	08 95       	ret

00000394 <readPIN>:



// read PIN from User
void readPIN(uint8 *pin[]){
     394:	6f 92       	push	r6
     396:	7f 92       	push	r7
     398:	8f 92       	push	r8
     39a:	9f 92       	push	r9
     39c:	af 92       	push	r10
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <readPIN+0x1c>
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <readPIN+0x1e>
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	3c 01       	movw	r6, r24
	uint8 pin_temp [PIN_LENTH];
	// 4 numeric number
	LCD_clearScreen(atm_lcd);
     3b8:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     3bc:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     3c0:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     3c4:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     3c8:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     3cc:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     3d0:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     3d4:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     3d8:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     3dc:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     3e0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     3e4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd,0,0,"ENTER YOUR PIN");
     3e8:	0f 2e       	mov	r0, r31
     3ea:	f6 e7       	ldi	r31, 0x76	; 118
     3ec:	8f 2e       	mov	r8, r31
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	9f 2e       	mov	r9, r31
     3f2:	f0 2d       	mov	r31, r0
     3f4:	a1 2c       	mov	r10, r1
     3f6:	c1 2c       	mov	r12, r1
     3f8:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     3fc:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     400:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     404:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     408:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     40c:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     410:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     414:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     418:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     41c:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     420:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     424:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
	
	// read PIN
	for (uint8 i = 0;i<PIN_LENTH;i++ )
     428:	d1 2c       	mov	r13, r1
     42a:	3e c0       	rjmp	.+124    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
	{
		readNumber(kpd,zero_enter_btn,&pin_temp[i]);
     42c:	01 e0       	ldi	r16, 0x01	; 1
     42e:	10 e0       	ldi	r17, 0x00	; 0
     430:	0c 0f       	add	r16, r28
     432:	1d 1f       	adc	r17, r29
     434:	0d 0d       	add	r16, r13
     436:	11 1d       	adc	r17, r1
     438:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <zero_enter_btn>
     43c:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <zero_enter_btn+0x1>
     440:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <kpd>
     444:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <kpd+0x1>
     448:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <kpd+0x2>
     44c:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <kpd+0x3>
     450:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <kpd+0x4>
     454:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <kpd+0x5>
     458:	0e 94 5e 01 	call	0x2bc	; 0x2bc <readNumber>
		LCD_displayStringRowColumn(atm_lcd,1,(5+i),"X");
     45c:	0f 2e       	mov	r0, r31
     45e:	f5 e0       	ldi	r31, 0x05	; 5
     460:	af 2e       	mov	r10, r31
     462:	f0 2d       	mov	r31, r0
     464:	ad 0c       	add	r10, r13
     466:	0f 2e       	mov	r0, r31
     468:	f5 e8       	ldi	r31, 0x85	; 133
     46a:	8f 2e       	mov	r8, r31
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	9f 2e       	mov	r9, r31
     470:	f0 2d       	mov	r31, r0
     472:	cc 24       	eor	r12, r12
     474:	c3 94       	inc	r12
     476:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     47a:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     47e:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     482:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     486:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     48a:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     48e:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     492:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     496:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     49a:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     49e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     4a2:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
	// 4 numeric number
	LCD_clearScreen(atm_lcd);
	LCD_displayStringRowColumn(atm_lcd,0,0,"ENTER YOUR PIN");
	
	// read PIN
	for (uint8 i = 0;i<PIN_LENTH;i++ )
     4a6:	d3 94       	inc	r13
     4a8:	83 e0       	ldi	r24, 0x03	; 3
     4aa:	8d 15       	cp	r24, r13
     4ac:	08 f0       	brcs	.+2      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4ae:	be cf       	rjmp	.-132    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		readNumber(kpd,zero_enter_btn,&pin_temp[i]);
		LCD_displayStringRowColumn(atm_lcd,1,(5+i),"X");
	}
	
	// wait for enter
	readNumber(kpd,zero_enter_btn,&btn_value_temp);
     4b0:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <zero_enter_btn>
     4b4:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <zero_enter_btn+0x1>
     4b8:	0b ea       	ldi	r16, 0xAB	; 171
     4ba:	11 e0       	ldi	r17, 0x01	; 1
     4bc:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <kpd>
     4c0:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <kpd+0x1>
     4c4:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <kpd+0x2>
     4c8:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <kpd+0x3>
     4cc:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <kpd+0x4>
     4d0:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <kpd+0x5>
     4d4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <readNumber>
	while(btn_value_temp != BTN_ENTER_PRESSED){
     4d8:	14 c0       	rjmp	.+40     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
		readNumber(kpd,zero_enter_btn,&btn_value_temp);
     4da:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <zero_enter_btn>
     4de:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <zero_enter_btn+0x1>
     4e2:	0b ea       	ldi	r16, 0xAB	; 171
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <kpd>
     4ea:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <kpd+0x1>
     4ee:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <kpd+0x2>
     4f2:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <kpd+0x3>
     4f6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <kpd+0x4>
     4fa:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <kpd+0x5>
     4fe:	0e 94 5e 01 	call	0x2bc	; 0x2bc <readNumber>
		LCD_displayStringRowColumn(atm_lcd,1,(5+i),"X");
	}
	
	// wait for enter
	readNumber(kpd,zero_enter_btn,&btn_value_temp);
	while(btn_value_temp != BTN_ENTER_PRESSED){
     502:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <btn_value_temp>
     506:	8b 30       	cpi	r24, 0x0B	; 11
     508:	41 f7       	brne	.-48     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
		readNumber(kpd,zero_enter_btn,&btn_value_temp);
	}
	*pin = pin_temp;
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	f3 01       	movw	r30, r6
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	80 83       	st	Z, r24
}
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	df 90       	pop	r13
     52a:	cf 90       	pop	r12
     52c:	af 90       	pop	r10
     52e:	9f 90       	pop	r9
     530:	8f 90       	pop	r8
     532:	7f 90       	pop	r7
     534:	6f 90       	pop	r6
     536:	08 95       	ret

00000538 <checkCardInfo>:

uint8 checkCardInfo(ST_transaction_t *card, uint8 *pin, ST_accountsDB_t *accRef) {
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
     54a:	7a 01       	movw	r14, r20
	uint8 count = 0;
	uint8 length;
	
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
     54c:	44 96       	adiw	r24, 0x14	; 20
     54e:	0e 94 08 12 	call	0x2410	; 0x2410 <strcmp>
     552:	89 2b       	or	r24, r25
     554:	31 f5       	brne	.+76     	; 0x5a2 <checkCardInfo+0x6a>
		return INVALID_PIN;
	}
	
	length = strlen((const char *)card->PAN);
     556:	cc 2e       	mov	r12, r28
     558:	dd 2e       	mov	r13, r29
	for (int x = 0; x < ACCOUNTS_DB_SIZE; x++) {
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	10 e0       	ldi	r17, 0x00	; 0
     55e:	1c c0       	rjmp	.+56     	; 0x598 <checkCardInfo+0x60>
		if (strcmp((const char *)card->PAN, (const char *)accRef[x].primaryAccountNumber) == 0) {
     560:	89 e1       	ldi	r24, 0x19	; 25
     562:	80 9f       	mul	r24, r16
     564:	e0 01       	movw	r28, r0
     566:	81 9f       	mul	r24, r17
     568:	d0 0d       	add	r29, r0
     56a:	11 24       	eor	r1, r1
     56c:	ce 0d       	add	r28, r14
     56e:	df 1d       	adc	r29, r15
     570:	be 01       	movw	r22, r28
     572:	6b 5f       	subi	r22, 0xFB	; 251
     574:	7f 4f       	sbci	r23, 0xFF	; 255
     576:	8c 2d       	mov	r24, r12
     578:	9d 2d       	mov	r25, r13
     57a:	0e 94 08 12 	call	0x2410	; 0x2410 <strcmp>
     57e:	89 2b       	or	r24, r25
     580:	49 f4       	brne	.+18     	; 0x594 <checkCardInfo+0x5c>
			*accRef = accRef[x];
     582:	89 e1       	ldi	r24, 0x19	; 25
     584:	fe 01       	movw	r30, r28
     586:	d7 01       	movw	r26, r14
     588:	01 90       	ld	r0, Z+
     58a:	0d 92       	st	X+, r0
     58c:	8a 95       	dec	r24
     58e:	e1 f7       	brne	.-8      	; 0x588 <checkCardInfo+0x50>
			return ACC_FOUND;
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	08 c0       	rjmp	.+16     	; 0x5a4 <checkCardInfo+0x6c>
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
		return INVALID_PIN;
	}
	
	length = strlen((const char *)card->PAN);
	for (int x = 0; x < ACCOUNTS_DB_SIZE; x++) {
     594:	0f 5f       	subi	r16, 0xFF	; 255
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	0f 3f       	cpi	r16, 0xFF	; 255
     59a:	11 05       	cpc	r17, r1
     59c:	0c f3       	brlt	.-62     	; 0x560 <checkCardInfo+0x28>
			*accRef = accRef[x];
			return ACC_FOUND;
		}
	}
	
	return ACC_NOT_FOUNT;
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <checkCardInfo+0x6c>
uint8 checkCardInfo(ST_transaction_t *card, uint8 *pin, ST_accountsDB_t *accRef) {
	uint8 count = 0;
	uint8 length;
	
	if (strcmp((const char *)card->pin, (const char *)pin) != 0) {
		return INVALID_PIN;
     5a2:	80 e0       	ldi	r24, 0x00	; 0
			return ACC_FOUND;
		}
	}
	
	return ACC_NOT_FOUNT;
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	cf 90       	pop	r12
     5b4:	08 95       	ret

000005b6 <readCardInfo>:



void readCardInfo(ST_transaction_t *card){
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	68 97       	sbiw	r28, 0x18	; 24
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	6c 01       	movw	r12, r24
	//////////////////////////////////////////////////////////////////////////
	// recive PAN 
	// recive PIN 
	uint8 str_pan[PAN_size]={0},str_pin[PIN_LENTH] = {0};
     5d8:	fe 01       	movw	r30, r28
     5da:	31 96       	adiw	r30, 0x01	; 1
     5dc:	84 e1       	ldi	r24, 0x14	; 20
     5de:	df 01       	movw	r26, r30
     5e0:	1d 92       	st	X+, r1
     5e2:	8a 95       	dec	r24
     5e4:	e9 f7       	brne	.-6      	; 0x5e0 <readCardInfo+0x2a>
     5e6:	1d 8a       	std	Y+21, r1	; 0x15
     5e8:	1e 8a       	std	Y+22, r1	; 0x16
     5ea:	1f 8a       	std	Y+23, r1	; 0x17
     5ec:	18 8e       	std	Y+24, r1	; 0x18
	uint8 str_length=0;
     5ee:	00 e0       	ldi	r16, 0x00	; 0
	uint8 i=0;
	uint8 key=0;
	// recive PAN 
	while(!str_length)
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <readCardInfo+0x44>
	{
		str_length = SPI_sendReceiveByte(0xAA);
     5f2:	8a ea       	ldi	r24, 0xAA	; 170
     5f4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <SPI_sendReceiveByte>
     5f8:	08 2f       	mov	r16, r24
	uint8 str_pan[PAN_size]={0},str_pin[PIN_LENTH] = {0};
	uint8 str_length=0;
	uint8 i=0;
	uint8 key=0;
	// recive PAN 
	while(!str_length)
     5fa:	00 23       	and	r16, r16
     5fc:	d1 f3       	breq	.-12     	; 0x5f2 <readCardInfo+0x3c>
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	12 c0       	rjmp	.+36     	; 0x626 <readCardInfo+0x70>
		str_length = SPI_sendReceiveByte(0xAA);
	}
	
	for(i=0; i<str_length;i++)
	{
		str_pan[i] = SPI_SlaveReceive();
     602:	e1 2e       	mov	r14, r17
     604:	f1 2c       	mov	r15, r1
     606:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <SPI_SlaveReceive>
     60a:	e1 e0       	ldi	r30, 0x01	; 1
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ec 0f       	add	r30, r28
     610:	fd 1f       	adc	r31, r29
     612:	ee 0d       	add	r30, r14
     614:	ff 1d       	adc	r31, r15
     616:	80 83       	st	Z, r24
		Timer0_Delay(10);
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	80 e2       	ldi	r24, 0x20	; 32
     61e:	91 e4       	ldi	r25, 0x41	; 65
     620:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
	while(!str_length)
	{
		str_length = SPI_sendReceiveByte(0xAA);
	}
	
	for(i=0; i<str_length;i++)
     624:	1f 5f       	subi	r17, 0xFF	; 255
     626:	10 17       	cp	r17, r16
     628:	60 f3       	brcs	.-40     	; 0x602 <readCardInfo+0x4c>
	{
		str_pan[i] = SPI_SlaveReceive();
		Timer0_Delay(10);
	}
	
	str_pan[i]='\0';
     62a:	e1 e0       	ldi	r30, 0x01	; 1
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	ec 0f       	add	r30, r28
     630:	fd 1f       	adc	r31, r29
     632:	e1 0f       	add	r30, r17
     634:	f1 1d       	adc	r31, r1
     636:	10 82       	st	Z, r1
	// recive PAN 
	// recive PIN 
	uint8 str_pan[PAN_size]={0},str_pin[PIN_LENTH] = {0};
	uint8 str_length=0;
	uint8 i=0;
	uint8 key=0;
     638:	10 e0       	ldi	r17, 0x00	; 0
		Timer0_Delay(10);
	}
	
	str_pan[i]='\0';
	
	while(key != 0xBB)
     63a:	0a c0       	rjmp	.+20     	; 0x650 <readCardInfo+0x9a>
	{
		key = SPI_sendReceiveByte(0xFF);
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <SPI_sendReceiveByte>
     642:	18 2f       	mov	r17, r24
		Timer0_Delay(10);
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	80 e2       	ldi	r24, 0x20	; 32
     64a:	91 e4       	ldi	r25, 0x41	; 65
     64c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
		Timer0_Delay(10);
	}
	
	str_pan[i]='\0';
	
	while(key != 0xBB)
     650:	1b 3b       	cpi	r17, 0xBB	; 187
     652:	a1 f7       	brne	.-24     	; 0x63c <readCardInfo+0x86>
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	12 c0       	rjmp	.+36     	; 0x67c <readCardInfo+0xc6>
		Timer0_Delay(10);
	}
	
	for(i=0;i<PIN_LENTH;i++)
	{
		str_pin[i] = SPI_SlaveReceive();
     658:	e1 2e       	mov	r14, r17
     65a:	f1 2c       	mov	r15, r1
     65c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <SPI_SlaveReceive>
     660:	e5 e1       	ldi	r30, 0x15	; 21
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	ec 0f       	add	r30, r28
     666:	fd 1f       	adc	r31, r29
     668:	ee 0d       	add	r30, r14
     66a:	ff 1d       	adc	r31, r15
     66c:	80 83       	st	Z, r24
		Timer0_Delay(10);
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e2       	ldi	r24, 0x20	; 32
     674:	91 e4       	ldi	r25, 0x41	; 65
     676:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
	{
		key = SPI_sendReceiveByte(0xFF);
		Timer0_Delay(10);
	}
	
	for(i=0;i<PIN_LENTH;i++)
     67a:	1f 5f       	subi	r17, 0xFF	; 255
     67c:	14 30       	cpi	r17, 0x04	; 4
     67e:	60 f3       	brcs	.-40     	; 0x658 <readCardInfo+0xa2>
	{
		str_pin[i] = SPI_SlaveReceive();
		Timer0_Delay(10);
	}
	str_pin[i]='\0';
     680:	e5 e1       	ldi	r30, 0x15	; 21
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	ec 0f       	add	r30, r28
     686:	fd 1f       	adc	r31, r29
     688:	e1 0f       	add	r30, r17
     68a:	f1 1d       	adc	r31, r1
     68c:	10 82       	st	Z, r1
	strncpy(*card->PAN, str_pan, str_length);
     68e:	f6 01       	movw	r30, r12
     690:	80 81       	ld	r24, Z
     692:	40 2f       	mov	r20, r16
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	be 01       	movw	r22, r28
     698:	6f 5f       	subi	r22, 0xFF	; 255
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 11 12 	call	0x2422	; 0x2422 <strncpy>
	strncpy(*card->pin, str_pin, PIN_LENTH);
     6a2:	d6 01       	movw	r26, r12
     6a4:	54 96       	adiw	r26, 0x14	; 20
     6a6:	8c 91       	ld	r24, X
     6a8:	44 e0       	ldi	r20, 0x04	; 4
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	be 01       	movw	r22, r28
     6ae:	6b 5e       	subi	r22, 0xEB	; 235
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 11 12 	call	0x2422	; 0x2422 <strncpy>
// 
// 	*card->PAN = str_pan;
// 	*card->pin = str_pin;

}
     6b8:	68 96       	adiw	r28, 0x18	; 24
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	df 90       	pop	r13
     6d2:	cf 90       	pop	r12
     6d4:	08 95       	ret

000006d6 <readAmount>:


void readAmount(float *amount){
     6d6:	6f 92       	push	r6
     6d8:	7f 92       	push	r7
     6da:	8f 92       	push	r8
     6dc:	9f 92       	push	r9
     6de:	af 92       	push	r10
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	29 97       	sbiw	r28, 0x09	; 9
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	3c 01       	movw	r6, r24
	uint8 amount_display[8] = "0000.00",num;
     702:	88 e0       	ldi	r24, 0x08	; 8
     704:	e4 e9       	ldi	r30, 0x94	; 148
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	de 01       	movw	r26, r28
     70a:	11 96       	adiw	r26, 0x01	; 1
     70c:	01 90       	ld	r0, Z+
     70e:	0d 92       	st	X+, r0
     710:	8a 95       	dec	r24
     712:	e1 f7       	brne	.-8      	; 0x70c <readAmount+0x36>
	LCD_clearScreen(atm_lcd);
     714:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     718:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     71c:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     720:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     724:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     728:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     72c:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     730:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     734:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     738:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     73c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     740:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
	LCD_displayStringRowColumn(atm_lcd,0,3,"ENTER AMOUNT");
     744:	0f 2e       	mov	r0, r31
     746:	f7 e8       	ldi	r31, 0x87	; 135
     748:	8f 2e       	mov	r8, r31
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	9f 2e       	mov	r9, r31
     74e:	f0 2d       	mov	r31, r0
     750:	0f 2e       	mov	r0, r31
     752:	f3 e0       	ldi	r31, 0x03	; 3
     754:	af 2e       	mov	r10, r31
     756:	f0 2d       	mov	r31, r0
     758:	c1 2c       	mov	r12, r1
     75a:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     75e:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     762:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     766:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     76a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     76e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     772:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     776:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     77a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     77e:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     782:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     786:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(atm_lcd,1,3,amount_display);
     78a:	ce 01       	movw	r24, r28
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	4c 01       	movw	r8, r24
     790:	cc 24       	eor	r12, r12
     792:	c3 94       	inc	r12
     794:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     798:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     79c:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     7a0:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     7a4:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     7a8:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     7ac:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     7b0:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     7b4:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     7b8:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     7bc:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     7c0:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
	for(uint8 i = 0 ; i <= 6;i++){
     7c4:	d1 2c       	mov	r13, r1
     7c6:	45 c0       	rjmp	.+138    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		if (i == 4)
     7c8:	94 e0       	ldi	r25, 0x04	; 4
     7ca:	d9 12       	cpse	r13, r25
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <readAmount+0xfa>
		{
			// skip decimal point 
			i++;
     7ce:	d3 94       	inc	r13
		}
		readNumber(kpd,zero_enter_btn,&num);
     7d0:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <zero_enter_btn>
     7d4:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <zero_enter_btn+0x1>
     7d8:	8e 01       	movw	r16, r28
     7da:	07 5f       	subi	r16, 0xF7	; 247
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <kpd>
     7e2:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <kpd+0x1>
     7e6:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <kpd+0x2>
     7ea:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <kpd+0x3>
     7ee:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <kpd+0x4>
     7f2:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <kpd+0x5>
     7f6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <readNumber>
		amount_display[i] = num +'0' ;
     7fa:	e1 e0       	ldi	r30, 0x01	; 1
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	ec 0f       	add	r30, r28
     800:	fd 1f       	adc	r31, r29
     802:	ed 0d       	add	r30, r13
     804:	f1 1d       	adc	r31, r1
     806:	89 85       	ldd	r24, Y+9	; 0x09
     808:	80 5d       	subi	r24, 0xD0	; 208
     80a:	80 83       	st	Z, r24
		LCD_displayStringRowColumn(atm_lcd,1,(3+i),amount_display);
     80c:	0f 2e       	mov	r0, r31
     80e:	f3 e0       	ldi	r31, 0x03	; 3
     810:	af 2e       	mov	r10, r31
     812:	f0 2d       	mov	r31, r0
     814:	ad 0c       	add	r10, r13
     816:	fe 01       	movw	r30, r28
     818:	31 96       	adiw	r30, 0x01	; 1
     81a:	4f 01       	movw	r8, r30
     81c:	cc 24       	eor	r12, r12
     81e:	c3 94       	inc	r12
     820:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     824:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     828:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     82c:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     830:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     834:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     838:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     83c:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     840:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     844:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     848:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     84c:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
void readAmount(float *amount){
	uint8 amount_display[8] = "0000.00",num;
	LCD_clearScreen(atm_lcd);
	LCD_displayStringRowColumn(atm_lcd,0,3,"ENTER AMOUNT");
	LCD_displayStringRowColumn(atm_lcd,1,3,amount_display);
	for(uint8 i = 0 ; i <= 6;i++){
     850:	d3 94       	inc	r13
     852:	f6 e0       	ldi	r31, 0x06	; 6
     854:	fd 15       	cp	r31, r13
     856:	08 f0       	brcs	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	b7 cf       	rjmp	.-146    	; 0x7c8 <readAmount+0xf2>
		readNumber(kpd,zero_enter_btn,&num);
		amount_display[i] = num +'0' ;
		LCD_displayStringRowColumn(atm_lcd,1,(3+i),amount_display);

	}
	*amount = atof((const char *)amount_display);
     85a:	ce 01       	movw	r24, r28
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	0e 94 04 12 	call	0x2408	; 0x2408 <atof>
     862:	f3 01       	movw	r30, r6
     864:	60 83       	st	Z, r22
     866:	71 83       	std	Z+1, r23	; 0x01
     868:	82 83       	std	Z+2, r24	; 0x02
     86a:	93 83       	std	Z+3, r25	; 0x03
}
     86c:	29 96       	adiw	r28, 0x09	; 9
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	de bf       	out	0x3e, r29	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	cd bf       	out	0x3d, r28	; 61
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	7f 90       	pop	r7
     890:	6f 90       	pop	r6
     892:	08 95       	ret

00000894 <appStart>:

void appStart(void){	
     894:	8f 92       	push	r8
     896:	9f 92       	push	r9
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	a0 97       	sbiw	r28, 0x20	; 32
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
	uint8 pin_temp[PIN_LENTH],card_status;
	ST_transaction_t card ;
	if (ATM_STATUS == ATM_BLOKED_MODE)
     8bc:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ATM_STATUS>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	e1 f5       	brne	.+120    	; 0x93c <appStart+0xa8>
	{
		LCD_clearScreen(atm_lcd);
     8c4:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     8c8:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     8cc:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     8d0:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     8d4:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     8d8:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     8dc:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     8e0:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     8e4:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     8e8:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     8ec:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     8f0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"OUT FOR MENTENANCE");
     8f4:	0f 2e       	mov	r0, r31
     8f6:	fc e9       	ldi	r31, 0x9C	; 156
     8f8:	8f 2e       	mov	r8, r31
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	9f 2e       	mov	r9, r31
     8fe:	f0 2d       	mov	r31, r0
     900:	0f 2e       	mov	r0, r31
     902:	f3 e0       	ldi	r31, 0x03	; 3
     904:	af 2e       	mov	r10, r31
     906:	f0 2d       	mov	r31, r0
     908:	c1 2c       	mov	r12, r1
     90a:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     90e:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     912:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     916:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     91a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     91e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     922:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     926:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     92a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     92e:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     932:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     936:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
		return;	
     93a:	29 c3       	rjmp	.+1618   	; 0xf8e <appStart+0x6fa>
	}	
	if (atm_mode == FRIST_RUN)
     93c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <atm_mode>
     940:	85 30       	cpi	r24, 0x05	; 5
     942:	31 f4       	brne	.+12     	; 0x950 <appStart+0xbc>
	{
		idelMenu();
     944:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <idelMenu>
		atm_mode = NORMAL_MODE;
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <atm_mode>
		return;
     94e:	1f c3       	rjmp	.+1598   	; 0xf8e <appStart+0x6fa>
	}
	if (card_trigger_signal == CARD_INSERTED)
     950:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <card_trigger_signal>
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	09 f0       	breq	.+2      	; 0x95a <appStart+0xc6>
     958:	1a c3       	rjmp	.+1588   	; 0xf8e <appStart+0x6fa>
	{
		LCD_clearScreen(atm_lcd);
     95a:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     95e:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     962:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     966:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     96a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     96e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     972:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     976:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     97a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     97e:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     982:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     986:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"CARD Detected");
     98a:	0f 2e       	mov	r0, r31
     98c:	ff ea       	ldi	r31, 0xAF	; 175
     98e:	8f 2e       	mov	r8, r31
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	9f 2e       	mov	r9, r31
     994:	f0 2d       	mov	r31, r0
     996:	0f 2e       	mov	r0, r31
     998:	f3 e0       	ldi	r31, 0x03	; 3
     99a:	af 2e       	mov	r10, r31
     99c:	f0 2d       	mov	r31, r0
     99e:	c1 2c       	mov	r12, r1
     9a0:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     9a4:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     9a8:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     9ac:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     9b0:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     9b4:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     9b8:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     9bc:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     9c0:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     9c4:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     9c8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     9cc:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
		
		LCD_displayStringRowColumn(atm_lcd,1,0,"READING ...");
     9d0:	0f 2e       	mov	r0, r31
     9d2:	fd eb       	ldi	r31, 0xBD	; 189
     9d4:	8f 2e       	mov	r8, r31
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	9f 2e       	mov	r9, r31
     9da:	f0 2d       	mov	r31, r0
     9dc:	a1 2c       	mov	r10, r1
     9de:	cc 24       	eor	r12, r12
     9e0:	c3 94       	inc	r12
     9e2:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     9e6:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     9ea:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     9ee:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     9f2:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     9f6:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     9fa:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     9fe:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     a02:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     a06:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     a0a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     a0e:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
		// read Card info
		readCardInfo(&card);
     a12:	ce 01       	movw	r24, r28
     a14:	05 96       	adiw	r24, 0x05	; 5
     a16:	0e 94 db 02 	call	0x5b6	; 0x5b6 <readCardInfo>
		LCD_clearScreen(atm_lcd);
     a1a:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     a1e:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     a22:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     a26:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     a2a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     a2e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     a32:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     a36:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     a3a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     a3e:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     a42:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     a46:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,3,"OK...");
     a4a:	0f 2e       	mov	r0, r31
     a4c:	f9 ec       	ldi	r31, 0xC9	; 201
     a4e:	8f 2e       	mov	r8, r31
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	9f 2e       	mov	r9, r31
     a54:	f0 2d       	mov	r31, r0
     a56:	0f 2e       	mov	r0, r31
     a58:	f3 e0       	ldi	r31, 0x03	; 3
     a5a:	af 2e       	mov	r10, r31
     a5c:	f0 2d       	mov	r31, r0
     a5e:	c1 2c       	mov	r12, r1
     a60:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     a64:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     a68:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     a6c:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     a70:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     a74:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     a78:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     a7c:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     a80:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     a84:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     a88:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     a8c:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
		Timer0_Delay(1000);
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	8a e7       	ldi	r24, 0x7A	; 122
     a96:	94 e4       	ldi	r25, 0x44	; 68
     a98:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
		// READ PIN
		counter1 = 0;
     a9c:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <counter1>
		card_status = VALID_PIN;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
		do{
			if (card_status == INVALID_PIN && counter1 != 0)
     aa2:	81 11       	cpse	r24, r1
     aa4:	42 c0       	rjmp	.+132    	; 0xb2a <appStart+0x296>
     aa6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <counter1>
     aaa:	88 23       	and	r24, r24
     aac:	f1 f1       	breq	.+124    	; 0xb2a <appStart+0x296>
			{
				LCD_clearScreen(atm_lcd);
     aae:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     ab2:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     ab6:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     aba:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     abe:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     ac2:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     ac6:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     aca:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     ace:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     ad2:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     ad6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     ada:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
				LCD_displayStringRowColumn(atm_lcd,0,0,"INVALID PIN");
     ade:	0f 2e       	mov	r0, r31
     ae0:	ff ec       	ldi	r31, 0xCF	; 207
     ae2:	8f 2e       	mov	r8, r31
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	9f 2e       	mov	r9, r31
     ae8:	f0 2d       	mov	r31, r0
     aea:	a1 2c       	mov	r10, r1
     aec:	c1 2c       	mov	r12, r1
     aee:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     af2:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     af6:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     afa:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     afe:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     b02:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     b06:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     b0a:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     b0e:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     b12:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     b16:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     b1a:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
				Timer0_Delay(2000);
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	8a ef       	ldi	r24, 0xFA	; 250
     b24:	94 e4       	ldi	r25, 0x44	; 68
     b26:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
			}
			
			// read PIN			
			readPIN(&pin_temp);
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	0e 94 ca 01 	call	0x394	; 0x394 <readPIN>
			
			
			// check if PIN is correct
			card_status = checkCardInfo(&card,pin_temp,&accountRefrence);
     b32:	44 e8       	ldi	r20, 0x84	; 132
     b34:	51 e0       	ldi	r21, 0x01	; 1
     b36:	be 01       	movw	r22, r28
     b38:	6f 5f       	subi	r22, 0xFF	; 255
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	ce 01       	movw	r24, r28
     b3e:	05 96       	adiw	r24, 0x05	; 5
     b40:	0e 94 9c 02 	call	0x538	; 0x538 <checkCardInfo>
			counter1++;
     b44:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <counter1>
     b48:	9f 5f       	subi	r25, 0xFF	; 255
     b4a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <counter1>
			//if (counter1 == 1)
			//{
				//is_pin_correct = 0;
			//}
		}while((counter1<2)&&!card_status);
     b4e:	92 30       	cpi	r25, 0x02	; 2
     b50:	18 f4       	brcc	.+6      	; 0xb58 <appStart+0x2c4>
     b52:	88 23       	and	r24, r24
     b54:	09 f4       	brne	.+2      	; 0xb58 <appStart+0x2c4>
     b56:	a5 cf       	rjmp	.-182    	; 0xaa2 <appStart+0x20e>
				
		// check if PIN entered twise wrong
		if (counter1>=2)
     b58:	92 30       	cpi	r25, 0x02	; 2
     b5a:	08 f4       	brcc	.+2      	; 0xb5e <appStart+0x2ca>
     b5c:	6d c0       	rjmp	.+218    	; 0xc38 <appStart+0x3a4>
		{
			// Turn Alarm ON
			LCD_clearScreen(atm_lcd);
     b5e:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     b62:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     b66:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     b6a:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     b6e:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     b72:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     b76:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     b7a:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     b7e:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     b82:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     b86:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     b8a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,3,"ATM BLOCKED");
     b8e:	0f 2e       	mov	r0, r31
     b90:	fb ed       	ldi	r31, 0xDB	; 219
     b92:	8f 2e       	mov	r8, r31
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	9f 2e       	mov	r9, r31
     b98:	f0 2d       	mov	r31, r0
     b9a:	0f 2e       	mov	r0, r31
     b9c:	f3 e0       	ldi	r31, 0x03	; 3
     b9e:	af 2e       	mov	r10, r31
     ba0:	f0 2d       	mov	r31, r0
     ba2:	c1 2c       	mov	r12, r1
     ba4:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     ba8:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     bac:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     bb0:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     bb4:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     bb8:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     bbc:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     bc0:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     bc4:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     bc8:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     bcc:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     bd0:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(atm_lcd,1,0,"INVALIDS TRYS");
     bd4:	0f 2e       	mov	r0, r31
     bd6:	f7 ee       	ldi	r31, 0xE7	; 231
     bd8:	8f 2e       	mov	r8, r31
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	9f 2e       	mov	r9, r31
     bde:	f0 2d       	mov	r31, r0
     be0:	a1 2c       	mov	r10, r1
     be2:	cc 24       	eor	r12, r12
     be4:	c3 94       	inc	r12
     be6:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     bea:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     bee:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     bf2:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     bf6:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     bfa:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     bfe:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     c02:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     c06:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     c0a:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     c0e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     c12:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
			Timer0_Delay(1000);
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	8a e7       	ldi	r24, 0x7A	; 122
     c1c:	94 e4       	ldi	r25, 0x44	; 68
     c1e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
			buzzer_digitalwrite(buzzer,DIO_HIGH);
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <buzzer>
     c28:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <buzzer+0x1>
     c2c:	0e 94 4b 08 	call	0x1096	; 0x1096 <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ATM_STATUS>
			return;
     c36:	ab c1       	rjmp	.+854    	; 0xf8e <appStart+0x6fa>
		}
		
		
		
		if(card_status == ACC_NOT_FOUNT){
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	09 f0       	breq	.+2      	; 0xc3e <appStart+0x3aa>
     c3c:	43 c0       	rjmp	.+134    	; 0xcc4 <appStart+0x430>
			LCD_clearScreen(atm_lcd);
     c3e:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     c42:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     c46:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     c4a:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     c4e:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     c52:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     c56:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     c5a:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     c5e:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     c62:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     c66:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     c6a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"This is a fraud card");
     c6e:	0f 2e       	mov	r0, r31
     c70:	f5 ef       	ldi	r31, 0xF5	; 245
     c72:	8f 2e       	mov	r8, r31
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	9f 2e       	mov	r9, r31
     c78:	f0 2d       	mov	r31, r0
     c7a:	a1 2c       	mov	r10, r1
     c7c:	c1 2c       	mov	r12, r1
     c7e:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     c82:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     c86:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     c8a:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     c8e:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     c92:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     c96:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     c9a:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     c9e:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     ca2:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     ca6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     caa:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
			// start ALARM
			buzzer_digitalwrite(buzzer,DIO_HIGH);
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <buzzer>
     cb4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <buzzer+0x1>
     cb8:	0e 94 4b 08 	call	0x1096	; 0x1096 <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ATM_STATUS>
			return;
     cc2:	65 c1       	rjmp	.+714    	; 0xf8e <appStart+0x6fa>
		}
		if(accountRefrence.en_state == BLOCKED){
     cc4:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <accountRefrence+0x4>
     cc8:	81 11       	cpse	r24, r1
     cca:	43 c0       	rjmp	.+134    	; 0xd52 <appStart+0x4be>
			LCD_clearScreen(atm_lcd);
     ccc:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     cd0:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     cd4:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     cd8:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     cdc:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     ce0:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     ce4:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     ce8:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     cec:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     cf0:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     cf4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     cf8:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"This card is stolen");
     cfc:	0f 2e       	mov	r0, r31
     cfe:	fa e0       	ldi	r31, 0x0A	; 10
     d00:	8f 2e       	mov	r8, r31
     d02:	f1 e0       	ldi	r31, 0x01	; 1
     d04:	9f 2e       	mov	r9, r31
     d06:	f0 2d       	mov	r31, r0
     d08:	a1 2c       	mov	r10, r1
     d0a:	c1 2c       	mov	r12, r1
     d0c:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     d10:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     d14:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     d18:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     d1c:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     d20:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     d24:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     d28:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     d2c:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     d30:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     d34:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     d38:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
			// start ALARM
			buzzer_digitalwrite(buzzer,DIO_HIGH);
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <buzzer>
     d42:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <buzzer+0x1>
     d46:	0e 94 4b 08 	call	0x1096	; 0x1096 <buzzer_digitalwrite>
			ATM_STATUS = ATM_BLOKED_MODE;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ATM_STATUS>
			return;
     d50:	1e c1       	rjmp	.+572    	; 0xf8e <appStart+0x6fa>
		}
		
		
		float amount;
		// read amounts 
		readAmount(&amount);
     d52:	ce 01       	movw	r24, r28
     d54:	4d 96       	adiw	r24, 0x1d	; 29
     d56:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <readAmount>
		// if amount 
		if(accountRefrence.balance > amount){
     d5a:	80 90 84 01 	lds	r8, 0x0184	; 0x800184 <accountRefrence>
     d5e:	90 90 85 01 	lds	r9, 0x0185	; 0x800185 <accountRefrence+0x1>
     d62:	a0 90 86 01 	lds	r10, 0x0186	; 0x800186 <accountRefrence+0x2>
     d66:	b0 90 87 01 	lds	r11, 0x0187	; 0x800187 <accountRefrence+0x3>
     d6a:	cd 8c       	ldd	r12, Y+29	; 0x1d
     d6c:	de 8c       	ldd	r13, Y+30	; 0x1e
     d6e:	ef 8c       	ldd	r14, Y+31	; 0x1f
     d70:	f8 a0       	ldd	r15, Y+32	; 0x20
     d72:	a7 01       	movw	r20, r14
     d74:	96 01       	movw	r18, r12
     d76:	c5 01       	movw	r24, r10
     d78:	b4 01       	movw	r22, r8
     d7a:	0e 94 92 11 	call	0x2324	; 0x2324 <__gesf2>
     d7e:	18 16       	cp	r1, r24
     d80:	cc f5       	brge	.+114    	; 0xdf4 <appStart+0x560>
			LCD_clearScreen(atm_lcd);
     d82:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     d86:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     d8a:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     d8e:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     d92:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     d96:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     d9a:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     d9e:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     da2:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     da6:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     daa:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     dae:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"Insufficient fund");
     db2:	0f 2e       	mov	r0, r31
     db4:	fe e1       	ldi	r31, 0x1E	; 30
     db6:	8f 2e       	mov	r8, r31
     db8:	f1 e0       	ldi	r31, 0x01	; 1
     dba:	9f 2e       	mov	r9, r31
     dbc:	f0 2d       	mov	r31, r0
     dbe:	a1 2c       	mov	r10, r1
     dc0:	c1 2c       	mov	r12, r1
     dc2:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     dc6:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     dca:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     dce:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     dd2:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     dd6:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     dda:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     dde:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     de2:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     de6:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     dea:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     dee:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
			return;
     df2:	cd c0       	rjmp	.+410    	; 0xf8e <appStart+0x6fa>
		}
		if(amount > MAX_AMOUNT){
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e4       	ldi	r19, 0x40	; 64
     df8:	4c e9       	ldi	r20, 0x9C	; 156
     dfa:	55 e4       	ldi	r21, 0x45	; 69
     dfc:	c7 01       	movw	r24, r14
     dfe:	b6 01       	movw	r22, r12
     e00:	0e 94 92 11 	call	0x2324	; 0x2324 <__gesf2>
     e04:	18 16       	cp	r1, r24
     e06:	cc f5       	brge	.+114    	; 0xe7a <appStart+0x5e6>
			LCD_clearScreen(atm_lcd);
     e08:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     e0c:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     e10:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     e14:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     e18:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     e1c:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     e20:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     e24:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     e28:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     e2c:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     e30:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     e34:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
			LCD_displayStringRowColumn(atm_lcd,0,0,"Maximum limit is exceeded");
     e38:	0f 2e       	mov	r0, r31
     e3a:	f0 e3       	ldi	r31, 0x30	; 48
     e3c:	8f 2e       	mov	r8, r31
     e3e:	f1 e0       	ldi	r31, 0x01	; 1
     e40:	9f 2e       	mov	r9, r31
     e42:	f0 2d       	mov	r31, r0
     e44:	a1 2c       	mov	r10, r1
     e46:	c1 2c       	mov	r12, r1
     e48:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     e4c:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     e50:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     e54:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     e58:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     e5c:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     e60:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     e64:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     e68:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     e6c:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     e70:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     e74:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
			return;
     e78:	8a c0       	rjmp	.+276    	; 0xf8e <appStart+0x6fa>
		}
		
		accountRefrence.balance -= amount;
     e7a:	a7 01       	movw	r20, r14
     e7c:	96 01       	movw	r18, r12
     e7e:	c5 01       	movw	r24, r10
     e80:	b4 01       	movw	r22, r8
     e82:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
     e86:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <accountRefrence>
     e8a:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <accountRefrence+0x1>
     e8e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <accountRefrence+0x2>
     e92:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <accountRefrence+0x3>
		LCD_clearScreen(atm_lcd);
     e96:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     e9a:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     e9e:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     ea2:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     ea6:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     eaa:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     eae:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     eb2:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     eb6:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     eba:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     ebe:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     ec2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,0,"Approved Transaction");
     ec6:	0f 2e       	mov	r0, r31
     ec8:	fa e4       	ldi	r31, 0x4A	; 74
     eca:	8f 2e       	mov	r8, r31
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	9f 2e       	mov	r9, r31
     ed0:	f0 2d       	mov	r31, r0
     ed2:	a1 2c       	mov	r10, r1
     ed4:	c1 2c       	mov	r12, r1
     ed6:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     eda:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     ede:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     ee2:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     ee6:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     eea:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     eee:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     ef2:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     ef6:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     efa:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     efe:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     f02:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>

		Timer0_Delay(1000);
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	8a e7       	ldi	r24, 0x7A	; 122
     f0c:	94 e4       	ldi	r25, 0x44	; 68
     f0e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
		LCD_clearScreen(atm_lcd);
     f12:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     f16:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     f1a:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     f1e:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     f22:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     f26:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     f2a:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     f2e:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     f32:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     f36:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     f3a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     f3e:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_clearScreen>
		LCD_displayStringRowColumn(atm_lcd,0,0,"Ejecting Card");
     f42:	0f 2e       	mov	r0, r31
     f44:	ff e5       	ldi	r31, 0x5F	; 95
     f46:	8f 2e       	mov	r8, r31
     f48:	f1 e0       	ldi	r31, 0x01	; 1
     f4a:	9f 2e       	mov	r9, r31
     f4c:	f0 2d       	mov	r31, r0
     f4e:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <atm_lcd>
     f52:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <atm_lcd+0x1>
     f56:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <atm_lcd+0x2>
     f5a:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <atm_lcd+0x3>
     f5e:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <atm_lcd+0x4>
     f62:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <atm_lcd+0x5>
     f66:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <atm_lcd+0x6>
     f6a:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <atm_lcd+0x7>
     f6e:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <atm_lcd+0x8>
     f72:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <atm_lcd+0x9>
     f76:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <atm_lcd+0xa>
     f7a:	0e 94 2d 0b 	call	0x165a	; 0x165a <LCD_displayStringRowColumn>
		Timer0_Delay(1000);
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	8a e7       	ldi	r24, 0x7A	; 122
     f84:	94 e4       	ldi	r25, 0x44	; 68
     f86:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
		card_trigger_signal = CARD_REMOVED;
     f8a:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <card_trigger_signal>
	}
}
     f8e:	a0 96       	adiw	r28, 0x20	; 32
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	bf 90       	pop	r11
     fac:	af 90       	pop	r10
     fae:	9f 90       	pop	r9
     fb0:	8f 90       	pop	r8
     fb2:	08 95       	ret

00000fb4 <__vector_3>:


ISR(INT2_vect){
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	8f 93       	push	r24
     fc0:	9f 93       	push	r25
	card_trigger_signal = !card_trigger_signal;
     fc2:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <card_trigger_signal>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	91 11       	cpse	r25, r1
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <card_trigger_signal>
     fd0:	9f 91       	pop	r25
     fd2:	8f 91       	pop	r24
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	0f 90       	pop	r0
     fda:	1f 90       	pop	r1
     fdc:	18 95       	reti

00000fde <BUTTON_init>:

void BUTTON_init(ST_PBTN_t button){
	dio_init(button.button_port,button.button_pin,DIO_IN);
}
void BUTTON_status(ST_PBTN_t button,uint8 *status){
	dio_read_pin(button.button_port,button.button_pin,status);
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	69 2f       	mov	r22, r25
     fe2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
     fe6:	08 95       	ret

00000fe8 <BUTTON_read_zero_enter>:
}


void BUTTON_read_zero_enter(ST_PBTN_t button,uint8 * value){
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <BUTTON_read_zero_enter+0xe>
     ff6:	1f 92       	push	r1
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	8b 01       	movw	r16, r22
	 uint8 button_state = 0;
     ffe:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16 timeCounter = 0;
    1000:	1b 82       	std	Y+3, r1	; 0x03
    1002:	1a 82       	std	Y+2, r1	; 0x02
	dio_read_pin(button.button_port,button.button_pin,&button_state);
    1004:	f9 2e       	mov	r15, r25
    1006:	e8 2e       	mov	r14, r24
    1008:	ae 01       	movw	r20, r28
    100a:	4f 5f       	subi	r20, 0xFF	; 255
    100c:	5f 4f       	sbci	r21, 0xFF	; 255
    100e:	69 2f       	mov	r22, r25
    1010:	0e 94 89 0c 	call	0x1912	; 0x1912 <dio_read_pin>
	if (button_state == DIO_HIGH)
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	61 f5       	brne	.+88     	; 0x1072 <BUTTON_read_zero_enter+0x8a>
    101a:	27 c0       	rjmp	.+78     	; 0x106a <BUTTON_read_zero_enter+0x82>
	{
		while(button_state == DIO_HIGH){
			Timer0_Delay(BTN_MIN_SECOND);
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	88 e4       	ldi	r24, 0x48	; 72
    1022:	92 e4       	ldi	r25, 0x42	; 66
    1024:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
			timeCounter += BTN_MIN_SECOND;
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	c2 96       	adiw	r24, 0x32	; 50
    102e:	9b 83       	std	Y+3, r25	; 0x03
    1030:	8a 83       	std	Y+2, r24	; 0x02
			dio_read_pin(button.button_port,button.button_pin,&button_state);
    1032:	ae 01       	movw	r20, r28
    1034:	4f 5f       	subi	r20, 0xFF	; 255
    1036:	5f 4f       	sbci	r21, 0xFF	; 255
    1038:	6f 2d       	mov	r22, r15
    103a:	8e 2d       	mov	r24, r14
    103c:	0e 94 89 0c 	call	0x1912	; 0x1912 <dio_read_pin>
			if (button_state == DIO_LOW && timeCounter < BTN_2_SECOND)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	81 11       	cpse	r24, r1
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <BUTTON_read_zero_enter+0x70>
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	8c 3d       	cpi	r24, 0xDC	; 220
    104c:	95 40       	sbci	r25, 0x05	; 5
    104e:	20 f4       	brcc	.+8      	; 0x1058 <BUTTON_read_zero_enter+0x70>
			{
				*value = BTN_ZERO_PRESSED;
    1050:	8a e0       	ldi	r24, 0x0A	; 10
    1052:	f8 01       	movw	r30, r16
    1054:	80 83       	st	Z, r24
    1056:	09 c0       	rjmp	.+18     	; 0x106a <BUTTON_read_zero_enter+0x82>
			}
			else if (timeCounter >= BTN_2_SECOND)
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	8c 3d       	cpi	r24, 0xDC	; 220
    105e:	95 40       	sbci	r25, 0x05	; 5
    1060:	20 f0       	brcs	.+8      	; 0x106a <BUTTON_read_zero_enter+0x82>
			{
				*value = BTN_ENTER_PRESSED;
    1062:	8b e0       	ldi	r24, 0x0B	; 11
    1064:	f8 01       	movw	r30, r16
    1066:	80 83       	st	Z, r24
				break;
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <BUTTON_read_zero_enter+0x90>
	 uint8 button_state = 0;
	volatile uint16 timeCounter = 0;
	dio_read_pin(button.button_port,button.button_pin,&button_state);
	if (button_state == DIO_HIGH)
	{
		while(button_state == DIO_HIGH){
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	b1 f2       	breq	.-84     	; 0x101c <BUTTON_read_zero_enter+0x34>
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <BUTTON_read_zero_enter+0x90>
			}
		}
	}
	else
	{
		*value = BTN_NO_PRESS;//NO
    1072:	8c e0       	ldi	r24, 0x0C	; 12
    1074:	f8 01       	movw	r30, r16
    1076:	80 83       	st	Z, r24
	}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	08 95       	ret

0000108c <buzzer_init>:

/*============= FUNCTION DEFINITION =============*/


void buzzer_init(ST_BUZZER_t buzzer){
	dio_init(buzzer.buzzer_port,buzzer.buzzer_pin,DIO_LOW);
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	69 2f       	mov	r22, r25
    1090:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    1094:	08 95       	ret

00001096 <buzzer_digitalwrite>:
}
void buzzer_digitalwrite(ST_BUZZER_t buzzer,uint8 value){
    1096:	46 2f       	mov	r20, r22
	dio_write_pin(buzzer.buzzer_port,buzzer.buzzer_pin,value);
    1098:	69 2f       	mov	r22, r25
    109a:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    109e:	08 95       	ret

000010a0 <KPD_init>:
#include "keypad.h"
#include "../../mcal/timer0/timer0.h"
#include "../../mcal/dio/dio.h"


void KPD_init(ST_KPD_t kpd){
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <KPD_init+0xc>
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <KPD_init+0xe>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <KPD_init+0x10>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	49 83       	std	Y+1, r20	; 0x01
    10b6:	5a 83       	std	Y+2, r21	; 0x02
    10b8:	6b 83       	std	Y+3, r22	; 0x03
    10ba:	7c 83       	std	Y+4, r23	; 0x04
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	9e 83       	std	Y+6, r25	; 0x06
	// set cols as an input
	for (uint8 i = 0 ; i<kpd.number_of_rows;i++)
    10c0:	00 e0       	ldi	r16, 0x00	; 0
    10c2:	0e c0       	rjmp	.+28     	; 0x10e0 <KPD_init+0x40>
	{
		dio_init(kpd.rows_port,(kpd.rows_first_pin+i),DIO_IN);
    10c4:	1c 81       	ldd	r17, Y+4	; 0x04
    10c6:	10 0f       	add	r17, r16
    10c8:	fe 80       	ldd	r15, Y+6	; 0x06
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	61 2f       	mov	r22, r17
    10ce:	8f 2d       	mov	r24, r15
    10d0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
		dio_write_pin(kpd.rows_port,(kpd.rows_first_pin+i),DIO_HIGH);
    10d4:	41 e0       	ldi	r20, 0x01	; 1
    10d6:	61 2f       	mov	r22, r17
    10d8:	8f 2d       	mov	r24, r15
    10da:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
#include "../../mcal/dio/dio.h"


void KPD_init(ST_KPD_t kpd){
	// set cols as an input
	for (uint8 i = 0 ; i<kpd.number_of_rows;i++)
    10de:	0f 5f       	subi	r16, 0xFF	; 255
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	08 17       	cp	r16, r24
    10e4:	78 f3       	brcs	.-34     	; 0x10c4 <KPD_init+0x24>
    10e6:	10 e0       	ldi	r17, 0x00	; 0
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <KPD_init+0x58>
		dio_write_pin(kpd.rows_port,(kpd.rows_first_pin+i),DIO_HIGH);
	}
	// set rows as input 
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
	{
		dio_init(kpd.cols_port,(kpd.cols_first_pin+i),DIO_OUT);
    10ea:	6b 81       	ldd	r22, Y+3	; 0x03
    10ec:	61 0f       	add	r22, r17
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
	{
		dio_init(kpd.rows_port,(kpd.rows_first_pin+i),DIO_IN);
		dio_write_pin(kpd.rows_port,(kpd.rows_first_pin+i),DIO_HIGH);
	}
	// set rows as input 
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
    10f6:	1f 5f       	subi	r17, 0xFF	; 255
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	18 17       	cp	r17, r24
    10fc:	b0 f3       	brcs	.-20     	; 0x10ea <KPD_init+0x4a>
	{
		dio_init(kpd.cols_port,(kpd.cols_first_pin+i),DIO_OUT);
	}
	
}
    10fe:	26 96       	adiw	r28, 0x06	; 6
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	08 95       	ret

00001116 <KPD_get_pressed_key>:
void KPD_get_pressed_key(ST_KPD_t kpd,uint8*key){
    1116:	9f 92       	push	r9
    1118:	af 92       	push	r10
    111a:	bf 92       	push	r11
    111c:	cf 92       	push	r12
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	27 97       	sbiw	r28, 0x07	; 7
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	4a 83       	std	Y+2, r20	; 0x02
    113e:	5b 83       	std	Y+3, r21	; 0x03
    1140:	6c 83       	std	Y+4, r22	; 0x04
    1142:	7d 83       	std	Y+5, r23	; 0x05
    1144:	8e 83       	std	Y+6, r24	; 0x06
    1146:	9f 83       	std	Y+7, r25	; 0x07
    1148:	69 01       	movw	r12, r18
	uint8 value; // counters
	// cols loops
	*key= KPD_NO_KEY_PRESSED;
    114a:	8c e0       	ldi	r24, 0x0C	; 12
    114c:	f9 01       	movw	r30, r18
    114e:	80 83       	st	Z, r24
	
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
    1150:	10 e0       	ldi	r17, 0x00	; 0
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <KPD_get_pressed_key+0x4c>
	{
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+i),DIO_HIGH);
    1154:	6c 81       	ldd	r22, Y+4	; 0x04
    1156:	61 0f       	add	r22, r17
    1158:	41 e0       	ldi	r20, 0x01	; 1
    115a:	8e 81       	ldd	r24, Y+6	; 0x06
    115c:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
void KPD_get_pressed_key(ST_KPD_t kpd,uint8*key){
	uint8 value; // counters
	// cols loops
	*key= KPD_NO_KEY_PRESSED;
	
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
    1160:	1f 5f       	subi	r17, 0xFF	; 255
    1162:	aa 80       	ldd	r10, Y+2	; 0x02
    1164:	1a 15       	cp	r17, r10
    1166:	b0 f3       	brcs	.-20     	; 0x1154 <KPD_get_pressed_key+0x3e>
    1168:	b1 2c       	mov	r11, r1
    116a:	34 c0       	rjmp	.+104    	; 0x11d4 <KPD_get_pressed_key+0xbe>
	}
	for (uint8 col = 0 ; col < kpd.number_of_cols;col++)
	{
		// activate cols
		
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_LOW);
    116c:	ec 80       	ldd	r14, Y+4	; 0x04
    116e:	eb 0c       	add	r14, r11
    1170:	9e 80       	ldd	r9, Y+6	; 0x06
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	6e 2d       	mov	r22, r14
    1176:	89 2d       	mov	r24, r9
    1178:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
		// rows loops
		
		for (uint8 row = 0;row<kpd.number_of_rows;row++)
    117c:	00 e0       	ldi	r16, 0x00	; 0
    117e:	21 c0       	rjmp	.+66     	; 0x11c2 <KPD_get_pressed_key+0xac>
		{
			dio_read_pin(kpd.rows_port,(kpd.rows_first_pin+row),&value);
    1180:	1d 81       	ldd	r17, Y+5	; 0x05
    1182:	10 0f       	add	r17, r16
    1184:	ff 80       	ldd	r15, Y+7	; 0x07
    1186:	ae 01       	movw	r20, r28
    1188:	4f 5f       	subi	r20, 0xFF	; 255
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
    118c:	61 2f       	mov	r22, r17
    118e:	8f 2d       	mov	r24, r15
    1190:	0e 94 89 0c 	call	0x1912	; 0x1912 <dio_read_pin>
			// check if button is pressed
			if (value == DIO_LOW)
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	81 11       	cpse	r24, r1
    1198:	13 c0       	rjmp	.+38     	; 0x11c0 <KPD_get_pressed_key+0xaa>
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <KPD_get_pressed_key+0x94>
			{
				// return key (row_number * numbers_of_cols) + (column number +1)
				while(value == DIO_LOW){
					dio_read_pin(kpd.rows_port,(kpd.rows_first_pin+row),&value);
    119c:	ae 01       	movw	r20, r28
    119e:	4f 5f       	subi	r20, 0xFF	; 255
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255
    11a2:	61 2f       	mov	r22, r17
    11a4:	8f 2d       	mov	r24, r15
    11a6:	0e 94 89 0c 	call	0x1912	; 0x1912 <dio_read_pin>
			dio_read_pin(kpd.rows_port,(kpd.rows_first_pin+row),&value);
			// check if button is pressed
			if (value == DIO_LOW)
			{
				// return key (row_number * numbers_of_cols) + (column number +1)
				while(value == DIO_LOW){
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	88 23       	and	r24, r24
    11ae:	b1 f3       	breq	.-20     	; 0x119c <KPD_get_pressed_key+0x86>
					dio_read_pin(kpd.rows_port,(kpd.rows_first_pin+row),&value);
				}
				*key =  ((row * kpd.number_of_cols) + col + 1);
    11b0:	8b 2d       	mov	r24, r11
    11b2:	0a 9d       	mul	r16, r10
    11b4:	80 0d       	add	r24, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	f6 01       	movw	r30, r12
    11bc:	80 83       	st	Z, r24
				break;
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <KPD_get_pressed_key+0xb2>
		// activate cols
		
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_LOW);
		// rows loops
		
		for (uint8 row = 0;row<kpd.number_of_rows;row++)
    11c0:	0f 5f       	subi	r16, 0xFF	; 255
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	08 17       	cp	r16, r24
    11c6:	e0 f2       	brcs	.-72     	; 0x1180 <KPD_get_pressed_key+0x6a>
				break;
			}
		
		}
		
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_HIGH);
    11c8:	41 e0       	ldi	r20, 0x01	; 1
    11ca:	6e 2d       	mov	r22, r14
    11cc:	89 2d       	mov	r24, r9
    11ce:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
	
	for (uint8 i = 0 ; i<kpd.number_of_cols;i++)
	{
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+i),DIO_HIGH);
	}
	for (uint8 col = 0 ; col < kpd.number_of_cols;col++)
    11d2:	b3 94       	inc	r11
    11d4:	ba 14       	cp	r11, r10
    11d6:	50 f2       	brcs	.-108    	; 0x116c <KPD_get_pressed_key+0x56>
		dio_write_pin(kpd.cols_port,(kpd.cols_first_pin+col),DIO_HIGH);
		
	}
	
	
    11d8:	27 96       	adiw	r28, 0x07	; 7
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	9f 90       	pop	r9
    11fa:	08 95       	ret

000011fc <LCD_sendCommand>:
 */
void LCD_intgerToString(ST_LCD_t lcd,int data){
	  char buff[16]; /* String to hold the ascii result */
	  itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	  LCD_displayString(lcd,buff); /* Display the string */
}
    11fc:	cf 92       	push	r12
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	2c 97       	sbiw	r28, 0x0c	; 12
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	8e 2d       	mov	r24, r14
    121e:	fb 82       	std	Y+3, r15	; 0x03
    1220:	0c 83       	std	Y+4, r16	; 0x04
    1222:	61 2f       	mov	r22, r17
    1224:	2e 83       	std	Y+6, r18	; 0x06
    1226:	3f 83       	std	Y+7, r19	; 0x07
    1228:	48 87       	std	Y+8, r20	; 0x08
    122a:	19 82       	std	Y+1, r1	; 0x01
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	6e 81       	ldd	r22, Y+6	; 0x06
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	80 e8       	ldi	r24, 0x80	; 128
    1242:	9f e3       	ldi	r25, 0x3F	; 63
    1244:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    1248:	0f 81       	ldd	r16, Y+7	; 0x07
    124a:	1c 81       	ldd	r17, Y+4	; 0x04
    124c:	41 e0       	ldi	r20, 0x01	; 1
    124e:	60 2f       	mov	r22, r16
    1250:	81 2f       	mov	r24, r17
    1252:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	80 e8       	ldi	r24, 0x80	; 128
    125c:	9f e3       	ldi	r25, 0x3F	; 63
    125e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    1262:	f8 84       	ldd	r15, Y+8	; 0x08
    1264:	be 01       	movw	r22, r28
    1266:	6f 5f       	subi	r22, 0xFF	; 255
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	8f 2d       	mov	r24, r15
    126c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <dio_read_port>
    1270:	69 81       	ldd	r22, Y+1	; 0x01
    1272:	6f 70       	andi	r22, 0x0F	; 15
    1274:	8c 2d       	mov	r24, r12
    1276:	80 7f       	andi	r24, 0xF0	; 240
    1278:	68 2b       	or	r22, r24
    127a:	69 83       	std	Y+1, r22	; 0x01
    127c:	8f 2d       	mov	r24, r15
    127e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <dio_write_port>
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	80 e8       	ldi	r24, 0x80	; 128
    1288:	9f e3       	ldi	r25, 0x3F	; 63
    128a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	60 2f       	mov	r22, r16
    1292:	81 2f       	mov	r24, r17
    1294:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	80 e8       	ldi	r24, 0x80	; 128
    129e:	9f e3       	ldi	r25, 0x3F	; 63
    12a0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	60 2f       	mov	r22, r16
    12a8:	81 2f       	mov	r24, r17
    12aa:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    12ae:	be 01       	movw	r22, r28
    12b0:	6f 5f       	subi	r22, 0xFF	; 255
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	8f 2d       	mov	r24, r15
    12b6:	0e 94 c3 0c 	call	0x1986	; 0x1986 <dio_read_port>
    12ba:	80 e1       	ldi	r24, 0x10	; 16
    12bc:	c8 9e       	mul	r12, r24
    12be:	60 01       	movw	r12, r0
    12c0:	11 24       	eor	r1, r1
    12c2:	69 81       	ldd	r22, Y+1	; 0x01
    12c4:	6f 70       	andi	r22, 0x0F	; 15
    12c6:	6c 29       	or	r22, r12
    12c8:	69 83       	std	Y+1, r22	; 0x01
    12ca:	8f 2d       	mov	r24, r15
    12cc:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <dio_write_port>
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	80 e8       	ldi	r24, 0x80	; 128
    12d6:	9f e3       	ldi	r25, 0x3F	; 63
    12d8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	60 2f       	mov	r22, r16
    12e0:	81 2f       	mov	r24, r17
    12e2:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	80 e8       	ldi	r24, 0x80	; 128
    12ec:	9f e3       	ldi	r25, 0x3F	; 63
    12ee:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    12f2:	2c 96       	adiw	r28, 0x0c	; 12
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
    130e:	08 95       	ret

00001310 <LCD_init>:
    1310:	cf 92       	push	r12
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	2b 97       	sbiw	r28, 0x0b	; 11
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	e9 82       	std	Y+1, r14	; 0x01
    1330:	fa 82       	std	Y+2, r15	; 0x02
    1332:	0b 83       	std	Y+3, r16	; 0x03
    1334:	1c 83       	std	Y+4, r17	; 0x04
    1336:	2d 83       	std	Y+5, r18	; 0x05
    1338:	3e 83       	std	Y+6, r19	; 0x06
    133a:	4f 83       	std	Y+7, r20	; 0x07
    133c:	58 87       	std	Y+8, r21	; 0x08
    133e:	69 87       	std	Y+9, r22	; 0x09
    1340:	7a 87       	std	Y+10, r23	; 0x0a
    1342:	8b 87       	std	Y+11, r24	; 0x0b
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	63 2f       	mov	r22, r19
    1348:	80 2f       	mov	r24, r16
    134a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	6c 81       	ldd	r22, Y+4	; 0x04
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    1358:	41 e0       	ldi	r20, 0x01	; 1
    135a:	6d 81       	ldd	r22, Y+5	; 0x05
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    1362:	1f 81       	ldd	r17, Y+7	; 0x07
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	68 85       	ldd	r22, Y+8	; 0x08
    1368:	81 2f       	mov	r24, r17
    136a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    136e:	41 e0       	ldi	r20, 0x01	; 1
    1370:	69 85       	ldd	r22, Y+9	; 0x09
    1372:	81 2f       	mov	r24, r17
    1374:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	6a 85       	ldd	r22, Y+10	; 0x0a
    137c:	81 2f       	mov	r24, r17
    137e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    1382:	41 e0       	ldi	r20, 0x01	; 1
    1384:	6b 85       	ldd	r22, Y+11	; 0x0b
    1386:	81 2f       	mov	r24, r17
    1388:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    138c:	68 94       	set
    138e:	cc 24       	eor	r12, r12
    1390:	c1 f8       	bld	r12, 1
    1392:	e9 80       	ldd	r14, Y+1	; 0x01
    1394:	fa 80       	ldd	r15, Y+2	; 0x02
    1396:	0b 81       	ldd	r16, Y+3	; 0x03
    1398:	1c 81       	ldd	r17, Y+4	; 0x04
    139a:	2d 81       	ldd	r18, Y+5	; 0x05
    139c:	3e 81       	ldd	r19, Y+6	; 0x06
    139e:	4f 81       	ldd	r20, Y+7	; 0x07
    13a0:	58 85       	ldd	r21, Y+8	; 0x08
    13a2:	69 85       	ldd	r22, Y+9	; 0x09
    13a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    13a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
    13ac:	0f 2e       	mov	r0, r31
    13ae:	f8 e2       	ldi	r31, 0x28	; 40
    13b0:	cf 2e       	mov	r12, r31
    13b2:	f0 2d       	mov	r31, r0
    13b4:	e9 80       	ldd	r14, Y+1	; 0x01
    13b6:	fa 80       	ldd	r15, Y+2	; 0x02
    13b8:	0b 81       	ldd	r16, Y+3	; 0x03
    13ba:	1c 81       	ldd	r17, Y+4	; 0x04
    13bc:	2d 81       	ldd	r18, Y+5	; 0x05
    13be:	3e 81       	ldd	r19, Y+6	; 0x06
    13c0:	4f 81       	ldd	r20, Y+7	; 0x07
    13c2:	58 85       	ldd	r21, Y+8	; 0x08
    13c4:	69 85       	ldd	r22, Y+9	; 0x09
    13c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    13c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ca:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
    13ce:	0f 2e       	mov	r0, r31
    13d0:	fc e0       	ldi	r31, 0x0C	; 12
    13d2:	cf 2e       	mov	r12, r31
    13d4:	f0 2d       	mov	r31, r0
    13d6:	e9 80       	ldd	r14, Y+1	; 0x01
    13d8:	fa 80       	ldd	r15, Y+2	; 0x02
    13da:	0b 81       	ldd	r16, Y+3	; 0x03
    13dc:	1c 81       	ldd	r17, Y+4	; 0x04
    13de:	2d 81       	ldd	r18, Y+5	; 0x05
    13e0:	3e 81       	ldd	r19, Y+6	; 0x06
    13e2:	4f 81       	ldd	r20, Y+7	; 0x07
    13e4:	58 85       	ldd	r21, Y+8	; 0x08
    13e6:	69 85       	ldd	r22, Y+9	; 0x09
    13e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    13ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ec:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
    13f0:	cc 24       	eor	r12, r12
    13f2:	c3 94       	inc	r12
    13f4:	e9 80       	ldd	r14, Y+1	; 0x01
    13f6:	fa 80       	ldd	r15, Y+2	; 0x02
    13f8:	0b 81       	ldd	r16, Y+3	; 0x03
    13fa:	1c 81       	ldd	r17, Y+4	; 0x04
    13fc:	2d 81       	ldd	r18, Y+5	; 0x05
    13fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1400:	4f 81       	ldd	r20, Y+7	; 0x07
    1402:	58 85       	ldd	r21, Y+8	; 0x08
    1404:	69 85       	ldd	r22, Y+9	; 0x09
    1406:	7a 85       	ldd	r23, Y+10	; 0x0a
    1408:	8b 85       	ldd	r24, Y+11	; 0x0b
    140a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
    140e:	2b 96       	adiw	r28, 0x0b	; 11
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	cf 90       	pop	r12
    1428:	08 95       	ret

0000142a <LCD_displayCharacter>:
    142a:	cf 92       	push	r12
    142c:	df 92       	push	r13
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	2c 97       	sbiw	r28, 0x0c	; 12
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	8e 2d       	mov	r24, r14
    144c:	fb 82       	std	Y+3, r15	; 0x03
    144e:	0c 83       	std	Y+4, r16	; 0x04
    1450:	61 2f       	mov	r22, r17
    1452:	2e 83       	std	Y+6, r18	; 0x06
    1454:	3f 83       	std	Y+7, r19	; 0x07
    1456:	48 87       	std	Y+8, r20	; 0x08
    1458:	19 82       	std	Y+1, r1	; 0x01
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	6e 81       	ldd	r22, Y+6	; 0x06
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	80 e8       	ldi	r24, 0x80	; 128
    1470:	9f e3       	ldi	r25, 0x3F	; 63
    1472:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    1476:	0f 81       	ldd	r16, Y+7	; 0x07
    1478:	1c 81       	ldd	r17, Y+4	; 0x04
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	60 2f       	mov	r22, r16
    147e:	81 2f       	mov	r24, r17
    1480:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	80 e8       	ldi	r24, 0x80	; 128
    148a:	9f e3       	ldi	r25, 0x3F	; 63
    148c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    1490:	f8 84       	ldd	r15, Y+8	; 0x08
    1492:	be 01       	movw	r22, r28
    1494:	6f 5f       	subi	r22, 0xFF	; 255
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 2d       	mov	r24, r15
    149a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <dio_read_port>
    149e:	69 81       	ldd	r22, Y+1	; 0x01
    14a0:	6f 70       	andi	r22, 0x0F	; 15
    14a2:	8c 2d       	mov	r24, r12
    14a4:	80 7f       	andi	r24, 0xF0	; 240
    14a6:	68 2b       	or	r22, r24
    14a8:	69 83       	std	Y+1, r22	; 0x01
    14aa:	8f 2d       	mov	r24, r15
    14ac:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <dio_write_port>
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	80 e8       	ldi	r24, 0x80	; 128
    14b6:	9f e3       	ldi	r25, 0x3F	; 63
    14b8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	60 2f       	mov	r22, r16
    14c0:	81 2f       	mov	r24, r17
    14c2:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	80 e8       	ldi	r24, 0x80	; 128
    14cc:	9f e3       	ldi	r25, 0x3F	; 63
    14ce:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    14d2:	41 e0       	ldi	r20, 0x01	; 1
    14d4:	60 2f       	mov	r22, r16
    14d6:	81 2f       	mov	r24, r17
    14d8:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    14dc:	be 01       	movw	r22, r28
    14de:	6f 5f       	subi	r22, 0xFF	; 255
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	8f 2d       	mov	r24, r15
    14e4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <dio_read_port>
    14e8:	80 e1       	ldi	r24, 0x10	; 16
    14ea:	c8 9e       	mul	r12, r24
    14ec:	60 01       	movw	r12, r0
    14ee:	11 24       	eor	r1, r1
    14f0:	69 81       	ldd	r22, Y+1	; 0x01
    14f2:	6f 70       	andi	r22, 0x0F	; 15
    14f4:	6c 29       	or	r22, r12
    14f6:	69 83       	std	Y+1, r22	; 0x01
    14f8:	8f 2d       	mov	r24, r15
    14fa:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <dio_write_port>
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	80 e8       	ldi	r24, 0x80	; 128
    1504:	9f e3       	ldi	r25, 0x3F	; 63
    1506:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	60 2f       	mov	r22, r16
    150e:	81 2f       	mov	r24, r17
    1510:	0e 94 12 0c 	call	0x1824	; 0x1824 <dio_write_pin>
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	80 e8       	ldi	r24, 0x80	; 128
    151a:	9f e3       	ldi	r25, 0x3F	; 63
    151c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timer0_Delay>
    1520:	2c 96       	adiw	r28, 0x0c	; 12
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	08 95       	ret

0000153e <LCD_displayString>:
    153e:	af 92       	push	r10
    1540:	bf 92       	push	r11
    1542:	cf 92       	push	r12
    1544:	df 92       	push	r13
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	2b 97       	sbiw	r28, 0x0b	; 11
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	e9 82       	std	Y+1, r14	; 0x01
    1564:	fa 82       	std	Y+2, r15	; 0x02
    1566:	0b 83       	std	Y+3, r16	; 0x03
    1568:	1c 83       	std	Y+4, r17	; 0x04
    156a:	2d 83       	std	Y+5, r18	; 0x05
    156c:	3e 83       	std	Y+6, r19	; 0x06
    156e:	4f 83       	std	Y+7, r20	; 0x07
    1570:	58 87       	std	Y+8, r21	; 0x08
    1572:	69 87       	std	Y+9, r22	; 0x09
    1574:	7a 87       	std	Y+10, r23	; 0x0a
    1576:	8b 87       	std	Y+11, r24	; 0x0b
    1578:	56 01       	movw	r10, r12
    157a:	d1 2c       	mov	r13, r1
    157c:	0e c0       	rjmp	.+28     	; 0x159a <LCD_displayString+0x5c>
    157e:	e9 80       	ldd	r14, Y+1	; 0x01
    1580:	fa 80       	ldd	r15, Y+2	; 0x02
    1582:	0b 81       	ldd	r16, Y+3	; 0x03
    1584:	1c 81       	ldd	r17, Y+4	; 0x04
    1586:	2d 81       	ldd	r18, Y+5	; 0x05
    1588:	3e 81       	ldd	r19, Y+6	; 0x06
    158a:	4f 81       	ldd	r20, Y+7	; 0x07
    158c:	58 85       	ldd	r21, Y+8	; 0x08
    158e:	69 85       	ldd	r22, Y+9	; 0x09
    1590:	7a 85       	ldd	r23, Y+10	; 0x0a
    1592:	8b 85       	ldd	r24, Y+11	; 0x0b
    1594:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_displayCharacter>
    1598:	d3 94       	inc	r13
    159a:	f5 01       	movw	r30, r10
    159c:	ed 0d       	add	r30, r13
    159e:	f1 1d       	adc	r31, r1
    15a0:	c0 80       	ld	r12, Z
    15a2:	c1 10       	cpse	r12, r1
    15a4:	ec cf       	rjmp	.-40     	; 0x157e <LCD_displayString+0x40>
    15a6:	2b 96       	adiw	r28, 0x0b	; 11
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	08 95       	ret

000015c8 <LCD_moveCursor>:
    15c8:	af 92       	push	r10
    15ca:	cf 92       	push	r12
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	2b 97       	sbiw	r28, 0x0b	; 11
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	e9 82       	std	Y+1, r14	; 0x01
    15ea:	fa 82       	std	Y+2, r15	; 0x02
    15ec:	0b 83       	std	Y+3, r16	; 0x03
    15ee:	1c 83       	std	Y+4, r17	; 0x04
    15f0:	2d 83       	std	Y+5, r18	; 0x05
    15f2:	3e 83       	std	Y+6, r19	; 0x06
    15f4:	4f 83       	std	Y+7, r20	; 0x07
    15f6:	58 87       	std	Y+8, r21	; 0x08
    15f8:	69 87       	std	Y+9, r22	; 0x09
    15fa:	7a 87       	std	Y+10, r23	; 0x0a
    15fc:	8b 87       	std	Y+11, r24	; 0x0b
    15fe:	9c 2d       	mov	r25, r12
    1600:	8a 2d       	mov	r24, r10
    1602:	91 30       	cpi	r25, 0x01	; 1
    1604:	39 f0       	breq	.+14     	; 0x1614 <LCD_moveCursor+0x4c>
    1606:	58 f0       	brcs	.+22     	; 0x161e <LCD_moveCursor+0x56>
    1608:	92 30       	cpi	r25, 0x02	; 2
    160a:	31 f0       	breq	.+12     	; 0x1618 <LCD_moveCursor+0x50>
    160c:	93 30       	cpi	r25, 0x03	; 3
    160e:	31 f0       	breq	.+12     	; 0x161c <LCD_moveCursor+0x54>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	05 c0       	rjmp	.+10     	; 0x161e <LCD_moveCursor+0x56>
    1614:	80 5c       	subi	r24, 0xC0	; 192
    1616:	03 c0       	rjmp	.+6      	; 0x161e <LCD_moveCursor+0x56>
    1618:	80 5f       	subi	r24, 0xF0	; 240
    161a:	01 c0       	rjmp	.+2      	; 0x161e <LCD_moveCursor+0x56>
    161c:	80 5b       	subi	r24, 0xB0	; 176
    161e:	80 68       	ori	r24, 0x80	; 128
    1620:	c8 2e       	mov	r12, r24
    1622:	e9 80       	ldd	r14, Y+1	; 0x01
    1624:	fa 80       	ldd	r15, Y+2	; 0x02
    1626:	0b 81       	ldd	r16, Y+3	; 0x03
    1628:	1c 81       	ldd	r17, Y+4	; 0x04
    162a:	2d 81       	ldd	r18, Y+5	; 0x05
    162c:	3e 81       	ldd	r19, Y+6	; 0x06
    162e:	4f 81       	ldd	r20, Y+7	; 0x07
    1630:	58 85       	ldd	r21, Y+8	; 0x08
    1632:	69 85       	ldd	r22, Y+9	; 0x09
    1634:	7a 85       	ldd	r23, Y+10	; 0x0a
    1636:	8b 85       	ldd	r24, Y+11	; 0x0b
    1638:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
    163c:	2b 96       	adiw	r28, 0x0b	; 11
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	cf 90       	pop	r12
    1656:	af 90       	pop	r10
    1658:	08 95       	ret

0000165a <LCD_displayStringRowColumn>:
    165a:	5f 92       	push	r5
    165c:	6f 92       	push	r6
    165e:	7f 92       	push	r7
    1660:	8f 92       	push	r8
    1662:	9f 92       	push	r9
    1664:	af 92       	push	r10
    1666:	bf 92       	push	r11
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	2b 97       	sbiw	r28, 0x0b	; 11
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	e9 82       	std	Y+1, r14	; 0x01
    168a:	fa 82       	std	Y+2, r15	; 0x02
    168c:	0b 83       	std	Y+3, r16	; 0x03
    168e:	1c 83       	std	Y+4, r17	; 0x04
    1690:	2d 83       	std	Y+5, r18	; 0x05
    1692:	3e 83       	std	Y+6, r19	; 0x06
    1694:	4f 83       	std	Y+7, r20	; 0x07
    1696:	58 87       	std	Y+8, r21	; 0x08
    1698:	69 87       	std	Y+9, r22	; 0x09
    169a:	7a 87       	std	Y+10, r23	; 0x0a
    169c:	8b 87       	std	Y+11, r24	; 0x0b
    169e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LCD_moveCursor>
    16a2:	64 01       	movw	r12, r8
    16a4:	e9 80       	ldd	r14, Y+1	; 0x01
    16a6:	fa 80       	ldd	r15, Y+2	; 0x02
    16a8:	0b 81       	ldd	r16, Y+3	; 0x03
    16aa:	1c 81       	ldd	r17, Y+4	; 0x04
    16ac:	2d 81       	ldd	r18, Y+5	; 0x05
    16ae:	3e 81       	ldd	r19, Y+6	; 0x06
    16b0:	4f 81       	ldd	r20, Y+7	; 0x07
    16b2:	58 85       	ldd	r21, Y+8	; 0x08
    16b4:	69 85       	ldd	r22, Y+9	; 0x09
    16b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    16b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ba:	0e 94 9f 0a 	call	0x153e	; 0x153e <LCD_displayString>
    16be:	2b 96       	adiw	r28, 0x0b	; 11
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	df 90       	pop	r13
    16d8:	cf 90       	pop	r12
    16da:	bf 90       	pop	r11
    16dc:	af 90       	pop	r10
    16de:	9f 90       	pop	r9
    16e0:	8f 90       	pop	r8
    16e2:	7f 90       	pop	r7
    16e4:	6f 90       	pop	r6
    16e6:	5f 90       	pop	r5
    16e8:	08 95       	ret

000016ea <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(ST_LCD_t lcd){
    16ea:	cf 92       	push	r12
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	2b 97       	sbiw	r28, 0x0b	; 11
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(lcd,LCD_CLEAR_COMMAND); /* Send clear display command */
    1708:	cc 24       	eor	r12, r12
    170a:	c3 94       	inc	r12
    170c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <LCD_sendCommand>
}
    1710:	2b 96       	adiw	r28, 0x0b	; 11
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	cf 90       	pop	r12
    172a:	08 95       	ret

0000172c <main>:

#include "Application/application.h"

int main(void)
{
	appInit();
    172c:	0e 94 67 00 	call	0xce	; 0xce <appInit>
	while (1) 
    {
		appStart();
    1730:	0e 94 4a 04 	call	0x894	; 0x894 <appStart>
    1734:	fd cf       	rjmp	.-6      	; 0x1730 <main+0x4>

00001736 <dio_init>:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;

}
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	11 f1       	breq	.+68     	; 0x177e <dio_init+0x48>
    173a:	30 f0       	brcs	.+12     	; 0x1748 <dio_init+0x12>
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	d1 f1       	breq	.+116    	; 0x17b4 <dio_init+0x7e>
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	09 f4       	brne	.+2      	; 0x1746 <dio_init+0x10>
    1744:	52 c0       	rjmp	.+164    	; 0x17ea <dio_init+0xb4>
    1746:	6c c0       	rjmp	.+216    	; 0x1820 <dio_init+0xea>
    1748:	41 11       	cpse	r20, r1
    174a:	0d c0       	rjmp	.+26     	; 0x1766 <dio_init+0x30>
    174c:	2a b3       	in	r18, 0x1a	; 26
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <dio_init+0x22>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	6a 95       	dec	r22
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <dio_init+0x1e>
    175c:	80 95       	com	r24
    175e:	82 23       	and	r24, r18
    1760:	8a bb       	out	0x1a, r24	; 26
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	08 95       	ret
    1766:	2a b3       	in	r18, 0x1a	; 26
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <dio_init+0x3c>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	6a 95       	dec	r22
    1774:	e2 f7       	brpl	.-8      	; 0x176e <dio_init+0x38>
    1776:	82 2b       	or	r24, r18
    1778:	8a bb       	out	0x1a, r24	; 26
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	08 95       	ret
    177e:	41 11       	cpse	r20, r1
    1780:	0d c0       	rjmp	.+26     	; 0x179c <dio_init+0x66>
    1782:	27 b3       	in	r18, 0x17	; 23
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 c0       	rjmp	.+4      	; 0x178e <dio_init+0x58>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	6a 95       	dec	r22
    1790:	e2 f7       	brpl	.-8      	; 0x178a <dio_init+0x54>
    1792:	80 95       	com	r24
    1794:	82 23       	and	r24, r18
    1796:	87 bb       	out	0x17, r24	; 23
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	08 95       	ret
    179c:	27 b3       	in	r18, 0x17	; 23
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <dio_init+0x72>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	6a 95       	dec	r22
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <dio_init+0x6e>
    17ac:	82 2b       	or	r24, r18
    17ae:	87 bb       	out	0x17, r24	; 23
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	08 95       	ret
    17b4:	41 11       	cpse	r20, r1
    17b6:	0d c0       	rjmp	.+26     	; 0x17d2 <dio_init+0x9c>
    17b8:	24 b3       	in	r18, 0x14	; 20
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <dio_init+0x8e>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	6a 95       	dec	r22
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <dio_init+0x8a>
    17c8:	80 95       	com	r24
    17ca:	82 23       	and	r24, r18
    17cc:	84 bb       	out	0x14, r24	; 20
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	08 95       	ret
    17d2:	24 b3       	in	r18, 0x14	; 20
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <dio_init+0xa8>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	6a 95       	dec	r22
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <dio_init+0xa4>
    17e2:	82 2b       	or	r24, r18
    17e4:	84 bb       	out	0x14, r24	; 20
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	08 95       	ret
    17ea:	41 11       	cpse	r20, r1
    17ec:	0d c0       	rjmp	.+26     	; 0x1808 <dio_init+0xd2>
    17ee:	21 b3       	in	r18, 0x11	; 17
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <dio_init+0xc4>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	6a 95       	dec	r22
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <dio_init+0xc0>
    17fe:	80 95       	com	r24
    1800:	82 23       	and	r24, r18
    1802:	81 bb       	out	0x11, r24	; 17
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	08 95       	ret
    1808:	21 b3       	in	r18, 0x11	; 17
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <dio_init+0xde>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	6a 95       	dec	r22
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <dio_init+0xda>
    1818:	82 2b       	or	r24, r18
    181a:	81 bb       	out	0x11, r24	; 17
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	08 95       	ret
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	08 95       	ret

00001824 <dio_write_pin>:
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	11 f1       	breq	.+68     	; 0x186c <dio_write_pin+0x48>
    1828:	30 f0       	brcs	.+12     	; 0x1836 <dio_write_pin+0x12>
    182a:	82 30       	cpi	r24, 0x02	; 2
    182c:	d1 f1       	breq	.+116    	; 0x18a2 <dio_write_pin+0x7e>
    182e:	83 30       	cpi	r24, 0x03	; 3
    1830:	09 f4       	brne	.+2      	; 0x1834 <dio_write_pin+0x10>
    1832:	52 c0       	rjmp	.+164    	; 0x18d8 <dio_write_pin+0xb4>
    1834:	6c c0       	rjmp	.+216    	; 0x190e <dio_write_pin+0xea>
    1836:	41 11       	cpse	r20, r1
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <dio_write_pin+0x30>
    183a:	2b b3       	in	r18, 0x1b	; 27
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <dio_write_pin+0x22>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	6a 95       	dec	r22
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <dio_write_pin+0x1e>
    184a:	80 95       	com	r24
    184c:	82 23       	and	r24, r18
    184e:	8b bb       	out	0x1b, r24	; 27
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	08 95       	ret
    1854:	2b b3       	in	r18, 0x1b	; 27
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <dio_write_pin+0x3c>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	6a 95       	dec	r22
    1862:	e2 f7       	brpl	.-8      	; 0x185c <dio_write_pin+0x38>
    1864:	82 2b       	or	r24, r18
    1866:	8b bb       	out	0x1b, r24	; 27
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	08 95       	ret
    186c:	41 11       	cpse	r20, r1
    186e:	0d c0       	rjmp	.+26     	; 0x188a <dio_write_pin+0x66>
    1870:	28 b3       	in	r18, 0x18	; 24
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 c0       	rjmp	.+4      	; 0x187c <dio_write_pin+0x58>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	6a 95       	dec	r22
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <dio_write_pin+0x54>
    1880:	80 95       	com	r24
    1882:	82 23       	and	r24, r18
    1884:	88 bb       	out	0x18, r24	; 24
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	08 95       	ret
    188a:	28 b3       	in	r18, 0x18	; 24
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <dio_write_pin+0x72>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	6a 95       	dec	r22
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <dio_write_pin+0x6e>
    189a:	82 2b       	or	r24, r18
    189c:	88 bb       	out	0x18, r24	; 24
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	08 95       	ret
    18a2:	41 11       	cpse	r20, r1
    18a4:	0d c0       	rjmp	.+26     	; 0x18c0 <dio_write_pin+0x9c>
    18a6:	25 b3       	in	r18, 0x15	; 21
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <dio_write_pin+0x8e>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	6a 95       	dec	r22
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <dio_write_pin+0x8a>
    18b6:	80 95       	com	r24
    18b8:	82 23       	and	r24, r18
    18ba:	85 bb       	out	0x15, r24	; 21
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	08 95       	ret
    18c0:	25 b3       	in	r18, 0x15	; 21
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <dio_write_pin+0xa8>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	6a 95       	dec	r22
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <dio_write_pin+0xa4>
    18d0:	82 2b       	or	r24, r18
    18d2:	85 bb       	out	0x15, r24	; 21
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	08 95       	ret
    18d8:	41 11       	cpse	r20, r1
    18da:	0d c0       	rjmp	.+26     	; 0x18f6 <dio_write_pin+0xd2>
    18dc:	22 b3       	in	r18, 0x12	; 18
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <dio_write_pin+0xc4>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	6a 95       	dec	r22
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <dio_write_pin+0xc0>
    18ec:	80 95       	com	r24
    18ee:	82 23       	and	r24, r18
    18f0:	82 bb       	out	0x12, r24	; 18
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	08 95       	ret
    18f6:	22 b3       	in	r18, 0x12	; 18
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <dio_write_pin+0xde>
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	6a 95       	dec	r22
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <dio_write_pin+0xda>
    1906:	82 2b       	or	r24, r18
    1908:	82 bb       	out	0x12, r24	; 18
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	08 95       	ret
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	08 95       	ret

00001912 <dio_read_pin>:

EN_DIO_ERROR_t dio_read_pin(uint8 port, uint8 pin,uint8 *data)
{
    switch(port){
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	91 f0       	breq	.+36     	; 0x193a <dio_read_pin+0x28>
    1916:	28 f0       	brcs	.+10     	; 0x1922 <dio_read_pin+0x10>
    1918:	82 30       	cpi	r24, 0x02	; 2
    191a:	d9 f0       	breq	.+54     	; 0x1952 <dio_read_pin+0x40>
    191c:	83 30       	cpi	r24, 0x03	; 3
    191e:	29 f1       	breq	.+74     	; 0x196a <dio_read_pin+0x58>
    1920:	30 c0       	rjmp	.+96     	; 0x1982 <dio_read_pin+0x70>
        case PORT_A:
            *data = READ_BIT(PINA,pin);
    1922:	89 b3       	in	r24, 0x19	; 25
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 c0       	rjmp	.+4      	; 0x192c <dio_read_pin+0x1a>
    1928:	95 95       	asr	r25
    192a:	87 95       	ror	r24
    192c:	6a 95       	dec	r22
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <dio_read_pin+0x16>
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	fa 01       	movw	r30, r20
    1934:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    1936:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_read_pin(uint8 port, uint8 pin,uint8 *data)
{
    switch(port){
        case PORT_A:
            *data = READ_BIT(PINA,pin);
            break;
    1938:	08 95       	ret
        case PORT_B:
            *data =READ_BIT(PINB,pin);
    193a:	86 b3       	in	r24, 0x16	; 22
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <dio_read_pin+0x32>
    1940:	95 95       	asr	r25
    1942:	87 95       	ror	r24
    1944:	6a 95       	dec	r22
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <dio_read_pin+0x2e>
    1948:	81 70       	andi	r24, 0x01	; 1
    194a:	fa 01       	movw	r30, r20
    194c:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    194e:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_A:
            *data = READ_BIT(PINA,pin);
            break;
        case PORT_B:
            *data =READ_BIT(PINB,pin);
            break;
    1950:	08 95       	ret
        case PORT_C:
            *data =READ_BIT(PINC,pin);
    1952:	83 b3       	in	r24, 0x13	; 19
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 c0       	rjmp	.+4      	; 0x195c <dio_read_pin+0x4a>
    1958:	95 95       	asr	r25
    195a:	87 95       	ror	r24
    195c:	6a 95       	dec	r22
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <dio_read_pin+0x46>
    1960:	81 70       	andi	r24, 0x01	; 1
    1962:	fa 01       	movw	r30, r20
    1964:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    1966:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_B:
            *data =READ_BIT(PINB,pin);
            break;
        case PORT_C:
            *data =READ_BIT(PINC,pin);
            break;
    1968:	08 95       	ret
        case PORT_D:
            *data =READ_BIT(PIND,pin);
    196a:	80 b3       	in	r24, 0x10	; 16
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <dio_read_pin+0x62>
    1970:	95 95       	asr	r25
    1972:	87 95       	ror	r24
    1974:	6a 95       	dec	r22
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <dio_read_pin+0x5e>
    1978:	81 70       	andi	r24, 0x01	; 1
    197a:	fa 01       	movw	r30, r20
    197c:	80 83       	st	Z, r24
            break;
        default:
            return DIO_FAIL;
            break;
    }
    return DIO_SUCCESS;
    197e:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_C:
            *data =READ_BIT(PINC,pin);
            break;
        case PORT_D:
            *data =READ_BIT(PIND,pin);
            break;
    1980:	08 95       	ret
        default:
            return DIO_FAIL;
    1982:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }
    return DIO_SUCCESS;
}
    1984:	08 95       	ret

00001986 <dio_read_port>:

EN_DIO_ERROR_t dio_read_port(uint8 port,uint8 *data)
{
	switch(port){
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	59 f0       	breq	.+22     	; 0x19a0 <dio_read_port+0x1a>
    198a:	28 f0       	brcs	.+10     	; 0x1996 <dio_read_port+0x10>
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	69 f0       	breq	.+26     	; 0x19aa <dio_read_port+0x24>
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	81 f0       	breq	.+32     	; 0x19b4 <dio_read_port+0x2e>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <dio_read_port+0x38>
		case PORT_A:
		*data = PINA;
    1996:	89 b3       	in	r24, 0x19	; 25
    1998:	fb 01       	movw	r30, r22
    199a:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    199c:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_read_port(uint8 port,uint8 *data)
{
	switch(port){
		case PORT_A:
		*data = PINA;
		break;
    199e:	08 95       	ret
		case PORT_B:
		*data =PINB;
    19a0:	86 b3       	in	r24, 0x16	; 22
    19a2:	fb 01       	movw	r30, r22
    19a4:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*data = PINA;
		break;
		case PORT_B:
		*data =PINB;
		break;
    19a8:	08 95       	ret
		case PORT_C:
		*data =PINC;
    19aa:	83 b3       	in	r24, 0x13	; 19
    19ac:	fb 01       	movw	r30, r22
    19ae:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*data =PINB;
		break;
		case PORT_C:
		*data =PINC;
		break;
    19b2:	08 95       	ret
		case PORT_D:
		*data =PIND;
    19b4:	80 b3       	in	r24, 0x10	; 16
    19b6:	fb 01       	movw	r30, r22
    19b8:	80 83       	st	Z, r24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*data =PINC;
		break;
		case PORT_D:
		*data =PIND;
		break;
    19bc:	08 95       	ret
		default:
		return DIO_FAIL;
    19be:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_SUCCESS;
}
    19c0:	08 95       	ret

000019c2 <dio_write_port>:


EN_DIO_ERROR_t dio_write_port(uint8 port,uint8 value)
{
	switch(port){
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	49 f0       	breq	.+18     	; 0x19d8 <dio_write_port+0x16>
    19c6:	28 f0       	brcs	.+10     	; 0x19d2 <dio_write_port+0x10>
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	49 f0       	breq	.+18     	; 0x19de <dio_write_port+0x1c>
    19cc:	83 30       	cpi	r24, 0x03	; 3
    19ce:	51 f0       	breq	.+20     	; 0x19e4 <dio_write_port+0x22>
    19d0:	0c c0       	rjmp	.+24     	; 0x19ea <dio_write_port+0x28>
		case PORT_A:
		PORTA = value;
    19d2:	6b bb       	out	0x1b, r22	; 27
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
EN_DIO_ERROR_t dio_write_port(uint8 port,uint8 value)
{
	switch(port){
		case PORT_A:
		PORTA = value;
		break;
    19d6:	08 95       	ret
		case PORT_B:
		PORTB = value;
    19d8:	68 bb       	out	0x18, r22	; 24
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19da:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		PORTA = value;
		break;
		case PORT_B:
		PORTB = value;
		break;
    19dc:	08 95       	ret
		case PORT_C:
		PORTC = value;
    19de:	65 bb       	out	0x15, r22	; 21
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		PORTB = value;
		break;
		case PORT_C:
		PORTC = value;
		break;
    19e2:	08 95       	ret
		case PORT_D:
		PORTD = value;
    19e4:	62 bb       	out	0x12, r22	; 18
		break;
		default:
		return DIO_FAIL;
		break;
	}
	return DIO_SUCCESS;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		PORTC = value;
		break;
		case PORT_D:
		PORTD = value;
		break;
    19e8:	08 95       	ret
		default:
		return DIO_FAIL;
    19ea:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_SUCCESS;
    19ec:	08 95       	ret

000019ee <SPI_initSlave>:
{
	/* Start transmission */
	SPDR = cData;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
}
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	64 e0       	ldi	r22, 0x04	; 4
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	65 e0       	ldi	r22, 0x05	; 5
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	66 e0       	ldi	r22, 0x06	; 6
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	67 e0       	ldi	r22, 0x07	; 7
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	0e 94 9b 0b 	call	0x1736	; 0x1736 <dio_init>
    1a16:	80 e4       	ldi	r24, 0x40	; 64
    1a18:	8d b9       	out	0x0d, r24	; 13
    1a1a:	8e b1       	in	r24, 0x0e	; 14
    1a1c:	8e 7f       	andi	r24, 0xFE	; 254
    1a1e:	8e b9       	out	0x0e, r24	; 14
    1a20:	08 95       	ret

00001a22 <SPI_sendReceiveByte>:
    1a22:	8f b9       	out	0x0f, r24	; 15
    1a24:	77 9b       	sbis	0x0e, 7	; 14
    1a26:	fe cf       	rjmp	.-4      	; 0x1a24 <SPI_sendReceiveByte+0x2>
    1a28:	8f b1       	in	r24, 0x0f	; 15
    1a2a:	08 95       	ret

00001a2c <SPI_SlaveReceive>:

uint8 SPI_SlaveReceive(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
    1a2c:	77 9b       	sbis	0x0e, 7	; 14
    1a2e:	fe cf       	rjmp	.-4      	; 0x1a2c <SPI_SlaveReceive>
	/* Return data register */
	return SPDR;
    1a30:	8f b1       	in	r24, 0x0f	; 15
    1a32:	08 95       	ret

00001a34 <calc_prescaler>:
		init_value=0;
	}
	TCNT0=init_value;
	g_callBackPtr_0=g_ptr;
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
}
    1a34:	cf 92       	push	r12
    1a36:	df 92       	push	r13
    1a38:	ef 92       	push	r14
    1a3a:	ff 92       	push	r15
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	6b 01       	movw	r12, r22
    1a42:	7c 01       	movw	r14, r24
    1a44:	ea 01       	movw	r28, r20
    1a46:	2c ee       	ldi	r18, 0xEC	; 236
    1a48:	31 e1       	ldi	r19, 0x11	; 17
    1a4a:	43 e8       	ldi	r20, 0x83	; 131
    1a4c:	53 e4       	ldi	r21, 0x43	; 67
    1a4e:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	0c f4       	brge	.+2      	; 0x1a58 <calc_prescaler+0x24>
    1a56:	53 c0       	rjmp	.+166    	; 0x1afe <calc_prescaler+0xca>
    1a58:	28 eb       	ldi	r18, 0xB8	; 184
    1a5a:	3e e1       	ldi	r19, 0x1E	; 30
    1a5c:	45 e8       	ldi	r20, 0x85	; 133
    1a5e:	5e e3       	ldi	r21, 0x3E	; 62
    1a60:	c7 01       	movw	r24, r14
    1a62:	b6 01       	movw	r22, r12
    1a64:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1a68:	18 16       	cp	r1, r24
    1a6a:	2c f0       	brlt	.+10     	; 0x1a76 <calc_prescaler+0x42>
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	99 83       	std	Y+1, r25	; 0x01
    1a72:	88 83       	st	Y, r24
    1a74:	45 c0       	rjmp	.+138    	; 0x1b00 <calc_prescaler+0xcc>
    1a76:	23 e3       	ldi	r18, 0x33	; 51
    1a78:	33 e3       	ldi	r19, 0x33	; 51
    1a7a:	43 e0       	ldi	r20, 0x03	; 3
    1a7c:	50 e4       	ldi	r21, 0x40	; 64
    1a7e:	c7 01       	movw	r24, r14
    1a80:	b6 01       	movw	r22, r12
    1a82:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	34 f0       	brlt	.+12     	; 0x1a96 <calc_prescaler+0x62>
    1a8a:	88 e0       	ldi	r24, 0x08	; 8
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	99 83       	std	Y+1, r25	; 0x01
    1a90:	88 83       	st	Y, r24
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	35 c0       	rjmp	.+106    	; 0x1b00 <calc_prescaler+0xcc>
    1a96:	2d e3       	ldi	r18, 0x3D	; 61
    1a98:	3a e0       	ldi	r19, 0x0A	; 10
    1a9a:	43 e8       	ldi	r20, 0x83	; 131
    1a9c:	51 e4       	ldi	r21, 0x41	; 65
    1a9e:	c7 01       	movw	r24, r14
    1aa0:	b6 01       	movw	r22, r12
    1aa2:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1aa6:	18 16       	cp	r1, r24
    1aa8:	34 f0       	brlt	.+12     	; 0x1ab6 <calc_prescaler+0x82>
    1aaa:	80 e4       	ldi	r24, 0x40	; 64
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	99 83       	std	Y+1, r25	; 0x01
    1ab0:	88 83       	st	Y, r24
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	25 c0       	rjmp	.+74     	; 0x1b00 <calc_prescaler+0xcc>
    1ab6:	2b e7       	ldi	r18, 0x7B	; 123
    1ab8:	34 e1       	ldi	r19, 0x14	; 20
    1aba:	43 e8       	ldi	r20, 0x83	; 131
    1abc:	52 e4       	ldi	r21, 0x42	; 66
    1abe:	c7 01       	movw	r24, r14
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1ac6:	18 16       	cp	r1, r24
    1ac8:	34 f0       	brlt	.+12     	; 0x1ad6 <calc_prescaler+0xa2>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	99 83       	std	Y+1, r25	; 0x01
    1ad0:	88 83       	st	Y, r24
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	15 c0       	rjmp	.+42     	; 0x1b00 <calc_prescaler+0xcc>
    1ad6:	2c ee       	ldi	r18, 0xEC	; 236
    1ad8:	31 e1       	ldi	r19, 0x11	; 17
    1ada:	43 e8       	ldi	r20, 0x83	; 131
    1adc:	53 e4       	ldi	r21, 0x43	; 67
    1ade:	c7 01       	movw	r24, r14
    1ae0:	b6 01       	movw	r22, r12
    1ae2:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	34 f0       	brlt	.+12     	; 0x1af6 <calc_prescaler+0xc2>
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	94 e0       	ldi	r25, 0x04	; 4
    1aee:	99 83       	std	Y+1, r25	; 0x01
    1af0:	88 83       	st	Y, r24
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	05 c0       	rjmp	.+10     	; 0x1b00 <calc_prescaler+0xcc>
    1af6:	19 82       	std	Y+1, r1	; 0x01
    1af8:	18 82       	st	Y, r1
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <calc_prescaler+0xcc>
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	ff 90       	pop	r15
    1b06:	ef 90       	pop	r14
    1b08:	df 90       	pop	r13
    1b0a:	cf 90       	pop	r12
    1b0c:	08 95       	ret

00001b0e <calc_initialValue>:
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	eb 01       	movw	r28, r22
    1b14:	80 34       	cpi	r24, 0x40	; 64
    1b16:	91 05       	cpc	r25, r1
    1b18:	81 f1       	breq	.+96     	; 0x1b7a <calc_initialValue+0x6c>
    1b1a:	30 f4       	brcc	.+12     	; 0x1b28 <calc_initialValue+0x1a>
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	91 05       	cpc	r25, r1
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <calc_initialValue+0x2c>
    1b22:	08 97       	sbiw	r24, 0x08	; 8
    1b24:	d1 f0       	breq	.+52     	; 0x1b5a <calc_initialValue+0x4c>
    1b26:	59 c0       	rjmp	.+178    	; 0x1bda <calc_initialValue+0xcc>
    1b28:	81 15       	cp	r24, r1
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	96 07       	cpc	r25, r22
    1b2e:	a9 f1       	breq	.+106    	; 0x1b9a <calc_initialValue+0x8c>
    1b30:	81 15       	cp	r24, r1
    1b32:	94 40       	sbci	r25, 0x04	; 4
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <calc_initialValue+0x2a>
    1b36:	41 c0       	rjmp	.+130    	; 0x1bba <calc_initialValue+0xac>
    1b38:	50 c0       	rjmp	.+160    	; 0x1bda <calc_initialValue+0xcc>
    1b3a:	68 eb       	ldi	r22, 0xB8	; 184
    1b3c:	7e e1       	ldi	r23, 0x1E	; 30
    1b3e:	85 e8       	ldi	r24, 0x85	; 133
    1b40:	9e e3       	ldi	r25, 0x3E	; 62
    1b42:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1b46:	2f e6       	ldi	r18, 0x6F	; 111
    1b48:	32 e1       	ldi	r19, 0x12	; 18
    1b4a:	43 e8       	ldi	r20, 0x83	; 131
    1b4c:	5a e3       	ldi	r21, 0x3A	; 58
    1b4e:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1b52:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1b56:	68 83       	st	Y, r22
    1b58:	41 c0       	rjmp	.+130    	; 0x1bdc <calc_initialValue+0xce>
    1b5a:	63 e3       	ldi	r22, 0x33	; 51
    1b5c:	73 e3       	ldi	r23, 0x33	; 51
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	90 e4       	ldi	r25, 0x40	; 64
    1b62:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1b66:	2f e6       	ldi	r18, 0x6F	; 111
    1b68:	32 e1       	ldi	r19, 0x12	; 18
    1b6a:	43 e0       	ldi	r20, 0x03	; 3
    1b6c:	5c e3       	ldi	r21, 0x3C	; 60
    1b6e:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1b72:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1b76:	68 83       	st	Y, r22
    1b78:	31 c0       	rjmp	.+98     	; 0x1bdc <calc_initialValue+0xce>
    1b7a:	6d e3       	ldi	r22, 0x3D	; 61
    1b7c:	7a e0       	ldi	r23, 0x0A	; 10
    1b7e:	83 e8       	ldi	r24, 0x83	; 131
    1b80:	91 e4       	ldi	r25, 0x41	; 65
    1b82:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1b86:	2f e6       	ldi	r18, 0x6F	; 111
    1b88:	32 e1       	ldi	r19, 0x12	; 18
    1b8a:	43 e8       	ldi	r20, 0x83	; 131
    1b8c:	5d e3       	ldi	r21, 0x3D	; 61
    1b8e:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1b92:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1b96:	68 83       	st	Y, r22
    1b98:	21 c0       	rjmp	.+66     	; 0x1bdc <calc_initialValue+0xce>
    1b9a:	6b e7       	ldi	r22, 0x7B	; 123
    1b9c:	74 e1       	ldi	r23, 0x14	; 20
    1b9e:	83 e8       	ldi	r24, 0x83	; 131
    1ba0:	92 e4       	ldi	r25, 0x42	; 66
    1ba2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1ba6:	2f e6       	ldi	r18, 0x6F	; 111
    1ba8:	32 e1       	ldi	r19, 0x12	; 18
    1baa:	43 e8       	ldi	r20, 0x83	; 131
    1bac:	5e e3       	ldi	r21, 0x3E	; 62
    1bae:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1bb2:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1bb6:	68 83       	st	Y, r22
    1bb8:	11 c0       	rjmp	.+34     	; 0x1bdc <calc_initialValue+0xce>
    1bba:	6c ee       	ldi	r22, 0xEC	; 236
    1bbc:	71 e1       	ldi	r23, 0x11	; 17
    1bbe:	83 e8       	ldi	r24, 0x83	; 131
    1bc0:	93 e4       	ldi	r25, 0x43	; 67
    1bc2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1bc6:	2f e6       	ldi	r18, 0x6F	; 111
    1bc8:	32 e1       	ldi	r19, 0x12	; 18
    1bca:	43 e8       	ldi	r20, 0x83	; 131
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1bd2:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1bd6:	68 83       	st	Y, r22
    1bd8:	01 c0       	rjmp	.+2      	; 0x1bdc <calc_initialValue+0xce>
    1bda:	18 82       	st	Y, r1
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret

00001be2 <set_prescale>:
    1be2:	80 34       	cpi	r24, 0x40	; 64
    1be4:	91 05       	cpc	r25, r1
    1be6:	a9 f0       	breq	.+42     	; 0x1c12 <set_prescale+0x30>
    1be8:	30 f4       	brcc	.+12     	; 0x1bf6 <set_prescale+0x14>
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	91 05       	cpc	r25, r1
    1bee:	59 f0       	breq	.+22     	; 0x1c06 <set_prescale+0x24>
    1bf0:	08 97       	sbiw	r24, 0x08	; 8
    1bf2:	61 f0       	breq	.+24     	; 0x1c0c <set_prescale+0x2a>
    1bf4:	17 c0       	rjmp	.+46     	; 0x1c24 <set_prescale+0x42>
    1bf6:	81 15       	cp	r24, r1
    1bf8:	21 e0       	ldi	r18, 0x01	; 1
    1bfa:	92 07       	cpc	r25, r18
    1bfc:	69 f0       	breq	.+26     	; 0x1c18 <set_prescale+0x36>
    1bfe:	81 15       	cp	r24, r1
    1c00:	94 40       	sbci	r25, 0x04	; 4
    1c02:	69 f0       	breq	.+26     	; 0x1c1e <set_prescale+0x3c>
    1c04:	0f c0       	rjmp	.+30     	; 0x1c24 <set_prescale+0x42>
    1c06:	81 e8       	ldi	r24, 0x81	; 129
    1c08:	83 bf       	out	0x33, r24	; 51
    1c0a:	08 95       	ret
    1c0c:	82 e8       	ldi	r24, 0x82	; 130
    1c0e:	83 bf       	out	0x33, r24	; 51
    1c10:	08 95       	ret
    1c12:	83 e8       	ldi	r24, 0x83	; 131
    1c14:	83 bf       	out	0x33, r24	; 51
    1c16:	08 95       	ret
    1c18:	84 e8       	ldi	r24, 0x84	; 132
    1c1a:	83 bf       	out	0x33, r24	; 51
    1c1c:	08 95       	ret
    1c1e:	85 e8       	ldi	r24, 0x85	; 133
    1c20:	83 bf       	out	0x33, r24	; 51
    1c22:	08 95       	ret
    1c24:	13 be       	out	0x33, r1	; 51
    1c26:	08 95       	ret

00001c28 <Timer0_Delay>:
    1c28:	8f 92       	push	r8
    1c2a:	9f 92       	push	r9
    1c2c:	af 92       	push	r10
    1c2e:	bf 92       	push	r11
    1c30:	cf 92       	push	r12
    1c32:	df 92       	push	r13
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	27 97       	sbiw	r28, 0x07	; 7
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	6b 01       	movw	r12, r22
    1c50:	7c 01       	movw	r14, r24
    1c52:	ae 01       	movw	r20, r28
    1c54:	4f 5f       	subi	r20, 0xFF	; 255
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255
    1c58:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <calc_prescaler>
    1c5c:	88 23       	and	r24, r24
    1c5e:	71 f0       	breq	.+28     	; 0x1c7c <Timer0_Delay+0x54>
    1c60:	a7 01       	movw	r20, r14
    1c62:	96 01       	movw	r18, r12
    1c64:	be 01       	movw	r22, r28
    1c66:	6d 5f       	subi	r22, 0xFD	; 253
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <calc_initialValue>
    1c72:	1c 82       	std	Y+4, r1	; 0x04
    1c74:	1d 82       	std	Y+5, r1	; 0x05
    1c76:	1e 82       	std	Y+6, r1	; 0x06
    1c78:	1f 82       	std	Y+7, r1	; 0x07
    1c7a:	11 c0       	rjmp	.+34     	; 0x1c9e <Timer0_Delay+0x76>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	94 e0       	ldi	r25, 0x04	; 4
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	2c ee       	ldi	r18, 0xEC	; 236
    1c86:	31 e1       	ldi	r19, 0x11	; 17
    1c88:	43 e8       	ldi	r20, 0x83	; 131
    1c8a:	53 e4       	ldi	r21, 0x43	; 67
    1c8c:	c7 01       	movw	r24, r14
    1c8e:	b6 01       	movw	r22, r12
    1c90:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1c94:	6c 83       	std	Y+4, r22	; 0x04
    1c96:	7d 83       	std	Y+5, r23	; 0x05
    1c98:	8e 83       	std	Y+6, r24	; 0x06
    1c9a:	9f 83       	std	Y+7, r25	; 0x07
    1c9c:	1b 82       	std	Y+3, r1	; 0x03
    1c9e:	cc 80       	ldd	r12, Y+4	; 0x04
    1ca0:	dd 80       	ldd	r13, Y+5	; 0x05
    1ca2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca4:	ff 80       	ldd	r15, Y+7	; 0x07
    1ca6:	c7 01       	movw	r24, r14
    1ca8:	b6 01       	movw	r22, r12
    1caa:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1cae:	16 2f       	mov	r17, r22
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__floatsisf>
    1cba:	9b 01       	movw	r18, r22
    1cbc:	ac 01       	movw	r20, r24
    1cbe:	c7 01       	movw	r24, r14
    1cc0:	b6 01       	movw	r22, r12
    1cc2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1cc6:	2c ee       	ldi	r18, 0xEC	; 236
    1cc8:	31 e1       	ldi	r19, 0x11	; 17
    1cca:	43 e8       	ldi	r20, 0x83	; 131
    1ccc:	53 e4       	ldi	r21, 0x43	; 67
    1cce:	0e 94 97 11 	call	0x232e	; 0x232e <__mulsf3>
    1cd2:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1cd6:	f6 2e       	mov	r15, r22
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	82 bf       	out	0x32, r24	; 50
    1cdc:	11 11       	cpse	r17, r1
    1cde:	08 c0       	rjmp	.+16     	; 0x1cf0 <Timer0_Delay+0xc8>
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <set_prescale>
    1ce8:	08 b6       	in	r0, 0x38	; 56
    1cea:	00 fe       	sbrs	r0, 0
    1cec:	fd cf       	rjmp	.-6      	; 0x1ce8 <Timer0_Delay+0xc0>
    1cee:	00 c1       	rjmp	.+512    	; 0x1ef0 <Timer0_Delay+0x2c8>
    1cf0:	85 e8       	ldi	r24, 0x85	; 133
    1cf2:	83 bf       	out	0x33, r24	; 51
    1cf4:	07 c0       	rjmp	.+14     	; 0x1d04 <Timer0_Delay+0xdc>
    1cf6:	08 b6       	in	r0, 0x38	; 56
    1cf8:	00 fe       	sbrs	r0, 0
    1cfa:	fd cf       	rjmp	.-6      	; 0x1cf6 <Timer0_Delay+0xce>
    1cfc:	11 50       	subi	r17, 0x01	; 1
    1cfe:	88 b7       	in	r24, 0x38	; 56
    1d00:	81 60       	ori	r24, 0x01	; 1
    1d02:	88 bf       	out	0x38, r24	; 56
    1d04:	11 11       	cpse	r17, r1
    1d06:	f7 cf       	rjmp	.-18     	; 0x1cf6 <Timer0_Delay+0xce>
    1d08:	ff 20       	and	r15, r15
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <Timer0_Delay+0xe6>
    1d0c:	53 c0       	rjmp	.+166    	; 0x1db4 <Timer0_Delay+0x18c>
    1d0e:	6f 2d       	mov	r22, r15
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__floatsisf>
    1d1a:	4b 01       	movw	r8, r22
    1d1c:	5c 01       	movw	r10, r24
    1d1e:	28 eb       	ldi	r18, 0xB8	; 184
    1d20:	3e e1       	ldi	r19, 0x1E	; 30
    1d22:	45 e8       	ldi	r20, 0x85	; 133
    1d24:	5e e3       	ldi	r21, 0x3E	; 62
    1d26:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	2c f0       	brlt	.+10     	; 0x1d38 <Timer0_Delay+0x110>
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	3e c0       	rjmp	.+124    	; 0x1db4 <Timer0_Delay+0x18c>
    1d38:	23 e3       	ldi	r18, 0x33	; 51
    1d3a:	33 e3       	ldi	r19, 0x33	; 51
    1d3c:	43 e0       	ldi	r20, 0x03	; 3
    1d3e:	50 e4       	ldi	r21, 0x40	; 64
    1d40:	c5 01       	movw	r24, r10
    1d42:	b4 01       	movw	r22, r8
    1d44:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	2c f0       	brlt	.+10     	; 0x1d56 <Timer0_Delay+0x12e>
    1d4c:	88 e0       	ldi	r24, 0x08	; 8
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	2f c0       	rjmp	.+94     	; 0x1db4 <Timer0_Delay+0x18c>
    1d56:	2d e3       	ldi	r18, 0x3D	; 61
    1d58:	3a e0       	ldi	r19, 0x0A	; 10
    1d5a:	43 e8       	ldi	r20, 0x83	; 131
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	c5 01       	movw	r24, r10
    1d60:	b4 01       	movw	r22, r8
    1d62:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	2c f0       	brlt	.+10     	; 0x1d74 <Timer0_Delay+0x14c>
    1d6a:	80 e4       	ldi	r24, 0x40	; 64
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	20 c0       	rjmp	.+64     	; 0x1db4 <Timer0_Delay+0x18c>
    1d74:	2b e7       	ldi	r18, 0x7B	; 123
    1d76:	34 e1       	ldi	r19, 0x14	; 20
    1d78:	43 e8       	ldi	r20, 0x83	; 131
    1d7a:	52 e4       	ldi	r21, 0x42	; 66
    1d7c:	c5 01       	movw	r24, r10
    1d7e:	b4 01       	movw	r22, r8
    1d80:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1d84:	18 16       	cp	r1, r24
    1d86:	2c f0       	brlt	.+10     	; 0x1d92 <Timer0_Delay+0x16a>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	91 e0       	ldi	r25, 0x01	; 1
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	11 c0       	rjmp	.+34     	; 0x1db4 <Timer0_Delay+0x18c>
    1d92:	2c ee       	ldi	r18, 0xEC	; 236
    1d94:	31 e1       	ldi	r19, 0x11	; 17
    1d96:	43 e8       	ldi	r20, 0x83	; 131
    1d98:	53 e4       	ldi	r21, 0x43	; 67
    1d9a:	c5 01       	movw	r24, r10
    1d9c:	b4 01       	movw	r22, r8
    1d9e:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	2c f0       	brlt	.+10     	; 0x1db0 <Timer0_Delay+0x188>
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	94 e0       	ldi	r25, 0x04	; 4
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <Timer0_Delay+0x18c>
    1db0:	1a 82       	std	Y+2, r1	; 0x02
    1db2:	19 82       	std	Y+1, r1	; 0x01
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	80 34       	cpi	r24, 0x40	; 64
    1dba:	91 05       	cpc	r25, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <Timer0_Delay+0x198>
    1dbe:	45 c0       	rjmp	.+138    	; 0x1e4a <Timer0_Delay+0x222>
    1dc0:	30 f4       	brcc	.+12     	; 0x1dce <Timer0_Delay+0x1a6>
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	69 f0       	breq	.+26     	; 0x1de2 <Timer0_Delay+0x1ba>
    1dc8:	08 97       	sbiw	r24, 0x08	; 8
    1dca:	29 f1       	breq	.+74     	; 0x1e16 <Timer0_Delay+0x1ee>
    1dcc:	8c c0       	rjmp	.+280    	; 0x1ee6 <Timer0_Delay+0x2be>
    1dce:	81 15       	cp	r24, r1
    1dd0:	21 e0       	ldi	r18, 0x01	; 1
    1dd2:	92 07       	cpc	r25, r18
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <Timer0_Delay+0x1b0>
    1dd6:	53 c0       	rjmp	.+166    	; 0x1e7e <Timer0_Delay+0x256>
    1dd8:	81 15       	cp	r24, r1
    1dda:	94 40       	sbci	r25, 0x04	; 4
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <Timer0_Delay+0x1b8>
    1dde:	69 c0       	rjmp	.+210    	; 0x1eb2 <Timer0_Delay+0x28a>
    1de0:	82 c0       	rjmp	.+260    	; 0x1ee6 <Timer0_Delay+0x2be>
    1de2:	6f 2d       	mov	r22, r15
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__floatsisf>
    1dee:	9b 01       	movw	r18, r22
    1df0:	ac 01       	movw	r20, r24
    1df2:	68 eb       	ldi	r22, 0xB8	; 184
    1df4:	7e e1       	ldi	r23, 0x1E	; 30
    1df6:	85 e8       	ldi	r24, 0x85	; 133
    1df8:	9e e3       	ldi	r25, 0x3E	; 62
    1dfa:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1dfe:	2f e6       	ldi	r18, 0x6F	; 111
    1e00:	32 e1       	ldi	r19, 0x12	; 18
    1e02:	43 e8       	ldi	r20, 0x83	; 131
    1e04:	5a e3       	ldi	r21, 0x3A	; 58
    1e06:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1e0a:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1e0e:	62 bf       	out	0x32, r22	; 50
    1e10:	81 e8       	ldi	r24, 0x81	; 129
    1e12:	83 bf       	out	0x33, r24	; 51
    1e14:	6a c0       	rjmp	.+212    	; 0x1eea <Timer0_Delay+0x2c2>
    1e16:	6f 2d       	mov	r22, r15
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__floatsisf>
    1e22:	9b 01       	movw	r18, r22
    1e24:	ac 01       	movw	r20, r24
    1e26:	63 e3       	ldi	r22, 0x33	; 51
    1e28:	73 e3       	ldi	r23, 0x33	; 51
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
    1e2c:	90 e4       	ldi	r25, 0x40	; 64
    1e2e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1e32:	2f e6       	ldi	r18, 0x6F	; 111
    1e34:	32 e1       	ldi	r19, 0x12	; 18
    1e36:	43 e0       	ldi	r20, 0x03	; 3
    1e38:	5c e3       	ldi	r21, 0x3C	; 60
    1e3a:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1e3e:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1e42:	62 bf       	out	0x32, r22	; 50
    1e44:	82 e8       	ldi	r24, 0x82	; 130
    1e46:	83 bf       	out	0x33, r24	; 51
    1e48:	50 c0       	rjmp	.+160    	; 0x1eea <Timer0_Delay+0x2c2>
    1e4a:	6f 2d       	mov	r22, r15
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__floatsisf>
    1e56:	9b 01       	movw	r18, r22
    1e58:	ac 01       	movw	r20, r24
    1e5a:	6d e3       	ldi	r22, 0x3D	; 61
    1e5c:	7a e0       	ldi	r23, 0x0A	; 10
    1e5e:	83 e8       	ldi	r24, 0x83	; 131
    1e60:	91 e4       	ldi	r25, 0x41	; 65
    1e62:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1e66:	2f e6       	ldi	r18, 0x6F	; 111
    1e68:	32 e1       	ldi	r19, 0x12	; 18
    1e6a:	43 e8       	ldi	r20, 0x83	; 131
    1e6c:	5d e3       	ldi	r21, 0x3D	; 61
    1e6e:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1e72:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1e76:	62 bf       	out	0x32, r22	; 50
    1e78:	83 e8       	ldi	r24, 0x83	; 131
    1e7a:	83 bf       	out	0x33, r24	; 51
    1e7c:	36 c0       	rjmp	.+108    	; 0x1eea <Timer0_Delay+0x2c2>
    1e7e:	6f 2d       	mov	r22, r15
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__floatsisf>
    1e8a:	9b 01       	movw	r18, r22
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	6b e7       	ldi	r22, 0x7B	; 123
    1e90:	74 e1       	ldi	r23, 0x14	; 20
    1e92:	83 e8       	ldi	r24, 0x83	; 131
    1e94:	92 e4       	ldi	r25, 0x42	; 66
    1e96:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1e9a:	2f e6       	ldi	r18, 0x6F	; 111
    1e9c:	32 e1       	ldi	r19, 0x12	; 18
    1e9e:	43 e8       	ldi	r20, 0x83	; 131
    1ea0:	5e e3       	ldi	r21, 0x3E	; 62
    1ea2:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1ea6:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1eaa:	62 bf       	out	0x32, r22	; 50
    1eac:	84 e8       	ldi	r24, 0x84	; 132
    1eae:	83 bf       	out	0x33, r24	; 51
    1eb0:	1c c0       	rjmp	.+56     	; 0x1eea <Timer0_Delay+0x2c2>
    1eb2:	6f 2d       	mov	r22, r15
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__floatsisf>
    1ebe:	9b 01       	movw	r18, r22
    1ec0:	ac 01       	movw	r20, r24
    1ec2:	6c ee       	ldi	r22, 0xEC	; 236
    1ec4:	71 e1       	ldi	r23, 0x11	; 17
    1ec6:	83 e8       	ldi	r24, 0x83	; 131
    1ec8:	93 e4       	ldi	r25, 0x43	; 67
    1eca:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    1ece:	2f e6       	ldi	r18, 0x6F	; 111
    1ed0:	32 e1       	ldi	r19, 0x12	; 18
    1ed2:	43 e8       	ldi	r20, 0x83	; 131
    1ed4:	5f e3       	ldi	r21, 0x3F	; 63
    1ed6:	0e 94 3f 10 	call	0x207e	; 0x207e <__divsf3>
    1eda:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fixunssfsi>
    1ede:	62 bf       	out	0x32, r22	; 50
    1ee0:	85 e8       	ldi	r24, 0x85	; 133
    1ee2:	83 bf       	out	0x33, r24	; 51
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <Timer0_Delay+0x2c2>
    1ee6:	12 be       	out	0x32, r1	; 50
    1ee8:	13 be       	out	0x33, r1	; 51
    1eea:	08 b6       	in	r0, 0x38	; 56
    1eec:	00 fe       	sbrs	r0, 0
    1eee:	fd cf       	rjmp	.-6      	; 0x1eea <Timer0_Delay+0x2c2>
    1ef0:	88 b7       	in	r24, 0x38	; 56
    1ef2:	81 60       	ori	r24, 0x01	; 1
    1ef4:	88 bf       	out	0x38, r24	; 56
    1ef6:	13 be       	out	0x33, r1	; 51
    1ef8:	27 96       	adiw	r28, 0x07	; 7
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	bf 90       	pop	r11
    1f14:	af 90       	pop	r10
    1f16:	9f 90       	pop	r9
    1f18:	8f 90       	pop	r8
    1f1a:	08 95       	ret

00001f1c <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1f1c:	1f 92       	push	r1
    1f1e:	0f 92       	push	r0
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	0f 92       	push	r0
    1f24:	11 24       	eor	r1, r1
    1f26:	2f 93       	push	r18
    1f28:	3f 93       	push	r19
    1f2a:	4f 93       	push	r20
    1f2c:	5f 93       	push	r21
    1f2e:	6f 93       	push	r22
    1f30:	7f 93       	push	r23
    1f32:	8f 93       	push	r24
    1f34:	9f 93       	push	r25
    1f36:	af 93       	push	r26
    1f38:	bf 93       	push	r27
    1f3a:	ef 93       	push	r30
    1f3c:	ff 93       	push	r31
	if(g_callBackPtr_0 !=  ((void*)0))
    1f3e:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <g_callBackPtr_0>
    1f42:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <g_callBackPtr_0+0x1>
    1f46:	30 97       	sbiw	r30, 0x00	; 0
    1f48:	b9 f0       	breq	.+46     	; 0x1f78 <__vector_11+0x5c>
	{
		if(NO_OF_OVERFLOWS > 0)
    1f4a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <NO_OF_OVERFLOWS>
    1f4e:	88 23       	and	r24, r24
    1f50:	79 f0       	breq	.+30     	; 0x1f70 <__vector_11+0x54>
		{
			g_tick++;
    1f52:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <g_tick>
    1f56:	8f 5f       	subi	r24, 0xFF	; 255
    1f58:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <g_tick>
			if(g_tick == NO_OF_OVERFLOWS)
    1f5c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <g_tick>
    1f60:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <NO_OF_OVERFLOWS>
    1f64:	98 13       	cpse	r25, r24
    1f66:	08 c0       	rjmp	.+16     	; 0x1f78 <__vector_11+0x5c>
			{
				g_callBackPtr_0();
    1f68:	09 95       	icall
				g_tick = 0; //clear the tick counter again to start new count
    1f6a:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <g_tick>
    1f6e:	04 c0       	rjmp	.+8      	; 0x1f78 <__vector_11+0x5c>
			}
		}
		else
		{
			g_callBackPtr_0();
    1f70:	09 95       	icall
			TCNT0=init_value;
    1f72:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
    1f76:	82 bf       	out	0x32, r24	; 50
		}
	}
}
    1f78:	ff 91       	pop	r31
    1f7a:	ef 91       	pop	r30
    1f7c:	bf 91       	pop	r27
    1f7e:	af 91       	pop	r26
    1f80:	9f 91       	pop	r25
    1f82:	8f 91       	pop	r24
    1f84:	7f 91       	pop	r23
    1f86:	6f 91       	pop	r22
    1f88:	5f 91       	pop	r21
    1f8a:	4f 91       	pop	r20
    1f8c:	3f 91       	pop	r19
    1f8e:	2f 91       	pop	r18
    1f90:	0f 90       	pop	r0
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	0f 90       	pop	r0
    1f96:	1f 90       	pop	r1
    1f98:	18 95       	reti

00001f9a <__subsf3>:
    1f9a:	50 58       	subi	r21, 0x80	; 128

00001f9c <__addsf3>:
    1f9c:	bb 27       	eor	r27, r27
    1f9e:	aa 27       	eor	r26, r26
    1fa0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__addsf3x>
    1fa4:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__fp_round>
    1fa8:	0e 94 4a 11 	call	0x2294	; 0x2294 <__fp_pscA>
    1fac:	38 f0       	brcs	.+14     	; 0x1fbc <__addsf3+0x20>
    1fae:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__fp_pscB>
    1fb2:	20 f0       	brcs	.+8      	; 0x1fbc <__addsf3+0x20>
    1fb4:	39 f4       	brne	.+14     	; 0x1fc4 <__addsf3+0x28>
    1fb6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fb8:	19 f4       	brne	.+6      	; 0x1fc0 <__addsf3+0x24>
    1fba:	26 f4       	brtc	.+8      	; 0x1fc4 <__addsf3+0x28>
    1fbc:	0c 94 47 11 	jmp	0x228e	; 0x228e <__fp_nan>
    1fc0:	0e f4       	brtc	.+2      	; 0x1fc4 <__addsf3+0x28>
    1fc2:	e0 95       	com	r30
    1fc4:	e7 fb       	bst	r30, 7
    1fc6:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__fp_inf>

00001fca <__addsf3x>:
    1fca:	e9 2f       	mov	r30, r25
    1fcc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__fp_split3>
    1fd0:	58 f3       	brcs	.-42     	; 0x1fa8 <__addsf3+0xc>
    1fd2:	ba 17       	cp	r27, r26
    1fd4:	62 07       	cpc	r22, r18
    1fd6:	73 07       	cpc	r23, r19
    1fd8:	84 07       	cpc	r24, r20
    1fda:	95 07       	cpc	r25, r21
    1fdc:	20 f0       	brcs	.+8      	; 0x1fe6 <__addsf3x+0x1c>
    1fde:	79 f4       	brne	.+30     	; 0x1ffe <__addsf3x+0x34>
    1fe0:	a6 f5       	brtc	.+104    	; 0x204a <__addsf3x+0x80>
    1fe2:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__fp_zero>
    1fe6:	0e f4       	brtc	.+2      	; 0x1fea <__addsf3x+0x20>
    1fe8:	e0 95       	com	r30
    1fea:	0b 2e       	mov	r0, r27
    1fec:	ba 2f       	mov	r27, r26
    1fee:	a0 2d       	mov	r26, r0
    1ff0:	0b 01       	movw	r0, r22
    1ff2:	b9 01       	movw	r22, r18
    1ff4:	90 01       	movw	r18, r0
    1ff6:	0c 01       	movw	r0, r24
    1ff8:	ca 01       	movw	r24, r20
    1ffa:	a0 01       	movw	r20, r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	ff 27       	eor	r31, r31
    2000:	59 1b       	sub	r21, r25
    2002:	99 f0       	breq	.+38     	; 0x202a <__addsf3x+0x60>
    2004:	59 3f       	cpi	r21, 0xF9	; 249
    2006:	50 f4       	brcc	.+20     	; 0x201c <__addsf3x+0x52>
    2008:	50 3e       	cpi	r21, 0xE0	; 224
    200a:	68 f1       	brcs	.+90     	; 0x2066 <__addsf3x+0x9c>
    200c:	1a 16       	cp	r1, r26
    200e:	f0 40       	sbci	r31, 0x00	; 0
    2010:	a2 2f       	mov	r26, r18
    2012:	23 2f       	mov	r18, r19
    2014:	34 2f       	mov	r19, r20
    2016:	44 27       	eor	r20, r20
    2018:	58 5f       	subi	r21, 0xF8	; 248
    201a:	f3 cf       	rjmp	.-26     	; 0x2002 <__addsf3x+0x38>
    201c:	46 95       	lsr	r20
    201e:	37 95       	ror	r19
    2020:	27 95       	ror	r18
    2022:	a7 95       	ror	r26
    2024:	f0 40       	sbci	r31, 0x00	; 0
    2026:	53 95       	inc	r21
    2028:	c9 f7       	brne	.-14     	; 0x201c <__addsf3x+0x52>
    202a:	7e f4       	brtc	.+30     	; 0x204a <__addsf3x+0x80>
    202c:	1f 16       	cp	r1, r31
    202e:	ba 0b       	sbc	r27, r26
    2030:	62 0b       	sbc	r22, r18
    2032:	73 0b       	sbc	r23, r19
    2034:	84 0b       	sbc	r24, r20
    2036:	ba f0       	brmi	.+46     	; 0x2066 <__addsf3x+0x9c>
    2038:	91 50       	subi	r25, 0x01	; 1
    203a:	a1 f0       	breq	.+40     	; 0x2064 <__addsf3x+0x9a>
    203c:	ff 0f       	add	r31, r31
    203e:	bb 1f       	adc	r27, r27
    2040:	66 1f       	adc	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	88 1f       	adc	r24, r24
    2046:	c2 f7       	brpl	.-16     	; 0x2038 <__addsf3x+0x6e>
    2048:	0e c0       	rjmp	.+28     	; 0x2066 <__addsf3x+0x9c>
    204a:	ba 0f       	add	r27, r26
    204c:	62 1f       	adc	r22, r18
    204e:	73 1f       	adc	r23, r19
    2050:	84 1f       	adc	r24, r20
    2052:	48 f4       	brcc	.+18     	; 0x2066 <__addsf3x+0x9c>
    2054:	87 95       	ror	r24
    2056:	77 95       	ror	r23
    2058:	67 95       	ror	r22
    205a:	b7 95       	ror	r27
    205c:	f7 95       	ror	r31
    205e:	9e 3f       	cpi	r25, 0xFE	; 254
    2060:	08 f0       	brcs	.+2      	; 0x2064 <__addsf3x+0x9a>
    2062:	b0 cf       	rjmp	.-160    	; 0x1fc4 <__addsf3+0x28>
    2064:	93 95       	inc	r25
    2066:	88 0f       	add	r24, r24
    2068:	08 f0       	brcs	.+2      	; 0x206c <__addsf3x+0xa2>
    206a:	99 27       	eor	r25, r25
    206c:	ee 0f       	add	r30, r30
    206e:	97 95       	ror	r25
    2070:	87 95       	ror	r24
    2072:	08 95       	ret

00002074 <__cmpsf2>:
    2074:	0e 94 1d 11 	call	0x223a	; 0x223a <__fp_cmp>
    2078:	08 f4       	brcc	.+2      	; 0x207c <__cmpsf2+0x8>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	08 95       	ret

0000207e <__divsf3>:
    207e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divsf3x>
    2082:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__fp_round>
    2086:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__fp_pscB>
    208a:	58 f0       	brcs	.+22     	; 0x20a2 <__divsf3+0x24>
    208c:	0e 94 4a 11 	call	0x2294	; 0x2294 <__fp_pscA>
    2090:	40 f0       	brcs	.+16     	; 0x20a2 <__divsf3+0x24>
    2092:	29 f4       	brne	.+10     	; 0x209e <__divsf3+0x20>
    2094:	5f 3f       	cpi	r21, 0xFF	; 255
    2096:	29 f0       	breq	.+10     	; 0x20a2 <__divsf3+0x24>
    2098:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__fp_inf>
    209c:	51 11       	cpse	r21, r1
    209e:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__fp_szero>
    20a2:	0c 94 47 11 	jmp	0x228e	; 0x228e <__fp_nan>

000020a6 <__divsf3x>:
    20a6:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__fp_split3>
    20aa:	68 f3       	brcs	.-38     	; 0x2086 <__divsf3+0x8>

000020ac <__divsf3_pse>:
    20ac:	99 23       	and	r25, r25
    20ae:	b1 f3       	breq	.-20     	; 0x209c <__divsf3+0x1e>
    20b0:	55 23       	and	r21, r21
    20b2:	91 f3       	breq	.-28     	; 0x2098 <__divsf3+0x1a>
    20b4:	95 1b       	sub	r25, r21
    20b6:	55 0b       	sbc	r21, r21
    20b8:	bb 27       	eor	r27, r27
    20ba:	aa 27       	eor	r26, r26
    20bc:	62 17       	cp	r22, r18
    20be:	73 07       	cpc	r23, r19
    20c0:	84 07       	cpc	r24, r20
    20c2:	38 f0       	brcs	.+14     	; 0x20d2 <__divsf3_pse+0x26>
    20c4:	9f 5f       	subi	r25, 0xFF	; 255
    20c6:	5f 4f       	sbci	r21, 0xFF	; 255
    20c8:	22 0f       	add	r18, r18
    20ca:	33 1f       	adc	r19, r19
    20cc:	44 1f       	adc	r20, r20
    20ce:	aa 1f       	adc	r26, r26
    20d0:	a9 f3       	breq	.-22     	; 0x20bc <__divsf3_pse+0x10>
    20d2:	35 d0       	rcall	.+106    	; 0x213e <__divsf3_pse+0x92>
    20d4:	0e 2e       	mov	r0, r30
    20d6:	3a f0       	brmi	.+14     	; 0x20e6 <__divsf3_pse+0x3a>
    20d8:	e0 e8       	ldi	r30, 0x80	; 128
    20da:	32 d0       	rcall	.+100    	; 0x2140 <__divsf3_pse+0x94>
    20dc:	91 50       	subi	r25, 0x01	; 1
    20de:	50 40       	sbci	r21, 0x00	; 0
    20e0:	e6 95       	lsr	r30
    20e2:	00 1c       	adc	r0, r0
    20e4:	ca f7       	brpl	.-14     	; 0x20d8 <__divsf3_pse+0x2c>
    20e6:	2b d0       	rcall	.+86     	; 0x213e <__divsf3_pse+0x92>
    20e8:	fe 2f       	mov	r31, r30
    20ea:	29 d0       	rcall	.+82     	; 0x213e <__divsf3_pse+0x92>
    20ec:	66 0f       	add	r22, r22
    20ee:	77 1f       	adc	r23, r23
    20f0:	88 1f       	adc	r24, r24
    20f2:	bb 1f       	adc	r27, r27
    20f4:	26 17       	cp	r18, r22
    20f6:	37 07       	cpc	r19, r23
    20f8:	48 07       	cpc	r20, r24
    20fa:	ab 07       	cpc	r26, r27
    20fc:	b0 e8       	ldi	r27, 0x80	; 128
    20fe:	09 f0       	breq	.+2      	; 0x2102 <__divsf3_pse+0x56>
    2100:	bb 0b       	sbc	r27, r27
    2102:	80 2d       	mov	r24, r0
    2104:	bf 01       	movw	r22, r30
    2106:	ff 27       	eor	r31, r31
    2108:	93 58       	subi	r25, 0x83	; 131
    210a:	5f 4f       	sbci	r21, 0xFF	; 255
    210c:	3a f0       	brmi	.+14     	; 0x211c <__divsf3_pse+0x70>
    210e:	9e 3f       	cpi	r25, 0xFE	; 254
    2110:	51 05       	cpc	r21, r1
    2112:	78 f0       	brcs	.+30     	; 0x2132 <__divsf3_pse+0x86>
    2114:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__fp_inf>
    2118:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__fp_szero>
    211c:	5f 3f       	cpi	r21, 0xFF	; 255
    211e:	e4 f3       	brlt	.-8      	; 0x2118 <__divsf3_pse+0x6c>
    2120:	98 3e       	cpi	r25, 0xE8	; 232
    2122:	d4 f3       	brlt	.-12     	; 0x2118 <__divsf3_pse+0x6c>
    2124:	86 95       	lsr	r24
    2126:	77 95       	ror	r23
    2128:	67 95       	ror	r22
    212a:	b7 95       	ror	r27
    212c:	f7 95       	ror	r31
    212e:	9f 5f       	subi	r25, 0xFF	; 255
    2130:	c9 f7       	brne	.-14     	; 0x2124 <__divsf3_pse+0x78>
    2132:	88 0f       	add	r24, r24
    2134:	91 1d       	adc	r25, r1
    2136:	96 95       	lsr	r25
    2138:	87 95       	ror	r24
    213a:	97 f9       	bld	r25, 7
    213c:	08 95       	ret
    213e:	e1 e0       	ldi	r30, 0x01	; 1
    2140:	66 0f       	add	r22, r22
    2142:	77 1f       	adc	r23, r23
    2144:	88 1f       	adc	r24, r24
    2146:	bb 1f       	adc	r27, r27
    2148:	62 17       	cp	r22, r18
    214a:	73 07       	cpc	r23, r19
    214c:	84 07       	cpc	r24, r20
    214e:	ba 07       	cpc	r27, r26
    2150:	20 f0       	brcs	.+8      	; 0x215a <__divsf3_pse+0xae>
    2152:	62 1b       	sub	r22, r18
    2154:	73 0b       	sbc	r23, r19
    2156:	84 0b       	sbc	r24, r20
    2158:	ba 0b       	sbc	r27, r26
    215a:	ee 1f       	adc	r30, r30
    215c:	88 f7       	brcc	.-30     	; 0x2140 <__divsf3_pse+0x94>
    215e:	e0 95       	com	r30
    2160:	08 95       	ret

00002162 <__fixunssfsi>:
    2162:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__fp_splitA>
    2166:	88 f0       	brcs	.+34     	; 0x218a <__fixunssfsi+0x28>
    2168:	9f 57       	subi	r25, 0x7F	; 127
    216a:	98 f0       	brcs	.+38     	; 0x2192 <__fixunssfsi+0x30>
    216c:	b9 2f       	mov	r27, r25
    216e:	99 27       	eor	r25, r25
    2170:	b7 51       	subi	r27, 0x17	; 23
    2172:	b0 f0       	brcs	.+44     	; 0x21a0 <__fixunssfsi+0x3e>
    2174:	e1 f0       	breq	.+56     	; 0x21ae <__fixunssfsi+0x4c>
    2176:	66 0f       	add	r22, r22
    2178:	77 1f       	adc	r23, r23
    217a:	88 1f       	adc	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	1a f0       	brmi	.+6      	; 0x2186 <__fixunssfsi+0x24>
    2180:	ba 95       	dec	r27
    2182:	c9 f7       	brne	.-14     	; 0x2176 <__fixunssfsi+0x14>
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <__fixunssfsi+0x4c>
    2186:	b1 30       	cpi	r27, 0x01	; 1
    2188:	91 f0       	breq	.+36     	; 0x21ae <__fixunssfsi+0x4c>
    218a:	0e 94 8b 11 	call	0x2316	; 0x2316 <__fp_zero>
    218e:	b1 e0       	ldi	r27, 0x01	; 1
    2190:	08 95       	ret
    2192:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__fp_zero>
    2196:	67 2f       	mov	r22, r23
    2198:	78 2f       	mov	r23, r24
    219a:	88 27       	eor	r24, r24
    219c:	b8 5f       	subi	r27, 0xF8	; 248
    219e:	39 f0       	breq	.+14     	; 0x21ae <__fixunssfsi+0x4c>
    21a0:	b9 3f       	cpi	r27, 0xF9	; 249
    21a2:	cc f3       	brlt	.-14     	; 0x2196 <__fixunssfsi+0x34>
    21a4:	86 95       	lsr	r24
    21a6:	77 95       	ror	r23
    21a8:	67 95       	ror	r22
    21aa:	b3 95       	inc	r27
    21ac:	d9 f7       	brne	.-10     	; 0x21a4 <__fixunssfsi+0x42>
    21ae:	3e f4       	brtc	.+14     	; 0x21be <__fixunssfsi+0x5c>
    21b0:	90 95       	com	r25
    21b2:	80 95       	com	r24
    21b4:	70 95       	com	r23
    21b6:	61 95       	neg	r22
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ba:	8f 4f       	sbci	r24, 0xFF	; 255
    21bc:	9f 4f       	sbci	r25, 0xFF	; 255
    21be:	08 95       	ret

000021c0 <__floatunsisf>:
    21c0:	e8 94       	clt
    21c2:	09 c0       	rjmp	.+18     	; 0x21d6 <__floatsisf+0x12>

000021c4 <__floatsisf>:
    21c4:	97 fb       	bst	r25, 7
    21c6:	3e f4       	brtc	.+14     	; 0x21d6 <__floatsisf+0x12>
    21c8:	90 95       	com	r25
    21ca:	80 95       	com	r24
    21cc:	70 95       	com	r23
    21ce:	61 95       	neg	r22
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	8f 4f       	sbci	r24, 0xFF	; 255
    21d4:	9f 4f       	sbci	r25, 0xFF	; 255
    21d6:	99 23       	and	r25, r25
    21d8:	a9 f0       	breq	.+42     	; 0x2204 <__floatsisf+0x40>
    21da:	f9 2f       	mov	r31, r25
    21dc:	96 e9       	ldi	r25, 0x96	; 150
    21de:	bb 27       	eor	r27, r27
    21e0:	93 95       	inc	r25
    21e2:	f6 95       	lsr	r31
    21e4:	87 95       	ror	r24
    21e6:	77 95       	ror	r23
    21e8:	67 95       	ror	r22
    21ea:	b7 95       	ror	r27
    21ec:	f1 11       	cpse	r31, r1
    21ee:	f8 cf       	rjmp	.-16     	; 0x21e0 <__floatsisf+0x1c>
    21f0:	fa f4       	brpl	.+62     	; 0x2230 <__floatsisf+0x6c>
    21f2:	bb 0f       	add	r27, r27
    21f4:	11 f4       	brne	.+4      	; 0x21fa <__floatsisf+0x36>
    21f6:	60 ff       	sbrs	r22, 0
    21f8:	1b c0       	rjmp	.+54     	; 0x2230 <__floatsisf+0x6c>
    21fa:	6f 5f       	subi	r22, 0xFF	; 255
    21fc:	7f 4f       	sbci	r23, 0xFF	; 255
    21fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	16 c0       	rjmp	.+44     	; 0x2230 <__floatsisf+0x6c>
    2204:	88 23       	and	r24, r24
    2206:	11 f0       	breq	.+4      	; 0x220c <__floatsisf+0x48>
    2208:	96 e9       	ldi	r25, 0x96	; 150
    220a:	11 c0       	rjmp	.+34     	; 0x222e <__floatsisf+0x6a>
    220c:	77 23       	and	r23, r23
    220e:	21 f0       	breq	.+8      	; 0x2218 <__floatsisf+0x54>
    2210:	9e e8       	ldi	r25, 0x8E	; 142
    2212:	87 2f       	mov	r24, r23
    2214:	76 2f       	mov	r23, r22
    2216:	05 c0       	rjmp	.+10     	; 0x2222 <__floatsisf+0x5e>
    2218:	66 23       	and	r22, r22
    221a:	71 f0       	breq	.+28     	; 0x2238 <__floatsisf+0x74>
    221c:	96 e8       	ldi	r25, 0x86	; 134
    221e:	86 2f       	mov	r24, r22
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	2a f0       	brmi	.+10     	; 0x2230 <__floatsisf+0x6c>
    2226:	9a 95       	dec	r25
    2228:	66 0f       	add	r22, r22
    222a:	77 1f       	adc	r23, r23
    222c:	88 1f       	adc	r24, r24
    222e:	da f7       	brpl	.-10     	; 0x2226 <__floatsisf+0x62>
    2230:	88 0f       	add	r24, r24
    2232:	96 95       	lsr	r25
    2234:	87 95       	ror	r24
    2236:	97 f9       	bld	r25, 7
    2238:	08 95       	ret

0000223a <__fp_cmp>:
    223a:	99 0f       	add	r25, r25
    223c:	00 08       	sbc	r0, r0
    223e:	55 0f       	add	r21, r21
    2240:	aa 0b       	sbc	r26, r26
    2242:	e0 e8       	ldi	r30, 0x80	; 128
    2244:	fe ef       	ldi	r31, 0xFE	; 254
    2246:	16 16       	cp	r1, r22
    2248:	17 06       	cpc	r1, r23
    224a:	e8 07       	cpc	r30, r24
    224c:	f9 07       	cpc	r31, r25
    224e:	c0 f0       	brcs	.+48     	; 0x2280 <__fp_cmp+0x46>
    2250:	12 16       	cp	r1, r18
    2252:	13 06       	cpc	r1, r19
    2254:	e4 07       	cpc	r30, r20
    2256:	f5 07       	cpc	r31, r21
    2258:	98 f0       	brcs	.+38     	; 0x2280 <__fp_cmp+0x46>
    225a:	62 1b       	sub	r22, r18
    225c:	73 0b       	sbc	r23, r19
    225e:	84 0b       	sbc	r24, r20
    2260:	95 0b       	sbc	r25, r21
    2262:	39 f4       	brne	.+14     	; 0x2272 <__fp_cmp+0x38>
    2264:	0a 26       	eor	r0, r26
    2266:	61 f0       	breq	.+24     	; 0x2280 <__fp_cmp+0x46>
    2268:	23 2b       	or	r18, r19
    226a:	24 2b       	or	r18, r20
    226c:	25 2b       	or	r18, r21
    226e:	21 f4       	brne	.+8      	; 0x2278 <__fp_cmp+0x3e>
    2270:	08 95       	ret
    2272:	0a 26       	eor	r0, r26
    2274:	09 f4       	brne	.+2      	; 0x2278 <__fp_cmp+0x3e>
    2276:	a1 40       	sbci	r26, 0x01	; 1
    2278:	a6 95       	lsr	r26
    227a:	8f ef       	ldi	r24, 0xFF	; 255
    227c:	81 1d       	adc	r24, r1
    227e:	81 1d       	adc	r24, r1
    2280:	08 95       	ret

00002282 <__fp_inf>:
    2282:	97 f9       	bld	r25, 7
    2284:	9f 67       	ori	r25, 0x7F	; 127
    2286:	80 e8       	ldi	r24, 0x80	; 128
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	08 95       	ret

0000228e <__fp_nan>:
    228e:	9f ef       	ldi	r25, 0xFF	; 255
    2290:	80 ec       	ldi	r24, 0xC0	; 192
    2292:	08 95       	ret

00002294 <__fp_pscA>:
    2294:	00 24       	eor	r0, r0
    2296:	0a 94       	dec	r0
    2298:	16 16       	cp	r1, r22
    229a:	17 06       	cpc	r1, r23
    229c:	18 06       	cpc	r1, r24
    229e:	09 06       	cpc	r0, r25
    22a0:	08 95       	ret

000022a2 <__fp_pscB>:
    22a2:	00 24       	eor	r0, r0
    22a4:	0a 94       	dec	r0
    22a6:	12 16       	cp	r1, r18
    22a8:	13 06       	cpc	r1, r19
    22aa:	14 06       	cpc	r1, r20
    22ac:	05 06       	cpc	r0, r21
    22ae:	08 95       	ret

000022b0 <__fp_round>:
    22b0:	09 2e       	mov	r0, r25
    22b2:	03 94       	inc	r0
    22b4:	00 0c       	add	r0, r0
    22b6:	11 f4       	brne	.+4      	; 0x22bc <__fp_round+0xc>
    22b8:	88 23       	and	r24, r24
    22ba:	52 f0       	brmi	.+20     	; 0x22d0 <__fp_round+0x20>
    22bc:	bb 0f       	add	r27, r27
    22be:	40 f4       	brcc	.+16     	; 0x22d0 <__fp_round+0x20>
    22c0:	bf 2b       	or	r27, r31
    22c2:	11 f4       	brne	.+4      	; 0x22c8 <__fp_round+0x18>
    22c4:	60 ff       	sbrs	r22, 0
    22c6:	04 c0       	rjmp	.+8      	; 0x22d0 <__fp_round+0x20>
    22c8:	6f 5f       	subi	r22, 0xFF	; 255
    22ca:	7f 4f       	sbci	r23, 0xFF	; 255
    22cc:	8f 4f       	sbci	r24, 0xFF	; 255
    22ce:	9f 4f       	sbci	r25, 0xFF	; 255
    22d0:	08 95       	ret

000022d2 <__fp_split3>:
    22d2:	57 fd       	sbrc	r21, 7
    22d4:	90 58       	subi	r25, 0x80	; 128
    22d6:	44 0f       	add	r20, r20
    22d8:	55 1f       	adc	r21, r21
    22da:	59 f0       	breq	.+22     	; 0x22f2 <__fp_splitA+0x10>
    22dc:	5f 3f       	cpi	r21, 0xFF	; 255
    22de:	71 f0       	breq	.+28     	; 0x22fc <__fp_splitA+0x1a>
    22e0:	47 95       	ror	r20

000022e2 <__fp_splitA>:
    22e2:	88 0f       	add	r24, r24
    22e4:	97 fb       	bst	r25, 7
    22e6:	99 1f       	adc	r25, r25
    22e8:	61 f0       	breq	.+24     	; 0x2302 <__fp_splitA+0x20>
    22ea:	9f 3f       	cpi	r25, 0xFF	; 255
    22ec:	79 f0       	breq	.+30     	; 0x230c <__fp_splitA+0x2a>
    22ee:	87 95       	ror	r24
    22f0:	08 95       	ret
    22f2:	12 16       	cp	r1, r18
    22f4:	13 06       	cpc	r1, r19
    22f6:	14 06       	cpc	r1, r20
    22f8:	55 1f       	adc	r21, r21
    22fa:	f2 cf       	rjmp	.-28     	; 0x22e0 <__fp_split3+0xe>
    22fc:	46 95       	lsr	r20
    22fe:	f1 df       	rcall	.-30     	; 0x22e2 <__fp_splitA>
    2300:	08 c0       	rjmp	.+16     	; 0x2312 <__fp_splitA+0x30>
    2302:	16 16       	cp	r1, r22
    2304:	17 06       	cpc	r1, r23
    2306:	18 06       	cpc	r1, r24
    2308:	99 1f       	adc	r25, r25
    230a:	f1 cf       	rjmp	.-30     	; 0x22ee <__fp_splitA+0xc>
    230c:	86 95       	lsr	r24
    230e:	71 05       	cpc	r23, r1
    2310:	61 05       	cpc	r22, r1
    2312:	08 94       	sec
    2314:	08 95       	ret

00002316 <__fp_zero>:
    2316:	e8 94       	clt

00002318 <__fp_szero>:
    2318:	bb 27       	eor	r27, r27
    231a:	66 27       	eor	r22, r22
    231c:	77 27       	eor	r23, r23
    231e:	cb 01       	movw	r24, r22
    2320:	97 f9       	bld	r25, 7
    2322:	08 95       	ret

00002324 <__gesf2>:
    2324:	0e 94 1d 11 	call	0x223a	; 0x223a <__fp_cmp>
    2328:	08 f4       	brcc	.+2      	; 0x232c <__gesf2+0x8>
    232a:	8f ef       	ldi	r24, 0xFF	; 255
    232c:	08 95       	ret

0000232e <__mulsf3>:
    232e:	0e 94 aa 11 	call	0x2354	; 0x2354 <__mulsf3x>
    2332:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__fp_round>
    2336:	0e 94 4a 11 	call	0x2294	; 0x2294 <__fp_pscA>
    233a:	38 f0       	brcs	.+14     	; 0x234a <__mulsf3+0x1c>
    233c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__fp_pscB>
    2340:	20 f0       	brcs	.+8      	; 0x234a <__mulsf3+0x1c>
    2342:	95 23       	and	r25, r21
    2344:	11 f0       	breq	.+4      	; 0x234a <__mulsf3+0x1c>
    2346:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__fp_inf>
    234a:	0c 94 47 11 	jmp	0x228e	; 0x228e <__fp_nan>
    234e:	11 24       	eor	r1, r1
    2350:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__fp_szero>

00002354 <__mulsf3x>:
    2354:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__fp_split3>
    2358:	70 f3       	brcs	.-36     	; 0x2336 <__mulsf3+0x8>

0000235a <__mulsf3_pse>:
    235a:	95 9f       	mul	r25, r21
    235c:	c1 f3       	breq	.-16     	; 0x234e <__mulsf3+0x20>
    235e:	95 0f       	add	r25, r21
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	55 1f       	adc	r21, r21
    2364:	62 9f       	mul	r22, r18
    2366:	f0 01       	movw	r30, r0
    2368:	72 9f       	mul	r23, r18
    236a:	bb 27       	eor	r27, r27
    236c:	f0 0d       	add	r31, r0
    236e:	b1 1d       	adc	r27, r1
    2370:	63 9f       	mul	r22, r19
    2372:	aa 27       	eor	r26, r26
    2374:	f0 0d       	add	r31, r0
    2376:	b1 1d       	adc	r27, r1
    2378:	aa 1f       	adc	r26, r26
    237a:	64 9f       	mul	r22, r20
    237c:	66 27       	eor	r22, r22
    237e:	b0 0d       	add	r27, r0
    2380:	a1 1d       	adc	r26, r1
    2382:	66 1f       	adc	r22, r22
    2384:	82 9f       	mul	r24, r18
    2386:	22 27       	eor	r18, r18
    2388:	b0 0d       	add	r27, r0
    238a:	a1 1d       	adc	r26, r1
    238c:	62 1f       	adc	r22, r18
    238e:	73 9f       	mul	r23, r19
    2390:	b0 0d       	add	r27, r0
    2392:	a1 1d       	adc	r26, r1
    2394:	62 1f       	adc	r22, r18
    2396:	83 9f       	mul	r24, r19
    2398:	a0 0d       	add	r26, r0
    239a:	61 1d       	adc	r22, r1
    239c:	22 1f       	adc	r18, r18
    239e:	74 9f       	mul	r23, r20
    23a0:	33 27       	eor	r19, r19
    23a2:	a0 0d       	add	r26, r0
    23a4:	61 1d       	adc	r22, r1
    23a6:	23 1f       	adc	r18, r19
    23a8:	84 9f       	mul	r24, r20
    23aa:	60 0d       	add	r22, r0
    23ac:	21 1d       	adc	r18, r1
    23ae:	82 2f       	mov	r24, r18
    23b0:	76 2f       	mov	r23, r22
    23b2:	6a 2f       	mov	r22, r26
    23b4:	11 24       	eor	r1, r1
    23b6:	9f 57       	subi	r25, 0x7F	; 127
    23b8:	50 40       	sbci	r21, 0x00	; 0
    23ba:	9a f0       	brmi	.+38     	; 0x23e2 <__mulsf3_pse+0x88>
    23bc:	f1 f0       	breq	.+60     	; 0x23fa <__mulsf3_pse+0xa0>
    23be:	88 23       	and	r24, r24
    23c0:	4a f0       	brmi	.+18     	; 0x23d4 <__mulsf3_pse+0x7a>
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	bb 1f       	adc	r27, r27
    23c8:	66 1f       	adc	r22, r22
    23ca:	77 1f       	adc	r23, r23
    23cc:	88 1f       	adc	r24, r24
    23ce:	91 50       	subi	r25, 0x01	; 1
    23d0:	50 40       	sbci	r21, 0x00	; 0
    23d2:	a9 f7       	brne	.-22     	; 0x23be <__mulsf3_pse+0x64>
    23d4:	9e 3f       	cpi	r25, 0xFE	; 254
    23d6:	51 05       	cpc	r21, r1
    23d8:	80 f0       	brcs	.+32     	; 0x23fa <__mulsf3_pse+0xa0>
    23da:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__fp_inf>
    23de:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__fp_szero>
    23e2:	5f 3f       	cpi	r21, 0xFF	; 255
    23e4:	e4 f3       	brlt	.-8      	; 0x23de <__mulsf3_pse+0x84>
    23e6:	98 3e       	cpi	r25, 0xE8	; 232
    23e8:	d4 f3       	brlt	.-12     	; 0x23de <__mulsf3_pse+0x84>
    23ea:	86 95       	lsr	r24
    23ec:	77 95       	ror	r23
    23ee:	67 95       	ror	r22
    23f0:	b7 95       	ror	r27
    23f2:	f7 95       	ror	r31
    23f4:	e7 95       	ror	r30
    23f6:	9f 5f       	subi	r25, 0xFF	; 255
    23f8:	c1 f7       	brne	.-16     	; 0x23ea <__mulsf3_pse+0x90>
    23fa:	fe 2b       	or	r31, r30
    23fc:	88 0f       	add	r24, r24
    23fe:	91 1d       	adc	r25, r1
    2400:	96 95       	lsr	r25
    2402:	87 95       	ror	r24
    2404:	97 f9       	bld	r25, 7
    2406:	08 95       	ret

00002408 <atof>:
    2408:	66 27       	eor	r22, r22
    240a:	77 27       	eor	r23, r23
    240c:	0c 94 20 12 	jmp	0x2440	; 0x2440 <strtod>

00002410 <strcmp>:
    2410:	fb 01       	movw	r30, r22
    2412:	dc 01       	movw	r26, r24
    2414:	8d 91       	ld	r24, X+
    2416:	01 90       	ld	r0, Z+
    2418:	80 19       	sub	r24, r0
    241a:	01 10       	cpse	r0, r1
    241c:	d9 f3       	breq	.-10     	; 0x2414 <strcmp+0x4>
    241e:	99 0b       	sbc	r25, r25
    2420:	08 95       	ret

00002422 <strncpy>:
    2422:	fb 01       	movw	r30, r22
    2424:	dc 01       	movw	r26, r24
    2426:	41 50       	subi	r20, 0x01	; 1
    2428:	50 40       	sbci	r21, 0x00	; 0
    242a:	48 f0       	brcs	.+18     	; 0x243e <strncpy+0x1c>
    242c:	01 90       	ld	r0, Z+
    242e:	0d 92       	st	X+, r0
    2430:	00 20       	and	r0, r0
    2432:	c9 f7       	brne	.-14     	; 0x2426 <strncpy+0x4>
    2434:	01 c0       	rjmp	.+2      	; 0x2438 <strncpy+0x16>
    2436:	1d 92       	st	X+, r1
    2438:	41 50       	subi	r20, 0x01	; 1
    243a:	50 40       	sbci	r21, 0x00	; 0
    243c:	e0 f7       	brcc	.-8      	; 0x2436 <strncpy+0x14>
    243e:	08 95       	ret

00002440 <strtod>:
    2440:	a0 e0       	ldi	r26, 0x00	; 0
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e6 e2       	ldi	r30, 0x26	; 38
    2446:	f2 e1       	ldi	r31, 0x12	; 18
    2448:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__prologue_saves__+0xc>
    244c:	ec 01       	movw	r28, r24
    244e:	6b 01       	movw	r12, r22
    2450:	61 15       	cp	r22, r1
    2452:	71 05       	cpc	r23, r1
    2454:	19 f0       	breq	.+6      	; 0x245c <strtod+0x1c>
    2456:	fb 01       	movw	r30, r22
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
    245c:	7e 01       	movw	r14, r28
    245e:	ff ef       	ldi	r31, 0xFF	; 255
    2460:	ef 1a       	sub	r14, r31
    2462:	ff 0a       	sbc	r15, r31
    2464:	08 81       	ld	r16, Y
    2466:	80 2f       	mov	r24, r16
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <isspace>
    246e:	89 2b       	or	r24, r25
    2470:	11 f0       	breq	.+4      	; 0x2476 <strtod+0x36>
    2472:	e7 01       	movw	r28, r14
    2474:	f3 cf       	rjmp	.-26     	; 0x245c <strtod+0x1c>
    2476:	0d 32       	cpi	r16, 0x2D	; 45
    2478:	39 f4       	brne	.+14     	; 0x2488 <strtod+0x48>
    247a:	7e 01       	movw	r14, r28
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	e8 0e       	add	r14, r24
    2480:	f1 1c       	adc	r15, r1
    2482:	09 81       	ldd	r16, Y+1	; 0x01
    2484:	11 e0       	ldi	r17, 0x01	; 1
    2486:	08 c0       	rjmp	.+16     	; 0x2498 <strtod+0x58>
    2488:	0b 32       	cpi	r16, 0x2B	; 43
    248a:	29 f4       	brne	.+10     	; 0x2496 <strtod+0x56>
    248c:	7e 01       	movw	r14, r28
    248e:	92 e0       	ldi	r25, 0x02	; 2
    2490:	e9 0e       	add	r14, r25
    2492:	f1 1c       	adc	r15, r1
    2494:	09 81       	ldd	r16, Y+1	; 0x01
    2496:	10 e0       	ldi	r17, 0x00	; 0
    2498:	e7 01       	movw	r28, r14
    249a:	21 97       	sbiw	r28, 0x01	; 1
    249c:	43 e0       	ldi	r20, 0x03	; 3
    249e:	50 e0       	ldi	r21, 0x00	; 0
    24a0:	6c e5       	ldi	r22, 0x5C	; 92
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	ce 01       	movw	r24, r28
    24a6:	0e 94 77 13 	call	0x26ee	; 0x26ee <strncasecmp_P>
    24aa:	89 2b       	or	r24, r25
    24ac:	c1 f4       	brne	.+48     	; 0x24de <strtod+0x9e>
    24ae:	23 96       	adiw	r28, 0x03	; 3
    24b0:	45 e0       	ldi	r20, 0x05	; 5
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	67 e5       	ldi	r22, 0x57	; 87
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	ce 01       	movw	r24, r28
    24ba:	0e 94 77 13 	call	0x26ee	; 0x26ee <strncasecmp_P>
    24be:	89 2b       	or	r24, r25
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <strtod+0x84>
    24c2:	25 96       	adiw	r28, 0x05	; 5
    24c4:	c1 14       	cp	r12, r1
    24c6:	d1 04       	cpc	r13, r1
    24c8:	19 f0       	breq	.+6      	; 0x24d0 <strtod+0x90>
    24ca:	f6 01       	movw	r30, r12
    24cc:	d1 83       	std	Z+1, r29	; 0x01
    24ce:	c0 83       	st	Z, r28
    24d0:	11 11       	cpse	r17, r1
    24d2:	f6 c0       	rjmp	.+492    	; 0x26c0 <strtod+0x280>
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	70 e0       	ldi	r23, 0x00	; 0
    24d8:	80 e8       	ldi	r24, 0x80	; 128
    24da:	9f e7       	ldi	r25, 0x7F	; 127
    24dc:	fa c0       	rjmp	.+500    	; 0x26d2 <strtod+0x292>
    24de:	43 e0       	ldi	r20, 0x03	; 3
    24e0:	50 e0       	ldi	r21, 0x00	; 0
    24e2:	64 e5       	ldi	r22, 0x54	; 84
    24e4:	70 e0       	ldi	r23, 0x00	; 0
    24e6:	ce 01       	movw	r24, r28
    24e8:	0e 94 77 13 	call	0x26ee	; 0x26ee <strncasecmp_P>
    24ec:	89 2b       	or	r24, r25
    24ee:	59 f4       	brne	.+22     	; 0x2506 <strtod+0xc6>
    24f0:	c1 14       	cp	r12, r1
    24f2:	d1 04       	cpc	r13, r1
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <strtod+0xb8>
    24f6:	e9 c0       	rjmp	.+466    	; 0x26ca <strtod+0x28a>
    24f8:	f2 e0       	ldi	r31, 0x02	; 2
    24fa:	ef 0e       	add	r14, r31
    24fc:	f1 1c       	adc	r15, r1
    24fe:	f6 01       	movw	r30, r12
    2500:	f1 82       	std	Z+1, r15	; 0x01
    2502:	e0 82       	st	Z, r14
    2504:	e2 c0       	rjmp	.+452    	; 0x26ca <strtod+0x28a>
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	a9 01       	movw	r20, r18
    250c:	c0 e0       	ldi	r28, 0x00	; 0
    250e:	d0 e0       	ldi	r29, 0x00	; 0
    2510:	f7 01       	movw	r30, r14
    2512:	80 ed       	ldi	r24, 0xD0	; 208
    2514:	a8 2e       	mov	r10, r24
    2516:	a0 0e       	add	r10, r16
    2518:	89 e0       	ldi	r24, 0x09	; 9
    251a:	8a 15       	cp	r24, r10
    251c:	30 f1       	brcs	.+76     	; 0x256a <strtod+0x12a>
    251e:	91 2f       	mov	r25, r17
    2520:	92 60       	ori	r25, 0x02	; 2
    2522:	b9 2e       	mov	r11, r25
    2524:	81 2f       	mov	r24, r17
    2526:	88 70       	andi	r24, 0x08	; 8
    2528:	12 ff       	sbrs	r17, 2
    252a:	04 c0       	rjmp	.+8      	; 0x2534 <strtod+0xf4>
    252c:	81 11       	cpse	r24, r1
    252e:	24 c0       	rjmp	.+72     	; 0x2578 <strtod+0x138>
    2530:	21 96       	adiw	r28, 0x01	; 1
    2532:	22 c0       	rjmp	.+68     	; 0x2578 <strtod+0x138>
    2534:	81 11       	cpse	r24, r1
    2536:	21 97       	sbiw	r28, 0x01	; 1
    2538:	a5 e0       	ldi	r26, 0x05	; 5
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	0e 94 92 13 	call	0x2724	; 0x2724 <__muluhisi3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	aa 1f       	adc	r26, r26
    254a:	bb 1f       	adc	r27, r27
    254c:	9c 01       	movw	r18, r24
    254e:	ad 01       	movw	r20, r26
    2550:	2a 0d       	add	r18, r10
    2552:	31 1d       	adc	r19, r1
    2554:	41 1d       	adc	r20, r1
    2556:	51 1d       	adc	r21, r1
    2558:	28 39       	cpi	r18, 0x98	; 152
    255a:	89 e9       	ldi	r24, 0x99	; 153
    255c:	38 07       	cpc	r19, r24
    255e:	48 07       	cpc	r20, r24
    2560:	89 e1       	ldi	r24, 0x19	; 25
    2562:	58 07       	cpc	r21, r24
    2564:	48 f0       	brcs	.+18     	; 0x2578 <strtod+0x138>
    2566:	16 60       	ori	r17, 0x06	; 6
    2568:	06 c0       	rjmp	.+12     	; 0x2576 <strtod+0x136>
    256a:	9e ef       	ldi	r25, 0xFE	; 254
    256c:	a9 12       	cpse	r10, r25
    256e:	0a c0       	rjmp	.+20     	; 0x2584 <strtod+0x144>
    2570:	13 fd       	sbrc	r17, 3
    2572:	40 c0       	rjmp	.+128    	; 0x25f4 <strtod+0x1b4>
    2574:	18 60       	ori	r17, 0x08	; 8
    2576:	b1 2e       	mov	r11, r17
    2578:	8f ef       	ldi	r24, 0xFF	; 255
    257a:	e8 1a       	sub	r14, r24
    257c:	f8 0a       	sbc	r15, r24
    257e:	00 81       	ld	r16, Z
    2580:	1b 2d       	mov	r17, r11
    2582:	c6 cf       	rjmp	.-116    	; 0x2510 <strtod+0xd0>
    2584:	80 2f       	mov	r24, r16
    2586:	8f 7d       	andi	r24, 0xDF	; 223
    2588:	85 34       	cpi	r24, 0x45	; 69
    258a:	a1 f5       	brne	.+104    	; 0x25f4 <strtod+0x1b4>
    258c:	80 81       	ld	r24, Z
    258e:	8d 32       	cpi	r24, 0x2D	; 45
    2590:	11 f4       	brne	.+4      	; 0x2596 <strtod+0x156>
    2592:	10 61       	ori	r17, 0x10	; 16
    2594:	06 c0       	rjmp	.+12     	; 0x25a2 <strtod+0x162>
    2596:	8b 32       	cpi	r24, 0x2B	; 43
    2598:	21 f0       	breq	.+8      	; 0x25a2 <strtod+0x162>
    259a:	31 96       	adiw	r30, 0x01	; 1
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	04 c0       	rjmp	.+8      	; 0x25aa <strtod+0x16a>
    25a2:	81 81       	ldd	r24, Z+1	; 0x01
    25a4:	32 96       	adiw	r30, 0x02	; 2
    25a6:	62 e0       	ldi	r22, 0x02	; 2
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	80 53       	subi	r24, 0x30	; 48
    25ac:	8a 30       	cpi	r24, 0x0A	; 10
    25ae:	18 f0       	brcs	.+6      	; 0x25b6 <strtod+0x176>
    25b0:	e6 1b       	sub	r30, r22
    25b2:	f7 0b       	sbc	r31, r23
    25b4:	1f c0       	rjmp	.+62     	; 0x25f4 <strtod+0x1b4>
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	60 38       	cpi	r22, 0x80	; 128
    25bc:	9c e0       	ldi	r25, 0x0C	; 12
    25be:	79 07       	cpc	r23, r25
    25c0:	5c f4       	brge	.+22     	; 0x25d8 <strtod+0x198>
    25c2:	db 01       	movw	r26, r22
    25c4:	aa 0f       	add	r26, r26
    25c6:	bb 1f       	adc	r27, r27
    25c8:	aa 0f       	add	r26, r26
    25ca:	bb 1f       	adc	r27, r27
    25cc:	6a 0f       	add	r22, r26
    25ce:	7b 1f       	adc	r23, r27
    25d0:	66 0f       	add	r22, r22
    25d2:	77 1f       	adc	r23, r23
    25d4:	68 0f       	add	r22, r24
    25d6:	71 1d       	adc	r23, r1
    25d8:	31 96       	adiw	r30, 0x01	; 1
    25da:	df 01       	movw	r26, r30
    25dc:	11 97       	sbiw	r26, 0x01	; 1
    25de:	8c 91       	ld	r24, X
    25e0:	80 53       	subi	r24, 0x30	; 48
    25e2:	8a 30       	cpi	r24, 0x0A	; 10
    25e4:	50 f3       	brcs	.-44     	; 0x25ba <strtod+0x17a>
    25e6:	14 ff       	sbrs	r17, 4
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <strtod+0x1b0>
    25ea:	71 95       	neg	r23
    25ec:	61 95       	neg	r22
    25ee:	71 09       	sbc	r23, r1
    25f0:	c6 0f       	add	r28, r22
    25f2:	d7 1f       	adc	r29, r23
    25f4:	11 ff       	sbrs	r17, 1
    25f6:	08 c0       	rjmp	.+16     	; 0x2608 <strtod+0x1c8>
    25f8:	c1 14       	cp	r12, r1
    25fa:	d1 04       	cpc	r13, r1
    25fc:	29 f0       	breq	.+10     	; 0x2608 <strtod+0x1c8>
    25fe:	cf 01       	movw	r24, r30
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f6 01       	movw	r30, r12
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
    2608:	ca 01       	movw	r24, r20
    260a:	b9 01       	movw	r22, r18
    260c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__floatunsisf>
    2610:	21 2f       	mov	r18, r17
    2612:	23 70       	andi	r18, 0x03	; 3
    2614:	23 30       	cpi	r18, 0x03	; 3
    2616:	19 f0       	breq	.+6      	; 0x261e <strtod+0x1de>
    2618:	4b 01       	movw	r8, r22
    261a:	5c 01       	movw	r10, r24
    261c:	06 c0       	rjmp	.+12     	; 0x262a <strtod+0x1ea>
    261e:	4b 01       	movw	r8, r22
    2620:	5c 01       	movw	r10, r24
    2622:	b7 fa       	bst	r11, 7
    2624:	b0 94       	com	r11
    2626:	b7 f8       	bld	r11, 7
    2628:	b0 94       	com	r11
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	a9 01       	movw	r20, r18
    2630:	c5 01       	movw	r24, r10
    2632:	b4 01       	movw	r22, r8
    2634:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    2638:	88 23       	and	r24, r24
    263a:	09 f4       	brne	.+2      	; 0x263e <strtod+0x1fe>
    263c:	3e c0       	rjmp	.+124    	; 0x26ba <strtod+0x27a>
    263e:	d7 ff       	sbrs	r29, 7
    2640:	06 c0       	rjmp	.+12     	; 0x264e <strtod+0x20e>
    2642:	d1 95       	neg	r29
    2644:	c1 95       	neg	r28
    2646:	d1 09       	sbc	r29, r1
    2648:	03 e7       	ldi	r16, 0x73	; 115
    264a:	10 e0       	ldi	r17, 0x00	; 0
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <strtod+0x212>
    264e:	0b e8       	ldi	r16, 0x8B	; 139
    2650:	10 e0       	ldi	r17, 0x00	; 0
    2652:	68 01       	movw	r12, r16
    2654:	f8 e1       	ldi	r31, 0x18	; 24
    2656:	cf 1a       	sub	r12, r31
    2658:	d1 08       	sbc	r13, r1
    265a:	90 e2       	ldi	r25, 0x20	; 32
    265c:	e9 2e       	mov	r14, r25
    265e:	f1 2c       	mov	r15, r1
    2660:	ce 15       	cp	r28, r14
    2662:	df 05       	cpc	r29, r15
    2664:	74 f0       	brlt	.+28     	; 0x2682 <strtod+0x242>
    2666:	f8 01       	movw	r30, r16
    2668:	25 91       	lpm	r18, Z+
    266a:	35 91       	lpm	r19, Z+
    266c:	45 91       	lpm	r20, Z+
    266e:	54 91       	lpm	r21, Z
    2670:	c5 01       	movw	r24, r10
    2672:	b4 01       	movw	r22, r8
    2674:	0e 94 97 11 	call	0x232e	; 0x232e <__mulsf3>
    2678:	4b 01       	movw	r8, r22
    267a:	5c 01       	movw	r10, r24
    267c:	ce 19       	sub	r28, r14
    267e:	df 09       	sbc	r29, r15
    2680:	ef cf       	rjmp	.-34     	; 0x2660 <strtod+0x220>
    2682:	04 50       	subi	r16, 0x04	; 4
    2684:	11 09       	sbc	r17, r1
    2686:	f5 94       	asr	r15
    2688:	e7 94       	ror	r14
    268a:	0c 15       	cp	r16, r12
    268c:	1d 05       	cpc	r17, r13
    268e:	41 f7       	brne	.-48     	; 0x2660 <strtod+0x220>
    2690:	8a 2d       	mov	r24, r10
    2692:	88 0f       	add	r24, r24
    2694:	8b 2d       	mov	r24, r11
    2696:	88 1f       	adc	r24, r24
    2698:	8f 3f       	cpi	r24, 0xFF	; 255
    269a:	49 f0       	breq	.+18     	; 0x26ae <strtod+0x26e>
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	a9 01       	movw	r20, r18
    26a2:	c5 01       	movw	r24, r10
    26a4:	b4 01       	movw	r22, r8
    26a6:	0e 94 3a 10 	call	0x2074	; 0x2074 <__cmpsf2>
    26aa:	81 11       	cpse	r24, r1
    26ac:	06 c0       	rjmp	.+12     	; 0x26ba <strtod+0x27a>
    26ae:	82 e2       	ldi	r24, 0x22	; 34
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <errno+0x1>
    26b6:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <errno>
    26ba:	c5 01       	movw	r24, r10
    26bc:	b4 01       	movw	r22, r8
    26be:	09 c0       	rjmp	.+18     	; 0x26d2 <strtod+0x292>
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	70 e0       	ldi	r23, 0x00	; 0
    26c4:	80 e8       	ldi	r24, 0x80	; 128
    26c6:	9f ef       	ldi	r25, 0xFF	; 255
    26c8:	04 c0       	rjmp	.+8      	; 0x26d2 <strtod+0x292>
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	80 ec       	ldi	r24, 0xC0	; 192
    26d0:	9f e7       	ldi	r25, 0x7F	; 127
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	ec e0       	ldi	r30, 0x0C	; 12
    26d8:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__epilogue_restores__+0xc>

000026dc <isspace>:
    26dc:	91 11       	cpse	r25, r1
    26de:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__ctype_isfalse>
    26e2:	80 32       	cpi	r24, 0x20	; 32
    26e4:	19 f0       	breq	.+6      	; 0x26ec <isspace+0x10>
    26e6:	89 50       	subi	r24, 0x09	; 9
    26e8:	85 50       	subi	r24, 0x05	; 5
    26ea:	c8 f7       	brcc	.-14     	; 0x26de <isspace+0x2>
    26ec:	08 95       	ret

000026ee <strncasecmp_P>:
    26ee:	fb 01       	movw	r30, r22
    26f0:	dc 01       	movw	r26, r24
    26f2:	41 50       	subi	r20, 0x01	; 1
    26f4:	50 40       	sbci	r21, 0x00	; 0
    26f6:	88 f0       	brcs	.+34     	; 0x271a <strncasecmp_P+0x2c>
    26f8:	8d 91       	ld	r24, X+
    26fa:	81 34       	cpi	r24, 0x41	; 65
    26fc:	1c f0       	brlt	.+6      	; 0x2704 <strncasecmp_P+0x16>
    26fe:	8b 35       	cpi	r24, 0x5B	; 91
    2700:	0c f4       	brge	.+2      	; 0x2704 <strncasecmp_P+0x16>
    2702:	80 5e       	subi	r24, 0xE0	; 224
    2704:	65 91       	lpm	r22, Z+
    2706:	61 34       	cpi	r22, 0x41	; 65
    2708:	1c f0       	brlt	.+6      	; 0x2710 <strncasecmp_P+0x22>
    270a:	6b 35       	cpi	r22, 0x5B	; 91
    270c:	0c f4       	brge	.+2      	; 0x2710 <strncasecmp_P+0x22>
    270e:	60 5e       	subi	r22, 0xE0	; 224
    2710:	86 1b       	sub	r24, r22
    2712:	61 11       	cpse	r22, r1
    2714:	71 f3       	breq	.-36     	; 0x26f2 <strncasecmp_P+0x4>
    2716:	99 0b       	sbc	r25, r25
    2718:	08 95       	ret
    271a:	88 1b       	sub	r24, r24
    271c:	fc cf       	rjmp	.-8      	; 0x2716 <strncasecmp_P+0x28>

0000271e <__ctype_isfalse>:
    271e:	99 27       	eor	r25, r25
    2720:	88 27       	eor	r24, r24

00002722 <__ctype_istrue>:
    2722:	08 95       	ret

00002724 <__muluhisi3>:
    2724:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__umulhisi3>
    2728:	a5 9f       	mul	r26, r21
    272a:	90 0d       	add	r25, r0
    272c:	b4 9f       	mul	r27, r20
    272e:	90 0d       	add	r25, r0
    2730:	a4 9f       	mul	r26, r20
    2732:	80 0d       	add	r24, r0
    2734:	91 1d       	adc	r25, r1
    2736:	11 24       	eor	r1, r1
    2738:	08 95       	ret

0000273a <__prologue_saves__>:
    273a:	2f 92       	push	r2
    273c:	3f 92       	push	r3
    273e:	4f 92       	push	r4
    2740:	5f 92       	push	r5
    2742:	6f 92       	push	r6
    2744:	7f 92       	push	r7
    2746:	8f 92       	push	r8
    2748:	9f 92       	push	r9
    274a:	af 92       	push	r10
    274c:	bf 92       	push	r11
    274e:	cf 92       	push	r12
    2750:	df 92       	push	r13
    2752:	ef 92       	push	r14
    2754:	ff 92       	push	r15
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	ca 1b       	sub	r28, r26
    2764:	db 0b       	sbc	r29, r27
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	09 94       	ijmp

00002772 <__epilogue_restores__>:
    2772:	2a 88       	ldd	r2, Y+18	; 0x12
    2774:	39 88       	ldd	r3, Y+17	; 0x11
    2776:	48 88       	ldd	r4, Y+16	; 0x10
    2778:	5f 84       	ldd	r5, Y+15	; 0x0f
    277a:	6e 84       	ldd	r6, Y+14	; 0x0e
    277c:	7d 84       	ldd	r7, Y+13	; 0x0d
    277e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2780:	9b 84       	ldd	r9, Y+11	; 0x0b
    2782:	aa 84       	ldd	r10, Y+10	; 0x0a
    2784:	b9 84       	ldd	r11, Y+9	; 0x09
    2786:	c8 84       	ldd	r12, Y+8	; 0x08
    2788:	df 80       	ldd	r13, Y+7	; 0x07
    278a:	ee 80       	ldd	r14, Y+6	; 0x06
    278c:	fd 80       	ldd	r15, Y+5	; 0x05
    278e:	0c 81       	ldd	r16, Y+4	; 0x04
    2790:	1b 81       	ldd	r17, Y+3	; 0x03
    2792:	aa 81       	ldd	r26, Y+2	; 0x02
    2794:	b9 81       	ldd	r27, Y+1	; 0x01
    2796:	ce 0f       	add	r28, r30
    2798:	d1 1d       	adc	r29, r1
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	ed 01       	movw	r28, r26
    27a6:	08 95       	ret

000027a8 <__umulhisi3>:
    27a8:	a2 9f       	mul	r26, r18
    27aa:	b0 01       	movw	r22, r0
    27ac:	b3 9f       	mul	r27, r19
    27ae:	c0 01       	movw	r24, r0
    27b0:	a3 9f       	mul	r26, r19
    27b2:	70 0d       	add	r23, r0
    27b4:	81 1d       	adc	r24, r1
    27b6:	11 24       	eor	r1, r1
    27b8:	91 1d       	adc	r25, r1
    27ba:	b2 9f       	mul	r27, r18
    27bc:	70 0d       	add	r23, r0
    27be:	81 1d       	adc	r24, r1
    27c0:	11 24       	eor	r1, r1
    27c2:	91 1d       	adc	r25, r1
    27c4:	08 95       	ret

000027c6 <_exit>:
    27c6:	f8 94       	cli

000027c8 <__stop_program>:
    27c8:	ff cf       	rjmp	.-2      	; 0x27c8 <__stop_program>
