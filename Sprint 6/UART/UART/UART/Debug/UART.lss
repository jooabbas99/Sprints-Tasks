
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075f  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065f  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036b  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002b  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "UART/uart.h"

int main(void)
{
    /* Replace with your application code */
	UART_init();
  6c:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_init>
	//uint8_t arr []= {'h','e','l','l','o'};
	//uint8_t i = 0;
	uint8_t data ='0';
	UART_sendData(data);
  70:	80 e3       	ldi	r24, 0x30	; 48
  72:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_sendData>
		//UART_sendData(arr[i]);
		//i = ((i+1)%5);
		//if (i == 0)
			//UART_sendData('\n');	
			
		data = UART_getData();
  76:	0e 94 5d 00 	call	0xba	; 0xba <UART_getData>
  7a:	c8 2f       	mov	r28, r24
		UART_sendData(' ');
  7c:	80 e2       	ldi	r24, 0x20	; 32
  7e:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_sendData>

		UART_sendData(data);
  82:	8c 2f       	mov	r24, r28
  84:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_sendData>
		UART_sendData('\n');
  88:	8a e0       	ldi	r24, 0x0A	; 10
  8a:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	84 e3       	ldi	r24, 0x34	; 52
  92:	9c e0       	ldi	r25, 0x0C	; 12
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
  a0:	ea cf       	rjmp	.-44     	; 0x76 <main+0xa>

000000a2 <UART_init>:
#include <stdint.h>


void UART_init(void){
	// set BaudRate => 9600/8000 MH 
	UBRRL = 51;
  a2:	83 e3       	ldi	r24, 0x33	; 51
  a4:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
  a6:	10 bc       	out	0x20, r1	; 32
	// set frame format -> 8Bit data , 1 stop , No Parity
	UCSRC = 0x86;
  a8:	86 e8       	ldi	r24, 0x86	; 134
  aa:	80 bd       	out	0x20, r24	; 32
	
	//Enable RX And TX
	UCSRB = 0x18;
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	08 95       	ret

000000b2 <UART_sendData>:
}
void UART_sendData(uint8_t data){
	// check if transmit register is empty 
	//while(READ_BIT(UCSRA,6) == 1); 
	  while((UCSRA&0x20) == 0x00);
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <UART_sendData>
	UDR = data;
  b6:	8c b9       	out	0x0c, r24	; 12
  b8:	08 95       	ret

000000ba <UART_getData>:
}
uint8_t UART_getData(void){
	// check if transmit register is empty
	
	//while(READ_BIT(UCSRA,7) == 1);
	 while((UCSRA&0x80) == 0x00);
  ba:	5f 9b       	sbis	0x0b, 7	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <UART_getData>
	uint8_t data = UDR;
  be:	8c b1       	in	r24, 0x0c	; 12
	// clear flag
	SET_BIT(UCSRA,7);
  c0:	9b b1       	in	r25, 0x0b	; 11
  c2:	90 68       	ori	r25, 0x80	; 128
  c4:	9b b9       	out	0x0b, r25	; 11
	return data;
}
  c6:	08 95       	ret

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
