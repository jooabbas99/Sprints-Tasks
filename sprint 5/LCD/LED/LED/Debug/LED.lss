
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000166  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b98  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d9  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000527  00000000  00000000  00001ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  7a:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:



void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port= cmnd;
  82:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port &= ~(1<<RS);	/* RS=0 command reg. */
  84:	81 b3       	in	r24, 0x11	; 17
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	81 bb       	out	0x11, r24	; 17
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	81 bb       	out	0x11, r24	; 17
	LCD_Command_Port |= (1<<EN);	/* Enable pulse */
  90:	81 b3       	in	r24, 0x11	; 17
  92:	88 60       	ori	r24, 0x08	; 8
  94:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <LCD_Command+0x16>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <LCD_Command+0x1c>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	87 7f       	andi	r24, 0xF7	; 247
  a2:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f e6       	ldi	r24, 0x6F	; 111
  a6:	97 e1       	ldi	r25, 0x17	; 23
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_Command+0x26>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_Command+0x2c>
  ae:	00 00       	nop
  b0:	08 95       	ret

000000b2 <LCD_Char>:
	_delay_ms(3);
}

void LCD_Char (unsigned char char_data)	/* LCD data write function */
{
	LCD_Data_Port= char_data;
  b2:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
  b4:	81 b3       	in	r24, 0x11	; 17
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	81 bb       	out	0x11, r24	; 17
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 write operation */
  ba:	81 b3       	in	r24, 0x11	; 17
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	81 bb       	out	0x11, r24	; 17
	LCD_Command_Port |= (1<<EN);	/* Enable Pulse */
  c0:	81 b3       	in	r24, 0x11	; 17
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_Char+0x16>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_Char+0x1c>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
  ce:	81 b3       	in	r24, 0x11	; 17
  d0:	87 7f       	andi	r24, 0xF7	; 247
  d2:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f ec       	ldi	r24, 0xCF	; 207
  d6:	97 e0       	ldi	r25, 0x07	; 7
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Char+0x26>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_Char+0x2c>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <LCD_Init>:
	_delay_ms(1);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Command_Dir = 0xFF;		/* Make LCD command port direction as o/p */
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	81 bb       	out	0x11, r24	; 17
	LCD_Data_Dir = 0xFF;		/* Make LCD data port direction as o/p */
  e6:	84 bb       	out	0x14, r24	; 20
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9c e9       	ldi	r25, 0x9C	; 156
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_Init+0xa>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCD_Init+0x10>
  f2:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command (0x38);		/* Initialization of 16X2 LCD in 8bit mode */
  f4:	88 e3       	ldi	r24, 0x38	; 56
  f6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (0x0C);		/* Display ON Cursor OFF */
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (0x06);		/* Auto Increment cursor */
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (0x01);		/* Clear display */
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (0x80);		/* Cursor at home position */
 10c:	80 e8       	ldi	r24, 0x80	; 128
 10e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 112:	08 95       	ret

00000114 <LCD_String>:
}

void LCD_String (char *str)		/* Send string to LCD function */
{
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	03 c0       	rjmp	.+6      	; 0x12a <LCD_String+0x16>
	{
		LCD_Char (str[i]);
 124:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 128:	21 96       	adiw	r28, 0x01	; 1
 12a:	f8 01       	movw	r30, r16
 12c:	ec 0f       	add	r30, r28
 12e:	fd 1f       	adc	r31, r29
 130:	80 81       	ld	r24, Z
 132:	81 11       	cpse	r24, r1
 134:	f7 cf       	rjmp	.-18     	; 0x124 <LCD_String+0x10>
	{
		LCD_Char (str[i]);
	}
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <main>:
#include <avr/io.h>
#include "LED/LCD.h"

int main(void)
{
	LCD_Init();			/* Initialize LCD */
 140:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_Init>

	LCD_String("ElectronicWINGS");	/* write string on 1st line of LCD*/
 144:	80 e6       	ldi	r24, 0x60	; 96
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_String>
	LCD_Command(0xC0);		/* Go to 2nd line*/
 14c:	80 ec       	ldi	r24, 0xC0	; 192
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_String("Hello World");	/* Write string on 2nd line*/
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_String>

	return 0;
}
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
