
ADV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f1  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000568  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000170  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000011af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	// output 
	DDRC = 1;
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD = 1;
  70:	81 bb       	out	0x11, r24	; 17
	
	// ADC init 
	DDRA &= ~(1<<0);
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	8a bb       	out	0x1a, r24	; 26
	
	// channel 0 , single ended , AVCC Ref , R Adjust 
	
	ADMUX |= (1<<6);
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	87 b9       	out	0x07, r24	; 7
	
	// enable ADC with Prescaller , no interrupt 
	ADCSRA |= (1<<7); 
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	80 68       	ori	r24, 0x80	; 128
  82:	86 b9       	out	0x06, r24	; 6
	

    while (1) 
    {
		PORTC = 0;
  84:	15 ba       	out	0x15, r1	; 21
		PORTD = 0;
  86:	12 ba       	out	0x12, r1	; 18
		// choose channel to read 
		ADMUX |= (0&0x0F);
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	87 b9       	out	0x07, r24	; 7
		
		// start converstion 
		ADCSRA |= (1<<6);
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	86 b9       	out	0x06, r24	; 6
		// wait for converstion complete flag 
		while ((ADCSRA&(1<<4)) == 0);
  92:	34 9b       	sbis	0x06, 4	; 6
  94:	fe cf       	rjmp	.-4      	; 0x92 <main+0x26>
		
		//read value 
		PORTC = ADCL;
  96:	84 b1       	in	r24, 0x04	; 4
  98:	85 bb       	out	0x15, r24	; 21
		PORTD = ADCH;
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	87 ea       	ldi	r24, 0xA7	; 167
  a0:	91 e6       	ldi	r25, 0x61	; 97
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x36>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
  aa:	ec cf       	rjmp	.-40     	; 0x84 <main+0x18>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
