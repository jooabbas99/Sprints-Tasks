
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800076  00800076  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b49  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f6  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000943  00000000  00000000  00002a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00003378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b0d  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008dc  00000000  00000000  000040fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000049d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_13>
  38:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 39       	cpi	r26, 0x99	; 153
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	//arr_data_buffer[0] = 'A';
	//arr_data_buffer[1] = '7';
	//arr_data_buffer[2] = 'A';
	//uart_write(&length);
	//uart_write_INT(fun_tx_callback);
	bcm_init(&bcm_instance_ch_0);
  92:	80 e6       	ldi	r24, 0x60	; 96
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 96 00 	call	0x12c	; 0x12c <bcm_init>
	
	bcm_send_n(&bcm_instance_ch_0,tdata,&len);
  9a:	48 e9       	ldi	r20, 0x98	; 152
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	63 e9       	ldi	r22, 0x93	; 147
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <bcm_send_n>
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x18>

000000ac <uart_tx_callback>:
			
		default:
		return BCM_INVALID_PROTOCOL;
	}
	return BCM_OK;
}
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	1f 92       	push	r1
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	19 82       	std	Y+1, r1	; 0x01
  b8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
  bc:	81 11       	cpse	r24, r1
  be:	0d c0       	rjmp	.+26     	; 0xda <uart_tx_callback+0x2e>
  c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <pakets+0x3>
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	0e 94 75 01 	call	0x2ea	; 0x2ea <uart_write>
  ce:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
  d8:	25 c0       	rjmp	.+74     	; 0x124 <uart_tx_callback+0x78>
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <pakets+0x2>
  e0:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <pakets+0x3>
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	31 09       	sbc	r19, r1
  e8:	82 17       	cp	r24, r18
  ea:	93 07       	cpc	r25, r19
  ec:	a0 f4       	brcc	.+40     	; 0x116 <uart_tx_callback+0x6a>
  ee:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <pakets>
  f2:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <pakets+0x1>
  f6:	8e 0f       	add	r24, r30
  f8:	9f 1f       	adc	r25, r31
  fa:	fc 01       	movw	r30, r24
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	80 81       	ld	r24, Z
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	0e 94 75 01 	call	0x2ea	; 0x2ea <uart_write>
 10a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 114:	07 c0       	rjmp	.+14     	; 0x124 <uart_tx_callback+0x78>
 116:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
 11a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <uart_udrei_disable>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <enm_transiver_state>
 124:	0f 90       	pop	r0
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <bcm_init>:
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	69 f1       	breq	.+90     	; 0x18e <bcm_init+0x62>
 134:	dc 01       	movw	r26, r24
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	2c 91       	ld	r18, X
 13a:	11 97       	sbiw	r26, 0x01	; 1
 13c:	23 30       	cpi	r18, 0x03	; 3
 13e:	48 f5       	brcc	.+82     	; 0x192 <bcm_init+0x66>
 140:	ec 91       	ld	r30, X
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	ed 57       	subi	r30, 0x7D	; 125
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	31 81       	ldd	r19, Z+1	; 0x01
 152:	31 11       	cpse	r19, r1
 154:	20 c0       	rjmp	.+64     	; 0x196 <bcm_init+0x6a>
 156:	ec 01       	movw	r28, r24
 158:	22 23       	and	r18, r18
 15a:	19 f0       	breq	.+6      	; 0x162 <bcm_init+0x36>
 15c:	23 30       	cpi	r18, 0x03	; 3
 15e:	e8 f4       	brcc	.+58     	; 0x19a <bcm_init+0x6e>
 160:	04 c0       	rjmp	.+8      	; 0x16a <bcm_init+0x3e>
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	9b 81       	ldd	r25, Y+3	; 0x03
 166:	0e 94 18 01 	call	0x230	; 0x230 <uart_init>
 16a:	e8 81       	ld	r30, Y
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ed 57       	subi	r30, 0x7D	; 125
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	88 81       	ld	r24, Y
 17c:	99 81       	ldd	r25, Y+1	; 0x01
 17e:	aa 81       	ldd	r26, Y+2	; 0x02
 180:	bb 81       	ldd	r27, Y+3	; 0x03
 182:	80 83       	st	Z, r24
 184:	91 83       	std	Z+1, r25	; 0x01
 186:	a2 83       	std	Z+2, r26	; 0x02
 188:	b3 83       	std	Z+3, r27	; 0x03
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	07 c0       	rjmp	.+14     	; 0x19c <bcm_init+0x70>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	05 c0       	rjmp	.+10     	; 0x19c <bcm_init+0x70>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	03 c0       	rjmp	.+6      	; 0x19c <bcm_init+0x70>
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	01 c0       	rjmp	.+2      	; 0x19c <bcm_init+0x70>
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <bcm_send_n>:

// Send multiple bytes of data over a specific BCM instance
enu_system_status_t bcm_send_n(str_bcm_instance_t* ptr_str_bcm_instance, uint8* data, uint16 length) {
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	1f 92       	push	r1
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
	if (ptr_str_bcm_instance == NULL || ptr_str_bcm_instance->bcm_instance_id >= NUM_BCM_INSTANCES) {
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	89 f1       	breq	.+98     	; 0x212 <bcm_send_n+0x70>
 1b0:	dc 01       	movw	r26, r24
 1b2:	ec 91       	ld	r30, X
 1b4:	e3 30       	cpi	r30, 0x03	; 3
 1b6:	78 f5       	brcc	.+94     	; 0x216 <bcm_send_n+0x74>
		return BCM_INVALID_INSTANCE;
	}
	
	if (bcm_instances[ptr_str_bcm_instance->bcm_instance_id].protocol >= BCM_MAX_PROTOCOL) {
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	ed 57       	subi	r30, 0x7D	; 125
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	21 81       	ldd	r18, Z+1	; 0x01
 1c8:	23 30       	cpi	r18, 0x03	; 3
 1ca:	38 f5       	brcc	.+78     	; 0x21a <bcm_send_n+0x78>
		return BCM_NOT_INITIALIZED;
	}
	
	if (data == NULL || length == 0) {
 1cc:	61 15       	cp	r22, r1
 1ce:	71 05       	cpc	r23, r1
 1d0:	31 f1       	breq	.+76     	; 0x21e <bcm_send_n+0x7c>
 1d2:	41 15       	cp	r20, r1
 1d4:	51 05       	cpc	r21, r1
 1d6:	29 f1       	breq	.+74     	; 0x222 <bcm_send_n+0x80>
		return BCM_INVALID_PARAMETER;
	}
	
	// Perform protocol-specific send operation
	uint8 temp = 0;
	switch (ptr_str_bcm_instance->protocol) {
 1d8:	11 96       	adiw	r26, 0x01	; 1
 1da:	8c 91       	ld	r24, X
 1dc:	88 23       	and	r24, r24
 1de:	21 f0       	breq	.+8      	; 0x1e8 <bcm_send_n+0x46>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	08 f1       	brcs	.+66     	; 0x226 <bcm_send_n+0x84>
		case BCM_PROTOCOL_I2C:

		break;
		
		default:
		return BCM_INVALID_PROTOCOL;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	20 c0       	rjmp	.+64     	; 0x228 <bcm_send_n+0x86>
	
	// Perform protocol-specific send operation
	uint8 temp = 0;
	switch (ptr_str_bcm_instance->protocol) {
		case BCM_PROTOCOL_UART:
			enm_transiver_state[BCM_PROTOCOL_UART] = BCM_BUSY_FLAG;
 1e8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <enm_transiver_state>
			// add 2 byte of the length
			pakets[BCM_PROTOCOL_UART].data_length = (length + 2);
 1ec:	4e 5f       	subi	r20, 0xFE	; 254
 1ee:	5f 4f       	sbci	r21, 0xFF	; 255
 1f0:	e7 e7       	ldi	r30, 0x77	; 119
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	53 83       	std	Z+3, r21	; 0x03
 1f6:	42 83       	std	Z+2, r20	; 0x02
			pakets[BCM_PROTOCOL_UART].ptr_data = data;
 1f8:	71 83       	std	Z+1, r23	; 0x01
 1fa:	60 83       	st	Z, r22
			// send data length
			temp = (uint8)pakets[BCM_PROTOCOL_UART].data_length;
 1fc:	49 83       	std	Y+1, r20	; 0x01
			uart_write(&temp);
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 75 01 	call	0x2ea	; 0x2ea <uart_write>
			uart_write_INT(uart_tx_callback);
 206:	86 e5       	ldi	r24, 0x56	; 86
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 83 01 	call	0x306	; 0x306 <uart_write_INT>
		
		default:
		return BCM_INVALID_PROTOCOL;
	}
	
	return BCM_OK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
			pakets[BCM_PROTOCOL_UART].ptr_data = data;
			// send data length
			temp = (uint8)pakets[BCM_PROTOCOL_UART].data_length;
			uart_write(&temp);
			uart_write_INT(uart_tx_callback);
		break;
 210:	0b c0       	rjmp	.+22     	; 0x228 <bcm_send_n+0x86>
}

// Send multiple bytes of data over a specific BCM instance
enu_system_status_t bcm_send_n(str_bcm_instance_t* ptr_str_bcm_instance, uint8* data, uint16 length) {
	if (ptr_str_bcm_instance == NULL || ptr_str_bcm_instance->bcm_instance_id >= NUM_BCM_INSTANCES) {
		return BCM_INVALID_INSTANCE;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	09 c0       	rjmp	.+18     	; 0x228 <bcm_send_n+0x86>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	07 c0       	rjmp	.+14     	; 0x228 <bcm_send_n+0x86>
	}
	
	if (bcm_instances[ptr_str_bcm_instance->bcm_instance_id].protocol >= BCM_MAX_PROTOCOL) {
		return BCM_NOT_INITIALIZED;
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	05 c0       	rjmp	.+10     	; 0x228 <bcm_send_n+0x86>
	}
	
	if (data == NULL || length == 0) {
		return BCM_INVALID_PARAMETER;
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	03 c0       	rjmp	.+6      	; 0x228 <bcm_send_n+0x86>
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	01 c0       	rjmp	.+2      	; 0x228 <bcm_send_n+0x86>
		
		default:
		return BCM_INVALID_PROTOCOL;
	}
	
	return BCM_OK;
 226:	80 e0       	ldi	r24, 0x00	; 0
}
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <uart_init>:
	uart_udrei_enable();
}

void uart_read_INT(void(*callback)(void)) {
	rx_callback = callback;
	uart_rxci_enable();
 230:	fc 01       	movw	r30, r24
 232:	23 81       	ldd	r18, Z+3	; 0x03
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	60 81       	ld	r22, Z
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	68 9f       	mul	r22, r24
 248:	b0 01       	movw	r22, r0
 24a:	11 24       	eor	r1, r1
 24c:	92 81       	ldd	r25, Z+2	; 0x02
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	98 9f       	mul	r25, r24
 252:	a0 01       	movw	r20, r0
 254:	11 24       	eor	r1, r1
 256:	34 81       	ldd	r19, Z+4	; 0x04
 258:	91 81       	ldd	r25, Z+1	; 0x01
 25a:	89 2f       	mov	r24, r25
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	20 68       	ori	r18, 0x80	; 128
 264:	26 2b       	or	r18, r22
 266:	42 2b       	or	r20, r18
 268:	43 2b       	or	r20, r19
 26a:	84 2b       	or	r24, r20
 26c:	80 bd       	out	0x20, r24	; 32
 26e:	2b b1       	in	r18, 0x0b	; 11
 270:	95 81       	ldd	r25, Z+5	; 0x05
 272:	89 2f       	mov	r24, r25
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	92 2f       	mov	r25, r18
 27c:	9c 7f       	andi	r25, 0xFC	; 252
 27e:	89 2b       	or	r24, r25
 280:	8b b9       	out	0x0b, r24	; 11
 282:	21 85       	ldd	r18, Z+9	; 0x09
 284:	80 e1       	ldi	r24, 0x10	; 16
 286:	28 9f       	mul	r18, r24
 288:	a0 01       	movw	r20, r0
 28a:	11 24       	eor	r1, r1
 28c:	92 85       	ldd	r25, Z+10	; 0x0a
 28e:	29 2f       	mov	r18, r25
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	91 81       	ldd	r25, Z+1	; 0x01
 2a0:	96 95       	lsr	r25
 2a2:	96 95       	lsr	r25
 2a4:	89 2f       	mov	r24, r25
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	9a b1       	in	r25, 0x0a	; 10
 2b2:	24 2b       	or	r18, r20
 2b4:	82 2b       	or	r24, r18
 2b6:	93 70       	andi	r25, 0x03	; 3
 2b8:	89 2b       	or	r24, r25
 2ba:	8a b9       	out	0x0a, r24	; 10
 2bc:	85 85       	ldd	r24, Z+13	; 0x0d
 2be:	89 b9       	out	0x09, r24	; 9
 2c0:	86 85       	ldd	r24, Z+14	; 0x0e
 2c2:	80 bd       	out	0x20, r24	; 32
 2c4:	83 85       	ldd	r24, Z+11	; 0x0b
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	31 f0       	breq	.+12     	; 0x2d6 <uart_init+0xa6>
 2ca:	84 85       	ldd	r24, Z+12	; 0x0c
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	19 f0       	breq	.+6      	; 0x2d6 <uart_init+0xa6>
 2d0:	80 85       	ldd	r24, Z+8	; 0x08
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <uart_init+0xa8>
 2d6:	78 94       	sei
 2d8:	08 95       	ret

000002da <uart_udrei_enable>:
 2da:	8a b1       	in	r24, 0x0a	; 10
 2dc:	80 62       	ori	r24, 0x20	; 32
 2de:	8a b9       	out	0x0a, r24	; 10
 2e0:	08 95       	ret

000002e2 <uart_udrei_disable>:
 2e2:	8a b1       	in	r24, 0x0a	; 10
 2e4:	8f 7d       	andi	r24, 0xDF	; 223
 2e6:	8a b9       	out	0x0a, r24	; 10
 2e8:	08 95       	ret

000002ea <uart_write>:
 2ea:	5d 9b       	sbis	0x0b, 5	; 11
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <uart_write>
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 81       	ld	r18, Z
 2f2:	2c b9       	out	0x0c, r18	; 12
 2f4:	52 9b       	sbis	0x0a, 2	; 10
 2f6:	06 c0       	rjmp	.+12     	; 0x304 <uart_write+0x1a>
 2f8:	2a b1       	in	r18, 0x0a	; 10
 2fa:	90 81       	ld	r25, Z
 2fc:	82 2f       	mov	r24, r18
 2fe:	8e 7f       	andi	r24, 0xFE	; 254
 300:	89 2b       	or	r24, r25
 302:	8a b9       	out	0x0a, r24	; 10
 304:	08 95       	ret

00000306 <uart_write_INT>:
 306:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <tx_callback+0x1>
 30a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <tx_callback>
 30e:	0e 94 6d 01 	call	0x2da	; 0x2da <uart_udrei_enable>
 312:	08 95       	ret

00000314 <__vector_13>:
}

ISR(USART_RXC) {
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
	rx_callback();
 336:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <rx_callback>
 33a:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <rx_callback+0x1>
 33e:	09 95       	icall
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__vector_14>:
ISR(USART_UDRE) {
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	(*tx_callback)();
 384:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <tx_callback>
 388:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <tx_callback+0x1>
 38c:	09 95       	icall
}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
