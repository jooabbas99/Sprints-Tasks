
BCM_tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000005e0  00000674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005e  008000a8  008000a8  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c95  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000971  00000000  00000000  0000250d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a18  00000000  00000000  00002e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00003898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b92  00000000  00000000  00003b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000924  00000000  00000000  000046e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000500a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_13>
  38:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 30       	cpi	r26, 0x06	; 6
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  8a:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
static uint8 tx_data[BUFFER_SIZE] = "BCM Operating";
static uint8 rx_data[BUFFER_SIZE] = {0};
static uint8 rx_length;
static enm_bcm_mode_t bcm_mode;
void app_init(void){
	bcm_init(&bcm_instance_ch_0);
  92:	82 e9       	ldi	r24, 0x92	; 146
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 25 01 	call	0x24a	; 0x24a <bcm_init>
	rx_length = 0;
  9a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <rx_length>
  9e:	08 95       	ret

000000a0 <app_start>:
	bcm_mode == BCM_TX_MODE;
}
void app_start(void){
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	// tx
	uint8 bcm_operating_flag;
	uint16 lenth = 14;
	bcm_dispatcher(&bcm_instance_ch_0,&bcm_operating_flag);
  aa:	be 01       	movw	r22, r28
  ac:	6f 5f       	subi	r22, 0xFF	; 255
  ae:	7f 4f       	sbci	r23, 0xFF	; 255
  b0:	82 e9       	ldi	r24, 0x92	; 146
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <bcm_dispatcher>
	if(bcm_operating_flag == BCM_IDEL_FLAG){
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	e1 f4       	brne	.+56     	; 0xf6 <app_start+0x56>
		if (bcm_mode == BCM_TX_MODE)
  be:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
  c2:	81 11       	cpse	r24, r1
  c4:	0c c0       	rjmp	.+24     	; 0xde <app_start+0x3e>
		{
			bcm_send_n(&bcm_instance_ch_0,tx_data,lenth);
  c6:	4e e0       	ldi	r20, 0x0E	; 14
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	60 e6       	ldi	r22, 0x60	; 96
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	82 e9       	ldi	r24, 0x92	; 146
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <bcm_send_n>
			bcm_mode = BCM_RX_MODE;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
  dc:	0c c0       	rjmp	.+24     	; 0xf6 <app_start+0x56>
		}else if (bcm_mode == BCM_RX_MODE){
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	51 f4       	brne	.+20     	; 0xf6 <app_start+0x56>
			bcm_recive_n(&bcm_instance_ch_0,rx_data,&rx_length);
  e2:	49 ea       	ldi	r20, 0xA9	; 169
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	6a ea       	ldi	r22, 0xAA	; 170
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	82 e9       	ldi	r24, 0x92	; 146
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 a7 01 	call	0x34e	; 0x34e <bcm_recive_n>
			bcm_mode = BCM_TX_MODE;
  f2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end>
		}
	}

  f6:	0f 90       	pop	r0
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <main>:

#include "application/app.h"
int main(void)
{

	app_init();
  fe:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
    while (1) 
    {
		app_start();
 102:	0e 94 50 00 	call	0xa0	; 0xa0 <app_start>
 106:	fd cf       	rjmp	.-6      	; 0x102 <main+0x4>

00000108 <uart_tx_callback>:
			
		default:
		return BCM_INVALID_PROTOCOL;
	}
	return BCM_OK;
}
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	19 82       	std	Y+1, r1	; 0x01
 114:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <counter.1736>
 118:	81 11       	cpse	r24, r1
 11a:	0d c0       	rjmp	.+26     	; 0x136 <uart_tx_callback+0x2e>
 11c:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <pakets+0x3>
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_write>
 12a:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <counter.1736>
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <counter.1736>
 134:	25 c0       	rjmp	.+74     	; 0x180 <uart_tx_callback+0x78>
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <pakets+0x2>
 13c:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <pakets+0x3>
 140:	21 50       	subi	r18, 0x01	; 1
 142:	31 09       	sbc	r19, r1
 144:	82 17       	cp	r24, r18
 146:	93 07       	cpc	r25, r19
 148:	a0 f4       	brcc	.+40     	; 0x172 <uart_tx_callback+0x6a>
 14a:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <pakets>
 14e:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <pakets+0x1>
 152:	8e 0f       	add	r24, r30
 154:	9f 1f       	adc	r25, r31
 156:	fc 01       	movw	r30, r24
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	80 81       	ld	r24, Z
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_write>
 166:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <counter.1736>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <counter.1736>
 170:	07 c0       	rjmp	.+14     	; 0x180 <uart_tx_callback+0x78>
 172:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <counter.1736>
 176:	0e 94 63 02 	call	0x4c6	; 0x4c6 <uart_udrei_disable>
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <enm_transiver_state>
 180:	0f 90       	pop	r0
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <uart_rx_callback>:
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	1f 92       	push	r1
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	19 82       	std	Y+1, r1	; 0x01
 194:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <counter.1741>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	18 f5       	brcc	.+70     	; 0x1e2 <uart_rx_callback+0x5a>
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <uart_read>
 1a4:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <pakets_recive+0x2>
 1a8:	f0 91 e1 00 	lds	r31, 0x00E1	; 0x8000e1 <pakets_recive+0x3>
 1ac:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <counter.1741>
 1b0:	42 2f       	mov	r20, r18
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <uart_rx_callback+0x42>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	4a 95       	dec	r20
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <uart_rx_callback+0x3e>
 1ce:	40 81       	ld	r20, Z
 1d0:	51 81       	ldd	r21, Z+1	; 0x01
 1d2:	84 2b       	or	r24, r20
 1d4:	95 2b       	or	r25, r21
 1d6:	91 83       	std	Z+1, r25	; 0x01
 1d8:	80 83       	st	Z, r24
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	20 93 dc 00 	sts	0x00DC, r18	; 0x8000dc <counter.1741>
 1e0:	30 c0       	rjmp	.+96     	; 0x242 <uart_rx_callback+0xba>
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <pakets_recive+0x2>
 1e8:	f0 91 e1 00 	lds	r31, 0x00E1	; 0x8000e1 <pakets_recive+0x3>
 1ec:	20 81       	ld	r18, Z
 1ee:	31 81       	ldd	r19, Z+1	; 0x01
 1f0:	82 17       	cp	r24, r18
 1f2:	93 07       	cpc	r25, r19
 1f4:	30 f5       	brcc	.+76     	; 0x242 <uart_rx_callback+0xba>
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <uart_read>
 1fe:	ae ed       	ldi	r26, 0xDE	; 222
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	2d 91       	ld	r18, X+
 204:	3c 91       	ld	r19, X
 206:	11 97       	sbiw	r26, 0x01	; 1
 208:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <counter.1741>
 20c:	e8 2f       	mov	r30, r24
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	32 97       	sbiw	r30, 0x02	; 2
 212:	e2 0f       	add	r30, r18
 214:	f3 1f       	adc	r31, r19
 216:	99 81       	ldd	r25, Y+1	; 0x01
 218:	90 83       	st	Z, r25
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <counter.1741>
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	12 96       	adiw	r26, 0x02	; 2
 224:	ed 91       	ld	r30, X+
 226:	fc 91       	ld	r31, X
 228:	13 97       	sbiw	r26, 0x03	; 3
 22a:	20 81       	ld	r18, Z
 22c:	31 81       	ldd	r19, Z+1	; 0x01
 22e:	82 17       	cp	r24, r18
 230:	93 07       	cpc	r25, r19
 232:	38 f0       	brcs	.+14     	; 0x242 <uart_rx_callback+0xba>
 234:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <counter.1741>
 238:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <uart_rxci_disable>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <enm_transiver_state>
 242:	0f 90       	pop	r0
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <bcm_init>:
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	69 f1       	breq	.+90     	; 0x2ac <bcm_init+0x62>
 252:	dc 01       	movw	r26, r24
 254:	11 96       	adiw	r26, 0x01	; 1
 256:	2c 91       	ld	r18, X
 258:	11 97       	sbiw	r26, 0x01	; 1
 25a:	23 30       	cpi	r18, 0x03	; 3
 25c:	48 f5       	brcc	.+82     	; 0x2b0 <bcm_init+0x66>
 25e:	ec 91       	ld	r30, X
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	ee 0f       	add	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	ea 50       	subi	r30, 0x0A	; 10
 26c:	ff 4f       	sbci	r31, 0xFF	; 255
 26e:	31 81       	ldd	r19, Z+1	; 0x01
 270:	31 11       	cpse	r19, r1
 272:	20 c0       	rjmp	.+64     	; 0x2b4 <bcm_init+0x6a>
 274:	ec 01       	movw	r28, r24
 276:	22 23       	and	r18, r18
 278:	19 f0       	breq	.+6      	; 0x280 <bcm_init+0x36>
 27a:	23 30       	cpi	r18, 0x03	; 3
 27c:	e8 f4       	brcc	.+58     	; 0x2b8 <bcm_init+0x6e>
 27e:	04 c0       	rjmp	.+8      	; 0x288 <bcm_init+0x3e>
 280:	8a 81       	ldd	r24, Y+2	; 0x02
 282:	9b 81       	ldd	r25, Y+3	; 0x03
 284:	0e 94 0a 02 	call	0x414	; 0x414 <uart_init>
 288:	e8 81       	ld	r30, Y
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	ea 50       	subi	r30, 0x0A	; 10
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	88 81       	ld	r24, Y
 29a:	99 81       	ldd	r25, Y+1	; 0x01
 29c:	aa 81       	ldd	r26, Y+2	; 0x02
 29e:	bb 81       	ldd	r27, Y+3	; 0x03
 2a0:	80 83       	st	Z, r24
 2a2:	91 83       	std	Z+1, r25	; 0x01
 2a4:	a2 83       	std	Z+2, r26	; 0x02
 2a6:	b3 83       	std	Z+3, r27	; 0x03
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	07 c0       	rjmp	.+14     	; 0x2ba <bcm_init+0x70>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <bcm_init+0x70>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <bcm_init+0x70>
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <bcm_init+0x70>
 2b8:	84 e0       	ldi	r24, 0x04	; 4
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <bcm_send_n>:

// Send multiple bytes of data over a specific BCM instance
enu_system_status_t bcm_send_n(str_bcm_instance_t* ptr_str_bcm_instance, uint8* data, uint16 length) {
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	1f 92       	push	r1
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
	if (ptr_str_bcm_instance == NULL || ptr_str_bcm_instance->bcm_instance_id >= NUM_BCM_INSTANCES) {
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	89 f1       	breq	.+98     	; 0x330 <bcm_send_n+0x70>
 2ce:	dc 01       	movw	r26, r24
 2d0:	ec 91       	ld	r30, X
 2d2:	e3 30       	cpi	r30, 0x03	; 3
 2d4:	78 f5       	brcc	.+94     	; 0x334 <bcm_send_n+0x74>
		return BCM_INVALID_INSTANCE;
	}
	
	if (bcm_instances[ptr_str_bcm_instance->bcm_instance_id].protocol >= BCM_MAX_PROTOCOL) {
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	ea 50       	subi	r30, 0x0A	; 10
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	21 81       	ldd	r18, Z+1	; 0x01
 2e6:	23 30       	cpi	r18, 0x03	; 3
 2e8:	38 f5       	brcc	.+78     	; 0x338 <bcm_send_n+0x78>
		return BCM_NOT_INITIALIZED;
	}
	
	if (data == NULL || length == 0) {
 2ea:	61 15       	cp	r22, r1
 2ec:	71 05       	cpc	r23, r1
 2ee:	31 f1       	breq	.+76     	; 0x33c <bcm_send_n+0x7c>
 2f0:	41 15       	cp	r20, r1
 2f2:	51 05       	cpc	r21, r1
 2f4:	29 f1       	breq	.+74     	; 0x340 <bcm_send_n+0x80>
		return BCM_INVALID_PARAMETER;
	}
	
	// Perform protocol-specific send operation
	uint8 temp = 0;
	switch (ptr_str_bcm_instance->protocol) {
 2f6:	11 96       	adiw	r26, 0x01	; 1
 2f8:	8c 91       	ld	r24, X
 2fa:	88 23       	and	r24, r24
 2fc:	21 f0       	breq	.+8      	; 0x306 <bcm_send_n+0x46>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	08 f1       	brcs	.+66     	; 0x344 <bcm_send_n+0x84>
		case BCM_PROTOCOL_I2C:

		break;
		
		default:
		return BCM_INVALID_PROTOCOL;
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	20 c0       	rjmp	.+64     	; 0x346 <bcm_send_n+0x86>
	
	// Perform protocol-specific send operation
	uint8 temp = 0;
	switch (ptr_str_bcm_instance->protocol) {
		case BCM_PROTOCOL_UART:
			enm_transiver_state[BCM_PROTOCOL_UART] = BCM_BUSY_FLAG;
 306:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <enm_transiver_state>
			// add 2 byte of the length
			pakets[BCM_PROTOCOL_UART].data_length = (length + 2);
 30a:	4e 5f       	subi	r20, 0xFE	; 254
 30c:	5f 4f       	sbci	r21, 0xFF	; 255
 30e:	ea ee       	ldi	r30, 0xEA	; 234
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	53 83       	std	Z+3, r21	; 0x03
 314:	42 83       	std	Z+2, r20	; 0x02
			pakets[BCM_PROTOCOL_UART].ptr_data = data;
 316:	71 83       	std	Z+1, r23	; 0x01
 318:	60 83       	st	Z, r22
			// send data length
			temp = (uint8)pakets[BCM_PROTOCOL_UART].data_length;
 31a:	49 83       	std	Y+1, r20	; 0x01
			uart_write(&temp);
 31c:	ce 01       	movw	r24, r28
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_write>
			uart_write_INT(uart_tx_callback);
 324:	84 e8       	ldi	r24, 0x84	; 132
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 92 02 	call	0x524	; 0x524 <uart_write_INT>
		
		default:
		return BCM_INVALID_PROTOCOL;
	}
	
	return BCM_OK;
 32c:	80 e0       	ldi	r24, 0x00	; 0
			pakets[BCM_PROTOCOL_UART].ptr_data = data;
			// send data length
			temp = (uint8)pakets[BCM_PROTOCOL_UART].data_length;
			uart_write(&temp);
			uart_write_INT(uart_tx_callback);
		break;
 32e:	0b c0       	rjmp	.+22     	; 0x346 <bcm_send_n+0x86>
}

// Send multiple bytes of data over a specific BCM instance
enu_system_status_t bcm_send_n(str_bcm_instance_t* ptr_str_bcm_instance, uint8* data, uint16 length) {
	if (ptr_str_bcm_instance == NULL || ptr_str_bcm_instance->bcm_instance_id >= NUM_BCM_INSTANCES) {
		return BCM_INVALID_INSTANCE;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	09 c0       	rjmp	.+18     	; 0x346 <bcm_send_n+0x86>
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	07 c0       	rjmp	.+14     	; 0x346 <bcm_send_n+0x86>
	}
	
	if (bcm_instances[ptr_str_bcm_instance->bcm_instance_id].protocol >= BCM_MAX_PROTOCOL) {
		return BCM_NOT_INITIALIZED;
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	05 c0       	rjmp	.+10     	; 0x346 <bcm_send_n+0x86>
	}
	
	if (data == NULL || length == 0) {
		return BCM_INVALID_PARAMETER;
 33c:	85 e0       	ldi	r24, 0x05	; 5
 33e:	03 c0       	rjmp	.+6      	; 0x346 <bcm_send_n+0x86>
 340:	85 e0       	ldi	r24, 0x05	; 5
 342:	01 c0       	rjmp	.+2      	; 0x346 <bcm_send_n+0x86>
		
		default:
		return BCM_INVALID_PROTOCOL;
	}
	
	return BCM_OK;
 344:	80 e0       	ldi	r24, 0x00	; 0
}
 346:	0f 90       	pop	r0
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <bcm_recive_n>:


enu_system_status_t bcm_recive_n(str_bcm_instance_t* ptr_str_bcm_instance, uint8* data, uint16 *length) {
	if (ptr_str_bcm_instance == NULL || ptr_str_bcm_instance->bcm_instance_id >= NUM_BCM_INSTANCES) {
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	39 f1       	breq	.+78     	; 0x3a0 <bcm_recive_n+0x52>
 352:	dc 01       	movw	r26, r24
 354:	ec 91       	ld	r30, X
 356:	e3 30       	cpi	r30, 0x03	; 3
 358:	28 f5       	brcc	.+74     	; 0x3a4 <bcm_recive_n+0x56>
		return BCM_INVALID_INSTANCE;
	}
	
	if (bcm_instances[ptr_str_bcm_instance->bcm_instance_id].protocol >= BCM_MAX_PROTOCOL) {
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	ea 50       	subi	r30, 0x0A	; 10
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	21 81       	ldd	r18, Z+1	; 0x01
 36a:	23 30       	cpi	r18, 0x03	; 3
 36c:	e8 f4       	brcc	.+58     	; 0x3a8 <bcm_recive_n+0x5a>
		return BCM_NOT_INITIALIZED;
	}
	
	// Perform protocol-specific send operation
	uint8 temp = 0;
	switch (ptr_str_bcm_instance->protocol) {
 36e:	11 96       	adiw	r26, 0x01	; 1
 370:	8c 91       	ld	r24, X
 372:	88 23       	and	r24, r24
 374:	21 f0       	breq	.+8      	; 0x37e <bcm_recive_n+0x30>
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	c8 f0       	brcs	.+50     	; 0x3ac <bcm_recive_n+0x5e>
		case BCM_PROTOCOL_I2C:

		break;
		
		default:
		return BCM_INVALID_PROTOCOL;
 37a:	84 e0       	ldi	r24, 0x04	; 4
 37c:	08 95       	ret
 37e:	da 01       	movw	r26, r20
	
	// Perform protocol-specific send operation
	uint8 temp = 0;
	switch (ptr_str_bcm_instance->protocol) {
		case BCM_PROTOCOL_UART:
		enm_transiver_state[BCM_PROTOCOL_UART] = BCM_BUSY_FLAG;
 380:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <enm_transiver_state>
		// add 2 byte of the length
		*length = 0;
 384:	1d 92       	st	X+, r1
 386:	1c 92       	st	X, r1
		pakets_recive[BCM_PROTOCOL_UART].data_length = length ;
 388:	ee ed       	ldi	r30, 0xDE	; 222
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	53 83       	std	Z+3, r21	; 0x03
 38e:	42 83       	std	Z+2, r20	; 0x02
		pakets_recive[BCM_PROTOCOL_UART].ptr_data = data;
 390:	71 83       	std	Z+1, r23	; 0x01
 392:	60 83       	st	Z, r22

		uart_read_INT(uart_rx_callback);
 394:	84 ec       	ldi	r24, 0xC4	; 196
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 99 02 	call	0x532	; 0x532 <uart_read_INT>
		
		default:
		return BCM_INVALID_PROTOCOL;
	}
	
	return BCM_OK;
 39c:	80 e0       	ldi	r24, 0x00	; 0
		*length = 0;
		pakets_recive[BCM_PROTOCOL_UART].data_length = length ;
		pakets_recive[BCM_PROTOCOL_UART].ptr_data = data;

		uart_read_INT(uart_rx_callback);
		break;
 39e:	08 95       	ret
}


enu_system_status_t bcm_recive_n(str_bcm_instance_t* ptr_str_bcm_instance, uint8* data, uint16 *length) {
	if (ptr_str_bcm_instance == NULL || ptr_str_bcm_instance->bcm_instance_id >= NUM_BCM_INSTANCES) {
		return BCM_INVALID_INSTANCE;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	08 95       	ret
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	08 95       	ret
	}
	
	if (bcm_instances[ptr_str_bcm_instance->bcm_instance_id].protocol >= BCM_MAX_PROTOCOL) {
		return BCM_NOT_INITIALIZED;
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	08 95       	ret
		
		default:
		return BCM_INVALID_PROTOCOL;
	}
	
	return BCM_OK;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
}
 3ae:	08 95       	ret

000003b0 <bcm_dispatcher>:

// Dispatcher function to execute periodic actions and notify events
enu_system_status_t bcm_dispatcher(str_bcm_instance_t* ptr_str_bcm_instance,enm_transiver_state_t * state) {
	if (ptr_str_bcm_instance == NULL || ptr_str_bcm_instance->bcm_instance_id >= NUM_BCM_INSTANCES) {
 3b0:	00 97       	sbiw	r24, 0x00	; 0
 3b2:	41 f1       	breq	.+80     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3b4:	dc 01       	movw	r26, r24
 3b6:	ec 91       	ld	r30, X
 3b8:	e3 30       	cpi	r30, 0x03	; 3
 3ba:	30 f5       	brcc	.+76     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		return BCM_INVALID_INSTANCE;
	}
	
	if (bcm_instances[ptr_str_bcm_instance->bcm_instance_id].protocol  >= BCM_MAX_PROTOCOL) {
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	ee 0f       	add	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	ea 50       	subi	r30, 0x0A	; 10
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	21 81       	ldd	r18, Z+1	; 0x01
 3cc:	23 30       	cpi	r18, 0x03	; 3
 3ce:	f0 f4       	brcc	.+60     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		return BCM_NOT_INITIALIZED;
	}
	
	// Perform protocol-specific periodic actions and event notification
	switch (ptr_str_bcm_instance->protocol) {
 3d0:	11 96       	adiw	r26, 0x01	; 1
 3d2:	8c 91       	ld	r24, X
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	51 f0       	breq	.+20     	; 0x3ec <bcm_dispatcher+0x3c>
 3d8:	18 f0       	brcs	.+6      	; 0x3e0 <bcm_dispatcher+0x30>
 3da:	82 30       	cpi	r24, 0x02	; 2
 3dc:	69 f0       	breq	.+26     	; 0x3f8 <bcm_dispatcher+0x48>
 3de:	18 c0       	rjmp	.+48     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		case BCM_PROTOCOL_UART:
			*state = enm_transiver_state[BCM_PROTOCOL_UART];
 3e0:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <enm_transiver_state>
 3e4:	fb 01       	movw	r30, r22
 3e6:	80 83       	st	Z, r24
		
		default:
		return BCM_INVALID_PROTOCOL;
	}
	
	return BCM_OK;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
	// Perform protocol-specific periodic actions and event notification
	switch (ptr_str_bcm_instance->protocol) {
		case BCM_PROTOCOL_UART:
			*state = enm_transiver_state[BCM_PROTOCOL_UART];
		// add 2 byte of the lengt
		break;
 3ea:	08 95       	ret
		
		case BCM_PROTOCOL_SPI:
			*state = enm_transiver_state[BCM_PROTOCOL_SPI];
 3ec:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <enm_transiver_state+0x1>
 3f0:	db 01       	movw	r26, r22
 3f2:	8c 93       	st	X, r24
		
		default:
		return BCM_INVALID_PROTOCOL;
	}
	
	return BCM_OK;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
		// add 2 byte of the lengt
		break;
		
		case BCM_PROTOCOL_SPI:
			*state = enm_transiver_state[BCM_PROTOCOL_SPI];
		break;
 3f6:	08 95       	ret
		
		case BCM_PROTOCOL_I2C:
			*state = enm_transiver_state[BCM_PROTOCOL_I2C];
 3f8:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <enm_transiver_state+0x2>
 3fc:	fb 01       	movw	r30, r22
 3fe:	80 83       	st	Z, r24
		
		default:
		return BCM_INVALID_PROTOCOL;
	}
	
	return BCM_OK;
 400:	80 e0       	ldi	r24, 0x00	; 0
			*state = enm_transiver_state[BCM_PROTOCOL_SPI];
		break;
		
		case BCM_PROTOCOL_I2C:
			*state = enm_transiver_state[BCM_PROTOCOL_I2C];
		break;
 402:	08 95       	ret
}

// Dispatcher function to execute periodic actions and notify events
enu_system_status_t bcm_dispatcher(str_bcm_instance_t* ptr_str_bcm_instance,enm_transiver_state_t * state) {
	if (ptr_str_bcm_instance == NULL || ptr_str_bcm_instance->bcm_instance_id >= NUM_BCM_INSTANCES) {
		return BCM_INVALID_INSTANCE;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	08 95       	ret
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	08 95       	ret
	}
	
	if (bcm_instances[ptr_str_bcm_instance->bcm_instance_id].protocol  >= BCM_MAX_PROTOCOL) {
		return BCM_NOT_INITIALIZED;
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	08 95       	ret
		case BCM_PROTOCOL_I2C:
			*state = enm_transiver_state[BCM_PROTOCOL_I2C];
		break;
		
		default:
		return BCM_INVALID_PROTOCOL;
 410:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	return BCM_OK;
 412:	08 95       	ret

00000414 <uart_init>:
}
void uart_txci_enable(void){
	SET_BIT(UCSRB_REG,TXCIE);
}
void uart_txci_disable(void){
	CLEAR_BIT(UCSRB_REG,TXCIE);
 414:	fc 01       	movw	r30, r24
 416:	23 81       	ldd	r18, Z+3	; 0x03
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	60 81       	ld	r22, Z
 428:	80 e4       	ldi	r24, 0x40	; 64
 42a:	68 9f       	mul	r22, r24
 42c:	b0 01       	movw	r22, r0
 42e:	11 24       	eor	r1, r1
 430:	92 81       	ldd	r25, Z+2	; 0x02
 432:	80 e1       	ldi	r24, 0x10	; 16
 434:	98 9f       	mul	r25, r24
 436:	a0 01       	movw	r20, r0
 438:	11 24       	eor	r1, r1
 43a:	34 81       	ldd	r19, Z+4	; 0x04
 43c:	91 81       	ldd	r25, Z+1	; 0x01
 43e:	89 2f       	mov	r24, r25
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	20 68       	ori	r18, 0x80	; 128
 448:	26 2b       	or	r18, r22
 44a:	42 2b       	or	r20, r18
 44c:	43 2b       	or	r20, r19
 44e:	84 2b       	or	r24, r20
 450:	80 bd       	out	0x20, r24	; 32
 452:	2b b1       	in	r18, 0x0b	; 11
 454:	95 81       	ldd	r25, Z+5	; 0x05
 456:	89 2f       	mov	r24, r25
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	92 2f       	mov	r25, r18
 460:	9c 7f       	andi	r25, 0xFC	; 252
 462:	89 2b       	or	r24, r25
 464:	8b b9       	out	0x0b, r24	; 11
 466:	21 85       	ldd	r18, Z+9	; 0x09
 468:	80 e1       	ldi	r24, 0x10	; 16
 46a:	28 9f       	mul	r18, r24
 46c:	a0 01       	movw	r20, r0
 46e:	11 24       	eor	r1, r1
 470:	92 85       	ldd	r25, Z+10	; 0x0a
 472:	29 2f       	mov	r18, r25
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	22 0f       	add	r18, r18
 47c:	33 1f       	adc	r19, r19
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	91 81       	ldd	r25, Z+1	; 0x01
 484:	96 95       	lsr	r25
 486:	96 95       	lsr	r25
 488:	89 2f       	mov	r24, r25
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	9a b1       	in	r25, 0x0a	; 10
 496:	24 2b       	or	r18, r20
 498:	82 2b       	or	r24, r18
 49a:	93 70       	andi	r25, 0x03	; 3
 49c:	89 2b       	or	r24, r25
 49e:	8a b9       	out	0x0a, r24	; 10
 4a0:	85 85       	ldd	r24, Z+13	; 0x0d
 4a2:	89 b9       	out	0x09, r24	; 9
 4a4:	86 85       	ldd	r24, Z+14	; 0x0e
 4a6:	80 bd       	out	0x20, r24	; 32
 4a8:	83 85       	ldd	r24, Z+11	; 0x0b
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	31 f0       	breq	.+12     	; 0x4ba <uart_init+0xa6>
 4ae:	84 85       	ldd	r24, Z+12	; 0x0c
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	19 f0       	breq	.+6      	; 0x4ba <uart_init+0xa6>
 4b4:	80 85       	ldd	r24, Z+8	; 0x08
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	09 f4       	brne	.+2      	; 0x4bc <uart_init+0xa8>
 4ba:	78 94       	sei
 4bc:	08 95       	ret

000004be <uart_udrei_enable>:
 4be:	8a b1       	in	r24, 0x0a	; 10
 4c0:	80 62       	ori	r24, 0x20	; 32
 4c2:	8a b9       	out	0x0a, r24	; 10
 4c4:	08 95       	ret

000004c6 <uart_udrei_disable>:
 4c6:	8a b1       	in	r24, 0x0a	; 10
 4c8:	8f 7d       	andi	r24, 0xDF	; 223
 4ca:	8a b9       	out	0x0a, r24	; 10
 4cc:	08 95       	ret

000004ce <uart_rxci_enable>:
 4ce:	8a b1       	in	r24, 0x0a	; 10
 4d0:	80 68       	ori	r24, 0x80	; 128
 4d2:	8a b9       	out	0x0a, r24	; 10
 4d4:	08 95       	ret

000004d6 <uart_rxci_disable>:
 4d6:	8a b1       	in	r24, 0x0a	; 10
 4d8:	8f 77       	andi	r24, 0x7F	; 127
 4da:	8a b9       	out	0x0a, r24	; 10
 4dc:	08 95       	ret

000004de <uart_write>:
}
void uart_write(uint16 *data){
	while (!READ_BIT(UCSRA_REG,UDRE));
 4de:	5d 9b       	sbis	0x0b, 5	; 11
 4e0:	fe cf       	rjmp	.-4      	; 0x4de <uart_write>
	UDR_REG = (uint8)*data;
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 81       	ld	r18, Z
 4e6:	2c b9       	out	0x0c, r18	; 12
	// if data is 9 bit 
	if (READ_BIT(UCSRB_REG, UCSZ2) == 1) {
 4e8:	52 9b       	sbis	0x0a, 2	; 10
 4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <uart_write+0x1a>
		UCSRB_REG = (UCSRB_REG & 0xFE) 
 4ec:	2a b1       	in	r18, 0x0a	; 10
					| ((uint8)(*data >> TXB8));
 4ee:	90 81       	ld	r25, Z
void uart_write(uint16 *data){
	while (!READ_BIT(UCSRA_REG,UDRE));
	UDR_REG = (uint8)*data;
	// if data is 9 bit 
	if (READ_BIT(UCSRB_REG, UCSZ2) == 1) {
		UCSRB_REG = (UCSRB_REG & 0xFE) 
 4f0:	82 2f       	mov	r24, r18
 4f2:	8e 7f       	andi	r24, 0xFE	; 254
 4f4:	89 2b       	or	r24, r25
 4f6:	8a b9       	out	0x0a, r24	; 10
 4f8:	08 95       	ret

000004fa <uart_read>:
					| ((uint8)(*data >> TXB8));
	}
}

void uart_read(uint16 *data) {
 4fa:	fc 01       	movw	r30, r24
	while (!READ_BIT(UCSRA_REG,RXC));
 4fc:	5f 9b       	sbis	0x0b, 7	; 11
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <uart_read+0x2>
	*data = UDR_REG;
 500:	2c b1       	in	r18, 0x0c	; 12
 502:	42 2f       	mov	r20, r18
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	51 83       	std	Z+1, r21	; 0x01
 508:	40 83       	st	Z, r20
	// if it 9 bit 
	if (READ_BIT(UCSRB_REG, UCSZ2) == 1) {
 50a:	52 9b       	sbis	0x0a, 2	; 10
 50c:	0a c0       	rjmp	.+20     	; 0x522 <uart_read+0x28>
		*data = ((UCSRB_REG & 0x02) << RXB8) | *data;
 50e:	9a b1       	in	r25, 0x0a	; 10
 510:	92 70       	andi	r25, 0x02	; 2
 512:	29 2f       	mov	r18, r25
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	24 2b       	or	r18, r20
 51c:	35 2b       	or	r19, r21
 51e:	31 83       	std	Z+1, r19	; 0x01
 520:	20 83       	st	Z, r18
 522:	08 95       	ret

00000524 <uart_write_INT>:
	}
}

void uart_write_INT(void(*callback)(void)) {
	tx_callback = callback;
 524:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tx_callback+0x1>
 528:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tx_callback>
	uart_udrei_enable();
 52c:	0e 94 5f 02 	call	0x4be	; 0x4be <uart_udrei_enable>
 530:	08 95       	ret

00000532 <uart_read_INT>:
}

void uart_read_INT(void(*callback)(void)) {
	rx_callback = callback;
 532:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rx_callback+0x1>
 536:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rx_callback>
	uart_rxci_enable();
 53a:	0e 94 67 02 	call	0x4ce	; 0x4ce <uart_rxci_enable>
 53e:	08 95       	ret

00000540 <__vector_13>:
}

ISR(USART_RXC) {
 540:	1f 92       	push	r1
 542:	0f 92       	push	r0
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	2f 93       	push	r18
 54c:	3f 93       	push	r19
 54e:	4f 93       	push	r20
 550:	5f 93       	push	r21
 552:	6f 93       	push	r22
 554:	7f 93       	push	r23
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
 55e:	ef 93       	push	r30
 560:	ff 93       	push	r31
	rx_callback();
 562:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <rx_callback>
 566:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <rx_callback+0x1>
 56a:	09 95       	icall
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <__vector_14>:
ISR(USART_UDRE) {
 58e:	1f 92       	push	r1
 590:	0f 92       	push	r0
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	0f 92       	push	r0
 596:	11 24       	eor	r1, r1
 598:	2f 93       	push	r18
 59a:	3f 93       	push	r19
 59c:	4f 93       	push	r20
 59e:	5f 93       	push	r21
 5a0:	6f 93       	push	r22
 5a2:	7f 93       	push	r23
 5a4:	8f 93       	push	r24
 5a6:	9f 93       	push	r25
 5a8:	af 93       	push	r26
 5aa:	bf 93       	push	r27
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
	(*tx_callback)();
 5b0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <tx_callback>
 5b4:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <tx_callback+0x1>
 5b8:	09 95       	icall
}
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	bf 91       	pop	r27
 5c0:	af 91       	pop	r26
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	7f 91       	pop	r23
 5c8:	6f 91       	pop	r22
 5ca:	5f 91       	pop	r21
 5cc:	4f 91       	pop	r20
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	0f 90       	pop	r0
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	0f 90       	pop	r0
 5d8:	1f 90       	pop	r1
 5da:	18 95       	reti

000005dc <_exit>:
 5dc:	f8 94       	cli

000005de <__stop_program>:
 5de:	ff cf       	rjmp	.-2      	; 0x5de <__stop_program>
