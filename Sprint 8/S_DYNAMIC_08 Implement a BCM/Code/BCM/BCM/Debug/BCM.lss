
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000294  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d86  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  0000118e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c3  00000000  00000000  0000184f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078f  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000191  00000000  00000000  000025ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_13>
  38:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "mcal/uart/uart_interface.h"
#define F_CPU 8000000
#include <util/delay.h>
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	61 97       	sbiw	r28, 0x11	; 17
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	uart_config_t uart;
	uart.uart_mode = UART_ASYNC_MODE;
  a6:	19 82       	std	Y+1, r1	; 0x01
	uart.uart_parity_mode = UART_PARITY_DISABLED;
  a8:	1b 82       	std	Y+3, r1	; 0x03
	uart.uart_data_size =  UART_CS_8;
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	8a 83       	std	Y+2, r24	; 0x02
	// 8000000
	uart.uart_baudrate = 51;
  ae:	83 e3       	ldi	r24, 0x33	; 51
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	8c 87       	std	Y+12, r24	; 0x0c
  b8:	9d 87       	std	Y+13, r25	; 0x0d
  ba:	ae 87       	std	Y+14, r26	; 0x0e
  bc:	bf 87       	std	Y+15, r27	; 0x0f
	uart.uart_tx_mode =  UART_TX_ENABLE;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	8b 87       	std	Y+11, r24	; 0x0b
	uart.uart_rx_mode =  UART_RX_ENABLE;
  c2:	8a 87       	std	Y+10, r24	; 0x0a
	uart.uart_stop_mode = UART_STOP_1_BIT;
  c4:	1c 82       	std	Y+4, r1	; 0x04
	uart.uart_interrupt_mode = UART_INTERRUPT_ENABLE;
  c6:	89 87       	std	Y+9, r24	; 0x09
	uart.uart_transmit_mode = UART_TRANSMIT_ENABLE;
  c8:	88 87       	std	Y+8, r24	; 0x08
	uart_init(&uart);
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	0e 94 7e 00 	call	0xfc	; 0xfc <uart_init>
	uint16 data = "0";
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	99 8b       	std	Y+17, r25	; 0x11
  d8:	88 8b       	std	Y+16, r24	; 0x10
    while (1) 
    {
		uart_write_INT(&uart,&data);
  da:	be 01       	movw	r22, r28
  dc:	60 5f       	subi	r22, 0xF0	; 240
  de:	7f 4f       	sbci	r23, 0xFF	; 255
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <uart_write_INT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	81 ee       	ldi	r24, 0xE1	; 225
  ec:	94 e0       	ldi	r25, 0x04	; 4
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x5c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x66>
  f8:	00 00       	nop
  fa:	ef cf       	rjmp	.-34     	; 0xda <main+0x48>

000000fc <uart_init>:

void uart_read_INT(uart_config_t *uart_config, uint16 *data) {
	while (rx_flag_INT_used == 1);
	rx_flag_INT_used = 1;
	rx_data = data;
	SET_BIT(UCSRB_REG, RXCIE);
  fc:	fc 01       	movw	r30, r24
  fe:	23 81       	ldd	r18, Z+3	; 0x03
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	60 81       	ld	r22, Z
 110:	80 e4       	ldi	r24, 0x40	; 64
 112:	68 9f       	mul	r22, r24
 114:	b0 01       	movw	r22, r0
 116:	11 24       	eor	r1, r1
 118:	92 81       	ldd	r25, Z+2	; 0x02
 11a:	80 e1       	ldi	r24, 0x10	; 16
 11c:	98 9f       	mul	r25, r24
 11e:	a0 01       	movw	r20, r0
 120:	11 24       	eor	r1, r1
 122:	34 81       	ldd	r19, Z+4	; 0x04
 124:	91 81       	ldd	r25, Z+1	; 0x01
 126:	89 2f       	mov	r24, r25
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	20 68       	ori	r18, 0x80	; 128
 130:	26 2b       	or	r18, r22
 132:	42 2b       	or	r20, r18
 134:	43 2b       	or	r20, r19
 136:	84 2b       	or	r24, r20
 138:	80 bd       	out	0x20, r24	; 32
 13a:	2b b1       	in	r18, 0x0b	; 11
 13c:	95 81       	ldd	r25, Z+5	; 0x05
 13e:	89 2f       	mov	r24, r25
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	92 2f       	mov	r25, r18
 148:	9c 7f       	andi	r25, 0xFC	; 252
 14a:	89 2b       	or	r24, r25
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	21 85       	ldd	r18, Z+9	; 0x09
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	28 9f       	mul	r18, r24
 154:	a0 01       	movw	r20, r0
 156:	11 24       	eor	r1, r1
 158:	92 85       	ldd	r25, Z+10	; 0x0a
 15a:	29 2f       	mov	r18, r25
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	22 0f       	add	r18, r18
 168:	33 1f       	adc	r19, r19
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	96 95       	lsr	r25
 16e:	96 95       	lsr	r25
 170:	89 2f       	mov	r24, r25
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	9a b1       	in	r25, 0x0a	; 10
 17e:	24 2b       	or	r18, r20
 180:	82 2b       	or	r24, r18
 182:	93 70       	andi	r25, 0x03	; 3
 184:	89 2b       	or	r24, r25
 186:	8a b9       	out	0x0a, r24	; 10
 188:	83 85       	ldd	r24, Z+11	; 0x0b
 18a:	89 b9       	out	0x09, r24	; 9
 18c:	83 85       	ldd	r24, Z+11	; 0x0b
 18e:	94 85       	ldd	r25, Z+12	; 0x0c
 190:	a5 85       	ldd	r26, Z+13	; 0x0d
 192:	b6 85       	ldd	r27, Z+14	; 0x0e
 194:	89 2f       	mov	r24, r25
 196:	9a 2f       	mov	r25, r26
 198:	ab 2f       	mov	r26, r27
 19a:	bb 27       	eor	r27, r27
 19c:	80 bd       	out	0x20, r24	; 32
 19e:	80 85       	ldd	r24, Z+8	; 0x08
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <uart_init+0xaa>
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <uart_write_INT>:
 1a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	e1 f3       	breq	.-8      	; 0x1a8 <uart_write_INT>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1b6:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <tx_data+0x1>
 1ba:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <tx_data>
 1be:	8a b1       	in	r24, 0x0a	; 10
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	8a b9       	out	0x0a, r24	; 10
 1c4:	08 95       	ret

000001c6 <__vector_13>:
}

ISR(USART_RXC_vect) {
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
	rx_flag_INT_used = 0;
 1dc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <rx_flag_INT_used>
	CLEAR_BIT(UCSRB_REG, RXCIE);
 1e0:	8a b1       	in	r24, 0x0a	; 10
 1e2:	8f 77       	andi	r24, 0x7F	; 127
 1e4:	8a b9       	out	0x0a, r24	; 10
	if (rx_data != NULL) {
 1e6:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <rx_data>
 1ea:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <rx_data+0x1>
 1ee:	30 97       	sbiw	r30, 0x00	; 0
 1f0:	a1 f0       	breq	.+40     	; 0x21a <__vector_13+0x54>
		*rx_data = UDR_REG;
 1f2:	8c b1       	in	r24, 0x0c	; 12
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	91 83       	std	Z+1, r25	; 0x01
 1f8:	80 83       	st	Z, r24
		if (READ_BIT(UCSRB_REG, UCSZ2) == 1) {
 1fa:	52 9b       	sbis	0x0a, 2	; 10
 1fc:	0e c0       	rjmp	.+28     	; 0x21a <__vector_13+0x54>
			*rx_data = ((UCSRB_REG & 0x02) << 7) | *rx_data;
 1fe:	8a b1       	in	r24, 0x0a	; 10
 200:	82 70       	andi	r24, 0x02	; 2
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	96 95       	lsr	r25
 206:	98 2f       	mov	r25, r24
 208:	88 27       	eor	r24, r24
 20a:	97 95       	ror	r25
 20c:	87 95       	ror	r24
 20e:	20 81       	ld	r18, Z
 210:	31 81       	ldd	r19, Z+1	; 0x01
 212:	82 2b       	or	r24, r18
 214:	93 2b       	or	r25, r19
 216:	91 83       	std	Z+1, r25	; 0x01
 218:	80 83       	st	Z, r24
		}
	}
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_14>:

ISR(USART_UDRE_vect) {
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
	tx_flag_INT_used = 0;
 246:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	CLEAR_BIT(UCSRB_REG, UDRIE);
 24a:	8a b1       	in	r24, 0x0a	; 10
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	8a b9       	out	0x0a, r24	; 10
	if (tx_data != NULL) {
 250:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <tx_data>
 254:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <tx_data+0x1>
 258:	30 97       	sbiw	r30, 0x00	; 0
 25a:	79 f0       	breq	.+30     	; 0x27a <__vector_14+0x4a>
		UDR_REG = *tx_data;
 25c:	80 81       	ld	r24, Z
 25e:	91 81       	ldd	r25, Z+1	; 0x01
 260:	8c b9       	out	0x0c, r24	; 12
		if (READ_BIT(UCSRB_REG, UCSZ2) == 1) {
 262:	52 9b       	sbis	0x0a, 2	; 10
 264:	0a c0       	rjmp	.+20     	; 0x27a <__vector_14+0x4a>
			UCSRB_REG = (UCSRB_REG & 0xFE) | ((uint8)(*tx_data >> 8));
 266:	8a b1       	in	r24, 0x0a	; 10
 268:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <tx_data>
 26c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <tx_data+0x1>
 270:	20 81       	ld	r18, Z
 272:	31 81       	ldd	r19, Z+1	; 0x01
 274:	8e 7f       	andi	r24, 0xFE	; 254
 276:	83 2b       	or	r24, r19
 278:	8a b9       	out	0x0a, r24	; 10
		}
	}
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	3f 91       	pop	r19
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
