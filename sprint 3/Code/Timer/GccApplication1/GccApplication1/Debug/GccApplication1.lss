
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000320  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ace  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000710  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060c  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003de  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042a  00000000  00000000  000021de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  74:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <AppInit>:

#include "application.h"
uint8_t btnState ;

void AppInit(){
	LED_init(PORT_A,PIN4);
  7c:	64 e0       	ldi	r22, 0x04	; 4
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 66 00 	call	0xcc	; 0xcc <LED_init>
	BUTTON_init(BUTTON_1_PORT,BUTTON_1_PIN);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	83 e4       	ldi	r24, 0x43	; 67
  88:	0e 94 5f 00 	call	0xbe	; 0xbe <BUTTON_init>
	
	btnState = 0;
  8c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  90:	08 95       	ret

00000092 <AppStart>:
}

void AppStart(){
	
	BUTTON_status(BUTTON_1_PORT,BUTTON_1_PIN,&btnState);
  92:	40 e6       	ldi	r20, 0x60	; 96
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	83 e4       	ldi	r24, 0x43	; 67
  9a:	0e 94 63 00 	call	0xc6	; 0xc6 <BUTTON_status>
	if (btnState == BUTTON_HIGH)
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	29 f4       	brne	.+10     	; 0xb0 <AppStart+0x1e>
	{
		LED_on(PORT_A,PIN4);
  a6:	64 e0       	ldi	r22, 0x04	; 4
  a8:	81 e4       	ldi	r24, 0x41	; 65
  aa:	0e 94 6a 00 	call	0xd4	; 0xd4 <LED_on>
  ae:	08 95       	ret
	} else if  (btnState == BUTTON_LOW) {
  b0:	81 11       	cpse	r24, r1
  b2:	04 c0       	rjmp	.+8      	; 0xbc <AppStart+0x2a>
		LED_off(PORT_A,PIN4);
  b4:	64 e0       	ldi	r22, 0x04	; 4
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	0e 94 6e 00 	call	0xdc	; 0xdc <LED_off>
  bc:	08 95       	ret

000000be <BUTTON_init>:
#include "button.h"



void BUTTON_init(uint8_t button_port , uint8_t button_pin){
	DIO_init(button_port,button_pin,IN);
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	0e 94 77 00 	call	0xee	; 0xee <DIO_init>
  c4:	08 95       	ret

000000c6 <BUTTON_status>:
}
void BUTTON_status(uint8_t button_port , uint8_t button_pin,uint8_t *status){
	DIO_read(button_port,button_pin,status);
  c6:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_read>
  ca:	08 95       	ret

000000cc <LED_init>:
 */ 
#include "led.h"


void LED_init(uint8_t led_port,uint8_t led_pin){
	DIO_init(led_port,led_pin,OUT);
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	0e 94 77 00 	call	0xee	; 0xee <DIO_init>
  d2:	08 95       	ret

000000d4 <LED_on>:
}
void LED_on(uint8_t led_port,uint8_t led_pin){
	DIO_write(led_port,led_pin,HIGH);
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
  da:	08 95       	ret

000000dc <LED_off>:
}
void LED_off(uint8_t led_port,uint8_t led_pin){
	DIO_write(led_port,led_pin,LOW);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
  e2:	08 95       	ret

000000e4 <main>:
	// DDRA |= (1<<0);
	//DIO_init(PORT_A,PIN4,OUT);
	//DIO_init(PORT_B,PIN3,OUT);
	
	//LED_init(PORT_A,PIN4);
	AppInit();
  e4:	0e 94 3e 00 	call	0x7c	; 0x7c <AppInit>
		//PORTA |= (1<<0);
		//DIO_write(PORT_A,PIN4,HIGH);
		//DIO_write(PORT_B,PIN3,LOW);
		//LED_on(PORT_A,PIN4);
		
		AppStart();
  e8:	0e 94 49 00 	call	0x92	; 0x92 <AppStart>
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <main+0x4>

000000ee <DIO_init>:
		break;
		case PORT_C:
		 TOGGLE_BIT(PORTC,pinNumber); 
		break;
		case PORT_D:
		 TOGGLE_BIT(PORTD,pinNumber);
  ee:	82 34       	cpi	r24, 0x42	; 66
  f0:	19 f1       	breq	.+70     	; 0x138 <DIO_init+0x4a>
  f2:	18 f4       	brcc	.+6      	; 0xfa <DIO_init+0xc>
  f4:	81 34       	cpi	r24, 0x41	; 65
  f6:	39 f0       	breq	.+14     	; 0x106 <DIO_init+0x18>
  f8:	08 95       	ret
  fa:	83 34       	cpi	r24, 0x43	; 67
  fc:	b1 f1       	breq	.+108    	; 0x16a <DIO_init+0x7c>
  fe:	84 34       	cpi	r24, 0x44	; 68
 100:	09 f4       	brne	.+2      	; 0x104 <DIO_init+0x16>
 102:	4c c0       	rjmp	.+152    	; 0x19c <DIO_init+0xae>
 104:	08 95       	ret
 106:	41 11       	cpse	r20, r1
 108:	0c c0       	rjmp	.+24     	; 0x122 <DIO_init+0x34>
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_init+0x28>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_init+0x24>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26
 120:	08 95       	ret
 122:	2a b3       	in	r18, 0x1a	; 26
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_init+0x40>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_init+0x3c>
 132:	82 2b       	or	r24, r18
 134:	8a bb       	out	0x1a, r24	; 26
 136:	08 95       	ret
 138:	41 11       	cpse	r20, r1
 13a:	0c c0       	rjmp	.+24     	; 0x154 <DIO_init+0x66>
 13c:	27 b3       	in	r18, 0x17	; 23
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_init+0x5a>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_init+0x56>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	87 bb       	out	0x17, r24	; 23
 152:	08 95       	ret
 154:	27 b3       	in	r18, 0x17	; 23
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_init+0x72>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_init+0x6e>
 164:	82 2b       	or	r24, r18
 166:	87 bb       	out	0x17, r24	; 23
 168:	08 95       	ret
 16a:	41 11       	cpse	r20, r1
 16c:	0c c0       	rjmp	.+24     	; 0x186 <DIO_init+0x98>
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_init+0x8c>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_init+0x88>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	84 bb       	out	0x14, r24	; 20
 184:	08 95       	ret
 186:	24 b3       	in	r18, 0x14	; 20
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_init+0xa4>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_init+0xa0>
 196:	82 2b       	or	r24, r18
 198:	84 bb       	out	0x14, r24	; 20
 19a:	08 95       	ret
 19c:	41 11       	cpse	r20, r1
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <DIO_init+0xca>
 1a0:	21 b3       	in	r18, 0x11	; 17
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_init+0xbe>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_init+0xba>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	81 bb       	out	0x11, r24	; 17
 1b6:	08 95       	ret
 1b8:	21 b3       	in	r18, 0x11	; 17
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_init+0xd6>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_init+0xd2>
 1c8:	82 2b       	or	r24, r18
 1ca:	81 bb       	out	0x11, r24	; 17
 1cc:	08 95       	ret

000001ce <DIO_write>:
 1ce:	82 34       	cpi	r24, 0x42	; 66
 1d0:	19 f1       	breq	.+70     	; 0x218 <DIO_write+0x4a>
 1d2:	18 f4       	brcc	.+6      	; 0x1da <DIO_write+0xc>
 1d4:	81 34       	cpi	r24, 0x41	; 65
 1d6:	39 f0       	breq	.+14     	; 0x1e6 <DIO_write+0x18>
 1d8:	08 95       	ret
 1da:	83 34       	cpi	r24, 0x43	; 67
 1dc:	b1 f1       	breq	.+108    	; 0x24a <DIO_write+0x7c>
 1de:	84 34       	cpi	r24, 0x44	; 68
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <DIO_write+0x16>
 1e2:	4c c0       	rjmp	.+152    	; 0x27c <DIO_write+0xae>
 1e4:	08 95       	ret
 1e6:	41 11       	cpse	r20, r1
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <DIO_write+0x34>
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_write+0x28>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_write+0x24>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	8b bb       	out	0x1b, r24	; 27
 200:	08 95       	ret
 202:	2b b3       	in	r18, 0x1b	; 27
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_write+0x40>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_write+0x3c>
 212:	82 2b       	or	r24, r18
 214:	8b bb       	out	0x1b, r24	; 27
 216:	08 95       	ret
 218:	41 11       	cpse	r20, r1
 21a:	0c c0       	rjmp	.+24     	; 0x234 <DIO_write+0x66>
 21c:	28 b3       	in	r18, 0x18	; 24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_write+0x5a>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_write+0x56>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	88 bb       	out	0x18, r24	; 24
 232:	08 95       	ret
 234:	28 b3       	in	r18, 0x18	; 24
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_write+0x72>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_write+0x6e>
 244:	82 2b       	or	r24, r18
 246:	88 bb       	out	0x18, r24	; 24
 248:	08 95       	ret
 24a:	41 11       	cpse	r20, r1
 24c:	0c c0       	rjmp	.+24     	; 0x266 <DIO_write+0x98>
 24e:	25 b3       	in	r18, 0x15	; 21
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_write+0x8c>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_write+0x88>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	85 bb       	out	0x15, r24	; 21
 264:	08 95       	ret
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_write+0xa4>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_write+0xa0>
 276:	82 2b       	or	r24, r18
 278:	85 bb       	out	0x15, r24	; 21
 27a:	08 95       	ret
 27c:	41 11       	cpse	r20, r1
 27e:	0c c0       	rjmp	.+24     	; 0x298 <DIO_write+0xca>
 280:	22 b3       	in	r18, 0x12	; 18
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_write+0xbe>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_write+0xba>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	82 bb       	out	0x12, r24	; 18
 296:	08 95       	ret
 298:	22 b3       	in	r18, 0x12	; 18
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_write+0xd6>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_write+0xd2>
 2a8:	82 2b       	or	r24, r18
 2aa:	82 bb       	out	0x12, r24	; 18
 2ac:	08 95       	ret

000002ae <DIO_read>:
		break;
	}
}

void DIO_read(uint8_t portNumber,uint8_t pinNumber, uint8_t * data){
	switch(portNumber){
 2ae:	82 34       	cpi	r24, 0x42	; 66
 2b0:	a1 f0       	breq	.+40     	; 0x2da <DIO_read+0x2c>
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <DIO_read+0xc>
 2b4:	81 34       	cpi	r24, 0x41	; 65
 2b6:	31 f0       	breq	.+12     	; 0x2c4 <DIO_read+0x16>
 2b8:	08 95       	ret
 2ba:	83 34       	cpi	r24, 0x43	; 67
 2bc:	c9 f0       	breq	.+50     	; 0x2f0 <DIO_read+0x42>
 2be:	84 34       	cpi	r24, 0x44	; 68
 2c0:	11 f1       	breq	.+68     	; 0x306 <DIO_read+0x58>
 2c2:	08 95       	ret
		case PORT_A:
			*data = READ_BIT(PINA,pinNumber);
 2c4:	89 b3       	in	r24, 0x19	; 25
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_read+0x20>
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_read+0x1c>
 2d2:	81 70       	andi	r24, 0x01	; 1
 2d4:	fa 01       	movw	r30, r20
 2d6:	80 83       	st	Z, r24
		break;
 2d8:	08 95       	ret
		case PORT_B:
			*data =READ_BIT(PINB,pinNumber);
 2da:	86 b3       	in	r24, 0x16	; 22
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_read+0x36>
 2e0:	95 95       	asr	r25
 2e2:	87 95       	ror	r24
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_read+0x32>
 2e8:	81 70       	andi	r24, 0x01	; 1
 2ea:	fa 01       	movw	r30, r20
 2ec:	80 83       	st	Z, r24
		break;
 2ee:	08 95       	ret
		case PORT_C:
			*data =READ_BIT(PINC,pinNumber);
 2f0:	83 b3       	in	r24, 0x13	; 19
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_read+0x4c>
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_read+0x48>
 2fe:	81 70       	andi	r24, 0x01	; 1
 300:	fa 01       	movw	r30, r20
 302:	80 83       	st	Z, r24
		break;
 304:	08 95       	ret
		case PORT_D:
			*data =READ_BIT(PIND,pinNumber);
 306:	80 b3       	in	r24, 0x10	; 16
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_read+0x62>
 30c:	95 95       	asr	r25
 30e:	87 95       	ror	r24
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_read+0x5e>
 314:	81 70       	andi	r24, 0x01	; 1
 316:	fa 01       	movw	r30, r20
 318:	80 83       	st	Z, r24
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
