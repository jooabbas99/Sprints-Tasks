
InnteruptTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000596  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000522  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000245  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e4  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

int main(void)
{
    /* Replace with your application code */
	// set direction for button interrupt 
	DDRD |= (1<<PIND2);
  7c:	81 b3       	in	r24, 0x11	; 17
  7e:	84 60       	ori	r24, 0x04	; 4
  80:	81 bb       	out	0x11, r24	; 17
	
	// set all LED pin To Output
	
	DDRA |= (1<<PINA0);
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	81 60       	ori	r24, 0x01	; 1
  86:	8a bb       	out	0x1a, r24	; 26
	DDRA |= (1<<PINA1);
  88:	8a b3       	in	r24, 0x1a	; 26
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	8a bb       	out	0x1a, r24	; 26
	DDRA |= (1<<PINA2);
  8e:	8a b3       	in	r24, 0x1a	; 26
  90:	84 60       	ori	r24, 0x04	; 4
  92:	8a bb       	out	0x1a, r24	; 26
	
	// enable global interrupt
	
	sei();
  94:	78 94       	sei
	
	// set to The rising edge of INT0 generates an interrupt request.
	
	MCUCR |= (1<<ISC01) | (1<<ISC00);
  96:	85 b7       	in	r24, 0x35	; 53
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	85 bf       	out	0x35, r24	; 53
	
	// enable GICR
	GICR |= (1<<INT0);
  9c:	8b b7       	in	r24, 0x3b	; 59
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	8b bf       	out	0x3b, r24	; 59
	
	
    while (1) 
    {
		switch(led_number){
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	81 f0       	breq	.+32     	; 0xca <main+0x4e>
  aa:	28 f0       	brcs	.+10     	; 0xb6 <main+0x3a>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	89 f0       	breq	.+34     	; 0xd2 <main+0x56>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	99 f0       	breq	.+38     	; 0xda <main+0x5e>
  b4:	f6 cf       	rjmp	.-20     	; 0xa2 <main+0x26>
			case 0:
				// turn all led's off
				PORTA &= ~(1<<PORTA0);
  b6:	8b b3       	in	r24, 0x1b	; 27
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	8b bb       	out	0x1b, r24	; 27
				PORTA &= ~(1<<PORTA1);
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	8b bb       	out	0x1b, r24	; 27
				PORTA &= ~(1<<PORTA2);
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	8b bb       	out	0x1b, r24	; 27
				break;
  c8:	ec cf       	rjmp	.-40     	; 0xa2 <main+0x26>
			case 1:
				PORTA |= (1<<PORTA0);
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	8b bb       	out	0x1b, r24	; 27
				break;
  d0:	e8 cf       	rjmp	.-48     	; 0xa2 <main+0x26>
			case 2:
				PORTA |= (1<<PORTA1);
  d2:	8b b3       	in	r24, 0x1b	; 27
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	8b bb       	out	0x1b, r24	; 27
				break;
  d8:	e4 cf       	rjmp	.-56     	; 0xa2 <main+0x26>
			case 3:
				PORTA |= (1<<PORTA2);
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	8b bb       	out	0x1b, r24	; 27
				break;
  e0:	e0 cf       	rjmp	.-64     	; 0xa2 <main+0x26>

000000e2 <__vector_1>:
				
		}
	}
	
}
ISR(INT0_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
	if(led_number < NUMBER_OF_LEDS)
  ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	20 f4       	brcc	.+8      	; 0xfe <__vector_1+0x1c>
		led_number ++;
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__vector_1+0x20>
	else 
		led_number = 0;
  fe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
}
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
