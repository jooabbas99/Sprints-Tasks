
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6e  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000797  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070e  00000000  00000000  0000184d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00001f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f2  00000000  00000000  0000251f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002a11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  74:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <AppInit>:

#define NUMBER_OF_OVERFLOW 20000
unsigned int overflowCounter ;

void AppInit(){
	led[0].pinNumber = PIN0;
  7c:	e1 e6       	ldi	r30, 0x61	; 97
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	11 82       	std	Z+1, r1	; 0x01
	led[0].portNmber = PORT_A;
  82:	81 e4       	ldi	r24, 0x41	; 65
  84:	80 83       	st	Z, r24
	led[0].ledStatus = LOW;
  86:	12 82       	std	Z+2, r1	; 0x02
	
	led[1].pinNumber = PIN1;
  88:	91 e0       	ldi	r25, 0x01	; 1
  8a:	94 83       	std	Z+4, r25	; 0x04
	led[1].portNmber = PORT_A;
  8c:	83 83       	std	Z+3, r24	; 0x03
	led[1].ledStatus = LOW;
  8e:	15 82       	std	Z+5, r1	; 0x05
	
	led[2].pinNumber = PIN2;
  90:	92 e0       	ldi	r25, 0x02	; 2
  92:	97 83       	std	Z+7, r25	; 0x07
	led[2].portNmber = PORT_A;
  94:	86 83       	std	Z+6, r24	; 0x06
	led[2].ledStatus = LOW;
  96:	10 86       	std	Z+8, r1	; 0x08
	
	led[3].pinNumber = PIN3;
  98:	93 e0       	ldi	r25, 0x03	; 3
  9a:	92 87       	std	Z+10, r25	; 0x0a
	led[3].portNmber = PORT_A;
  9c:	81 87       	std	Z+9, r24	; 0x09
	led[3].ledStatus = LOW;
  9e:	13 86       	std	Z+11, r1	; 0x0b
	
	LED_init(&led[0]);
  a0:	cf 01       	movw	r24, r30
  a2:	0e 94 b3 00 	call	0x166	; 0x166 <LED_init>
	LED_init(&led[1]);
  a6:	84 e6       	ldi	r24, 0x64	; 100
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 b3 00 	call	0x166	; 0x166 <LED_init>
	LED_init(&led[2]);
  ae:	87 e6       	ldi	r24, 0x67	; 103
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 b3 00 	call	0x166	; 0x166 <LED_init>
	LED_init(&led[3]);
  b6:	8a e6       	ldi	r24, 0x6A	; 106
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 b3 00 	call	0x166	; 0x166 <LED_init>
	// interrupt 
	BUTTON_init(EXT_INT_BTN_PORT,EXT_INT_BTN_PIN);
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	84 e4       	ldi	r24, 0x44	; 68
  c2:	0e 94 af 00 	call	0x15e	; 0x15e <BUTTON_init>
	counter = 0;
  c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	interrupt_flag = 0;
  ca:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <interrupt_flag>
	// enable global interrupt 
	sei();
  ce:	78 94       	sei
	// enable interrupt mode 
	SET_BIT(MCUCR,ISC00);
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC01);
  d6:	85 b7       	in	r24, 0x35	; 53
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	85 bf       	out	0x35, r24	; 53
	//enable GICR
	SET_BIT(GICR,GICR_INT_0);
  dc:	8b b7       	in	r24, 0x3b	; 59
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	8b bf       	out	0x3b, r24	; 59
	
	overflowCounter = 0;
  e2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <overflowCounter+0x1>
  e6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <overflowCounter>
	// TIMER INIT 
	TCCR0 = 0x00; // Normal mode
  ea:	13 be       	out	0x33, r1	; 51
	// set timer value 
	TCNT0 = 0x00; // data register -> counter
  ec:	12 be       	out	0x32, r1	; 50
  ee:	08 95       	ret

000000f0 <AppStart>:
	
	
}

void AppStart(){
	overflowCounter = 0;
  f0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <overflowCounter+0x1>
  f4:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <overflowCounter>
	
	
	// start timer - set prescaler
	LED_on(&led[1]);
  f8:	84 e6       	ldi	r24, 0x64	; 100
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 bf 00 	call	0x17e	; 0x17e <LED_on>
	
	SET_BIT(TCCR0,0); // no p
 100:	83 b7       	in	r24, 0x33	; 51
 102:	81 60       	ori	r24, 0x01	; 1
 104:	83 bf       	out	0x33, r24	; 51
	// stop after 256 tick
	while(overflowCounter > NUMBER_OF_OVERFLOW){
 106:	0f c0       	rjmp	.+30     	; 0x126 <AppStart+0x36>
		// busy wait
		while((TIFR & (1<<0)) == 0 );
 108:	08 b6       	in	r0, 0x38	; 56
 10a:	00 fe       	sbrs	r0, 0
 10c:	fd cf       	rjmp	.-6      	; 0x108 <AppStart+0x18>
		// clear overflow flag
		SET_BIT(TIFR,0);
 10e:	88 b7       	in	r24, 0x38	; 56
 110:	81 60       	ori	r24, 0x01	; 1
 112:	88 bf       	out	0x38, r24	; 56
		
		overflowCounter++;
 114:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <overflowCounter>
 118:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <overflowCounter+0x1>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <overflowCounter+0x1>
 122:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <overflowCounter>
	// start timer - set prescaler
	LED_on(&led[1]);
	
	SET_BIT(TCCR0,0); // no p
	// stop after 256 tick
	while(overflowCounter > NUMBER_OF_OVERFLOW){
 126:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <overflowCounter>
 12a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <overflowCounter+0x1>
 12e:	81 32       	cpi	r24, 0x21	; 33
 130:	9e 44       	sbci	r25, 0x4E	; 78
 132:	50 f7       	brcc	.-44     	; 0x108 <AppStart+0x18>
		
		overflowCounter++;
	}
	
	// stop timer 
	TCCR0 = 0x00;
 134:	13 be       	out	0x33, r1	; 51
	LED_off(&led[1]);
 136:	84 e6       	ldi	r24, 0x64	; 100
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 cc 00 	call	0x198	; 0x198 <LED_off>
 13e:	08 95       	ret

00000140 <__vector_1>:
			//LED_off(&led[counter-(LED_NO+1)]);
		//}
	//}
}

ISR(EXT_INT_0){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
	interrupt_flag = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <interrupt_flag>
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <BUTTON_init>:
#include "button.h"



void BUTTON_init(uint8_t button_port , uint8_t button_pin){
	DIO_init(button_port,button_pin,IN);
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_init>
 164:	08 95       	ret

00000166 <LED_init>:
 *  Author: youss
 */ 
#include "led.h"


void LED_init(ST_led_t *led){
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	DIO_init(led->portNmber,led->pinNumber,OUT);
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	69 81       	ldd	r22, Y+1	; 0x01
 170:	88 81       	ld	r24, Y
 172:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_init>
	led->ledStatus = LOW;
 176:	1a 82       	std	Y+2, r1	; 0x02
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <LED_on>:
void LED_on(ST_led_t *led){
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
	DIO_write(led->portNmber,led->pinNumber,HIGH);
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	69 81       	ldd	r22, Y+1	; 0x01
 188:	88 81       	ld	r24, Y
 18a:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
	led->ledStatus = HIGH;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	8a 83       	std	Y+2, r24	; 0x02
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <LED_off>:
void LED_off(ST_led_t *led){
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
	DIO_write(led->portNmber,led->pinNumber,LOW);
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	69 81       	ldd	r22, Y+1	; 0x01
 1a2:	88 81       	ld	r24, Y
 1a4:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_write>
	led->ledStatus = LOW;
 1a8:	1a 82       	std	Y+2, r1	; 0x02
	
	
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <main>:
int main(void)
{
    /* Replace with your application code */
	
	
	AppInit();
 1b0:	0e 94 3e 00 	call	0x7c	; 0x7c <AppInit>
    while (1) 
	{
		AppStart();
 1b4:	0e 94 78 00 	call	0xf0	; 0xf0 <AppStart>
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <main+0x4>

000001ba <DIO_init>:
// global variables 

// function body 
 // init pin direction
void DIO_init(uint8_t portNumber,uint8_t pinNumber,uint8_t direction){
	switch(portNumber){
 1ba:	82 34       	cpi	r24, 0x42	; 66
 1bc:	19 f1       	breq	.+70     	; 0x204 <DIO_init+0x4a>
 1be:	18 f4       	brcc	.+6      	; 0x1c6 <DIO_init+0xc>
 1c0:	81 34       	cpi	r24, 0x41	; 65
 1c2:	39 f0       	breq	.+14     	; 0x1d2 <DIO_init+0x18>
 1c4:	08 95       	ret
 1c6:	83 34       	cpi	r24, 0x43	; 67
 1c8:	b1 f1       	breq	.+108    	; 0x236 <DIO_init+0x7c>
 1ca:	84 34       	cpi	r24, 0x44	; 68
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <DIO_init+0x16>
 1ce:	4c c0       	rjmp	.+152    	; 0x268 <DIO_init+0xae>
 1d0:	08 95       	ret
		case PORT_A:
			(direction == IN) ? CLEAR_BIT(DDRA,pinNumber) :SET_BIT(DDRA,pinNumber);
 1d2:	41 11       	cpse	r20, r1
 1d4:	0c c0       	rjmp	.+24     	; 0x1ee <DIO_init+0x34>
 1d6:	2a b3       	in	r18, 0x1a	; 26
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_init+0x28>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_init+0x24>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	8a bb       	out	0x1a, r24	; 26
 1ec:	08 95       	ret
 1ee:	2a b3       	in	r18, 0x1a	; 26
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_init+0x40>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_init+0x3c>
 1fe:	82 2b       	or	r24, r18
 200:	8a bb       	out	0x1a, r24	; 26
 202:	08 95       	ret
			break;
		case PORT_B:
			(direction == IN) ? CLEAR_BIT(DDRB,pinNumber) :SET_BIT(DDRB,pinNumber);
 204:	41 11       	cpse	r20, r1
 206:	0c c0       	rjmp	.+24     	; 0x220 <DIO_init+0x66>
 208:	27 b3       	in	r18, 0x17	; 23
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_init+0x5a>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_init+0x56>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	87 bb       	out	0x17, r24	; 23
 21e:	08 95       	ret
 220:	27 b3       	in	r18, 0x17	; 23
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_init+0x72>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_init+0x6e>
 230:	82 2b       	or	r24, r18
 232:	87 bb       	out	0x17, r24	; 23
 234:	08 95       	ret
			break;
		case PORT_C:
				(direction == IN) ? CLEAR_BIT(DDRC,pinNumber) :SET_BIT(DDRC,pinNumber);
 236:	41 11       	cpse	r20, r1
 238:	0c c0       	rjmp	.+24     	; 0x252 <DIO_init+0x98>
 23a:	24 b3       	in	r18, 0x14	; 20
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_init+0x8c>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_init+0x88>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	84 bb       	out	0x14, r24	; 20
 250:	08 95       	ret
 252:	24 b3       	in	r18, 0x14	; 20
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_init+0xa4>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_init+0xa0>
 262:	82 2b       	or	r24, r18
 264:	84 bb       	out	0x14, r24	; 20
 266:	08 95       	ret
			break;
		case PORT_D:
			(direction == IN) ? CLEAR_BIT(DDRD,pinNumber) :SET_BIT(DDRD,pinNumber);
 268:	41 11       	cpse	r20, r1
 26a:	0c c0       	rjmp	.+24     	; 0x284 <DIO_init+0xca>
 26c:	21 b3       	in	r18, 0x11	; 17
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_init+0xbe>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_init+0xba>
 27c:	80 95       	com	r24
 27e:	82 23       	and	r24, r18
 280:	81 bb       	out	0x11, r24	; 17
 282:	08 95       	ret
 284:	21 b3       	in	r18, 0x11	; 17
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_init+0xd6>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_init+0xd2>
 294:	82 2b       	or	r24, r18
 296:	81 bb       	out	0x11, r24	; 17
 298:	08 95       	ret

0000029a <DIO_write>:
	}
}

void DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value)
{
		switch(portNumber){
 29a:	82 34       	cpi	r24, 0x42	; 66
 29c:	19 f1       	breq	.+70     	; 0x2e4 <DIO_write+0x4a>
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <DIO_write+0xc>
 2a0:	81 34       	cpi	r24, 0x41	; 65
 2a2:	39 f0       	breq	.+14     	; 0x2b2 <DIO_write+0x18>
 2a4:	08 95       	ret
 2a6:	83 34       	cpi	r24, 0x43	; 67
 2a8:	b1 f1       	breq	.+108    	; 0x316 <DIO_write+0x7c>
 2aa:	84 34       	cpi	r24, 0x44	; 68
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <DIO_write+0x16>
 2ae:	4c c0       	rjmp	.+152    	; 0x348 <DIO_write+0xae>
 2b0:	08 95       	ret
			case PORT_A:
				(value == LOW) ? CLEAR_BIT(PORTA,pinNumber) :SET_BIT(PORTA,pinNumber);
 2b2:	41 11       	cpse	r20, r1
 2b4:	0c c0       	rjmp	.+24     	; 0x2ce <DIO_write+0x34>
 2b6:	2b b3       	in	r18, 0x1b	; 27
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_write+0x28>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_write+0x24>
 2c6:	80 95       	com	r24
 2c8:	82 23       	and	r24, r18
 2ca:	8b bb       	out	0x1b, r24	; 27
 2cc:	08 95       	ret
 2ce:	2b b3       	in	r18, 0x1b	; 27
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_write+0x40>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_write+0x3c>
 2de:	82 2b       	or	r24, r18
 2e0:	8b bb       	out	0x1b, r24	; 27
 2e2:	08 95       	ret
				break;
			case PORT_B:
				(value == LOW) ? CLEAR_BIT(PORTB,pinNumber) :SET_BIT(PORTB,pinNumber);
 2e4:	41 11       	cpse	r20, r1
 2e6:	0c c0       	rjmp	.+24     	; 0x300 <DIO_write+0x66>
 2e8:	28 b3       	in	r18, 0x18	; 24
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_write+0x5a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_write+0x56>
 2f8:	80 95       	com	r24
 2fa:	82 23       	and	r24, r18
 2fc:	88 bb       	out	0x18, r24	; 24
 2fe:	08 95       	ret
 300:	28 b3       	in	r18, 0x18	; 24
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_write+0x72>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_write+0x6e>
 310:	82 2b       	or	r24, r18
 312:	88 bb       	out	0x18, r24	; 24
 314:	08 95       	ret
				break;
			case PORT_C:
				(value == LOW) ? CLEAR_BIT(PORTC,pinNumber):SET_BIT(PORTC,pinNumber);
 316:	41 11       	cpse	r20, r1
 318:	0c c0       	rjmp	.+24     	; 0x332 <DIO_write+0x98>
 31a:	25 b3       	in	r18, 0x15	; 21
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_write+0x8c>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_write+0x88>
 32a:	80 95       	com	r24
 32c:	82 23       	and	r24, r18
 32e:	85 bb       	out	0x15, r24	; 21
 330:	08 95       	ret
 332:	25 b3       	in	r18, 0x15	; 21
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_write+0xa4>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_write+0xa0>
 342:	82 2b       	or	r24, r18
 344:	85 bb       	out	0x15, r24	; 21
 346:	08 95       	ret
				break;
			case PORT_D:
				(value == LOW) ? CLEAR_BIT(PORTD,pinNumber):SET_BIT(PORTD,pinNumber);
 348:	41 11       	cpse	r20, r1
 34a:	0c c0       	rjmp	.+24     	; 0x364 <DIO_write+0xca>
 34c:	22 b3       	in	r18, 0x12	; 18
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_write+0xbe>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_write+0xba>
 35c:	80 95       	com	r24
 35e:	82 23       	and	r24, r18
 360:	82 bb       	out	0x12, r24	; 18
 362:	08 95       	ret
 364:	22 b3       	in	r18, 0x12	; 18
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_write+0xd6>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_write+0xd2>
 374:	82 2b       	or	r24, r18
 376:	82 bb       	out	0x12, r24	; 18
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
