
Moving_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002d4e  00002de2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800174  00800174  00002ef6  2**0
                  ALLOC
  3 .stab         00002b5c  00000000  00000000  00002ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000187f  00000000  00000000  00005a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000072d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d2  00000000  00000000  00007453  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218d  00000000  00000000  00007625  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000121d  00000000  00000000  000097b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001105  00000000  00000000  0000a9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000bad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002eb  00000000  00000000  0000bc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000992  00000000  00000000  0000bf5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c8f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__vector_1>
       8:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <main>
      8a:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__epilogue_restores__+0x18>

000007ea <__lesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__lesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__lesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__lesf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__epilogue_restores__+0x18>

0000084a <__floatsisf>:
     84a:	a8 e0       	ldi	r26, 0x08	; 8
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__prologue_saves__+0x12>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	da 01       	movw	r26, r20
     860:	c9 01       	movw	r24, r18
     862:	88 27       	eor	r24, r24
     864:	b7 fd       	sbrc	r27, 7
     866:	83 95       	inc	r24
     868:	99 27       	eor	r25, r25
     86a:	aa 27       	eor	r26, r26
     86c:	bb 27       	eor	r27, r27
     86e:	b8 2e       	mov	r11, r24
     870:	21 15       	cp	r18, r1
     872:	31 05       	cpc	r19, r1
     874:	41 05       	cpc	r20, r1
     876:	51 05       	cpc	r21, r1
     878:	19 f4       	brne	.+6      	; 0x880 <__floatsisf+0x36>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	3a c0       	rjmp	.+116    	; 0x8f4 <__floatsisf+0xaa>
     880:	88 23       	and	r24, r24
     882:	a9 f0       	breq	.+42     	; 0x8ae <__floatsisf+0x64>
     884:	20 30       	cpi	r18, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	38 07       	cpc	r19, r24
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	48 07       	cpc	r20, r24
     88e:	80 e8       	ldi	r24, 0x80	; 128
     890:	58 07       	cpc	r21, r24
     892:	29 f4       	brne	.+10     	; 0x89e <__floatsisf+0x54>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	9f ec       	ldi	r25, 0xCF	; 207
     89c:	30 c0       	rjmp	.+96     	; 0x8fe <__floatsisf+0xb4>
     89e:	ee 24       	eor	r14, r14
     8a0:	ff 24       	eor	r15, r15
     8a2:	87 01       	movw	r16, r14
     8a4:	e2 1a       	sub	r14, r18
     8a6:	f3 0a       	sbc	r15, r19
     8a8:	04 0b       	sbc	r16, r20
     8aa:	15 0b       	sbc	r17, r21
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__floatsisf+0x68>
     8ae:	79 01       	movw	r14, r18
     8b0:	8a 01       	movw	r16, r20
     8b2:	8e e1       	ldi	r24, 0x1E	; 30
     8b4:	c8 2e       	mov	r12, r24
     8b6:	d1 2c       	mov	r13, r1
     8b8:	dc 82       	std	Y+4, r13	; 0x04
     8ba:	cb 82       	std	Y+3, r12	; 0x03
     8bc:	ed 82       	std	Y+5, r14	; 0x05
     8be:	fe 82       	std	Y+6, r15	; 0x06
     8c0:	0f 83       	std	Y+7, r16	; 0x07
     8c2:	18 87       	std	Y+8, r17	; 0x08
     8c4:	c8 01       	movw	r24, r16
     8c6:	b7 01       	movw	r22, r14
     8c8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__clzsi2>
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	18 16       	cp	r1, r24
     8d0:	19 06       	cpc	r1, r25
     8d2:	84 f4       	brge	.+32     	; 0x8f4 <__floatsisf+0xaa>
     8d4:	08 2e       	mov	r0, r24
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__floatsisf+0x96>
     8d8:	ee 0c       	add	r14, r14
     8da:	ff 1c       	adc	r15, r15
     8dc:	00 1f       	adc	r16, r16
     8de:	11 1f       	adc	r17, r17
     8e0:	0a 94       	dec	r0
     8e2:	d2 f7       	brpl	.-12     	; 0x8d8 <__floatsisf+0x8e>
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 1a       	sub	r12, r24
     8ee:	d9 0a       	sbc	r13, r25
     8f0:	dc 82       	std	Y+4, r13	; 0x04
     8f2:	cb 82       	std	Y+3, r12	; 0x03
     8f4:	ba 82       	std	Y+2, r11	; 0x02
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     8fe:	28 96       	adiw	r28, 0x08	; 8
     900:	e9 e0       	ldi	r30, 0x09	; 9
     902:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__epilogue_restores__+0x12>

00000906 <__fixsfsi>:
     906:	ac e0       	ldi	r26, 0x0C	; 12
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e9 e8       	ldi	r30, 0x89	; 137
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__prologue_saves__+0x20>
     912:	69 83       	std	Y+1, r22	; 0x01
     914:	7a 83       	std	Y+2, r23	; 0x02
     916:	8b 83       	std	Y+3, r24	; 0x03
     918:	9c 83       	std	Y+4, r25	; 0x04
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	be 01       	movw	r22, r28
     920:	6b 5f       	subi	r22, 0xFB	; 251
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	61 f1       	breq	.+88     	; 0x986 <__fixsfsi+0x80>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	50 f1       	brcs	.+84     	; 0x986 <__fixsfsi+0x80>
     932:	84 30       	cpi	r24, 0x04	; 4
     934:	21 f4       	brne	.+8      	; 0x93e <__fixsfsi+0x38>
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	88 23       	and	r24, r24
     93a:	51 f1       	breq	.+84     	; 0x990 <__fixsfsi+0x8a>
     93c:	2e c0       	rjmp	.+92     	; 0x99a <__fixsfsi+0x94>
     93e:	2f 81       	ldd	r18, Y+7	; 0x07
     940:	38 85       	ldd	r19, Y+8	; 0x08
     942:	37 fd       	sbrc	r19, 7
     944:	20 c0       	rjmp	.+64     	; 0x986 <__fixsfsi+0x80>
     946:	6e 81       	ldd	r22, Y+6	; 0x06
     948:	2f 31       	cpi	r18, 0x1F	; 31
     94a:	31 05       	cpc	r19, r1
     94c:	1c f0       	brlt	.+6      	; 0x954 <__fixsfsi+0x4e>
     94e:	66 23       	and	r22, r22
     950:	f9 f0       	breq	.+62     	; 0x990 <__fixsfsi+0x8a>
     952:	23 c0       	rjmp	.+70     	; 0x99a <__fixsfsi+0x94>
     954:	8e e1       	ldi	r24, 0x1E	; 30
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	82 1b       	sub	r24, r18
     95a:	93 0b       	sbc	r25, r19
     95c:	29 85       	ldd	r18, Y+9	; 0x09
     95e:	3a 85       	ldd	r19, Y+10	; 0x0a
     960:	4b 85       	ldd	r20, Y+11	; 0x0b
     962:	5c 85       	ldd	r21, Y+12	; 0x0c
     964:	04 c0       	rjmp	.+8      	; 0x96e <__fixsfsi+0x68>
     966:	56 95       	lsr	r21
     968:	47 95       	ror	r20
     96a:	37 95       	ror	r19
     96c:	27 95       	ror	r18
     96e:	8a 95       	dec	r24
     970:	d2 f7       	brpl	.-12     	; 0x966 <__fixsfsi+0x60>
     972:	66 23       	and	r22, r22
     974:	b1 f0       	breq	.+44     	; 0x9a2 <__fixsfsi+0x9c>
     976:	50 95       	com	r21
     978:	40 95       	com	r20
     97a:	30 95       	com	r19
     97c:	21 95       	neg	r18
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	0e c0       	rjmp	.+28     	; 0x9a2 <__fixsfsi+0x9c>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__fixsfsi+0x9c>
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	4f ef       	ldi	r20, 0xFF	; 255
     996:	5f e7       	ldi	r21, 0x7F	; 127
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <__fixsfsi+0x9c>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e8       	ldi	r21, 0x80	; 128
     9a2:	b9 01       	movw	r22, r18
     9a4:	ca 01       	movw	r24, r20
     9a6:	2c 96       	adiw	r28, 0x0c	; 12
     9a8:	e2 e0       	ldi	r30, 0x02	; 2
     9aa:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__epilogue_restores__+0x20>

000009ae <__clzsi2>:
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	7b 01       	movw	r14, r22
     9b8:	8c 01       	movw	r16, r24
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	e8 16       	cp	r14, r24
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	f8 06       	cpc	r15, r24
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	08 07       	cpc	r16, r24
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	18 07       	cpc	r17, r24
     9ca:	88 f4       	brcc	.+34     	; 0x9ee <__clzsi2+0x40>
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	e8 16       	cp	r14, r24
     9d0:	f1 04       	cpc	r15, r1
     9d2:	01 05       	cpc	r16, r1
     9d4:	11 05       	cpc	r17, r1
     9d6:	31 f0       	breq	.+12     	; 0x9e4 <__clzsi2+0x36>
     9d8:	28 f0       	brcs	.+10     	; 0x9e4 <__clzsi2+0x36>
     9da:	88 e0       	ldi	r24, 0x08	; 8
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	a0 e0       	ldi	r26, 0x00	; 0
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	17 c0       	rjmp	.+46     	; 0xa12 <__clzsi2+0x64>
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	a0 e0       	ldi	r26, 0x00	; 0
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	12 c0       	rjmp	.+36     	; 0xa12 <__clzsi2+0x64>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	e8 16       	cp	r14, r24
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	f8 06       	cpc	r15, r24
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	08 07       	cpc	r16, r24
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	18 07       	cpc	r17, r24
     9fe:	28 f0       	brcs	.+10     	; 0xa0a <__clzsi2+0x5c>
     a00:	88 e1       	ldi	r24, 0x18	; 24
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	a0 e0       	ldi	r26, 0x00	; 0
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <__clzsi2+0x64>
     a0a:	80 e1       	ldi	r24, 0x10	; 16
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	20 e2       	ldi	r18, 0x20	; 32
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	28 1b       	sub	r18, r24
     a1c:	39 0b       	sbc	r19, r25
     a1e:	4a 0b       	sbc	r20, r26
     a20:	5b 0b       	sbc	r21, r27
     a22:	04 c0       	rjmp	.+8      	; 0xa2c <__clzsi2+0x7e>
     a24:	16 95       	lsr	r17
     a26:	07 95       	ror	r16
     a28:	f7 94       	ror	r15
     a2a:	e7 94       	ror	r14
     a2c:	8a 95       	dec	r24
     a2e:	d2 f7       	brpl	.-12     	; 0xa24 <__clzsi2+0x76>
     a30:	f7 01       	movw	r30, r14
     a32:	e8 59       	subi	r30, 0x98	; 152
     a34:	ff 4f       	sbci	r31, 0xFF	; 255
     a36:	80 81       	ld	r24, Z
     a38:	28 1b       	sub	r18, r24
     a3a:	31 09       	sbc	r19, r1
     a3c:	41 09       	sbc	r20, r1
     a3e:	51 09       	sbc	r21, r1
     a40:	c9 01       	movw	r24, r18
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	08 95       	ret

00000a4c <__pack_f>:
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	fc 01       	movw	r30, r24
     a58:	e4 80       	ldd	r14, Z+4	; 0x04
     a5a:	f5 80       	ldd	r15, Z+5	; 0x05
     a5c:	06 81       	ldd	r16, Z+6	; 0x06
     a5e:	17 81       	ldd	r17, Z+7	; 0x07
     a60:	d1 80       	ldd	r13, Z+1	; 0x01
     a62:	80 81       	ld	r24, Z
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	48 f4       	brcc	.+18     	; 0xa7a <__pack_f+0x2e>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e1       	ldi	r26, 0x10	; 16
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e8 2a       	or	r14, r24
     a72:	f9 2a       	or	r15, r25
     a74:	0a 2b       	or	r16, r26
     a76:	1b 2b       	or	r17, r27
     a78:	a5 c0       	rjmp	.+330    	; 0xbc4 <__pack_f+0x178>
     a7a:	84 30       	cpi	r24, 0x04	; 4
     a7c:	09 f4       	brne	.+2      	; 0xa80 <__pack_f+0x34>
     a7e:	9f c0       	rjmp	.+318    	; 0xbbe <__pack_f+0x172>
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	21 f4       	brne	.+8      	; 0xa8c <__pack_f+0x40>
     a84:	ee 24       	eor	r14, r14
     a86:	ff 24       	eor	r15, r15
     a88:	87 01       	movw	r16, r14
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__pack_f+0x4a>
     a8c:	e1 14       	cp	r14, r1
     a8e:	f1 04       	cpc	r15, r1
     a90:	01 05       	cpc	r16, r1
     a92:	11 05       	cpc	r17, r1
     a94:	19 f4       	brne	.+6      	; 0xa9c <__pack_f+0x50>
     a96:	e0 e0       	ldi	r30, 0x00	; 0
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	96 c0       	rjmp	.+300    	; 0xbc8 <__pack_f+0x17c>
     a9c:	62 81       	ldd	r22, Z+2	; 0x02
     a9e:	73 81       	ldd	r23, Z+3	; 0x03
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	62 38       	cpi	r22, 0x82	; 130
     aa4:	79 07       	cpc	r23, r25
     aa6:	0c f0       	brlt	.+2      	; 0xaaa <__pack_f+0x5e>
     aa8:	5b c0       	rjmp	.+182    	; 0xb60 <__pack_f+0x114>
     aaa:	22 e8       	ldi	r18, 0x82	; 130
     aac:	3f ef       	ldi	r19, 0xFF	; 255
     aae:	26 1b       	sub	r18, r22
     ab0:	37 0b       	sbc	r19, r23
     ab2:	2a 31       	cpi	r18, 0x1A	; 26
     ab4:	31 05       	cpc	r19, r1
     ab6:	2c f0       	brlt	.+10     	; 0xac2 <__pack_f+0x76>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	2a c0       	rjmp	.+84     	; 0xb16 <__pack_f+0xca>
     ac2:	b8 01       	movw	r22, r16
     ac4:	a7 01       	movw	r20, r14
     ac6:	02 2e       	mov	r0, r18
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__pack_f+0x86>
     aca:	76 95       	lsr	r23
     acc:	67 95       	ror	r22
     ace:	57 95       	ror	r21
     ad0:	47 95       	ror	r20
     ad2:	0a 94       	dec	r0
     ad4:	d2 f7       	brpl	.-12     	; 0xaca <__pack_f+0x7e>
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <__pack_f+0x9c>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	aa 1f       	adc	r26, r26
     ae6:	bb 1f       	adc	r27, r27
     ae8:	2a 95       	dec	r18
     aea:	d2 f7       	brpl	.-12     	; 0xae0 <__pack_f+0x94>
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	a1 09       	sbc	r26, r1
     af0:	b1 09       	sbc	r27, r1
     af2:	8e 21       	and	r24, r14
     af4:	9f 21       	and	r25, r15
     af6:	a0 23       	and	r26, r16
     af8:	b1 23       	and	r27, r17
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	21 f0       	breq	.+8      	; 0xb0a <__pack_f+0xbe>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	9a 01       	movw	r18, r20
     b0c:	ab 01       	movw	r20, r22
     b0e:	28 2b       	or	r18, r24
     b10:	39 2b       	or	r19, r25
     b12:	4a 2b       	or	r20, r26
     b14:	5b 2b       	or	r21, r27
     b16:	da 01       	movw	r26, r20
     b18:	c9 01       	movw	r24, r18
     b1a:	8f 77       	andi	r24, 0x7F	; 127
     b1c:	90 70       	andi	r25, 0x00	; 0
     b1e:	a0 70       	andi	r26, 0x00	; 0
     b20:	b0 70       	andi	r27, 0x00	; 0
     b22:	80 34       	cpi	r24, 0x40	; 64
     b24:	91 05       	cpc	r25, r1
     b26:	a1 05       	cpc	r26, r1
     b28:	b1 05       	cpc	r27, r1
     b2a:	39 f4       	brne	.+14     	; 0xb3a <__pack_f+0xee>
     b2c:	27 ff       	sbrs	r18, 7
     b2e:	09 c0       	rjmp	.+18     	; 0xb42 <__pack_f+0xf6>
     b30:	20 5c       	subi	r18, 0xC0	; 192
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	4f 4f       	sbci	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0xf6>
     b3a:	21 5c       	subi	r18, 0xC1	; 193
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	4f 4f       	sbci	r20, 0xFF	; 255
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	e0 e0       	ldi	r30, 0x00	; 0
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	20 30       	cpi	r18, 0x00	; 0
     b48:	a0 e0       	ldi	r26, 0x00	; 0
     b4a:	3a 07       	cpc	r19, r26
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	4a 07       	cpc	r20, r26
     b50:	a0 e4       	ldi	r26, 0x40	; 64
     b52:	5a 07       	cpc	r21, r26
     b54:	10 f0       	brcs	.+4      	; 0xb5a <__pack_f+0x10e>
     b56:	e1 e0       	ldi	r30, 0x01	; 1
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	79 01       	movw	r14, r18
     b5c:	8a 01       	movw	r16, r20
     b5e:	27 c0       	rjmp	.+78     	; 0xbae <__pack_f+0x162>
     b60:	60 38       	cpi	r22, 0x80	; 128
     b62:	71 05       	cpc	r23, r1
     b64:	64 f5       	brge	.+88     	; 0xbbe <__pack_f+0x172>
     b66:	fb 01       	movw	r30, r22
     b68:	e1 58       	subi	r30, 0x81	; 129
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	d8 01       	movw	r26, r16
     b6e:	c7 01       	movw	r24, r14
     b70:	8f 77       	andi	r24, 0x7F	; 127
     b72:	90 70       	andi	r25, 0x00	; 0
     b74:	a0 70       	andi	r26, 0x00	; 0
     b76:	b0 70       	andi	r27, 0x00	; 0
     b78:	80 34       	cpi	r24, 0x40	; 64
     b7a:	91 05       	cpc	r25, r1
     b7c:	a1 05       	cpc	r26, r1
     b7e:	b1 05       	cpc	r27, r1
     b80:	39 f4       	brne	.+14     	; 0xb90 <__pack_f+0x144>
     b82:	e7 fe       	sbrs	r14, 7
     b84:	0d c0       	rjmp	.+26     	; 0xba0 <__pack_f+0x154>
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x14c>
     b90:	8f e3       	ldi	r24, 0x3F	; 63
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e8 0e       	add	r14, r24
     b9a:	f9 1e       	adc	r15, r25
     b9c:	0a 1f       	adc	r16, r26
     b9e:	1b 1f       	adc	r17, r27
     ba0:	17 ff       	sbrs	r17, 7
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <__pack_f+0x162>
     ba4:	16 95       	lsr	r17
     ba6:	07 95       	ror	r16
     ba8:	f7 94       	ror	r15
     baa:	e7 94       	ror	r14
     bac:	31 96       	adiw	r30, 0x01	; 1
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	16 95       	lsr	r17
     bb2:	07 95       	ror	r16
     bb4:	f7 94       	ror	r15
     bb6:	e7 94       	ror	r14
     bb8:	8a 95       	dec	r24
     bba:	d1 f7       	brne	.-12     	; 0xbb0 <__pack_f+0x164>
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <__pack_f+0x17c>
     bbe:	ee 24       	eor	r14, r14
     bc0:	ff 24       	eor	r15, r15
     bc2:	87 01       	movw	r16, r14
     bc4:	ef ef       	ldi	r30, 0xFF	; 255
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	6e 2f       	mov	r22, r30
     bca:	67 95       	ror	r22
     bcc:	66 27       	eor	r22, r22
     bce:	67 95       	ror	r22
     bd0:	90 2f       	mov	r25, r16
     bd2:	9f 77       	andi	r25, 0x7F	; 127
     bd4:	d7 94       	ror	r13
     bd6:	dd 24       	eor	r13, r13
     bd8:	d7 94       	ror	r13
     bda:	8e 2f       	mov	r24, r30
     bdc:	86 95       	lsr	r24
     bde:	49 2f       	mov	r20, r25
     be0:	46 2b       	or	r20, r22
     be2:	58 2f       	mov	r21, r24
     be4:	5d 29       	or	r21, r13
     be6:	b7 01       	movw	r22, r14
     be8:	ca 01       	movw	r24, r20
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	08 95       	ret

00000bf6 <__unpack_f>:
     bf6:	fc 01       	movw	r30, r24
     bf8:	db 01       	movw	r26, r22
     bfa:	40 81       	ld	r20, Z
     bfc:	51 81       	ldd	r21, Z+1	; 0x01
     bfe:	22 81       	ldd	r18, Z+2	; 0x02
     c00:	62 2f       	mov	r22, r18
     c02:	6f 77       	andi	r22, 0x7F	; 127
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	22 1f       	adc	r18, r18
     c08:	22 27       	eor	r18, r18
     c0a:	22 1f       	adc	r18, r18
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	89 2f       	mov	r24, r25
     c10:	88 0f       	add	r24, r24
     c12:	82 2b       	or	r24, r18
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	99 1f       	adc	r25, r25
     c1a:	99 27       	eor	r25, r25
     c1c:	99 1f       	adc	r25, r25
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	9c 93       	st	X, r25
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	21 15       	cp	r18, r1
     c26:	31 05       	cpc	r19, r1
     c28:	a9 f5       	brne	.+106    	; 0xc94 <__unpack_f+0x9e>
     c2a:	41 15       	cp	r20, r1
     c2c:	51 05       	cpc	r21, r1
     c2e:	61 05       	cpc	r22, r1
     c30:	71 05       	cpc	r23, r1
     c32:	11 f4       	brne	.+4      	; 0xc38 <__unpack_f+0x42>
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	37 c0       	rjmp	.+110    	; 0xca6 <__unpack_f+0xb0>
     c38:	82 e8       	ldi	r24, 0x82	; 130
     c3a:	9f ef       	ldi	r25, 0xFF	; 255
     c3c:	13 96       	adiw	r26, 0x03	; 3
     c3e:	9c 93       	st	X, r25
     c40:	8e 93       	st	-X, r24
     c42:	12 97       	sbiw	r26, 0x02	; 2
     c44:	9a 01       	movw	r18, r20
     c46:	ab 01       	movw	r20, r22
     c48:	67 e0       	ldi	r22, 0x07	; 7
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	44 1f       	adc	r20, r20
     c50:	55 1f       	adc	r21, r21
     c52:	6a 95       	dec	r22
     c54:	d1 f7       	brne	.-12     	; 0xc4a <__unpack_f+0x54>
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	8c 93       	st	X, r24
     c5a:	0d c0       	rjmp	.+26     	; 0xc76 <__unpack_f+0x80>
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	44 1f       	adc	r20, r20
     c62:	55 1f       	adc	r21, r21
     c64:	12 96       	adiw	r26, 0x02	; 2
     c66:	8d 91       	ld	r24, X+
     c68:	9c 91       	ld	r25, X
     c6a:	13 97       	sbiw	r26, 0x03	; 3
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	13 96       	adiw	r26, 0x03	; 3
     c70:	9c 93       	st	X, r25
     c72:	8e 93       	st	-X, r24
     c74:	12 97       	sbiw	r26, 0x02	; 2
     c76:	20 30       	cpi	r18, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	38 07       	cpc	r19, r24
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	48 07       	cpc	r20, r24
     c80:	80 e4       	ldi	r24, 0x40	; 64
     c82:	58 07       	cpc	r21, r24
     c84:	58 f3       	brcs	.-42     	; 0xc5c <__unpack_f+0x66>
     c86:	14 96       	adiw	r26, 0x04	; 4
     c88:	2d 93       	st	X+, r18
     c8a:	3d 93       	st	X+, r19
     c8c:	4d 93       	st	X+, r20
     c8e:	5c 93       	st	X, r21
     c90:	17 97       	sbiw	r26, 0x07	; 7
     c92:	08 95       	ret
     c94:	2f 3f       	cpi	r18, 0xFF	; 255
     c96:	31 05       	cpc	r19, r1
     c98:	79 f4       	brne	.+30     	; 0xcb8 <__unpack_f+0xc2>
     c9a:	41 15       	cp	r20, r1
     c9c:	51 05       	cpc	r21, r1
     c9e:	61 05       	cpc	r22, r1
     ca0:	71 05       	cpc	r23, r1
     ca2:	19 f4       	brne	.+6      	; 0xcaa <__unpack_f+0xb4>
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	8c 93       	st	X, r24
     ca8:	08 95       	ret
     caa:	64 ff       	sbrs	r22, 4
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <__unpack_f+0xbe>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	8c 93       	st	X, r24
     cb2:	12 c0       	rjmp	.+36     	; 0xcd8 <__unpack_f+0xe2>
     cb4:	1c 92       	st	X, r1
     cb6:	10 c0       	rjmp	.+32     	; 0xcd8 <__unpack_f+0xe2>
     cb8:	2f 57       	subi	r18, 0x7F	; 127
     cba:	30 40       	sbci	r19, 0x00	; 0
     cbc:	13 96       	adiw	r26, 0x03	; 3
     cbe:	3c 93       	st	X, r19
     cc0:	2e 93       	st	-X, r18
     cc2:	12 97       	sbiw	r26, 0x02	; 2
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	8c 93       	st	X, r24
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	44 0f       	add	r20, r20
     ccc:	55 1f       	adc	r21, r21
     cce:	66 1f       	adc	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	8a 95       	dec	r24
     cd4:	d1 f7       	brne	.-12     	; 0xcca <__unpack_f+0xd4>
     cd6:	70 64       	ori	r23, 0x40	; 64
     cd8:	14 96       	adiw	r26, 0x04	; 4
     cda:	4d 93       	st	X+, r20
     cdc:	5d 93       	st	X+, r21
     cde:	6d 93       	st	X+, r22
     ce0:	7c 93       	st	X, r23
     ce2:	17 97       	sbiw	r26, 0x07	; 7
     ce4:	08 95       	ret

00000ce6 <__fpcmp_parts_f>:
     ce6:	1f 93       	push	r17
     ce8:	dc 01       	movw	r26, r24
     cea:	fb 01       	movw	r30, r22
     cec:	9c 91       	ld	r25, X
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <__fpcmp_parts_f+0xe>
     cf2:	47 c0       	rjmp	.+142    	; 0xd82 <__fpcmp_parts_f+0x9c>
     cf4:	80 81       	ld	r24, Z
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <__fpcmp_parts_f+0x16>
     cfa:	43 c0       	rjmp	.+134    	; 0xd82 <__fpcmp_parts_f+0x9c>
     cfc:	94 30       	cpi	r25, 0x04	; 4
     cfe:	51 f4       	brne	.+20     	; 0xd14 <__fpcmp_parts_f+0x2e>
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	1c 91       	ld	r17, X
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	99 f5       	brne	.+102    	; 0xd6e <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	68 2f       	mov	r22, r24
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	61 1b       	sub	r22, r17
     d10:	71 09       	sbc	r23, r1
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <__fpcmp_parts_f+0xac>
     d14:	84 30       	cpi	r24, 0x04	; 4
     d16:	21 f0       	breq	.+8      	; 0xd20 <__fpcmp_parts_f+0x3a>
     d18:	92 30       	cpi	r25, 0x02	; 2
     d1a:	31 f4       	brne	.+12     	; 0xd28 <__fpcmp_parts_f+0x42>
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	b9 f1       	breq	.+110    	; 0xd8e <__fpcmp_parts_f+0xa8>
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	88 23       	and	r24, r24
     d24:	89 f1       	breq	.+98     	; 0xd88 <__fpcmp_parts_f+0xa2>
     d26:	2d c0       	rjmp	.+90     	; 0xd82 <__fpcmp_parts_f+0x9c>
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	1c 91       	ld	r17, X
     d2c:	11 97       	sbiw	r26, 0x01	; 1
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	f1 f0       	breq	.+60     	; 0xd6e <__fpcmp_parts_f+0x88>
     d32:	81 81       	ldd	r24, Z+1	; 0x01
     d34:	18 17       	cp	r17, r24
     d36:	d9 f4       	brne	.+54     	; 0xd6e <__fpcmp_parts_f+0x88>
     d38:	12 96       	adiw	r26, 0x02	; 2
     d3a:	2d 91       	ld	r18, X+
     d3c:	3c 91       	ld	r19, X
     d3e:	13 97       	sbiw	r26, 0x03	; 3
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	94 f0       	brlt	.+36     	; 0xd6e <__fpcmp_parts_f+0x88>
     d4a:	28 17       	cp	r18, r24
     d4c:	39 07       	cpc	r19, r25
     d4e:	bc f0       	brlt	.+46     	; 0xd7e <__fpcmp_parts_f+0x98>
     d50:	14 96       	adiw	r26, 0x04	; 4
     d52:	8d 91       	ld	r24, X+
     d54:	9d 91       	ld	r25, X+
     d56:	0d 90       	ld	r0, X+
     d58:	bc 91       	ld	r27, X
     d5a:	a0 2d       	mov	r26, r0
     d5c:	24 81       	ldd	r18, Z+4	; 0x04
     d5e:	35 81       	ldd	r19, Z+5	; 0x05
     d60:	46 81       	ldd	r20, Z+6	; 0x06
     d62:	57 81       	ldd	r21, Z+7	; 0x07
     d64:	28 17       	cp	r18, r24
     d66:	39 07       	cpc	r19, r25
     d68:	4a 07       	cpc	r20, r26
     d6a:	5b 07       	cpc	r21, r27
     d6c:	18 f4       	brcc	.+6      	; 0xd74 <__fpcmp_parts_f+0x8e>
     d6e:	11 23       	and	r17, r17
     d70:	41 f0       	breq	.+16     	; 0xd82 <__fpcmp_parts_f+0x9c>
     d72:	0a c0       	rjmp	.+20     	; 0xd88 <__fpcmp_parts_f+0xa2>
     d74:	82 17       	cp	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	a4 07       	cpc	r26, r20
     d7a:	b5 07       	cpc	r27, r21
     d7c:	40 f4       	brcc	.+16     	; 0xd8e <__fpcmp_parts_f+0xa8>
     d7e:	11 23       	and	r17, r17
     d80:	19 f0       	breq	.+6      	; 0xd88 <__fpcmp_parts_f+0xa2>
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <__fpcmp_parts_f+0xac>
     d88:	6f ef       	ldi	r22, 0xFF	; 255
     d8a:	7f ef       	ldi	r23, 0xFF	; 255
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <__fpcmp_parts_f+0xac>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	cb 01       	movw	r24, r22
     d94:	1f 91       	pop	r17
     d96:	08 95       	ret

00000d98 <Timer0_Delay>:
 * calculate number of overflows
 * calculate timer initial value
 */

void Timer0_Delay(float delay)
{
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	60 97       	sbiw	r28, 0x10	; 16
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
	//delay-=5;
	ST_timer0_config Time;
	uint8 real_part,reminder,count;
	if(calc_prescaler(delay, &Time.prescaler))
     dbc:	8b 85       	ldd	r24, Y+11	; 0x0b
     dbe:	9c 85       	ldd	r25, Y+12	; 0x0c
     dc0:	ad 85       	ldd	r26, Y+13	; 0x0d
     dc2:	be 85       	ldd	r27, Y+14	; 0x0e
     dc4:	9e 01       	movw	r18, r28
     dc6:	2c 5f       	subi	r18, 0xFC	; 252
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	a9 01       	movw	r20, r18
     dd0:	0e 94 45 09 	call	0x128a	; 0x128a <calc_prescaler>
     dd4:	88 23       	and	r24, r24
     dd6:	b9 f0       	breq	.+46     	; 0xe06 <Timer0_Delay+0x6e>
	{
		calc_initialValue(Time.prescaler, &Time.init_value,delay);
     dd8:	ec 81       	ldd	r30, Y+4	; 0x04
     dda:	fd 81       	ldd	r31, Y+5	; 0x05
     ddc:	ce 01       	movw	r24, r28
     dde:	04 96       	adiw	r24, 0x04	; 4
     de0:	bc 01       	movw	r22, r24
     de2:	6e 5f       	subi	r22, 0xFE	; 254
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	2b 85       	ldd	r18, Y+11	; 0x0b
     de8:	3c 85       	ldd	r19, Y+12	; 0x0c
     dea:	4d 85       	ldd	r20, Y+13	; 0x0d
     dec:	5e 85       	ldd	r21, Y+14	; 0x0e
     dee:	cf 01       	movw	r24, r30
     df0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <calc_initialValue>
		Time.NO_OF_OV=0;
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	a0 e0       	ldi	r26, 0x00	; 0
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	8f 83       	std	Y+7, r24	; 0x07
     dfe:	98 87       	std	Y+8, r25	; 0x08
     e00:	a9 87       	std	Y+9, r26	; 0x09
     e02:	ba 87       	std	Y+10, r27	; 0x0a
     e04:	15 c0       	rjmp	.+42     	; 0xe30 <Timer0_Delay+0x98>
	}
	else
	{
		Time.prescaler=N1024;
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	94 e0       	ldi	r25, 0x04	; 4
     e0a:	9d 83       	std	Y+5, r25	; 0x05
     e0c:	8c 83       	std	Y+4, r24	; 0x04
		Time.NO_OF_OV=(delay/Tmax_N1024);
     e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e10:	7c 85       	ldd	r23, Y+12	; 0x0c
     e12:	8d 85       	ldd	r24, Y+13	; 0x0d
     e14:	9e 85       	ldd	r25, Y+14	; 0x0e
     e16:	2c ee       	ldi	r18, 0xEC	; 236
     e18:	31 e1       	ldi	r19, 0x11	; 17
     e1a:	43 e8       	ldi	r20, 0x83	; 131
     e1c:	53 e4       	ldi	r21, 0x43	; 67
     e1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	8f 83       	std	Y+7, r24	; 0x07
     e28:	98 87       	std	Y+8, r25	; 0x08
     e2a:	a9 87       	std	Y+9, r26	; 0x09
     e2c:	ba 87       	std	Y+10, r27	; 0x0a
		Time.init_value=0;
     e2e:	1e 82       	std	Y+6, r1	; 0x06
	}
	real_part=Time.NO_OF_OV;
     e30:	8f 81       	ldd	r24, Y+7	; 0x07
     e32:	98 85       	ldd	r25, Y+8	; 0x08
     e34:	a9 85       	ldd	r26, Y+9	; 0x09
     e36:	ba 85       	ldd	r27, Y+10	; 0x0a
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	8b 83       	std	Y+3, r24	; 0x03
	reminder=(Time.NO_OF_OV-real_part)*(Tmax_N1024); //reminder delay to complete required delay period
     e46:	ef 80       	ldd	r14, Y+7	; 0x07
     e48:	f8 84       	ldd	r15, Y+8	; 0x08
     e4a:	09 85       	ldd	r16, Y+9	; 0x09
     e4c:	1a 85       	ldd	r17, Y+10	; 0x0a
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	aa 27       	eor	r26, r26
     e56:	97 fd       	sbrc	r25, 7
     e58:	a0 95       	com	r26
     e5a:	ba 2f       	mov	r27, r26
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	c8 01       	movw	r24, r16
     e6a:	b7 01       	movw	r22, r14
     e6c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	2c ee       	ldi	r18, 0xEC	; 236
     e7a:	31 e1       	ldi	r19, 0x11	; 17
     e7c:	43 e8       	ldi	r20, 0x83	; 131
     e7e:	53 e4       	ldi	r21, 0x43	; 67
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	8a 83       	std	Y+2, r24	; 0x02
	count=real_part;
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Time.init_value;
     e9a:	e2 e5       	ldi	r30, 0x52	; 82
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ea0:	80 83       	st	Z, r24
	if(count==0)
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	88 23       	and	r24, r24
     ea6:	71 f4       	brne	.+28     	; 0xec4 <Timer0_Delay+0x12c>
	{
		set_prescale(Time.prescaler);
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	0e 94 ba 0a 	call	0x1574	; 0x1574 <set_prescale>
		while(!(TIFR & (1<<TOV0)));
     eb0:	e8 e5       	ldi	r30, 0x58	; 88
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	81 70       	andi	r24, 0x01	; 1
     ebc:	90 70       	andi	r25, 0x00	; 0
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	b9 f3       	breq	.-18     	; 0xeb0 <Timer0_Delay+0x118>
     ec2:	cc c1       	rjmp	.+920    	; 0x125c <Timer0_Delay+0x4c4>
	}
	else
	{
		TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);		//use clock pre_scale 1024
     ec4:	e3 e5       	ldi	r30, 0x53	; 83
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	85 e8       	ldi	r24, 0x85	; 133
     eca:	80 83       	st	Z, r24
     ecc:	13 c0       	rjmp	.+38     	; 0xef4 <Timer0_Delay+0x15c>
		while(count != 0)								//run delay of real part
		{
			while(!(TIFR & (1<<TOV0)));
     ece:	e8 e5       	ldi	r30, 0x58	; 88
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	81 70       	andi	r24, 0x01	; 1
     eda:	90 70       	andi	r25, 0x00	; 0
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	b9 f3       	breq	.-18     	; 0xece <Timer0_Delay+0x136>
			count--;
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	81 50       	subi	r24, 0x01	; 1
     ee4:	89 83       	std	Y+1, r24	; 0x01
			TIFR |= (1<<TOV0);
     ee6:	a8 e5       	ldi	r26, 0x58	; 88
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e8 e5       	ldi	r30, 0x58	; 88
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	8c 93       	st	X, r24
		while(!(TIFR & (1<<TOV0)));
	}
	else
	{
		TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);		//use clock pre_scale 1024
		while(count != 0)								//run delay of real part
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	88 23       	and	r24, r24
     ef8:	51 f7       	brne	.-44     	; 0xece <Timer0_Delay+0x136>
		{
			while(!(TIFR & (1<<TOV0)));
			count--;
			TIFR |= (1<<TOV0);
		}
		if(reminder > 0)								//run remaining delay period
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	88 23       	and	r24, r24
     efe:	09 f4       	brne	.+2      	; 0xf02 <Timer0_Delay+0x16a>
     f00:	8e c0       	rjmp	.+284    	; 0x101e <Timer0_Delay+0x286>
		{
			if(reminder <= Tmax_N1)						//find best range that contain the required remaining delay
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	aa 27       	eor	r26, r26
     f0a:	97 fd       	sbrc	r25, 7
     f0c:	a0 95       	com	r26
     f0e:	ba 2f       	mov	r27, r26
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	28 eb       	ldi	r18, 0xB8	; 184
     f22:	3e e1       	ldi	r19, 0x1E	; 30
     f24:	45 e8       	ldi	r20, 0x85	; 133
     f26:	5e e3       	ldi	r21, 0x3E	; 62
     f28:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
     f2c:	18 16       	cp	r1, r24
     f2e:	2c f0       	brlt	.+10     	; 0xf3a <Timer0_Delay+0x1a2>
				Time.prescaler=N1;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9d 83       	std	Y+5, r25	; 0x05
     f36:	8c 83       	std	Y+4, r24	; 0x04
     f38:	72 c0       	rjmp	.+228    	; 0x101e <Timer0_Delay+0x286>
			else if(reminder <= Tmax_N8)
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	aa 27       	eor	r26, r26
     f42:	97 fd       	sbrc	r25, 7
     f44:	a0 95       	com	r26
     f46:	ba 2f       	mov	r27, r26
     f48:	bc 01       	movw	r22, r24
     f4a:	cd 01       	movw	r24, r26
     f4c:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	23 e3       	ldi	r18, 0x33	; 51
     f5a:	33 e3       	ldi	r19, 0x33	; 51
     f5c:	43 e0       	ldi	r20, 0x03	; 3
     f5e:	50 e4       	ldi	r21, 0x40	; 64
     f60:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
     f64:	18 16       	cp	r1, r24
     f66:	2c f0       	brlt	.+10     	; 0xf72 <Timer0_Delay+0x1da>
				Time.prescaler=N8;
     f68:	88 e0       	ldi	r24, 0x08	; 8
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9d 83       	std	Y+5, r25	; 0x05
     f6e:	8c 83       	std	Y+4, r24	; 0x04
     f70:	56 c0       	rjmp	.+172    	; 0x101e <Timer0_Delay+0x286>
			else if(reminder <= Tmax_N64)
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	aa 27       	eor	r26, r26
     f7a:	97 fd       	sbrc	r25, 7
     f7c:	a0 95       	com	r26
     f7e:	ba 2f       	mov	r27, r26
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	bc 01       	movw	r22, r24
     f8e:	cd 01       	movw	r24, r26
     f90:	2d e3       	ldi	r18, 0x3D	; 61
     f92:	3a e0       	ldi	r19, 0x0A	; 10
     f94:	43 e8       	ldi	r20, 0x83	; 131
     f96:	51 e4       	ldi	r21, 0x41	; 65
     f98:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
     f9c:	18 16       	cp	r1, r24
     f9e:	2c f0       	brlt	.+10     	; 0xfaa <Timer0_Delay+0x212>
				Time.prescaler=N64;
     fa0:	80 e4       	ldi	r24, 0x40	; 64
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9d 83       	std	Y+5, r25	; 0x05
     fa6:	8c 83       	std	Y+4, r24	; 0x04
     fa8:	3a c0       	rjmp	.+116    	; 0x101e <Timer0_Delay+0x286>
			else if(reminder <= Tmax_N256)
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	aa 27       	eor	r26, r26
     fb2:	97 fd       	sbrc	r25, 7
     fb4:	a0 95       	com	r26
     fb6:	ba 2f       	mov	r27, r26
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	2b e7       	ldi	r18, 0x7B	; 123
     fca:	34 e1       	ldi	r19, 0x14	; 20
     fcc:	43 e8       	ldi	r20, 0x83	; 131
     fce:	52 e4       	ldi	r21, 0x42	; 66
     fd0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	2c f0       	brlt	.+10     	; 0xfe2 <Timer0_Delay+0x24a>
				Time.prescaler=N256;
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	9d 83       	std	Y+5, r25	; 0x05
     fde:	8c 83       	std	Y+4, r24	; 0x04
     fe0:	1e c0       	rjmp	.+60     	; 0x101e <Timer0_Delay+0x286>
			else if(reminder <= Tmax_N1024)
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	aa 27       	eor	r26, r26
     fea:	97 fd       	sbrc	r25, 7
     fec:	a0 95       	com	r26
     fee:	ba 2f       	mov	r27, r26
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	2c ee       	ldi	r18, 0xEC	; 236
    1002:	31 e1       	ldi	r19, 0x11	; 17
    1004:	43 e8       	ldi	r20, 0x83	; 131
    1006:	53 e4       	ldi	r21, 0x43	; 67
    1008:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
    100c:	18 16       	cp	r1, r24
    100e:	2c f0       	brlt	.+10     	; 0x101a <Timer0_Delay+0x282>
				Time.prescaler=N1024;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	9d 83       	std	Y+5, r25	; 0x05
    1016:	8c 83       	std	Y+4, r24	; 0x04
    1018:	02 c0       	rjmp	.+4      	; 0x101e <Timer0_Delay+0x286>
			else
				Time.prescaler = N0;
    101a:	1d 82       	std	Y+5, r1	; 0x05
    101c:	1c 82       	std	Y+4, r1	; 0x04
		}
		switch(Time.prescaler)							//according to selected pre_scaler value
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	9d 81       	ldd	r25, Y+5	; 0x05
    1022:	98 8b       	std	Y+16, r25	; 0x10
    1024:	8f 87       	std	Y+15, r24	; 0x0f
    1026:	ef 85       	ldd	r30, Y+15	; 0x0f
    1028:	f8 89       	ldd	r31, Y+16	; 0x10
    102a:	e0 34       	cpi	r30, 0x40	; 64
    102c:	f1 05       	cpc	r31, r1
    102e:	09 f4       	brne	.+2      	; 0x1032 <Timer0_Delay+0x29a>
    1030:	7c c0       	rjmp	.+248    	; 0x112a <Timer0_Delay+0x392>
    1032:	8f 85       	ldd	r24, Y+15	; 0x0f
    1034:	98 89       	ldd	r25, Y+16	; 0x10
    1036:	81 34       	cpi	r24, 0x41	; 65
    1038:	91 05       	cpc	r25, r1
    103a:	60 f4       	brcc	.+24     	; 0x1054 <Timer0_Delay+0x2bc>
    103c:	ef 85       	ldd	r30, Y+15	; 0x0f
    103e:	f8 89       	ldd	r31, Y+16	; 0x10
    1040:	e1 30       	cpi	r30, 0x01	; 1
    1042:	f1 05       	cpc	r31, r1
    1044:	b1 f0       	breq	.+44     	; 0x1072 <Timer0_Delay+0x2da>
    1046:	8f 85       	ldd	r24, Y+15	; 0x0f
    1048:	98 89       	ldd	r25, Y+16	; 0x10
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <Timer0_Delay+0x2ba>
    1050:	3e c0       	rjmp	.+124    	; 0x10ce <Timer0_Delay+0x336>
    1052:	f5 c0       	rjmp	.+490    	; 0x123e <Timer0_Delay+0x4a6>
    1054:	ef 85       	ldd	r30, Y+15	; 0x0f
    1056:	f8 89       	ldd	r31, Y+16	; 0x10
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	e0 30       	cpi	r30, 0x00	; 0
    105c:	f2 07       	cpc	r31, r18
    105e:	09 f4       	brne	.+2      	; 0x1062 <Timer0_Delay+0x2ca>
    1060:	92 c0       	rjmp	.+292    	; 0x1186 <Timer0_Delay+0x3ee>
    1062:	8f 85       	ldd	r24, Y+15	; 0x0f
    1064:	98 89       	ldd	r25, Y+16	; 0x10
    1066:	e4 e0       	ldi	r30, 0x04	; 4
    1068:	80 30       	cpi	r24, 0x00	; 0
    106a:	9e 07       	cpc	r25, r30
    106c:	09 f4       	brne	.+2      	; 0x1070 <Timer0_Delay+0x2d8>
    106e:	b9 c0       	rjmp	.+370    	; 0x11e2 <Timer0_Delay+0x44a>
    1070:	e6 c0       	rjmp	.+460    	; 0x123e <Timer0_Delay+0x4a6>
		{
		case 1:
			TCNT0=init_value(Tmax_N1,reminder,Tmin_N1);	//set TCNT0 register with the initial value
    1072:	02 e5       	ldi	r16, 0x52	; 82
    1074:	10 e0       	ldi	r17, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	aa 27       	eor	r26, r26
    107e:	97 fd       	sbrc	r25, 7
    1080:	a0 95       	com	r26
    1082:	ba 2f       	mov	r27, r26
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    108c:	9b 01       	movw	r18, r22
    108e:	ac 01       	movw	r20, r24
    1090:	68 eb       	ldi	r22, 0xB8	; 184
    1092:	7e e1       	ldi	r23, 0x1E	; 30
    1094:	85 e8       	ldi	r24, 0x85	; 133
    1096:	9e e3       	ldi	r25, 0x3E	; 62
    1098:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	2f e6       	ldi	r18, 0x6F	; 111
    10a6:	32 e1       	ldi	r19, 0x12	; 18
    10a8:	43 e8       	ldi	r20, 0x83	; 131
    10aa:	5a e3       	ldi	r21, 0x3A	; 58
    10ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	f8 01       	movw	r30, r16
    10c2:	80 83       	st	Z, r24
			TCCR0 = (1<<FOC0) | (1<<CS00);				//set TCCR0 register with clock source
    10c4:	e3 e5       	ldi	r30, 0x53	; 83
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	81 e8       	ldi	r24, 0x81	; 129
    10ca:	80 83       	st	Z, r24
    10cc:	be c0       	rjmp	.+380    	; 0x124a <Timer0_Delay+0x4b2>
			break;
		case 8:
			TCNT0=init_value(Tmax_N8,reminder,Tmin_N8);
    10ce:	02 e5       	ldi	r16, 0x52	; 82
    10d0:	10 e0       	ldi	r17, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	aa 27       	eor	r26, r26
    10da:	97 fd       	sbrc	r25, 7
    10dc:	a0 95       	com	r26
    10de:	ba 2f       	mov	r27, r26
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    10e8:	9b 01       	movw	r18, r22
    10ea:	ac 01       	movw	r20, r24
    10ec:	63 e3       	ldi	r22, 0x33	; 51
    10ee:	73 e3       	ldi	r23, 0x33	; 51
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	90 e4       	ldi	r25, 0x40	; 64
    10f4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	2f e6       	ldi	r18, 0x6F	; 111
    1102:	32 e1       	ldi	r19, 0x12	; 18
    1104:	43 e0       	ldi	r20, 0x03	; 3
    1106:	5c e3       	ldi	r21, 0x3C	; 60
    1108:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	f8 01       	movw	r30, r16
    111e:	80 83       	st	Z, r24
			TCCR0 = (1<<FOC0) | (1<<CS01);
    1120:	e3 e5       	ldi	r30, 0x53	; 83
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	82 e8       	ldi	r24, 0x82	; 130
    1126:	80 83       	st	Z, r24
    1128:	90 c0       	rjmp	.+288    	; 0x124a <Timer0_Delay+0x4b2>
			break;
		case 64:
			TCNT0=init_value(Tmax_N64,reminder,Tmin_N64);
    112a:	02 e5       	ldi	r16, 0x52	; 82
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	aa 27       	eor	r26, r26
    1136:	97 fd       	sbrc	r25, 7
    1138:	a0 95       	com	r26
    113a:	ba 2f       	mov	r27, r26
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    1144:	9b 01       	movw	r18, r22
    1146:	ac 01       	movw	r20, r24
    1148:	6d e3       	ldi	r22, 0x3D	; 61
    114a:	7a e0       	ldi	r23, 0x0A	; 10
    114c:	83 e8       	ldi	r24, 0x83	; 131
    114e:	91 e4       	ldi	r25, 0x41	; 65
    1150:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	2f e6       	ldi	r18, 0x6F	; 111
    115e:	32 e1       	ldi	r19, 0x12	; 18
    1160:	43 e8       	ldi	r20, 0x83	; 131
    1162:	5d e3       	ldi	r21, 0x3D	; 61
    1164:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	f8 01       	movw	r30, r16
    117a:	80 83       	st	Z, r24
			TCCR0 = (1<<FOC0) | (1<<CS01) | (1<<CS00);
    117c:	e3 e5       	ldi	r30, 0x53	; 83
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	83 e8       	ldi	r24, 0x83	; 131
    1182:	80 83       	st	Z, r24
    1184:	62 c0       	rjmp	.+196    	; 0x124a <Timer0_Delay+0x4b2>
			break;
		case 256:
			TCNT0=init_value(Tmax_N256,reminder,Tmin_N256);
    1186:	02 e5       	ldi	r16, 0x52	; 82
    1188:	10 e0       	ldi	r17, 0x00	; 0
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	aa 27       	eor	r26, r26
    1192:	97 fd       	sbrc	r25, 7
    1194:	a0 95       	com	r26
    1196:	ba 2f       	mov	r27, r26
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	6b e7       	ldi	r22, 0x7B	; 123
    11a6:	74 e1       	ldi	r23, 0x14	; 20
    11a8:	83 e8       	ldi	r24, 0x83	; 131
    11aa:	92 e4       	ldi	r25, 0x42	; 66
    11ac:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	2f e6       	ldi	r18, 0x6F	; 111
    11ba:	32 e1       	ldi	r19, 0x12	; 18
    11bc:	43 e8       	ldi	r20, 0x83	; 131
    11be:	5e e3       	ldi	r21, 0x3E	; 62
    11c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	f8 01       	movw	r30, r16
    11d6:	80 83       	st	Z, r24
			TCCR0 = (1<<FOC0) | (1<<CS02);
    11d8:	e3 e5       	ldi	r30, 0x53	; 83
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	84 e8       	ldi	r24, 0x84	; 132
    11de:	80 83       	st	Z, r24
    11e0:	34 c0       	rjmp	.+104    	; 0x124a <Timer0_Delay+0x4b2>
			break;
		case 1024:
			TCNT0=init_value(Tmax_N1024,reminder,Tmin_N1024);
    11e2:	02 e5       	ldi	r16, 0x52	; 82
    11e4:	10 e0       	ldi	r17, 0x00	; 0
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	aa 27       	eor	r26, r26
    11ee:	97 fd       	sbrc	r25, 7
    11f0:	a0 95       	com	r26
    11f2:	ba 2f       	mov	r27, r26
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    11fc:	9b 01       	movw	r18, r22
    11fe:	ac 01       	movw	r20, r24
    1200:	6c ee       	ldi	r22, 0xEC	; 236
    1202:	71 e1       	ldi	r23, 0x11	; 17
    1204:	83 e8       	ldi	r24, 0x83	; 131
    1206:	93 e4       	ldi	r25, 0x43	; 67
    1208:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	2f e6       	ldi	r18, 0x6F	; 111
    1216:	32 e1       	ldi	r19, 0x12	; 18
    1218:	43 e8       	ldi	r20, 0x83	; 131
    121a:	5f e3       	ldi	r21, 0x3F	; 63
    121c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	f8 01       	movw	r30, r16
    1232:	80 83       	st	Z, r24
			TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
    1234:	e3 e5       	ldi	r30, 0x53	; 83
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	85 e8       	ldi	r24, 0x85	; 133
    123a:	80 83       	st	Z, r24
    123c:	06 c0       	rjmp	.+12     	; 0x124a <Timer0_Delay+0x4b2>
			break;
		default:
			TCNT0=0;
    123e:	e2 e5       	ldi	r30, 0x52	; 82
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	10 82       	st	Z, r1
			TCCR0 = 0;
    1244:	e3 e5       	ldi	r30, 0x53	; 83
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	10 82       	st	Z, r1
			break;
		}
		while(!(TIFR & (1<<TOV0)));			//Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)
    124a:	e8 e5       	ldi	r30, 0x58	; 88
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	81 70       	andi	r24, 0x01	; 1
    1256:	90 70       	andi	r25, 0x00	; 0
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	b9 f3       	breq	.-18     	; 0x124a <Timer0_Delay+0x4b2>
	}
	TIFR |= (1<<TOV0);						//Clear TOV0 bit by set its value
    125c:	a8 e5       	ldi	r26, 0x58	; 88
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e8 e5       	ldi	r30, 0x58	; 88
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	8c 93       	st	X, r24
	TCCR0 = 0;
    126a:	e3 e5       	ldi	r30, 0x53	; 83
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	10 82       	st	Z, r1
}
    1270:	60 96       	adiw	r28, 0x10	; 16
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	08 95       	ret

0000128a <calc_prescaler>:


static uint8 calc_prescaler(float delay,uint16* prescale)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	69 83       	std	Y+1, r22	; 0x01
    12a0:	7a 83       	std	Y+2, r23	; 0x02
    12a2:	8b 83       	std	Y+3, r24	; 0x03
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	5e 83       	std	Y+6, r21	; 0x06
    12a8:	4d 83       	std	Y+5, r20	; 0x05
	if(delay <= Tmax_N1024)
    12aa:	69 81       	ldd	r22, Y+1	; 0x01
    12ac:	7a 81       	ldd	r23, Y+2	; 0x02
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	2c ee       	ldi	r18, 0xEC	; 236
    12b4:	31 e1       	ldi	r19, 0x11	; 17
    12b6:	43 e8       	ldi	r20, 0x83	; 131
    12b8:	53 e4       	ldi	r21, 0x43	; 67
    12ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
    12be:	18 16       	cp	r1, r24
    12c0:	0c f4       	brge	.+2      	; 0x12c4 <calc_prescaler+0x3a>
    12c2:	66 c0       	rjmp	.+204    	; 0x1390 <calc_prescaler+0x106>
	{
		if(delay <= Tmax_N1)
    12c4:	69 81       	ldd	r22, Y+1	; 0x01
    12c6:	7a 81       	ldd	r23, Y+2	; 0x02
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	28 eb       	ldi	r18, 0xB8	; 184
    12ce:	3e e1       	ldi	r19, 0x1E	; 30
    12d0:	45 e8       	ldi	r20, 0x85	; 133
    12d2:	5e e3       	ldi	r21, 0x3E	; 62
    12d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
    12d8:	18 16       	cp	r1, r24
    12da:	3c f0       	brlt	.+14     	; 0x12ea <calc_prescaler+0x60>
			*prescale=N1;
    12dc:	ed 81       	ldd	r30, Y+5	; 0x05
    12de:	fe 81       	ldd	r31, Y+6	; 0x06
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	80 83       	st	Z, r24
    12e8:	50 c0       	rjmp	.+160    	; 0x138a <calc_prescaler+0x100>
		else if(delay <= Tmax_N8)
    12ea:	69 81       	ldd	r22, Y+1	; 0x01
    12ec:	7a 81       	ldd	r23, Y+2	; 0x02
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	23 e3       	ldi	r18, 0x33	; 51
    12f4:	33 e3       	ldi	r19, 0x33	; 51
    12f6:	43 e0       	ldi	r20, 0x03	; 3
    12f8:	50 e4       	ldi	r21, 0x40	; 64
    12fa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
    12fe:	18 16       	cp	r1, r24
    1300:	3c f0       	brlt	.+14     	; 0x1310 <calc_prescaler+0x86>
			*prescale=N8;
    1302:	ed 81       	ldd	r30, Y+5	; 0x05
    1304:	fe 81       	ldd	r31, Y+6	; 0x06
    1306:	88 e0       	ldi	r24, 0x08	; 8
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	80 83       	st	Z, r24
    130e:	3d c0       	rjmp	.+122    	; 0x138a <calc_prescaler+0x100>
		else if(delay <= Tmax_N64)
    1310:	69 81       	ldd	r22, Y+1	; 0x01
    1312:	7a 81       	ldd	r23, Y+2	; 0x02
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	2d e3       	ldi	r18, 0x3D	; 61
    131a:	3a e0       	ldi	r19, 0x0A	; 10
    131c:	43 e8       	ldi	r20, 0x83	; 131
    131e:	51 e4       	ldi	r21, 0x41	; 65
    1320:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
    1324:	18 16       	cp	r1, r24
    1326:	3c f0       	brlt	.+14     	; 0x1336 <calc_prescaler+0xac>
			*prescale=N64;
    1328:	ed 81       	ldd	r30, Y+5	; 0x05
    132a:	fe 81       	ldd	r31, Y+6	; 0x06
    132c:	80 e4       	ldi	r24, 0x40	; 64
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	91 83       	std	Z+1, r25	; 0x01
    1332:	80 83       	st	Z, r24
    1334:	2a c0       	rjmp	.+84     	; 0x138a <calc_prescaler+0x100>
		else if(delay <= Tmax_N256)
    1336:	69 81       	ldd	r22, Y+1	; 0x01
    1338:	7a 81       	ldd	r23, Y+2	; 0x02
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	2b e7       	ldi	r18, 0x7B	; 123
    1340:	34 e1       	ldi	r19, 0x14	; 20
    1342:	43 e8       	ldi	r20, 0x83	; 131
    1344:	52 e4       	ldi	r21, 0x42	; 66
    1346:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
    134a:	18 16       	cp	r1, r24
    134c:	3c f0       	brlt	.+14     	; 0x135c <calc_prescaler+0xd2>
			*prescale=N256;
    134e:	ed 81       	ldd	r30, Y+5	; 0x05
    1350:	fe 81       	ldd	r31, Y+6	; 0x06
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	91 83       	std	Z+1, r25	; 0x01
    1358:	80 83       	st	Z, r24
    135a:	17 c0       	rjmp	.+46     	; 0x138a <calc_prescaler+0x100>
		else if(delay <= Tmax_N1024)
    135c:	69 81       	ldd	r22, Y+1	; 0x01
    135e:	7a 81       	ldd	r23, Y+2	; 0x02
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	2c ee       	ldi	r18, 0xEC	; 236
    1366:	31 e1       	ldi	r19, 0x11	; 17
    1368:	43 e8       	ldi	r20, 0x83	; 131
    136a:	53 e4       	ldi	r21, 0x43	; 67
    136c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
    1370:	18 16       	cp	r1, r24
    1372:	3c f0       	brlt	.+14     	; 0x1382 <calc_prescaler+0xf8>
			*prescale=N1024;
    1374:	ed 81       	ldd	r30, Y+5	; 0x05
    1376:	fe 81       	ldd	r31, Y+6	; 0x06
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	94 e0       	ldi	r25, 0x04	; 4
    137c:	91 83       	std	Z+1, r25	; 0x01
    137e:	80 83       	st	Z, r24
    1380:	04 c0       	rjmp	.+8      	; 0x138a <calc_prescaler+0x100>
		else
			*prescale = N0;
    1382:	ed 81       	ldd	r30, Y+5	; 0x05
    1384:	fe 81       	ldd	r31, Y+6	; 0x06
    1386:	11 82       	std	Z+1, r1	; 0x01
    1388:	10 82       	st	Z, r1
		return 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	8f 83       	std	Y+7, r24	; 0x07
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <calc_prescaler+0x108>
	}
	else
		return 0;
    1390:	1f 82       	std	Y+7, r1	; 0x07
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1394:	27 96       	adiw	r28, 0x07	; 7
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <calc_initialValue>:

static void calc_initialValue(uint16 prescaler,uint8* init_value,float delay)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	2a 97       	sbiw	r28, 0x0a	; 10
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	9a 83       	std	Y+2, r25	; 0x02
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	7c 83       	std	Y+4, r23	; 0x04
    13c0:	6b 83       	std	Y+3, r22	; 0x03
    13c2:	2d 83       	std	Y+5, r18	; 0x05
    13c4:	3e 83       	std	Y+6, r19	; 0x06
    13c6:	4f 83       	std	Y+7, r20	; 0x07
    13c8:	58 87       	std	Y+8, r21	; 0x08
	switch(prescaler)
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9a 81       	ldd	r25, Y+2	; 0x02
    13ce:	9a 87       	std	Y+10, r25	; 0x0a
    13d0:	89 87       	std	Y+9, r24	; 0x09
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	80 34       	cpi	r24, 0x40	; 64
    13d8:	91 05       	cpc	r25, r1
    13da:	09 f4       	brne	.+2      	; 0x13de <calc_initialValue+0x38>
    13dc:	5f c0       	rjmp	.+190    	; 0x149c <calc_initialValue+0xf6>
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e2:	81 34       	cpi	r24, 0x41	; 65
    13e4:	91 05       	cpc	r25, r1
    13e6:	58 f4       	brcc	.+22     	; 0x13fe <calc_initialValue+0x58>
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	91 05       	cpc	r25, r1
    13f0:	a9 f0       	breq	.+42     	; 0x141c <calc_initialValue+0x76>
    13f2:	89 85       	ldd	r24, Y+9	; 0x09
    13f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f6:	88 30       	cpi	r24, 0x08	; 8
    13f8:	91 05       	cpc	r25, r1
    13fa:	81 f1       	breq	.+96     	; 0x145c <calc_initialValue+0xb6>
    13fc:	af c0       	rjmp	.+350    	; 0x155c <calc_initialValue+0x1b6>
    13fe:	89 85       	ldd	r24, Y+9	; 0x09
    1400:	9a 85       	ldd	r25, Y+10	; 0x0a
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	80 30       	cpi	r24, 0x00	; 0
    1406:	92 07       	cpc	r25, r18
    1408:	09 f4       	brne	.+2      	; 0x140c <calc_initialValue+0x66>
    140a:	68 c0       	rjmp	.+208    	; 0x14dc <calc_initialValue+0x136>
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	24 e0       	ldi	r18, 0x04	; 4
    1412:	80 30       	cpi	r24, 0x00	; 0
    1414:	92 07       	cpc	r25, r18
    1416:	09 f4       	brne	.+2      	; 0x141a <calc_initialValue+0x74>
    1418:	81 c0       	rjmp	.+258    	; 0x151c <calc_initialValue+0x176>
    141a:	a0 c0       	rjmp	.+320    	; 0x155c <calc_initialValue+0x1b6>
	{
	case 1:
		*init_value=init_value(Tmax_N1,delay,Tmin_N1);
    141c:	68 eb       	ldi	r22, 0xB8	; 184
    141e:	7e e1       	ldi	r23, 0x1E	; 30
    1420:	85 e8       	ldi	r24, 0x85	; 133
    1422:	9e e3       	ldi	r25, 0x3E	; 62
    1424:	2d 81       	ldd	r18, Y+5	; 0x05
    1426:	3e 81       	ldd	r19, Y+6	; 0x06
    1428:	4f 81       	ldd	r20, Y+7	; 0x07
    142a:	58 85       	ldd	r21, Y+8	; 0x08
    142c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	2f e6       	ldi	r18, 0x6F	; 111
    143a:	32 e1       	ldi	r19, 0x12	; 18
    143c:	43 e8       	ldi	r20, 0x83	; 131
    143e:	5a e3       	ldi	r21, 0x3A	; 58
    1440:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	eb 81       	ldd	r30, Y+3	; 0x03
    1456:	fc 81       	ldd	r31, Y+4	; 0x04
    1458:	80 83       	st	Z, r24
    145a:	83 c0       	rjmp	.+262    	; 0x1562 <calc_initialValue+0x1bc>
		break;
	case 8:
		*init_value=init_value(Tmax_N8,delay,Tmin_N8);
    145c:	63 e3       	ldi	r22, 0x33	; 51
    145e:	73 e3       	ldi	r23, 0x33	; 51
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	90 e4       	ldi	r25, 0x40	; 64
    1464:	2d 81       	ldd	r18, Y+5	; 0x05
    1466:	3e 81       	ldd	r19, Y+6	; 0x06
    1468:	4f 81       	ldd	r20, Y+7	; 0x07
    146a:	58 85       	ldd	r21, Y+8	; 0x08
    146c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	bc 01       	movw	r22, r24
    1476:	cd 01       	movw	r24, r26
    1478:	2f e6       	ldi	r18, 0x6F	; 111
    147a:	32 e1       	ldi	r19, 0x12	; 18
    147c:	43 e0       	ldi	r20, 0x03	; 3
    147e:	5c e3       	ldi	r21, 0x3C	; 60
    1480:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	eb 81       	ldd	r30, Y+3	; 0x03
    1496:	fc 81       	ldd	r31, Y+4	; 0x04
    1498:	80 83       	st	Z, r24
    149a:	63 c0       	rjmp	.+198    	; 0x1562 <calc_initialValue+0x1bc>
		break;
	case 64:
		*init_value=init_value(Tmax_N64,delay,Tmin_N64);
    149c:	6d e3       	ldi	r22, 0x3D	; 61
    149e:	7a e0       	ldi	r23, 0x0A	; 10
    14a0:	83 e8       	ldi	r24, 0x83	; 131
    14a2:	91 e4       	ldi	r25, 0x41	; 65
    14a4:	2d 81       	ldd	r18, Y+5	; 0x05
    14a6:	3e 81       	ldd	r19, Y+6	; 0x06
    14a8:	4f 81       	ldd	r20, Y+7	; 0x07
    14aa:	58 85       	ldd	r21, Y+8	; 0x08
    14ac:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	bc 01       	movw	r22, r24
    14b6:	cd 01       	movw	r24, r26
    14b8:	2f e6       	ldi	r18, 0x6F	; 111
    14ba:	32 e1       	ldi	r19, 0x12	; 18
    14bc:	43 e8       	ldi	r20, 0x83	; 131
    14be:	5d e3       	ldi	r21, 0x3D	; 61
    14c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	bc 01       	movw	r22, r24
    14ca:	cd 01       	movw	r24, r26
    14cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	eb 81       	ldd	r30, Y+3	; 0x03
    14d6:	fc 81       	ldd	r31, Y+4	; 0x04
    14d8:	80 83       	st	Z, r24
    14da:	43 c0       	rjmp	.+134    	; 0x1562 <calc_initialValue+0x1bc>
		break;
	case 256:
		*init_value=init_value(Tmax_N256,delay,Tmin_N256);
    14dc:	6b e7       	ldi	r22, 0x7B	; 123
    14de:	74 e1       	ldi	r23, 0x14	; 20
    14e0:	83 e8       	ldi	r24, 0x83	; 131
    14e2:	92 e4       	ldi	r25, 0x42	; 66
    14e4:	2d 81       	ldd	r18, Y+5	; 0x05
    14e6:	3e 81       	ldd	r19, Y+6	; 0x06
    14e8:	4f 81       	ldd	r20, Y+7	; 0x07
    14ea:	58 85       	ldd	r21, Y+8	; 0x08
    14ec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	2f e6       	ldi	r18, 0x6F	; 111
    14fa:	32 e1       	ldi	r19, 0x12	; 18
    14fc:	43 e8       	ldi	r20, 0x83	; 131
    14fe:	5e e3       	ldi	r21, 0x3E	; 62
    1500:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	eb 81       	ldd	r30, Y+3	; 0x03
    1516:	fc 81       	ldd	r31, Y+4	; 0x04
    1518:	80 83       	st	Z, r24
    151a:	23 c0       	rjmp	.+70     	; 0x1562 <calc_initialValue+0x1bc>
		break;
	case 1024:
		*init_value=init_value(Tmax_N1024,delay,Tmin_N1024);
    151c:	6c ee       	ldi	r22, 0xEC	; 236
    151e:	71 e1       	ldi	r23, 0x11	; 17
    1520:	83 e8       	ldi	r24, 0x83	; 131
    1522:	93 e4       	ldi	r25, 0x43	; 67
    1524:	2d 81       	ldd	r18, Y+5	; 0x05
    1526:	3e 81       	ldd	r19, Y+6	; 0x06
    1528:	4f 81       	ldd	r20, Y+7	; 0x07
    152a:	58 85       	ldd	r21, Y+8	; 0x08
    152c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	2f e6       	ldi	r18, 0x6F	; 111
    153a:	32 e1       	ldi	r19, 0x12	; 18
    153c:	43 e8       	ldi	r20, 0x83	; 131
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	eb 81       	ldd	r30, Y+3	; 0x03
    1556:	fc 81       	ldd	r31, Y+4	; 0x04
    1558:	80 83       	st	Z, r24
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <calc_initialValue+0x1bc>
		break;
	default:
		*init_value=0;
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	10 82       	st	Z, r1
		break;
	}
}
    1562:	2a 96       	adiw	r28, 0x0a	; 10
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <set_prescale>:

static void set_prescale(uint16 prescaler)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <set_prescale+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <set_prescale+0x8>
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01
	switch(prescaler)
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	8b 83       	std	Y+3, r24	; 0x03
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	80 34       	cpi	r24, 0x40	; 64
    1592:	91 05       	cpc	r25, r1
    1594:	39 f1       	breq	.+78     	; 0x15e4 <set_prescale+0x70>
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	81 34       	cpi	r24, 0x41	; 65
    159c:	91 05       	cpc	r25, r1
    159e:	58 f4       	brcc	.+22     	; 0x15b6 <set_prescale+0x42>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	91 05       	cpc	r25, r1
    15a8:	99 f0       	breq	.+38     	; 0x15d0 <set_prescale+0x5c>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	88 30       	cpi	r24, 0x08	; 8
    15b0:	91 05       	cpc	r25, r1
    15b2:	99 f0       	breq	.+38     	; 0x15da <set_prescale+0x66>
    15b4:	26 c0       	rjmp	.+76     	; 0x1602 <set_prescale+0x8e>
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	80 30       	cpi	r24, 0x00	; 0
    15be:	92 07       	cpc	r25, r18
    15c0:	b1 f0       	breq	.+44     	; 0x15ee <set_prescale+0x7a>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	24 e0       	ldi	r18, 0x04	; 4
    15c8:	80 30       	cpi	r24, 0x00	; 0
    15ca:	92 07       	cpc	r25, r18
    15cc:	a9 f0       	breq	.+42     	; 0x15f8 <set_prescale+0x84>
    15ce:	19 c0       	rjmp	.+50     	; 0x1602 <set_prescale+0x8e>
	{
	case 1:
		TCCR0 = (1<<FOC0) | (1<<CS00);
    15d0:	e3 e5       	ldi	r30, 0x53	; 83
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	81 e8       	ldi	r24, 0x81	; 129
    15d6:	80 83       	st	Z, r24
    15d8:	17 c0       	rjmp	.+46     	; 0x1608 <set_prescale+0x94>
		break;
	case 8:
		TCCR0 = (1<<FOC0) | (1<<CS01);
    15da:	e3 e5       	ldi	r30, 0x53	; 83
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	82 e8       	ldi	r24, 0x82	; 130
    15e0:	80 83       	st	Z, r24
    15e2:	12 c0       	rjmp	.+36     	; 0x1608 <set_prescale+0x94>
		break;
	case 64:
		TCCR0 = (1<<FOC0) | (1<<CS01) | (1<<CS00);
    15e4:	e3 e5       	ldi	r30, 0x53	; 83
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	83 e8       	ldi	r24, 0x83	; 131
    15ea:	80 83       	st	Z, r24
    15ec:	0d c0       	rjmp	.+26     	; 0x1608 <set_prescale+0x94>
		break;
	case 256:
		TCCR0 = (1<<FOC0) | (1<<CS02);
    15ee:	e3 e5       	ldi	r30, 0x53	; 83
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	84 e8       	ldi	r24, 0x84	; 132
    15f4:	80 83       	st	Z, r24
    15f6:	08 c0       	rjmp	.+16     	; 0x1608 <set_prescale+0x94>
		break;
	case 1024:
		TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
    15f8:	e3 e5       	ldi	r30, 0x53	; 83
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	85 e8       	ldi	r24, 0x85	; 133
    15fe:	80 83       	st	Z, r24
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <set_prescale+0x94>
		break;
	default:
		TCCR0 = 0;
    1602:	e3 e5       	ldi	r30, 0x53	; 83
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	10 82       	st	Z, r1
		break;
	}
}
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <PWM_Timer2_Init>:
float time_on,time_off;
float initValue_1,initValue_2;


void PWM_Timer2_Init(void)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0; //Set Timer Initial value
    161e:	e4 e4       	ldi	r30, 0x44	; 68
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	10 82       	st	Z, r1
	DDRD  = DDRD | (1<<PD7);
    1624:	a1 e3       	ldi	r26, 0x31	; 49
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e1 e3       	ldi	r30, 0x31	; 49
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	80 68       	ori	r24, 0x80	; 128
    1630:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR2 = (1<<WGM20) | (1<<WGM21) | (1<<COM21) ;
    1632:	e5 e4       	ldi	r30, 0x45	; 69
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	88 e6       	ldi	r24, 0x68	; 104
    1638:	80 83       	st	Z, r24
}
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <PWM_Timer2_Start>:
void PWM_Timer2_Start(uint8 duty_cycle)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	0f 92       	push	r0
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	89 83       	std	Y+1, r24	; 0x01
	duty_cycle=(duty_cycle*255)/100;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	48 2f       	mov	r20, r24
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	ca 01       	movw	r24, r20
    1654:	9c 01       	movw	r18, r24
    1656:	22 0f       	add	r18, r18
    1658:	33 1f       	adc	r19, r19
    165a:	c9 01       	movw	r24, r18
    165c:	96 95       	lsr	r25
    165e:	98 2f       	mov	r25, r24
    1660:	88 27       	eor	r24, r24
    1662:	97 95       	ror	r25
    1664:	87 95       	ror	r24
    1666:	82 1b       	sub	r24, r18
    1668:	93 0b       	sbc	r25, r19
    166a:	84 0f       	add	r24, r20
    166c:	95 1f       	adc	r25, r21
    166e:	24 e6       	ldi	r18, 0x64	; 100
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	b9 01       	movw	r22, r18
    1674:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__divmodhi4>
    1678:	cb 01       	movw	r24, r22
    167a:	89 83       	std	Y+1, r24	; 0x01
	OCR2  = duty_cycle; // Set Compare Value
    167c:	e3 e4       	ldi	r30, 0x43	; 67
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	80 83       	st	Z, r24
	TCCR2 |= (1<<CS21); //enable clock
    1684:	a5 e4       	ldi	r26, 0x45	; 69
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e5 e4       	ldi	r30, 0x45	; 69
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	82 60       	ori	r24, 0x02	; 2
    1690:	8c 93       	st	X, r24
}
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <PWM_Timer2_Stop>:
void PWM_Timer2_Stop(void)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    16a2:	e5 e4       	ldi	r30, 0x45	; 69
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	10 82       	st	Z, r1
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <DIO_pinDirection>:
 *      Author: HAZEM-PC
 */
#include "DIO.h"

EN_STATE DIO_pinDirection(uint8 port,uint8 pin,EN_PIN_DIRECTION direction)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <DIO_pinDirection+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <DIO_pinDirection+0x8>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_pinDirection+0xa>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	6a 83       	std	Y+2, r22	; 0x02
    16c0:	4b 83       	std	Y+3, r20	; 0x03
	if(port >= MAX_PORT_ID || pin >= MAX_PIN)
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	84 30       	cpi	r24, 0x04	; 4
    16c6:	18 f4       	brcc	.+6      	; 0x16ce <DIO_pinDirection+0x20>
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	88 30       	cpi	r24, 0x08	; 8
    16cc:	10 f0       	brcs	.+4      	; 0x16d2 <DIO_pinDirection+0x24>
	{
		return FAILED;
    16ce:	1e 82       	std	Y+6, r1	; 0x06
    16d0:	d6 c0       	rjmp	.+428    	; 0x187e <DIO_pinDirection+0x1d0>
	}
	switch(port)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3d 83       	std	Y+5, r19	; 0x05
    16da:	2c 83       	std	Y+4, r18	; 0x04
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	9d 81       	ldd	r25, Y+5	; 0x05
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <DIO_pinDirection+0x3a>
    16e6:	43 c0       	rjmp	.+134    	; 0x176e <DIO_pinDirection+0xc0>
    16e8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ea:	3d 81       	ldd	r19, Y+5	; 0x05
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	2c f4       	brge	.+10     	; 0x16fc <DIO_pinDirection+0x4e>
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	71 f0       	breq	.+28     	; 0x1716 <DIO_pinDirection+0x68>
    16fa:	bd c0       	rjmp	.+378    	; 0x1876 <DIO_pinDirection+0x1c8>
    16fc:	2c 81       	ldd	r18, Y+4	; 0x04
    16fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <DIO_pinDirection+0x5a>
    1706:	5f c0       	rjmp	.+190    	; 0x17c6 <DIO_pinDirection+0x118>
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	9d 81       	ldd	r25, Y+5	; 0x05
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	91 05       	cpc	r25, r1
    1710:	09 f4       	brne	.+2      	; 0x1714 <DIO_pinDirection+0x66>
    1712:	85 c0       	rjmp	.+266    	; 0x181e <DIO_pinDirection+0x170>
    1714:	b0 c0       	rjmp	.+352    	; 0x1876 <DIO_pinDirection+0x1c8>
	{
	case PORTA_ID:
		if(direction == PIN_OUTPUT)
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	a1 f4       	brne	.+40     	; 0x1744 <DIO_pinDirection+0x96>
		{
			SET_BIT(DDRA,pin);
    171c:	aa e3       	ldi	r26, 0x3A	; 58
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	ea e3       	ldi	r30, 0x3A	; 58
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_pinDirection+0x8c>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <DIO_pinDirection+0x88>
    173e:	84 2b       	or	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	9b c0       	rjmp	.+310    	; 0x187a <DIO_pinDirection+0x1cc>
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
    1744:	aa e3       	ldi	r26, 0x3A	; 58
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	ea e3       	ldi	r30, 0x3A	; 58
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_pinDirection+0xb4>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <DIO_pinDirection+0xb0>
    1766:	80 95       	com	r24
    1768:	84 23       	and	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	86 c0       	rjmp	.+268    	; 0x187a <DIO_pinDirection+0x1cc>
		}
		break;
	case PORTB_ID:
		if(direction == PIN_OUTPUT)
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	a1 f4       	brne	.+40     	; 0x179c <DIO_pinDirection+0xee>
		{
			SET_BIT(DDRB,pin);
    1774:	a7 e3       	ldi	r26, 0x37	; 55
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e7 e3       	ldi	r30, 0x37	; 55
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_pinDirection+0xe4>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_pinDirection+0xe0>
    1796:	84 2b       	or	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	6f c0       	rjmp	.+222    	; 0x187a <DIO_pinDirection+0x1cc>
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
    179c:	a7 e3       	ldi	r26, 0x37	; 55
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e7 e3       	ldi	r30, 0x37	; 55
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_pinDirection+0x10c>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_pinDirection+0x108>
    17be:	80 95       	com	r24
    17c0:	84 23       	and	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	5a c0       	rjmp	.+180    	; 0x187a <DIO_pinDirection+0x1cc>
		}
		break;
	case PORTC_ID:
		if(direction == PIN_OUTPUT)
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	a1 f4       	brne	.+40     	; 0x17f4 <DIO_pinDirection+0x146>
		{
			SET_BIT(DDRC,pin);
    17cc:	a4 e3       	ldi	r26, 0x34	; 52
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e4 e3       	ldi	r30, 0x34	; 52
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <DIO_pinDirection+0x13c>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <DIO_pinDirection+0x138>
    17ee:	84 2b       	or	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	43 c0       	rjmp	.+134    	; 0x187a <DIO_pinDirection+0x1cc>
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
    17f4:	a4 e3       	ldi	r26, 0x34	; 52
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e4 e3       	ldi	r30, 0x34	; 52
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_pinDirection+0x164>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_pinDirection+0x160>
    1816:	80 95       	com	r24
    1818:	84 23       	and	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	2e c0       	rjmp	.+92     	; 0x187a <DIO_pinDirection+0x1cc>
		}
		break;
	case PORTD_ID:
		if(direction == PIN_OUTPUT)
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	a1 f4       	brne	.+40     	; 0x184c <DIO_pinDirection+0x19e>
		{
			SET_BIT(DDRD,pin);
    1824:	a1 e3       	ldi	r26, 0x31	; 49
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e1 e3       	ldi	r30, 0x31	; 49
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <DIO_pinDirection+0x194>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <DIO_pinDirection+0x190>
    1846:	84 2b       	or	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	17 c0       	rjmp	.+46     	; 0x187a <DIO_pinDirection+0x1cc>
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
    184c:	a1 e3       	ldi	r26, 0x31	; 49
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e1 e3       	ldi	r30, 0x31	; 49
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 2e       	mov	r0, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <DIO_pinDirection+0x1bc>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <DIO_pinDirection+0x1b8>
    186e:	80 95       	com	r24
    1870:	84 23       	and	r24, r20
    1872:	8c 93       	st	X, r24
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_pinDirection+0x1cc>
		}
		break;
	default:
		return FAILED;
    1876:	1e 82       	std	Y+6, r1	; 0x06
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_pinDirection+0x1d0>
	}
	return SUCCESS;
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1880:	26 96       	adiw	r28, 0x06	; 6
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <DIO_writePin>:

EN_STATE DIO_writePin(uint8 port,uint8 pin,EN_PIN_VALUE value)
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <DIO_writePin+0x6>
    1898:	00 d0       	rcall	.+0      	; 0x189a <DIO_writePin+0x8>
    189a:	00 d0       	rcall	.+0      	; 0x189c <DIO_writePin+0xa>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	6a 83       	std	Y+2, r22	; 0x02
    18a4:	4b 83       	std	Y+3, r20	; 0x03
	if(port >= MAX_PORT_ID || pin >= MAX_PIN)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	84 30       	cpi	r24, 0x04	; 4
    18aa:	18 f4       	brcc	.+6      	; 0x18b2 <DIO_writePin+0x20>
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	88 30       	cpi	r24, 0x08	; 8
    18b0:	10 f0       	brcs	.+4      	; 0x18b6 <DIO_writePin+0x24>
	{
		return FAILED;
    18b2:	1e 82       	std	Y+6, r1	; 0x06
    18b4:	d6 c0       	rjmp	.+428    	; 0x1a62 <DIO_writePin+0x1d0>
	}
	switch(port)
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	3d 83       	std	Y+5, r19	; 0x05
    18be:	2c 83       	std	Y+4, r18	; 0x04
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	9d 81       	ldd	r25, Y+5	; 0x05
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	91 05       	cpc	r25, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <DIO_writePin+0x3a>
    18ca:	43 c0       	rjmp	.+134    	; 0x1952 <DIO_writePin+0xc0>
    18cc:	2c 81       	ldd	r18, Y+4	; 0x04
    18ce:	3d 81       	ldd	r19, Y+5	; 0x05
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <DIO_writePin+0x4e>
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	71 f0       	breq	.+28     	; 0x18fa <DIO_writePin+0x68>
    18de:	bd c0       	rjmp	.+378    	; 0x1a5a <DIO_writePin+0x1c8>
    18e0:	2c 81       	ldd	r18, Y+4	; 0x04
    18e2:	3d 81       	ldd	r19, Y+5	; 0x05
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <DIO_writePin+0x5a>
    18ea:	5f c0       	rjmp	.+190    	; 0x19aa <DIO_writePin+0x118>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	91 05       	cpc	r25, r1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <DIO_writePin+0x66>
    18f6:	85 c0       	rjmp	.+266    	; 0x1a02 <DIO_writePin+0x170>
    18f8:	b0 c0       	rjmp	.+352    	; 0x1a5a <DIO_writePin+0x1c8>
	{
	case PORTA_ID:
		if(value == High)
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	a1 f4       	brne	.+40     	; 0x1928 <DIO_writePin+0x96>
		{
			SET_BIT(PORTA,pin);
    1900:	ab e3       	ldi	r26, 0x3B	; 59
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	eb e3       	ldi	r30, 0x3B	; 59
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_writePin+0x8c>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_writePin+0x88>
    1922:	84 2b       	or	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	9b c0       	rjmp	.+310    	; 0x1a5e <DIO_writePin+0x1cc>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    1928:	ab e3       	ldi	r26, 0x3B	; 59
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	eb e3       	ldi	r30, 0x3B	; 59
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_writePin+0xb4>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_writePin+0xb0>
    194a:	80 95       	com	r24
    194c:	84 23       	and	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	86 c0       	rjmp	.+268    	; 0x1a5e <DIO_writePin+0x1cc>
		}
		break;
	case PORTB_ID:
		if(value == High)
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	a1 f4       	brne	.+40     	; 0x1980 <DIO_writePin+0xee>
		{
			SET_BIT(PORTB,pin);
    1958:	a8 e3       	ldi	r26, 0x38	; 56
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e8 e3       	ldi	r30, 0x38	; 56
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <DIO_writePin+0xe4>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <DIO_writePin+0xe0>
    197a:	84 2b       	or	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	6f c0       	rjmp	.+222    	; 0x1a5e <DIO_writePin+0x1cc>
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
    1980:	a8 e3       	ldi	r26, 0x38	; 56
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e8 e3       	ldi	r30, 0x38	; 56
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_writePin+0x10c>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <DIO_writePin+0x108>
    19a2:	80 95       	com	r24
    19a4:	84 23       	and	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	5a c0       	rjmp	.+180    	; 0x1a5e <DIO_writePin+0x1cc>
		}
		break;
	case PORTC_ID:
		if(value == High)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	a1 f4       	brne	.+40     	; 0x19d8 <DIO_writePin+0x146>
		{
			SET_BIT(PORTC,pin);
    19b0:	a5 e3       	ldi	r26, 0x35	; 53
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e5 e3       	ldi	r30, 0x35	; 53
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_writePin+0x13c>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_writePin+0x138>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	43 c0       	rjmp	.+134    	; 0x1a5e <DIO_writePin+0x1cc>
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
    19d8:	a5 e3       	ldi	r26, 0x35	; 53
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e5 e3       	ldi	r30, 0x35	; 53
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_writePin+0x164>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_writePin+0x160>
    19fa:	80 95       	com	r24
    19fc:	84 23       	and	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	2e c0       	rjmp	.+92     	; 0x1a5e <DIO_writePin+0x1cc>
		}
		break;
	case PORTD_ID:
		if(value == High)
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	a1 f4       	brne	.+40     	; 0x1a30 <DIO_writePin+0x19e>
		{
			SET_BIT(PORTD,pin);
    1a08:	a2 e3       	ldi	r26, 0x32	; 50
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e2 e3       	ldi	r30, 0x32	; 50
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_writePin+0x194>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_writePin+0x190>
    1a2a:	84 2b       	or	r24, r20
    1a2c:	8c 93       	st	X, r24
    1a2e:	17 c0       	rjmp	.+46     	; 0x1a5e <DIO_writePin+0x1cc>
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
    1a30:	a2 e3       	ldi	r26, 0x32	; 50
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e2 e3       	ldi	r30, 0x32	; 50
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <DIO_writePin+0x1bc>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <DIO_writePin+0x1b8>
    1a52:	80 95       	com	r24
    1a54:	84 23       	and	r24, r20
    1a56:	8c 93       	st	X, r24
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_writePin+0x1cc>
		}
		break;
	default:
		return FAILED;
    1a5a:	1e 82       	std	Y+6, r1	; 0x06
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <DIO_writePin+0x1d0>
	}
	return SUCCESS;
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1a64:	26 96       	adiw	r28, 0x06	; 6
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <DIO_readPin>:

EN_STATE DIO_readPin(uint8 port,uint8 pin,uint8* value)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	27 97       	sbiw	r28, 0x07	; 7
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	6a 83       	std	Y+2, r22	; 0x02
    1a8e:	5c 83       	std	Y+4, r21	; 0x04
    1a90:	4b 83       	std	Y+3, r20	; 0x03
	if(port >= MAX_PORT_ID || pin >= MAX_PIN)
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	84 30       	cpi	r24, 0x04	; 4
    1a96:	18 f4       	brcc	.+6      	; 0x1a9e <DIO_readPin+0x28>
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	88 30       	cpi	r24, 0x08	; 8
    1a9c:	10 f0       	brcs	.+4      	; 0x1aa2 <DIO_readPin+0x2c>
	{
		return FAILED;
    1a9e:	1f 82       	std	Y+7, r1	; 0x07
    1aa0:	96 c0       	rjmp	.+300    	; 0x1bce <DIO_readPin+0x158>
	}
	switch(port)
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3e 83       	std	Y+6, r19	; 0x06
    1aaa:	2d 83       	std	Y+5, r18	; 0x05
    1aac:	4d 81       	ldd	r20, Y+5	; 0x05
    1aae:	5e 81       	ldd	r21, Y+6	; 0x06
    1ab0:	41 30       	cpi	r20, 0x01	; 1
    1ab2:	51 05       	cpc	r21, r1
    1ab4:	a1 f1       	breq	.+104    	; 0x1b1e <DIO_readPin+0xa8>
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	82 30       	cpi	r24, 0x02	; 2
    1abc:	91 05       	cpc	r25, r1
    1abe:	34 f4       	brge	.+12     	; 0x1acc <DIO_readPin+0x56>
    1ac0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac4:	21 15       	cp	r18, r1
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	71 f0       	breq	.+28     	; 0x1ae6 <DIO_readPin+0x70>
    1aca:	7d c0       	rjmp	.+250    	; 0x1bc6 <DIO_readPin+0x150>
    1acc:	4d 81       	ldd	r20, Y+5	; 0x05
    1ace:	5e 81       	ldd	r21, Y+6	; 0x06
    1ad0:	42 30       	cpi	r20, 0x02	; 2
    1ad2:	51 05       	cpc	r21, r1
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <DIO_readPin+0x62>
    1ad6:	3f c0       	rjmp	.+126    	; 0x1b56 <DIO_readPin+0xe0>
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	83 30       	cpi	r24, 0x03	; 3
    1ade:	91 05       	cpc	r25, r1
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <DIO_readPin+0x6e>
    1ae2:	55 c0       	rjmp	.+170    	; 0x1b8e <DIO_readPin+0x118>
    1ae4:	70 c0       	rjmp	.+224    	; 0x1bc6 <DIO_readPin+0x150>
	{
	case PORTA_ID:
		if(BIT_IS_SET(PINA,pin))
    1ae6:	e9 e3       	ldi	r30, 0x39	; 57
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	a9 01       	movw	r20, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <DIO_readPin+0x88>
    1afa:	55 95       	asr	r21
    1afc:	47 95       	ror	r20
    1afe:	8a 95       	dec	r24
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <DIO_readPin+0x84>
    1b02:	ca 01       	movw	r24, r20
    1b04:	81 70       	andi	r24, 0x01	; 1
    1b06:	90 70       	andi	r25, 0x00	; 0
    1b08:	88 23       	and	r24, r24
    1b0a:	29 f0       	breq	.+10     	; 0x1b16 <DIO_readPin+0xa0>
		{
			*value = LOGIC_HIGH;
    1b0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	80 83       	st	Z, r24
    1b14:	5a c0       	rjmp	.+180    	; 0x1bca <DIO_readPin+0x154>
		}
		else
		{
			*value = LOGIC_LOW;
    1b16:	eb 81       	ldd	r30, Y+3	; 0x03
    1b18:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1a:	10 82       	st	Z, r1
    1b1c:	56 c0       	rjmp	.+172    	; 0x1bca <DIO_readPin+0x154>
		}
		break;
	case PORTB_ID:
		if(BIT_IS_SET(PINB,pin))
    1b1e:	e6 e3       	ldi	r30, 0x36	; 54
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	88 2f       	mov	r24, r24
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	a9 01       	movw	r20, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_readPin+0xc0>
    1b32:	55 95       	asr	r21
    1b34:	47 95       	ror	r20
    1b36:	8a 95       	dec	r24
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_readPin+0xbc>
    1b3a:	ca 01       	movw	r24, r20
    1b3c:	81 70       	andi	r24, 0x01	; 1
    1b3e:	90 70       	andi	r25, 0x00	; 0
    1b40:	88 23       	and	r24, r24
    1b42:	29 f0       	breq	.+10     	; 0x1b4e <DIO_readPin+0xd8>
		{
			*value = LOGIC_HIGH;
    1b44:	eb 81       	ldd	r30, Y+3	; 0x03
    1b46:	fc 81       	ldd	r31, Y+4	; 0x04
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	80 83       	st	Z, r24
    1b4c:	3e c0       	rjmp	.+124    	; 0x1bca <DIO_readPin+0x154>
		}
		else
		{
			*value = LOGIC_LOW;
    1b4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b50:	fc 81       	ldd	r31, Y+4	; 0x04
    1b52:	10 82       	st	Z, r1
    1b54:	3a c0       	rjmp	.+116    	; 0x1bca <DIO_readPin+0x154>
		}
		break;
	case PORTC_ID:
		if(BIT_IS_SET(PINC,pin))
    1b56:	e3 e3       	ldi	r30, 0x33	; 51
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a9 01       	movw	r20, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <DIO_readPin+0xf8>
    1b6a:	55 95       	asr	r21
    1b6c:	47 95       	ror	r20
    1b6e:	8a 95       	dec	r24
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <DIO_readPin+0xf4>
    1b72:	ca 01       	movw	r24, r20
    1b74:	81 70       	andi	r24, 0x01	; 1
    1b76:	90 70       	andi	r25, 0x00	; 0
    1b78:	88 23       	and	r24, r24
    1b7a:	29 f0       	breq	.+10     	; 0x1b86 <DIO_readPin+0x110>
		{
			*value = LOGIC_HIGH;
    1b7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	80 83       	st	Z, r24
    1b84:	22 c0       	rjmp	.+68     	; 0x1bca <DIO_readPin+0x154>
		}
		else
		{
			*value = LOGIC_LOW;
    1b86:	eb 81       	ldd	r30, Y+3	; 0x03
    1b88:	fc 81       	ldd	r31, Y+4	; 0x04
    1b8a:	10 82       	st	Z, r1
    1b8c:	1e c0       	rjmp	.+60     	; 0x1bca <DIO_readPin+0x154>
		}
		break;
	case PORTD_ID:
		if(BIT_IS_SET(PIND,pin))
    1b8e:	e0 e3       	ldi	r30, 0x30	; 48
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a9 01       	movw	r20, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <DIO_readPin+0x130>
    1ba2:	55 95       	asr	r21
    1ba4:	47 95       	ror	r20
    1ba6:	8a 95       	dec	r24
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <DIO_readPin+0x12c>
    1baa:	ca 01       	movw	r24, r20
    1bac:	81 70       	andi	r24, 0x01	; 1
    1bae:	90 70       	andi	r25, 0x00	; 0
    1bb0:	88 23       	and	r24, r24
    1bb2:	29 f0       	breq	.+10     	; 0x1bbe <DIO_readPin+0x148>
		{
			*value = LOGIC_HIGH;
    1bb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	80 83       	st	Z, r24
    1bbc:	06 c0       	rjmp	.+12     	; 0x1bca <DIO_readPin+0x154>
		}
		else
		{
			*value = LOGIC_LOW;
    1bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc2:	10 82       	st	Z, r1
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <DIO_readPin+0x154>
		}
		break;
	default:
		return FAILED;
    1bc6:	1f 82       	std	Y+7, r1	; 0x07
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <DIO_readPin+0x158>
	}
	return SUCCESS;
    1bca:	51 e0       	ldi	r21, 0x01	; 1
    1bcc:	5f 83       	std	Y+7, r21	; 0x07
    1bce:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1bd0:	27 96       	adiw	r28, 0x07	; 7
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <DIO_togglePin>:

EN_STATE DIO_togglePin(uint8 port,uint8 pin)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <DIO_togglePin+0x6>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <DIO_togglePin+0x8>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	6a 83       	std	Y+2, r22	; 0x02
	if(port >= MAX_PORT_ID || pin >= MAX_PIN)
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	18 f4       	brcc	.+6      	; 0x1c00 <DIO_togglePin+0x1e>
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	88 30       	cpi	r24, 0x08	; 8
    1bfe:	10 f0       	brcs	.+4      	; 0x1c04 <DIO_togglePin+0x22>
	{
		return FAILED;
    1c00:	1d 82       	std	Y+5, r1	; 0x05
    1c02:	73 c0       	rjmp	.+230    	; 0x1cea <DIO_togglePin+0x108>
	}
	switch (port)
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	3c 83       	std	Y+4, r19	; 0x04
    1c0c:	2b 83       	std	Y+3, r18	; 0x03
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	91 05       	cpc	r25, r1
    1c16:	49 f1       	breq	.+82     	; 0x1c6a <DIO_togglePin+0x88>
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	22 30       	cpi	r18, 0x02	; 2
    1c1e:	31 05       	cpc	r19, r1
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <DIO_togglePin+0x4a>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	61 f0       	breq	.+24     	; 0x1c42 <DIO_togglePin+0x60>
    1c2a:	5b c0       	rjmp	.+182    	; 0x1ce2 <DIO_togglePin+0x100>
    1c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	71 f1       	breq	.+92     	; 0x1c92 <DIO_togglePin+0xb0>
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	83 30       	cpi	r24, 0x03	; 3
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	e9 f1       	breq	.+122    	; 0x1cba <DIO_togglePin+0xd8>
    1c40:	50 c0       	rjmp	.+160    	; 0x1ce2 <DIO_togglePin+0x100>
	{
	case PORTA_ID:
		TOGGLE_BIT(PORTA,pin);
    1c42:	ab e3       	ldi	r26, 0x3B	; 59
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	eb e3       	ldi	r30, 0x3B	; 59
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <DIO_togglePin+0x7e>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <DIO_togglePin+0x7a>
    1c64:	84 27       	eor	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	3e c0       	rjmp	.+124    	; 0x1ce6 <DIO_togglePin+0x104>
		break;
	case PORTB_ID:
		TOGGLE_BIT(PORTB,pin);
    1c6a:	a8 e3       	ldi	r26, 0x38	; 56
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e8 e3       	ldi	r30, 0x38	; 56
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <DIO_togglePin+0xa6>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <DIO_togglePin+0xa2>
    1c8c:	84 27       	eor	r24, r20
    1c8e:	8c 93       	st	X, r24
    1c90:	2a c0       	rjmp	.+84     	; 0x1ce6 <DIO_togglePin+0x104>
		break;
	case PORTC_ID:
		TOGGLE_BIT(PORTC,pin);
    1c92:	a5 e3       	ldi	r26, 0x35	; 53
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e5 e3       	ldi	r30, 0x35	; 53
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 2e       	mov	r0, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <DIO_togglePin+0xce>
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	0a 94       	dec	r0
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <DIO_togglePin+0xca>
    1cb4:	84 27       	eor	r24, r20
    1cb6:	8c 93       	st	X, r24
    1cb8:	16 c0       	rjmp	.+44     	; 0x1ce6 <DIO_togglePin+0x104>
		break;
	case PORTD_ID:
		TOGGLE_BIT(PORTD,pin);
    1cba:	a2 e3       	ldi	r26, 0x32	; 50
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e2 e3       	ldi	r30, 0x32	; 50
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 2e       	mov	r0, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <DIO_togglePin+0xf6>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <DIO_togglePin+0xf2>
    1cdc:	84 27       	eor	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <DIO_togglePin+0x104>
		break;
	default:
		return FAILED;
    1ce2:	1d 82       	std	Y+5, r1	; 0x05
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <DIO_togglePin+0x108>
	}
	return SUCCESS;
    1ce6:	91 e0       	ldi	r25, 0x01	; 1
    1ce8:	9d 83       	std	Y+5, r25	; 0x05
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <check_pin>:

void check_pin(uint8* pin_no,uint8* port)
{
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <check_pin+0x6>
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <check_pin+0x8>
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	7c 83       	std	Y+4, r23	; 0x04
    1d0e:	6b 83       	std	Y+3, r22	; 0x03
	if((*pin_no >=0) && (*pin_no <=7))
    1d10:	e9 81       	ldd	r30, Y+1	; 0x01
    1d12:	fa 81       	ldd	r31, Y+2	; 0x02
    1d14:	80 81       	ld	r24, Z
    1d16:	88 30       	cpi	r24, 0x08	; 8
    1d18:	20 f4       	brcc	.+8      	; 0x1d22 <check_pin+0x26>
	{
		*port= PORTA_ID;
    1d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1e:	10 82       	st	Z, r1
    1d20:	45 c0       	rjmp	.+138    	; 0x1dac <check_pin+0xb0>
	}
	else if((*pin_no >=8) && (*pin_no<=15))
    1d22:	e9 81       	ldd	r30, Y+1	; 0x01
    1d24:	fa 81       	ldd	r31, Y+2	; 0x02
    1d26:	80 81       	ld	r24, Z
    1d28:	88 30       	cpi	r24, 0x08	; 8
    1d2a:	88 f0       	brcs	.+34     	; 0x1d4e <check_pin+0x52>
    1d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d30:	80 81       	ld	r24, Z
    1d32:	80 31       	cpi	r24, 0x10	; 16
    1d34:	60 f4       	brcc	.+24     	; 0x1d4e <check_pin+0x52>
	{
		*pin_no -= 8;
    1d36:	e9 81       	ldd	r30, Y+1	; 0x01
    1d38:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 50       	subi	r24, 0x08	; 8
    1d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d40:	fa 81       	ldd	r31, Y+2	; 0x02
    1d42:	80 83       	st	Z, r24
		*port= PORTB_ID;
    1d44:	eb 81       	ldd	r30, Y+3	; 0x03
    1d46:	fc 81       	ldd	r31, Y+4	; 0x04
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	80 83       	st	Z, r24
    1d4c:	2f c0       	rjmp	.+94     	; 0x1dac <check_pin+0xb0>
	}
	else if((*pin_no >=16) && (*pin_no <=23))
    1d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d50:	fa 81       	ldd	r31, Y+2	; 0x02
    1d52:	80 81       	ld	r24, Z
    1d54:	80 31       	cpi	r24, 0x10	; 16
    1d56:	88 f0       	brcs	.+34     	; 0x1d7a <check_pin+0x7e>
    1d58:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 31       	cpi	r24, 0x18	; 24
    1d60:	60 f4       	brcc	.+24     	; 0x1d7a <check_pin+0x7e>
	{
		*pin_no -= 16;
    1d62:	e9 81       	ldd	r30, Y+1	; 0x01
    1d64:	fa 81       	ldd	r31, Y+2	; 0x02
    1d66:	80 81       	ld	r24, Z
    1d68:	80 51       	subi	r24, 0x10	; 16
    1d6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6e:	80 83       	st	Z, r24
		*port= PORTC_ID;
    1d70:	eb 81       	ldd	r30, Y+3	; 0x03
    1d72:	fc 81       	ldd	r31, Y+4	; 0x04
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	80 83       	st	Z, r24
    1d78:	19 c0       	rjmp	.+50     	; 0x1dac <check_pin+0xb0>
	}
	else if((*pin_no =24) && (*pin_no <=31))
    1d7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d7e:	88 e1       	ldi	r24, 0x18	; 24
    1d80:	80 83       	st	Z, r24
    1d82:	e9 81       	ldd	r30, Y+1	; 0x01
    1d84:	fa 81       	ldd	r31, Y+2	; 0x02
    1d86:	80 81       	ld	r24, Z
    1d88:	80 32       	cpi	r24, 0x20	; 32
    1d8a:	60 f4       	brcc	.+24     	; 0x1da4 <check_pin+0xa8>
	{
		*pin_no -= 24;
    1d8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d90:	80 81       	ld	r24, Z
    1d92:	88 51       	subi	r24, 0x18	; 24
    1d94:	e9 81       	ldd	r30, Y+1	; 0x01
    1d96:	fa 81       	ldd	r31, Y+2	; 0x02
    1d98:	80 83       	st	Z, r24
		*port= PORTD_ID;
    1d9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d9e:	83 e0       	ldi	r24, 0x03	; 3
    1da0:	80 83       	st	Z, r24
    1da2:	04 c0       	rjmp	.+8      	; 0x1dac <check_pin+0xb0>
	}
	else
	{
		*port= 4;
    1da4:	eb 81       	ldd	r30, Y+3	; 0x03
    1da6:	fc 81       	ldd	r31, Y+4	; 0x04
    1da8:	84 e0       	ldi	r24, 0x04	; 4
    1daa:	80 83       	st	Z, r24
	}
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <INT_init>:
static volatile void (*g_callBackPtr_2)(void) = NULL_PTR;


/*============= FUNCTION DEFINITION =============*/
void INT_init(ST_INT_Config* Int_config)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	2a 97       	sbiw	r28, 0x0a	; 10
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01
	SREG  &= ~(1<<7);				// Disable interrupts by clearing I-bit
    1dd2:	af e5       	ldi	r26, 0x5F	; 95
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ef e5       	ldi	r30, 0x5F	; 95
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	8f 77       	andi	r24, 0x7F	; 127
    1dde:	8c 93       	st	X, r24
	switch (Int_config->source)
    1de0:	e9 81       	ldd	r30, Y+1	; 0x01
    1de2:	fa 81       	ldd	r31, Y+2	; 0x02
    1de4:	80 81       	ld	r24, Z
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	3a 87       	std	Y+10, r19	; 0x0a
    1dec:	29 87       	std	Y+9, r18	; 0x09
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	91 05       	cpc	r25, r1
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <INT_init+0x40>
    1df8:	76 c0       	rjmp	.+236    	; 0x1ee6 <INT_init+0x12c>
    1dfa:	29 85       	ldd	r18, Y+9	; 0x09
    1dfc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <INT_init+0x4c>
    1e04:	db c0       	rjmp	.+438    	; 0x1fbc <INT_init+0x202>
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <INT_init+0x56>
    1e0e:	05 c1       	rjmp	.+522    	; 0x201a <INT_init+0x260>
	{
	case EN_INT0:
	{
		CLEAR_BIT(DDRD,INT0_pin);	// Configure INT0/PD2/pin16 as input pin
    1e10:	a1 e3       	ldi	r26, 0x31	; 49
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e1 e3       	ldi	r30, 0x31	; 49
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8b 7f       	andi	r24, 0xFB	; 251
    1e1c:	8c 93       	st	X, r24
		SET_BIT(GICR,INT0);			// Enable external interrupt pin INT0
    1e1e:	ab e5       	ldi	r26, 0x5B	; 91
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	eb e5       	ldi	r30, 0x5B	; 91
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 64       	ori	r24, 0x40	; 64
    1e2a:	8c 93       	st	X, r24
		switch (Int_config->trigger)
    1e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e30:	81 81       	ldd	r24, Z+1	; 0x01
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	38 87       	std	Y+8, r19	; 0x08
    1e38:	2f 83       	std	Y+7, r18	; 0x07
    1e3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3c:	98 85       	ldd	r25, Y+8	; 0x08
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	91 05       	cpc	r25, r1
    1e42:	21 f1       	breq	.+72     	; 0x1e8c <INT_init+0xd2>
    1e44:	2f 81       	ldd	r18, Y+7	; 0x07
    1e46:	38 85       	ldd	r19, Y+8	; 0x08
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <INT_init+0x9e>
    1e4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e50:	98 85       	ldd	r25, Y+8	; 0x08
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	61 f0       	breq	.+24     	; 0x1e6e <INT_init+0xb4>
    1e56:	e1 c0       	rjmp	.+450    	; 0x201a <INT_init+0x260>
    1e58:	2f 81       	ldd	r18, Y+7	; 0x07
    1e5a:	38 85       	ldd	r19, Y+8	; 0x08
    1e5c:	22 30       	cpi	r18, 0x02	; 2
    1e5e:	31 05       	cpc	r19, r1
    1e60:	21 f1       	breq	.+72     	; 0x1eaa <INT_init+0xf0>
    1e62:	8f 81       	ldd	r24, Y+7	; 0x07
    1e64:	98 85       	ldd	r25, Y+8	; 0x08
    1e66:	83 30       	cpi	r24, 0x03	; 3
    1e68:	91 05       	cpc	r25, r1
    1e6a:	71 f1       	breq	.+92     	; 0x1ec8 <INT_init+0x10e>
    1e6c:	d6 c0       	rjmp	.+428    	; 0x201a <INT_init+0x260>
		{
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
    1e6e:	a5 e5       	ldi	r26, 0x55	; 85
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e5 e5       	ldi	r30, 0x55	; 85
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	8e 7f       	andi	r24, 0xFE	; 254
    1e7a:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    1e7c:	a5 e5       	ldi	r26, 0x55	; 85
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e5 e5       	ldi	r30, 0x55	; 85
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	8d 7f       	andi	r24, 0xFD	; 253
    1e88:	8c 93       	st	X, r24
    1e8a:	c7 c0       	rjmp	.+398    	; 0x201a <INT_init+0x260>
			break;
		case ANY_CHANGE:
			SET_BIT(MCUCR,ISC00);
    1e8c:	a5 e5       	ldi	r26, 0x55	; 85
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e5 e5       	ldi	r30, 0x55	; 85
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	81 60       	ori	r24, 0x01	; 1
    1e98:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    1e9a:	a5 e5       	ldi	r26, 0x55	; 85
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e5 e5       	ldi	r30, 0x55	; 85
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8d 7f       	andi	r24, 0xFD	; 253
    1ea6:	8c 93       	st	X, r24
    1ea8:	b8 c0       	rjmp	.+368    	; 0x201a <INT_init+0x260>
			break;
		case FALLING:
			CLEAR_BIT(MCUCR,ISC00);
    1eaa:	a5 e5       	ldi	r26, 0x55	; 85
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e5 e5       	ldi	r30, 0x55	; 85
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8e 7f       	andi	r24, 0xFE	; 254
    1eb6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1eb8:	a5 e5       	ldi	r26, 0x55	; 85
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e5 e5       	ldi	r30, 0x55	; 85
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 60       	ori	r24, 0x02	; 2
    1ec4:	8c 93       	st	X, r24
    1ec6:	a9 c0       	rjmp	.+338    	; 0x201a <INT_init+0x260>
			break;
		case RISING:
			SET_BIT(MCUCR,ISC00);
    1ec8:	a5 e5       	ldi	r26, 0x55	; 85
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e5 e5       	ldi	r30, 0x55	; 85
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	81 60       	ori	r24, 0x01	; 1
    1ed4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1ed6:	a5 e5       	ldi	r26, 0x55	; 85
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e5 e5       	ldi	r30, 0x55	; 85
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	82 60       	ori	r24, 0x02	; 2
    1ee2:	8c 93       	st	X, r24
    1ee4:	9a c0       	rjmp	.+308    	; 0x201a <INT_init+0x260>
		}
	}
	break;
	case EN_INT1:
	{
		CLEAR_BIT(DDRD,INT1_pin);	// Configure INT1/PD3/pin17 as input pin
    1ee6:	a1 e3       	ldi	r26, 0x31	; 49
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e1 e3       	ldi	r30, 0x31	; 49
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	87 7f       	andi	r24, 0xF7	; 247
    1ef2:	8c 93       	st	X, r24
		SET_BIT(GICR,INT1);			// Enable external interrupt pin INT1
    1ef4:	ab e5       	ldi	r26, 0x5B	; 91
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	eb e5       	ldi	r30, 0x5B	; 91
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	80 68       	ori	r24, 0x80	; 128
    1f00:	8c 93       	st	X, r24
		switch (Int_config->trigger)
    1f02:	e9 81       	ldd	r30, Y+1	; 0x01
    1f04:	fa 81       	ldd	r31, Y+2	; 0x02
    1f06:	81 81       	ldd	r24, Z+1	; 0x01
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	3e 83       	std	Y+6, r19	; 0x06
    1f0e:	2d 83       	std	Y+5, r18	; 0x05
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	91 05       	cpc	r25, r1
    1f18:	21 f1       	breq	.+72     	; 0x1f62 <INT_init+0x1a8>
    1f1a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f1c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f1e:	22 30       	cpi	r18, 0x02	; 2
    1f20:	31 05       	cpc	r19, r1
    1f22:	2c f4       	brge	.+10     	; 0x1f2e <INT_init+0x174>
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	61 f0       	breq	.+24     	; 0x1f44 <INT_init+0x18a>
    1f2c:	76 c0       	rjmp	.+236    	; 0x201a <INT_init+0x260>
    1f2e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f30:	3e 81       	ldd	r19, Y+6	; 0x06
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	21 f1       	breq	.+72     	; 0x1f80 <INT_init+0x1c6>
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	83 30       	cpi	r24, 0x03	; 3
    1f3e:	91 05       	cpc	r25, r1
    1f40:	71 f1       	breq	.+92     	; 0x1f9e <INT_init+0x1e4>
    1f42:	6b c0       	rjmp	.+214    	; 0x201a <INT_init+0x260>
		{
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC10);
    1f44:	a5 e5       	ldi	r26, 0x55	; 85
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e5 e5       	ldi	r30, 0x55	; 85
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8b 7f       	andi	r24, 0xFB	; 251
    1f50:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    1f52:	a5 e5       	ldi	r26, 0x55	; 85
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e5 e5       	ldi	r30, 0x55	; 85
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	87 7f       	andi	r24, 0xF7	; 247
    1f5e:	8c 93       	st	X, r24
    1f60:	5c c0       	rjmp	.+184    	; 0x201a <INT_init+0x260>
			break;
		case ANY_CHANGE:
			SET_BIT(MCUCR,ISC10);
    1f62:	a5 e5       	ldi	r26, 0x55	; 85
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e5 e5       	ldi	r30, 0x55	; 85
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	84 60       	ori	r24, 0x04	; 4
    1f6e:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    1f70:	a5 e5       	ldi	r26, 0x55	; 85
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e5 e5       	ldi	r30, 0x55	; 85
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	87 7f       	andi	r24, 0xF7	; 247
    1f7c:	8c 93       	st	X, r24
    1f7e:	4d c0       	rjmp	.+154    	; 0x201a <INT_init+0x260>
			break;
		case FALLING:
			CLEAR_BIT(MCUCR,ISC10);
    1f80:	a5 e5       	ldi	r26, 0x55	; 85
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e5 e5       	ldi	r30, 0x55	; 85
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	8b 7f       	andi	r24, 0xFB	; 251
    1f8c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    1f8e:	a5 e5       	ldi	r26, 0x55	; 85
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e5 e5       	ldi	r30, 0x55	; 85
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	88 60       	ori	r24, 0x08	; 8
    1f9a:	8c 93       	st	X, r24
    1f9c:	3e c0       	rjmp	.+124    	; 0x201a <INT_init+0x260>
			break;
		case RISING:
			SET_BIT(MCUCR,ISC10);
    1f9e:	a5 e5       	ldi	r26, 0x55	; 85
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e5 e5       	ldi	r30, 0x55	; 85
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	84 60       	ori	r24, 0x04	; 4
    1faa:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    1fac:	a5 e5       	ldi	r26, 0x55	; 85
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e5 e5       	ldi	r30, 0x55	; 85
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	88 60       	ori	r24, 0x08	; 8
    1fb8:	8c 93       	st	X, r24
    1fba:	2f c0       	rjmp	.+94     	; 0x201a <INT_init+0x260>
		}
	}
	break;
	case EN_INT2:
	{
		CLEAR_BIT(DDRB,INT2_pin);	// Configure INT2/PB2/pin3 as input pin
    1fbc:	a7 e3       	ldi	r26, 0x37	; 55
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e7 e3       	ldi	r30, 0x37	; 55
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	87 7f       	andi	r24, 0xF7	; 247
    1fc8:	8c 93       	st	X, r24
		SET_BIT(GICR,INT2);			// Enable external interrupt pin INT2
    1fca:	ab e5       	ldi	r26, 0x5B	; 91
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	eb e5       	ldi	r30, 0x5B	; 91
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 62       	ori	r24, 0x20	; 32
    1fd6:	8c 93       	st	X, r24
		switch (Int_config->trigger)
    1fd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fda:	fa 81       	ldd	r31, Y+2	; 0x02
    1fdc:	81 81       	ldd	r24, Z+1	; 0x01
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	3c 83       	std	Y+4, r19	; 0x04
    1fe4:	2b 83       	std	Y+3, r18	; 0x03
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	82 30       	cpi	r24, 0x02	; 2
    1fec:	91 05       	cpc	r25, r1
    1fee:	31 f0       	breq	.+12     	; 0x1ffc <INT_init+0x242>
    1ff0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff4:	23 30       	cpi	r18, 0x03	; 3
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	49 f0       	breq	.+18     	; 0x200c <INT_init+0x252>
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <INT_init+0x260>
		{
		case FALLING:
			CLEAR_BIT(MCUCSR,ISC2);
    1ffc:	a4 e5       	ldi	r26, 0x54	; 84
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e5       	ldi	r30, 0x54	; 84
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	8f 7b       	andi	r24, 0xBF	; 191
    2008:	8c 93       	st	X, r24
    200a:	07 c0       	rjmp	.+14     	; 0x201a <INT_init+0x260>
			break;
		case RISING:
			SET_BIT(MCUCSR,ISC2);
    200c:	a4 e5       	ldi	r26, 0x54	; 84
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e4 e5       	ldi	r30, 0x54	; 84
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	80 64       	ori	r24, 0x40	; 64
    2018:	8c 93       	st	X, r24
			break;
		}
	}
	break;
	}
	SREG  |= (1<<7);                // Enable interrupts by setting I-bit
    201a:	af e5       	ldi	r26, 0x5F	; 95
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	ef e5       	ldi	r30, 0x5F	; 95
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	80 68       	ori	r24, 0x80	; 128
    2026:	8c 93       	st	X, r24
}
    2028:	2a 96       	adiw	r28, 0x0a	; 10
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <INT0_setCallBack>:


void INT0_setCallBack(void(*a_ptr)(void))
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <INT0_setCallBack+0x6>
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_0=a_ptr;
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	9a 81       	ldd	r25, Y+2	; 0x02
    204c:	90 93 76 01 	sts	0x0176, r25
    2050:	80 93 75 01 	sts	0x0175, r24
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <INT1_setCallBack>:

void INT1_setCallBack(void(*a_ptr)(void))
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <INT1_setCallBack+0x6>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_1=a_ptr;
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	9a 81       	ldd	r25, Y+2	; 0x02
    2070:	90 93 78 01 	sts	0x0178, r25
    2074:	80 93 77 01 	sts	0x0177, r24
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <INT2_setCallBack>:

void INT2_setCallBack(void(*a_ptr)(void))
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <INT2_setCallBack+0x6>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_2=a_ptr;
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	90 93 7a 01 	sts	0x017A, r25
    2098:	80 93 79 01 	sts	0x0179, r24
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <INT_Deinit>:

void INT_Deinit(ST_INT_Config* Int_config)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <INT_Deinit+0x6>
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <INT_Deinit+0x8>
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	9a 83       	std	Y+2, r25	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(SREG,PIN7);				// Disable interrupts by clearing I-bit
    20b6:	af e5       	ldi	r26, 0x5F	; 95
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	ef e5       	ldi	r30, 0x5F	; 95
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	8f 77       	andi	r24, 0x7F	; 127
    20c2:	8c 93       	st	X, r24
	switch (Int_config->source)
    20c4:	e9 81       	ldd	r30, Y+1	; 0x01
    20c6:	fa 81       	ldd	r31, Y+2	; 0x02
    20c8:	80 81       	ld	r24, Z
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	3c 83       	std	Y+4, r19	; 0x04
    20d0:	2b 83       	std	Y+3, r18	; 0x03
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	91 05       	cpc	r25, r1
    20da:	89 f0       	breq	.+34     	; 0x20fe <INT_Deinit+0x58>
    20dc:	2b 81       	ldd	r18, Y+3	; 0x03
    20de:	3c 81       	ldd	r19, Y+4	; 0x04
    20e0:	22 30       	cpi	r18, 0x02	; 2
    20e2:	31 05       	cpc	r19, r1
    20e4:	a1 f0       	breq	.+40     	; 0x210e <INT_Deinit+0x68>
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	b9 f4       	brne	.+46     	; 0x211c <INT_Deinit+0x76>
	{
	case EN_INT0:
		CLEAR_BIT(GICR,INT0);			// Disable external interrupt pin INT0
    20ee:	ab e5       	ldi	r26, 0x5B	; 91
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	eb e5       	ldi	r30, 0x5B	; 91
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	8f 7b       	andi	r24, 0xBF	; 191
    20fa:	8c 93       	st	X, r24
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <INT_Deinit+0x76>
		break;
	case EN_INT1:
		CLEAR_BIT(GICR,INT1);			// Disable external interrupt pin INT1
    20fe:	ab e5       	ldi	r26, 0x5B	; 91
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	eb e5       	ldi	r30, 0x5B	; 91
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8f 77       	andi	r24, 0x7F	; 127
    210a:	8c 93       	st	X, r24
    210c:	07 c0       	rjmp	.+14     	; 0x211c <INT_Deinit+0x76>
		break;
	case EN_INT2:
		CLEAR_BIT(GICR,INT2);			// Disable external interrupt pin INT2
    210e:	ab e5       	ldi	r26, 0x5B	; 91
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	eb e5       	ldi	r30, 0x5B	; 91
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	8f 7d       	andi	r24, 0xDF	; 223
    211a:	8c 93       	st	X, r24
		break;
	}
	SET_BIT(SREG,PIN7);       			// Enable interrupts by setting I-bit
    211c:	af e5       	ldi	r26, 0x5F	; 95
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	ef e5       	ldi	r30, 0x5F	; 95
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	80 68       	ori	r24, 0x80	; 128
    2128:	8c 93       	st	X, r24
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <__vector_1>:

ISR(INT0_vect)
{
    2138:	1f 92       	push	r1
    213a:	0f 92       	push	r0
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	0f 92       	push	r0
    2140:	11 24       	eor	r1, r1
    2142:	2f 93       	push	r18
    2144:	3f 93       	push	r19
    2146:	4f 93       	push	r20
    2148:	5f 93       	push	r21
    214a:	6f 93       	push	r22
    214c:	7f 93       	push	r23
    214e:	8f 93       	push	r24
    2150:	9f 93       	push	r25
    2152:	af 93       	push	r26
    2154:	bf 93       	push	r27
    2156:	ef 93       	push	r30
    2158:	ff 93       	push	r31
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_0 != NULL_PTR)
    2162:	80 91 75 01 	lds	r24, 0x0175
    2166:	90 91 76 01 	lds	r25, 0x0176
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	29 f0       	breq	.+10     	; 0x2178 <__vector_1+0x40>
		{
			g_callBackPtr_0();
    216e:	e0 91 75 01 	lds	r30, 0x0175
    2172:	f0 91 76 01 	lds	r31, 0x0176
    2176:	09 95       	icall
		}
}
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	ff 91       	pop	r31
    217e:	ef 91       	pop	r30
    2180:	bf 91       	pop	r27
    2182:	af 91       	pop	r26
    2184:	9f 91       	pop	r25
    2186:	8f 91       	pop	r24
    2188:	7f 91       	pop	r23
    218a:	6f 91       	pop	r22
    218c:	5f 91       	pop	r21
    218e:	4f 91       	pop	r20
    2190:	3f 91       	pop	r19
    2192:	2f 91       	pop	r18
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	0f 90       	pop	r0
    219a:	1f 90       	pop	r1
    219c:	18 95       	reti

0000219e <__vector_2>:


ISR(INT1_vect)
{
    219e:	1f 92       	push	r1
    21a0:	0f 92       	push	r0
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	0f 92       	push	r0
    21a6:	11 24       	eor	r1, r1
    21a8:	2f 93       	push	r18
    21aa:	3f 93       	push	r19
    21ac:	4f 93       	push	r20
    21ae:	5f 93       	push	r21
    21b0:	6f 93       	push	r22
    21b2:	7f 93       	push	r23
    21b4:	8f 93       	push	r24
    21b6:	9f 93       	push	r25
    21b8:	af 93       	push	r26
    21ba:	bf 93       	push	r27
    21bc:	ef 93       	push	r30
    21be:	ff 93       	push	r31
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_1 != NULL_PTR)
    21c8:	80 91 77 01 	lds	r24, 0x0177
    21cc:	90 91 78 01 	lds	r25, 0x0178
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	29 f0       	breq	.+10     	; 0x21de <__vector_2+0x40>
		{
			g_callBackPtr_1();
    21d4:	e0 91 77 01 	lds	r30, 0x0177
    21d8:	f0 91 78 01 	lds	r31, 0x0178
    21dc:	09 95       	icall
		}
}
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	ff 91       	pop	r31
    21e4:	ef 91       	pop	r30
    21e6:	bf 91       	pop	r27
    21e8:	af 91       	pop	r26
    21ea:	9f 91       	pop	r25
    21ec:	8f 91       	pop	r24
    21ee:	7f 91       	pop	r23
    21f0:	6f 91       	pop	r22
    21f2:	5f 91       	pop	r21
    21f4:	4f 91       	pop	r20
    21f6:	3f 91       	pop	r19
    21f8:	2f 91       	pop	r18
    21fa:	0f 90       	pop	r0
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	0f 90       	pop	r0
    2200:	1f 90       	pop	r1
    2202:	18 95       	reti

00002204 <__vector_18>:

ISR(INT2_vect)
{
    2204:	1f 92       	push	r1
    2206:	0f 92       	push	r0
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	0f 92       	push	r0
    220c:	11 24       	eor	r1, r1
    220e:	2f 93       	push	r18
    2210:	3f 93       	push	r19
    2212:	4f 93       	push	r20
    2214:	5f 93       	push	r21
    2216:	6f 93       	push	r22
    2218:	7f 93       	push	r23
    221a:	8f 93       	push	r24
    221c:	9f 93       	push	r25
    221e:	af 93       	push	r26
    2220:	bf 93       	push	r27
    2222:	ef 93       	push	r30
    2224:	ff 93       	push	r31
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_2 != NULL_PTR)
    222e:	80 91 79 01 	lds	r24, 0x0179
    2232:	90 91 7a 01 	lds	r25, 0x017A
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	29 f0       	breq	.+10     	; 0x2244 <__vector_18+0x40>
		{
			g_callBackPtr_2();
    223a:	e0 91 79 01 	lds	r30, 0x0179
    223e:	f0 91 7a 01 	lds	r31, 0x017A
    2242:	09 95       	icall
		}
}
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	ff 91       	pop	r31
    224a:	ef 91       	pop	r30
    224c:	bf 91       	pop	r27
    224e:	af 91       	pop	r26
    2250:	9f 91       	pop	r25
    2252:	8f 91       	pop	r24
    2254:	7f 91       	pop	r23
    2256:	6f 91       	pop	r22
    2258:	5f 91       	pop	r21
    225a:	4f 91       	pop	r20
    225c:	3f 91       	pop	r19
    225e:	2f 91       	pop	r18
    2260:	0f 90       	pop	r0
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	0f 90       	pop	r0
    2266:	1f 90       	pop	r1
    2268:	18 95       	reti

0000226a <LED_init>:
#include "LED.h"

/*============= FUNCTION DEFINITION =============*/

EN_STATE LED_init(uint8 pin)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <LED_init+0x6>
    2270:	0f 92       	push	r0
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port;
	if(pin >= 0 && pin < 32)
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	80 32       	cpi	r24, 0x20	; 32
    227c:	b8 f4       	brcc	.+46     	; 0x22ac <LED_init+0x42>
	{
		check_pin(&pin, &port);
    227e:	ce 01       	movw	r24, r28
    2280:	02 96       	adiw	r24, 0x02	; 2
    2282:	9e 01       	movw	r18, r28
    2284:	2f 5f       	subi	r18, 0xFF	; 255
    2286:	3f 4f       	sbci	r19, 0xFF	; 255
    2288:	b9 01       	movw	r22, r18
    228a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_pinDirection(port, pin, PIN_OUTPUT);
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	69 2f       	mov	r22, r25
    2294:	41 e0       	ldi	r20, 0x01	; 1
    2296:	0e 94 57 0b 	call	0x16ae	; 0x16ae <DIO_pinDirection>
		DIO_writePin(port, pin, Low);
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	69 2f       	mov	r22, r25
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
		return SUCCESS;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	8b 83       	std	Y+3, r24	; 0x03
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <LED_init+0x44>
	}
	return FAILED;
    22ac:	1b 82       	std	Y+3, r1	; 0x03
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <LED_digitalwrite>:

EN_STATE LED_digitalwrite(uint8 pin,EN_PIN_VALUE value)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <LED_digitalwrite+0x6>
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <LED_digitalwrite+0x8>
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	8a 83       	std	Y+2, r24	; 0x02
    22ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 port;
	if(pin >= 0 && pin < 32)
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	80 32       	cpi	r24, 0x20	; 32
    22d0:	d8 f4       	brcc	.+54     	; 0x2308 <LED_digitalwrite+0x4c>
	{
		check_pin(&pin, &port);
    22d2:	ce 01       	movw	r24, r28
    22d4:	02 96       	adiw	r24, 0x02	; 2
    22d6:	9e 01       	movw	r18, r28
    22d8:	2f 5f       	subi	r18, 0xFF	; 255
    22da:	3f 4f       	sbci	r19, 0xFF	; 255
    22dc:	b9 01       	movw	r22, r18
    22de:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		if(value == Low)
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	88 23       	and	r24, r24
    22e6:	39 f4       	brne	.+14     	; 0x22f6 <LED_digitalwrite+0x3a>
			DIO_writePin(port, pin, Low);
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	69 2f       	mov	r22, r25
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
    22f4:	06 c0       	rjmp	.+12     	; 0x2302 <LED_digitalwrite+0x46>
		else
			DIO_writePin(port, pin, High);
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	69 2f       	mov	r22, r25
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
		return SUCCESS;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	8c 83       	std	Y+4, r24	; 0x04
    2306:	01 c0       	rjmp	.+2      	; 0x230a <LED_digitalwrite+0x4e>
	}
	return FAILED;
    2308:	1c 82       	std	Y+4, r1	; 0x04
    230a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <DCmotor_init>:

#include "DCmotor.h"


EN_STATE DCmotor_init(DCmotor_configtype *motor)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	00 d0       	rcall	.+0      	; 0x2320 <DCmotor_init+0x6>
    2320:	00 d0       	rcall	.+0      	; 0x2322 <DCmotor_init+0x8>
    2322:	0f 92       	push	r0
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	9c 83       	std	Y+4, r25	; 0x04
    232a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 port,pin;
	if(motor->input_pin_1 >= 0 && motor->input_pin_1 < 32 && motor->input_pin_2 >= 0 && motor->input_pin_2 < 32 )
    232c:	eb 81       	ldd	r30, Y+3	; 0x03
    232e:	fc 81       	ldd	r31, Y+4	; 0x04
    2330:	80 81       	ld	r24, Z
    2332:	80 32       	cpi	r24, 0x20	; 32
    2334:	d0 f5       	brcc	.+116    	; 0x23aa <DCmotor_init+0x90>
    2336:	eb 81       	ldd	r30, Y+3	; 0x03
    2338:	fc 81       	ldd	r31, Y+4	; 0x04
    233a:	81 81       	ldd	r24, Z+1	; 0x01
    233c:	80 32       	cpi	r24, 0x20	; 32
    233e:	a8 f5       	brcc	.+106    	; 0x23aa <DCmotor_init+0x90>
	{
		pin=motor->input_pin_1;
    2340:	eb 81       	ldd	r30, Y+3	; 0x03
    2342:	fc 81       	ldd	r31, Y+4	; 0x04
    2344:	80 81       	ld	r24, Z
    2346:	8a 83       	std	Y+2, r24	; 0x02
		check_pin(&pin, &port);
    2348:	ce 01       	movw	r24, r28
    234a:	02 96       	adiw	r24, 0x02	; 2
    234c:	9e 01       	movw	r18, r28
    234e:	2f 5f       	subi	r18, 0xFF	; 255
    2350:	3f 4f       	sbci	r19, 0xFF	; 255
    2352:	b9 01       	movw	r22, r18
    2354:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_pinDirection(port, pin, PIN_OUTPUT);
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	69 2f       	mov	r22, r25
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 57 0b 	call	0x16ae	; 0x16ae <DIO_pinDirection>
		DIO_writePin(port, pin, Low);
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	69 2f       	mov	r22, r25
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
		pin=motor->input_pin_2;
    2370:	eb 81       	ldd	r30, Y+3	; 0x03
    2372:	fc 81       	ldd	r31, Y+4	; 0x04
    2374:	81 81       	ldd	r24, Z+1	; 0x01
    2376:	8a 83       	std	Y+2, r24	; 0x02
		check_pin(&pin, &port);
    2378:	ce 01       	movw	r24, r28
    237a:	02 96       	adiw	r24, 0x02	; 2
    237c:	9e 01       	movw	r18, r28
    237e:	2f 5f       	subi	r18, 0xFF	; 255
    2380:	3f 4f       	sbci	r19, 0xFF	; 255
    2382:	b9 01       	movw	r22, r18
    2384:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_pinDirection(port, pin, PIN_OUTPUT);
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	9a 81       	ldd	r25, Y+2	; 0x02
    238c:	69 2f       	mov	r22, r25
    238e:	41 e0       	ldi	r20, 0x01	; 1
    2390:	0e 94 57 0b 	call	0x16ae	; 0x16ae <DIO_pinDirection>
		DIO_writePin(port, pin, Low);
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	9a 81       	ldd	r25, Y+2	; 0x02
    2398:	69 2f       	mov	r22, r25
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
		PWM_Timer2_Init();
    23a0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <PWM_Timer2_Init>
		return SUCCESS;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <DCmotor_init+0x92>
	}
	return FAILED;
    23aa:	1d 82       	std	Y+5, r1	; 0x05
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <DCmotor_start>:

void DCmotor_start(DCmotor_configtype *motor,DCMotor_state State,uint8 speed)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <DCmotor_start+0x6>
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <DCmotor_start+0x8>
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <DCmotor_start+0xa>
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	9c 83       	std	Y+4, r25	; 0x04
    23ce:	8b 83       	std	Y+3, r24	; 0x03
    23d0:	6d 83       	std	Y+5, r22	; 0x05
    23d2:	4e 83       	std	Y+6, r20	; 0x06
	uint8 port,pin;
	PWM_Timer2_Start(speed);
    23d4:	8e 81       	ldd	r24, Y+6	; 0x06
    23d6:	0e 94 20 0b 	call	0x1640	; 0x1640 <PWM_Timer2_Start>
	if(State==CW)				//rotate clockwise
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	88 23       	and	r24, r24
    23de:	29 f5       	brne	.+74     	; 0x242a <DCmotor_start+0x6c>
	{
		pin=motor->input_pin_1;
    23e0:	eb 81       	ldd	r30, Y+3	; 0x03
    23e2:	fc 81       	ldd	r31, Y+4	; 0x04
    23e4:	80 81       	ld	r24, Z
    23e6:	8a 83       	std	Y+2, r24	; 0x02
		check_pin(&pin, &port);
    23e8:	ce 01       	movw	r24, r28
    23ea:	02 96       	adiw	r24, 0x02	; 2
    23ec:	9e 01       	movw	r18, r28
    23ee:	2f 5f       	subi	r18, 0xFF	; 255
    23f0:	3f 4f       	sbci	r19, 0xFF	; 255
    23f2:	b9 01       	movw	r22, r18
    23f4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_writePin(port,pin,Low);  //input A
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9a 81       	ldd	r25, Y+2	; 0x02
    23fc:	69 2f       	mov	r22, r25
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
		pin=motor->input_pin_2;
    2404:	eb 81       	ldd	r30, Y+3	; 0x03
    2406:	fc 81       	ldd	r31, Y+4	; 0x04
    2408:	81 81       	ldd	r24, Z+1	; 0x01
    240a:	8a 83       	std	Y+2, r24	; 0x02
		check_pin(&pin, &port);
    240c:	ce 01       	movw	r24, r28
    240e:	02 96       	adiw	r24, 0x02	; 2
    2410:	9e 01       	movw	r18, r28
    2412:	2f 5f       	subi	r18, 0xFF	; 255
    2414:	3f 4f       	sbci	r19, 0xFF	; 255
    2416:	b9 01       	movw	r22, r18
    2418:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_writePin(port,pin,High);  //input B
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	9a 81       	ldd	r25, Y+2	; 0x02
    2420:	69 2f       	mov	r22, r25
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
    2428:	4c c0       	rjmp	.+152    	; 0x24c2 <DCmotor_start+0x104>
	}
	else if(State==ACW)			//rotate anti clockwise
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	29 f5       	brne	.+74     	; 0x247a <DCmotor_start+0xbc>
	{
		pin=motor->input_pin_1;
    2430:	eb 81       	ldd	r30, Y+3	; 0x03
    2432:	fc 81       	ldd	r31, Y+4	; 0x04
    2434:	80 81       	ld	r24, Z
    2436:	8a 83       	std	Y+2, r24	; 0x02
		check_pin(&pin, &port);
    2438:	ce 01       	movw	r24, r28
    243a:	02 96       	adiw	r24, 0x02	; 2
    243c:	9e 01       	movw	r18, r28
    243e:	2f 5f       	subi	r18, 0xFF	; 255
    2440:	3f 4f       	sbci	r19, 0xFF	; 255
    2442:	b9 01       	movw	r22, r18
    2444:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_writePin(port,pin,High);  //input A
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	69 2f       	mov	r22, r25
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
		pin=motor->input_pin_2;
    2454:	eb 81       	ldd	r30, Y+3	; 0x03
    2456:	fc 81       	ldd	r31, Y+4	; 0x04
    2458:	81 81       	ldd	r24, Z+1	; 0x01
    245a:	8a 83       	std	Y+2, r24	; 0x02
		check_pin(&pin, &port);
    245c:	ce 01       	movw	r24, r28
    245e:	02 96       	adiw	r24, 0x02	; 2
    2460:	9e 01       	movw	r18, r28
    2462:	2f 5f       	subi	r18, 0xFF	; 255
    2464:	3f 4f       	sbci	r19, 0xFF	; 255
    2466:	b9 01       	movw	r22, r18
    2468:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_writePin(port,pin,Low);  //input B
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	69 2f       	mov	r22, r25
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
    2478:	24 c0       	rjmp	.+72     	; 0x24c2 <DCmotor_start+0x104>
	}
	else						//stop the motor
	{
		pin=motor->input_pin_1;
    247a:	eb 81       	ldd	r30, Y+3	; 0x03
    247c:	fc 81       	ldd	r31, Y+4	; 0x04
    247e:	80 81       	ld	r24, Z
    2480:	8a 83       	std	Y+2, r24	; 0x02
		check_pin(&pin, &port);
    2482:	ce 01       	movw	r24, r28
    2484:	02 96       	adiw	r24, 0x02	; 2
    2486:	9e 01       	movw	r18, r28
    2488:	2f 5f       	subi	r18, 0xFF	; 255
    248a:	3f 4f       	sbci	r19, 0xFF	; 255
    248c:	b9 01       	movw	r22, r18
    248e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_writePin(port,pin,Low);  //input A
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	69 2f       	mov	r22, r25
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
		pin=motor->input_pin_2;
    249e:	eb 81       	ldd	r30, Y+3	; 0x03
    24a0:	fc 81       	ldd	r31, Y+4	; 0x04
    24a2:	81 81       	ldd	r24, Z+1	; 0x01
    24a4:	8a 83       	std	Y+2, r24	; 0x02
		check_pin(&pin, &port);
    24a6:	ce 01       	movw	r24, r28
    24a8:	02 96       	adiw	r24, 0x02	; 2
    24aa:	9e 01       	movw	r18, r28
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	b9 01       	movw	r22, r18
    24b2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_writePin(port,pin,Low);  //input B
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	69 2f       	mov	r22, r25
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
	}

}
    24c2:	26 96       	adiw	r28, 0x06	; 6
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <DCmotor_stop>:

void DCmotor_stop(DCmotor_configtype *motor)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	00 d0       	rcall	.+0      	; 0x24da <DCmotor_stop+0x6>
    24da:	00 d0       	rcall	.+0      	; 0x24dc <DCmotor_stop+0x8>
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
	PWM_Timer2_Stop();
    24e4:	0e 94 4d 0b 	call	0x169a	; 0x169a <PWM_Timer2_Stop>
	uint8 port,pin;
	pin=motor->input_pin_1;
    24e8:	eb 81       	ldd	r30, Y+3	; 0x03
    24ea:	fc 81       	ldd	r31, Y+4	; 0x04
    24ec:	80 81       	ld	r24, Z
    24ee:	8a 83       	std	Y+2, r24	; 0x02
	check_pin(&pin, &port);
    24f0:	ce 01       	movw	r24, r28
    24f2:	02 96       	adiw	r24, 0x02	; 2
    24f4:	9e 01       	movw	r18, r28
    24f6:	2f 5f       	subi	r18, 0xFF	; 255
    24f8:	3f 4f       	sbci	r19, 0xFF	; 255
    24fa:	b9 01       	movw	r22, r18
    24fc:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
	DIO_writePin(port,pin,Low);  //input A
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	69 2f       	mov	r22, r25
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
	pin=motor->input_pin_2;
    250c:	eb 81       	ldd	r30, Y+3	; 0x03
    250e:	fc 81       	ldd	r31, Y+4	; 0x04
    2510:	81 81       	ldd	r24, Z+1	; 0x01
    2512:	8a 83       	std	Y+2, r24	; 0x02
	check_pin(&pin, &port);
    2514:	ce 01       	movw	r24, r28
    2516:	02 96       	adiw	r24, 0x02	; 2
    2518:	9e 01       	movw	r18, r28
    251a:	2f 5f       	subi	r18, 0xFF	; 255
    251c:	3f 4f       	sbci	r19, 0xFF	; 255
    251e:	b9 01       	movw	r22, r18
    2520:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
	DIO_writePin(port,pin,Low);  //input B
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	69 2f       	mov	r22, r25
    252a:	40 e0       	ldi	r20, 0x00	; 0
    252c:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>

}
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <Button_init>:
#include "BUTTON.h"

/*============= FUNCTION DEFINITION =============*/

EN_STATE Button_init(uint8 pin,EN_internal_pullup state)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <Button_init+0x6>
    2544:	00 d0       	rcall	.+0      	; 0x2546 <Button_init+0x8>
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	8a 83       	std	Y+2, r24	; 0x02
    254c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 port;
	if(pin >= 0 && pin < 32)
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	80 32       	cpi	r24, 0x20	; 32
    2552:	08 f5       	brcc	.+66     	; 0x2596 <Button_init+0x58>
	{
		check_pin(&pin, &port);
    2554:	ce 01       	movw	r24, r28
    2556:	02 96       	adiw	r24, 0x02	; 2
    2558:	9e 01       	movw	r18, r28
    255a:	2f 5f       	subi	r18, 0xFF	; 255
    255c:	3f 4f       	sbci	r19, 0xFF	; 255
    255e:	b9 01       	movw	r22, r18
    2560:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_pinDirection(port, pin, PIN_INPUT);
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	69 2f       	mov	r22, r25
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <DIO_pinDirection>
		if(state==enable)
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	39 f4       	brne	.+14     	; 0x2584 <Button_init+0x46>
			DIO_writePin(port, pin, High);
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	69 2f       	mov	r22, r25
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
    2582:	06 c0       	rjmp	.+12     	; 0x2590 <Button_init+0x52>
		else
			DIO_writePin(port, pin, Low);
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	69 2f       	mov	r22, r25
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_writePin>
		return SUCCESS;
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	8c 83       	std	Y+4, r24	; 0x04
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <Button_init+0x5a>
	}
	return FAILED;
    2596:	1c 82       	std	Y+4, r1	; 0x04
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <Button_Read>:


EN_STATE Button_Read(uint8 pin,uint8* value)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <Button_Read+0x6>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <Button_Read+0x8>
    25b0:	0f 92       	push	r0
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	8b 83       	std	Y+3, r24	; 0x03
    25b8:	7d 83       	std	Y+5, r23	; 0x05
    25ba:	6c 83       	std	Y+4, r22	; 0x04
	uint8 port,read;
	if(pin >= 0 || pin < 32)
	{
		check_pin(&pin, &port);
    25bc:	ce 01       	movw	r24, r28
    25be:	03 96       	adiw	r24, 0x03	; 3
    25c0:	9e 01       	movw	r18, r28
    25c2:	2f 5f       	subi	r18, 0xFF	; 255
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
    25c6:	b9 01       	movw	r22, r18
    25c8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <check_pin>
		DIO_readPin(port, pin, &read);
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9b 81       	ldd	r25, Y+3	; 0x03
    25d0:	9e 01       	movw	r18, r28
    25d2:	2e 5f       	subi	r18, 0xFE	; 254
    25d4:	3f 4f       	sbci	r19, 0xFF	; 255
    25d6:	69 2f       	mov	r22, r25
    25d8:	a9 01       	movw	r20, r18
    25da:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <DIO_readPin>
		*value=read;
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	ec 81       	ldd	r30, Y+4	; 0x04
    25e2:	fd 81       	ldd	r31, Y+5	; 0x05
    25e4:	80 83       	st	Z, r24
		return SUCCESS;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return FAILED;
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <main>:

void _4_motors_control(DCmotor_configtype m1,DCmotor_configtype m2,DCmotor_configtype m3,DCmotor_configtype m4,EN_state state,uint8 speed);
void stop_car (void);

int main(void)
{
    25f8:	ef 92       	push	r14
    25fa:	0f 93       	push	r16
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <main+0xa>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <main+0xc>
    2604:	00 d0       	rcall	.+0      	; 0x2606 <main+0xe>
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
	uint8 Button_on=0;
    260a:	19 82       	std	Y+1, r1	; 0x01
	uint8 Button_value;
	ST_INT_Config button_off={EN_INT0,RISING};
    260c:	1b 82       	std	Y+3, r1	; 0x03
    260e:	83 e0       	ldi	r24, 0x03	; 3
    2610:	8c 83       	std	Y+4, r24	; 0x04
	LED_init(LED1);
    2612:	80 91 70 01 	lds	r24, 0x0170
    2616:	0e 94 35 11 	call	0x226a	; 0x226a <LED_init>
	LED_init(LED2);
    261a:	80 91 71 01 	lds	r24, 0x0171
    261e:	0e 94 35 11 	call	0x226a	; 0x226a <LED_init>
	LED_init(LED3);
    2622:	80 91 72 01 	lds	r24, 0x0172
    2626:	0e 94 35 11 	call	0x226a	; 0x226a <LED_init>
	LED_init(LED4);
    262a:	80 91 73 01 	lds	r24, 0x0173
    262e:	0e 94 35 11 	call	0x226a	; 0x226a <LED_init>
	Button_init(Button_on, disable);
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	0e 94 9f 12 	call	0x253e	; 0x253e <Button_init>
	INT_init(&button_off);
    263a:	ce 01       	movw	r24, r28
    263c:	03 96       	adiw	r24, 0x03	; 3
    263e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <INT_init>
	INT0_setCallBack(stop_car);
    2642:	85 e2       	ldi	r24, 0x25	; 37
    2644:	96 e1       	ldi	r25, 0x16	; 22
    2646:	0e 94 1d 10 	call	0x203a	; 0x203a <INT0_setCallBack>

	while(1)
	{
		Button_Read(Button_on, &Button_value);
    264a:	9e 01       	movw	r18, r28
    264c:	2e 5f       	subi	r18, 0xFE	; 254
    264e:	3f 4f       	sbci	r19, 0xFF	; 255
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	b9 01       	movw	r22, r18
    2654:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <Button_Read>
		if(Button_value==1 && car_state == 0)
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	81 30       	cpi	r24, 0x01	; 1
    265c:	e9 f4       	brne	.+58     	; 0x2698 <main+0xa0>
    265e:	80 91 7b 01 	lds	r24, 0x017B
    2662:	88 23       	and	r24, r24
    2664:	c9 f4       	brne	.+50     	; 0x2698 <main+0xa0>
		{
			DCmotor_init(&motor_1);
    2666:	88 e6       	ldi	r24, 0x68	; 104
    2668:	91 e0       	ldi	r25, 0x01	; 1
    266a:	0e 94 8d 11 	call	0x231a	; 0x231a <DCmotor_init>
			DCmotor_init(&motor_2);
    266e:	8a e6       	ldi	r24, 0x6A	; 106
    2670:	91 e0       	ldi	r25, 0x01	; 1
    2672:	0e 94 8d 11 	call	0x231a	; 0x231a <DCmotor_init>
			DCmotor_init(&motor_3);
    2676:	8c e6       	ldi	r24, 0x6C	; 108
    2678:	91 e0       	ldi	r25, 0x01	; 1
    267a:	0e 94 8d 11 	call	0x231a	; 0x231a <DCmotor_init>
			DCmotor_init(&motor_4);
    267e:	8e e6       	ldi	r24, 0x6E	; 110
    2680:	91 e0       	ldi	r25, 0x01	; 1
    2682:	0e 94 8d 11 	call	0x231a	; 0x231a <DCmotor_init>
			car_state=1;
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	80 93 7b 01 	sts	0x017B, r24
			Timer0_Delay(1000);
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	8a e7       	ldi	r24, 0x7A	; 122
    2692:	94 e4       	ldi	r25, 0x44	; 68
    2694:	0e 94 cc 06 	call	0xd98	; 0xd98 <Timer0_Delay>
		}
		switch(car_state)
    2698:	80 91 7b 01 	lds	r24, 0x017B
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	3e 83       	std	Y+6, r19	; 0x06
    26a2:	2d 83       	std	Y+5, r18	; 0x05
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	84 30       	cpi	r24, 0x04	; 4
    26aa:	91 05       	cpc	r25, r1
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <main+0xb8>
    26ae:	d2 c0       	rjmp	.+420    	; 0x2854 <main+0x25c>
    26b0:	2d 81       	ldd	r18, Y+5	; 0x05
    26b2:	3e 81       	ldd	r19, Y+6	; 0x06
    26b4:	25 30       	cpi	r18, 0x05	; 5
    26b6:	31 05       	cpc	r19, r1
    26b8:	94 f4       	brge	.+36     	; 0x26de <main+0xe6>
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	82 30       	cpi	r24, 0x02	; 2
    26c0:	91 05       	cpc	r25, r1
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <main+0xce>
    26c4:	5c c0       	rjmp	.+184    	; 0x277e <main+0x186>
    26c6:	2d 81       	ldd	r18, Y+5	; 0x05
    26c8:	3e 81       	ldd	r19, Y+6	; 0x06
    26ca:	23 30       	cpi	r18, 0x03	; 3
    26cc:	31 05       	cpc	r19, r1
    26ce:	0c f0       	brlt	.+2      	; 0x26d2 <main+0xda>
    26d0:	8a c0       	rjmp	.+276    	; 0x27e6 <main+0x1ee>
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	81 30       	cpi	r24, 0x01	; 1
    26d8:	91 05       	cpc	r25, r1
    26da:	d1 f0       	breq	.+52     	; 0x2710 <main+0x118>
    26dc:	c5 c1       	rjmp	.+906    	; 0x2a68 <main+0x470>
    26de:	2d 81       	ldd	r18, Y+5	; 0x05
    26e0:	3e 81       	ldd	r19, Y+6	; 0x06
    26e2:	26 30       	cpi	r18, 0x06	; 6
    26e4:	31 05       	cpc	r19, r1
    26e6:	09 f4       	brne	.+2      	; 0x26ea <main+0xf2>
    26e8:	20 c1       	rjmp	.+576    	; 0x292a <main+0x332>
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	86 30       	cpi	r24, 0x06	; 6
    26f0:	91 05       	cpc	r25, r1
    26f2:	0c f4       	brge	.+2      	; 0x26f6 <main+0xfe>
    26f4:	e3 c0       	rjmp	.+454    	; 0x28bc <main+0x2c4>
    26f6:	2d 81       	ldd	r18, Y+5	; 0x05
    26f8:	3e 81       	ldd	r19, Y+6	; 0x06
    26fa:	27 30       	cpi	r18, 0x07	; 7
    26fc:	31 05       	cpc	r19, r1
    26fe:	09 f4       	brne	.+2      	; 0x2702 <main+0x10a>
    2700:	48 c1       	rjmp	.+656    	; 0x2992 <main+0x39a>
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	88 30       	cpi	r24, 0x08	; 8
    2708:	91 05       	cpc	r25, r1
    270a:	09 f4       	brne	.+2      	; 0x270e <main+0x116>
    270c:	79 c1       	rjmp	.+754    	; 0x2a00 <main+0x408>
    270e:	ac c1       	rjmp	.+856    	; 0x2a68 <main+0x470>
		{
		case 1:
			car_state=2;
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	80 93 7b 01 	sts	0x017B, r24
			_4_motors_control(motor_1,motor_2,motor_3,motor_4 ,FWD, 50);
    2716:	80 91 68 01 	lds	r24, 0x0168
    271a:	90 91 69 01 	lds	r25, 0x0169
    271e:	20 91 6a 01 	lds	r18, 0x016A
    2722:	30 91 6b 01 	lds	r19, 0x016B
    2726:	40 91 6c 01 	lds	r20, 0x016C
    272a:	50 91 6d 01 	lds	r21, 0x016D
    272e:	e0 91 6e 01 	lds	r30, 0x016E
    2732:	f0 91 6f 01 	lds	r31, 0x016F
    2736:	b9 01       	movw	r22, r18
    2738:	9f 01       	movw	r18, r30
    273a:	00 e0       	ldi	r16, 0x00	; 0
    273c:	0f 2e       	mov	r0, r31
    273e:	f2 e3       	ldi	r31, 0x32	; 50
    2740:	ef 2e       	mov	r14, r31
    2742:	f0 2d       	mov	r31, r0
    2744:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_4_motors_control>
			LED_digitalwrite(LED1, High);
    2748:	80 91 70 01 	lds	r24, 0x0170
    274c:	61 e0       	ldi	r22, 0x01	; 1
    274e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED2, Low);
    2752:	80 91 71 01 	lds	r24, 0x0171
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED3, Low);
    275c:	80 91 72 01 	lds	r24, 0x0172
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED4, Low);
    2766:	80 91 73 01 	lds	r24, 0x0173
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			Timer0_Delay(3000);
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	70 e8       	ldi	r23, 0x80	; 128
    2774:	8b e3       	ldi	r24, 0x3B	; 59
    2776:	95 e4       	ldi	r25, 0x45	; 69
    2778:	0e 94 cc 06 	call	0xd98	; 0xd98 <Timer0_Delay>
    277c:	66 cf       	rjmp	.-308    	; 0x264a <main+0x52>
			break;
		case 2:
			car_state=3;
    277e:	83 e0       	ldi	r24, 0x03	; 3
    2780:	80 93 7b 01 	sts	0x017B, r24
			_4_motors_control(motor_1,motor_2,motor_3,motor_4 ,g_stop, 0);
    2784:	80 91 68 01 	lds	r24, 0x0168
    2788:	90 91 69 01 	lds	r25, 0x0169
    278c:	20 91 6a 01 	lds	r18, 0x016A
    2790:	30 91 6b 01 	lds	r19, 0x016B
    2794:	40 91 6c 01 	lds	r20, 0x016C
    2798:	50 91 6d 01 	lds	r21, 0x016D
    279c:	e0 91 6e 01 	lds	r30, 0x016E
    27a0:	f0 91 6f 01 	lds	r31, 0x016F
    27a4:	b9 01       	movw	r22, r18
    27a6:	9f 01       	movw	r18, r30
    27a8:	04 e0       	ldi	r16, 0x04	; 4
    27aa:	ee 24       	eor	r14, r14
    27ac:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_4_motors_control>
			LED_digitalwrite(LED1, Low);
    27b0:	80 91 70 01 	lds	r24, 0x0170
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED2, High);
    27ba:	80 91 71 01 	lds	r24, 0x0171
    27be:	61 e0       	ldi	r22, 0x01	; 1
    27c0:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED3, Low);
    27c4:	80 91 72 01 	lds	r24, 0x0172
    27c8:	60 e0       	ldi	r22, 0x00	; 0
    27ca:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED4, Low);
    27ce:	80 91 73 01 	lds	r24, 0x0173
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			Timer0_Delay(500);
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	70 e0       	ldi	r23, 0x00	; 0
    27dc:	8a ef       	ldi	r24, 0xFA	; 250
    27de:	93 e4       	ldi	r25, 0x43	; 67
    27e0:	0e 94 cc 06 	call	0xd98	; 0xd98 <Timer0_Delay>
    27e4:	32 cf       	rjmp	.-412    	; 0x264a <main+0x52>
			break;
		case 3:
			car_state=4;
    27e6:	84 e0       	ldi	r24, 0x04	; 4
    27e8:	80 93 7b 01 	sts	0x017B, r24
			_4_motors_control(motor_1,motor_2,motor_3,motor_4 ,right, 50);
    27ec:	80 91 68 01 	lds	r24, 0x0168
    27f0:	90 91 69 01 	lds	r25, 0x0169
    27f4:	20 91 6a 01 	lds	r18, 0x016A
    27f8:	30 91 6b 01 	lds	r19, 0x016B
    27fc:	40 91 6c 01 	lds	r20, 0x016C
    2800:	50 91 6d 01 	lds	r21, 0x016D
    2804:	e0 91 6e 01 	lds	r30, 0x016E
    2808:	f0 91 6f 01 	lds	r31, 0x016F
    280c:	b9 01       	movw	r22, r18
    280e:	9f 01       	movw	r18, r30
    2810:	02 e0       	ldi	r16, 0x02	; 2
    2812:	0f 2e       	mov	r0, r31
    2814:	f2 e3       	ldi	r31, 0x32	; 50
    2816:	ef 2e       	mov	r14, r31
    2818:	f0 2d       	mov	r31, r0
    281a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_4_motors_control>
			LED_digitalwrite(LED1, Low);
    281e:	80 91 70 01 	lds	r24, 0x0170
    2822:	60 e0       	ldi	r22, 0x00	; 0
    2824:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED2, Low);
    2828:	80 91 71 01 	lds	r24, 0x0171
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED3, High);
    2832:	80 91 72 01 	lds	r24, 0x0172
    2836:	61 e0       	ldi	r22, 0x01	; 1
    2838:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED4, Low);
    283c:	80 91 73 01 	lds	r24, 0x0173
    2840:	60 e0       	ldi	r22, 0x00	; 0
    2842:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			Timer0_Delay(500);
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	70 e0       	ldi	r23, 0x00	; 0
    284a:	8a ef       	ldi	r24, 0xFA	; 250
    284c:	93 e4       	ldi	r25, 0x43	; 67
    284e:	0e 94 cc 06 	call	0xd98	; 0xd98 <Timer0_Delay>
    2852:	fb ce       	rjmp	.-522    	; 0x264a <main+0x52>
			break;
		case 4:
			car_state=5;
    2854:	85 e0       	ldi	r24, 0x05	; 5
    2856:	80 93 7b 01 	sts	0x017B, r24
			_4_motors_control(motor_1,motor_2,motor_3,motor_4 ,g_stop, 0);
    285a:	80 91 68 01 	lds	r24, 0x0168
    285e:	90 91 69 01 	lds	r25, 0x0169
    2862:	20 91 6a 01 	lds	r18, 0x016A
    2866:	30 91 6b 01 	lds	r19, 0x016B
    286a:	40 91 6c 01 	lds	r20, 0x016C
    286e:	50 91 6d 01 	lds	r21, 0x016D
    2872:	e0 91 6e 01 	lds	r30, 0x016E
    2876:	f0 91 6f 01 	lds	r31, 0x016F
    287a:	b9 01       	movw	r22, r18
    287c:	9f 01       	movw	r18, r30
    287e:	04 e0       	ldi	r16, 0x04	; 4
    2880:	ee 24       	eor	r14, r14
    2882:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_4_motors_control>
			LED_digitalwrite(LED1, Low);
    2886:	80 91 70 01 	lds	r24, 0x0170
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED2, High);
    2890:	80 91 71 01 	lds	r24, 0x0171
    2894:	61 e0       	ldi	r22, 0x01	; 1
    2896:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED3, Low);
    289a:	80 91 72 01 	lds	r24, 0x0172
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED4, Low);
    28a4:	80 91 73 01 	lds	r24, 0x0173
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			Timer0_Delay(500);
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	70 e0       	ldi	r23, 0x00	; 0
    28b2:	8a ef       	ldi	r24, 0xFA	; 250
    28b4:	93 e4       	ldi	r25, 0x43	; 67
    28b6:	0e 94 cc 06 	call	0xd98	; 0xd98 <Timer0_Delay>
    28ba:	c7 ce       	rjmp	.-626    	; 0x264a <main+0x52>
			break;
		case 5:
			car_state=6;
    28bc:	86 e0       	ldi	r24, 0x06	; 6
    28be:	80 93 7b 01 	sts	0x017B, r24
			_4_motors_control(motor_1,motor_2,motor_3,motor_4 ,FWD, 30);
    28c2:	80 91 68 01 	lds	r24, 0x0168
    28c6:	90 91 69 01 	lds	r25, 0x0169
    28ca:	20 91 6a 01 	lds	r18, 0x016A
    28ce:	30 91 6b 01 	lds	r19, 0x016B
    28d2:	40 91 6c 01 	lds	r20, 0x016C
    28d6:	50 91 6d 01 	lds	r21, 0x016D
    28da:	e0 91 6e 01 	lds	r30, 0x016E
    28de:	f0 91 6f 01 	lds	r31, 0x016F
    28e2:	b9 01       	movw	r22, r18
    28e4:	9f 01       	movw	r18, r30
    28e6:	00 e0       	ldi	r16, 0x00	; 0
    28e8:	0f 2e       	mov	r0, r31
    28ea:	fe e1       	ldi	r31, 0x1E	; 30
    28ec:	ef 2e       	mov	r14, r31
    28ee:	f0 2d       	mov	r31, r0
    28f0:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_4_motors_control>
			LED_digitalwrite(LED1, High);
    28f4:	80 91 70 01 	lds	r24, 0x0170
    28f8:	61 e0       	ldi	r22, 0x01	; 1
    28fa:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED2, Low);
    28fe:	80 91 71 01 	lds	r24, 0x0171
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED3, Low);
    2908:	80 91 72 01 	lds	r24, 0x0172
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED4, Low);
    2912:	80 91 73 01 	lds	r24, 0x0173
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			Timer0_Delay(2000);
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	70 e0       	ldi	r23, 0x00	; 0
    2920:	8a ef       	ldi	r24, 0xFA	; 250
    2922:	94 e4       	ldi	r25, 0x44	; 68
    2924:	0e 94 cc 06 	call	0xd98	; 0xd98 <Timer0_Delay>
    2928:	90 ce       	rjmp	.-736    	; 0x264a <main+0x52>
			break;
		case 6:
			car_state=7;
    292a:	87 e0       	ldi	r24, 0x07	; 7
    292c:	80 93 7b 01 	sts	0x017B, r24
			_4_motors_control(motor_1,motor_2,motor_3,motor_4 ,g_stop, 0);
    2930:	80 91 68 01 	lds	r24, 0x0168
    2934:	90 91 69 01 	lds	r25, 0x0169
    2938:	20 91 6a 01 	lds	r18, 0x016A
    293c:	30 91 6b 01 	lds	r19, 0x016B
    2940:	40 91 6c 01 	lds	r20, 0x016C
    2944:	50 91 6d 01 	lds	r21, 0x016D
    2948:	e0 91 6e 01 	lds	r30, 0x016E
    294c:	f0 91 6f 01 	lds	r31, 0x016F
    2950:	b9 01       	movw	r22, r18
    2952:	9f 01       	movw	r18, r30
    2954:	04 e0       	ldi	r16, 0x04	; 4
    2956:	ee 24       	eor	r14, r14
    2958:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_4_motors_control>
			LED_digitalwrite(LED1, Low);
    295c:	80 91 70 01 	lds	r24, 0x0170
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED2, High);
    2966:	80 91 71 01 	lds	r24, 0x0171
    296a:	61 e0       	ldi	r22, 0x01	; 1
    296c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED3, Low);
    2970:	80 91 72 01 	lds	r24, 0x0172
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED4, Low);
    297a:	80 91 73 01 	lds	r24, 0x0173
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			Timer0_Delay(500);
    2984:	60 e0       	ldi	r22, 0x00	; 0
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	8a ef       	ldi	r24, 0xFA	; 250
    298a:	93 e4       	ldi	r25, 0x43	; 67
    298c:	0e 94 cc 06 	call	0xd98	; 0xd98 <Timer0_Delay>
    2990:	5c ce       	rjmp	.-840    	; 0x264a <main+0x52>
			break;
		case 7:
			car_state=8;
    2992:	88 e0       	ldi	r24, 0x08	; 8
    2994:	80 93 7b 01 	sts	0x017B, r24
			_4_motors_control(motor_1,motor_2,motor_3,motor_4 ,right, 30);
    2998:	80 91 68 01 	lds	r24, 0x0168
    299c:	90 91 69 01 	lds	r25, 0x0169
    29a0:	20 91 6a 01 	lds	r18, 0x016A
    29a4:	30 91 6b 01 	lds	r19, 0x016B
    29a8:	40 91 6c 01 	lds	r20, 0x016C
    29ac:	50 91 6d 01 	lds	r21, 0x016D
    29b0:	e0 91 6e 01 	lds	r30, 0x016E
    29b4:	f0 91 6f 01 	lds	r31, 0x016F
    29b8:	b9 01       	movw	r22, r18
    29ba:	9f 01       	movw	r18, r30
    29bc:	02 e0       	ldi	r16, 0x02	; 2
    29be:	0f 2e       	mov	r0, r31
    29c0:	fe e1       	ldi	r31, 0x1E	; 30
    29c2:	ef 2e       	mov	r14, r31
    29c4:	f0 2d       	mov	r31, r0
    29c6:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_4_motors_control>
			LED_digitalwrite(LED1, Low);
    29ca:	80 91 70 01 	lds	r24, 0x0170
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED2, Low);
    29d4:	80 91 71 01 	lds	r24, 0x0171
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED3, High);
    29de:	80 91 72 01 	lds	r24, 0x0172
    29e2:	61 e0       	ldi	r22, 0x01	; 1
    29e4:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED4, Low);
    29e8:	80 91 73 01 	lds	r24, 0x0173
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			Timer0_Delay(500);
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	8a ef       	ldi	r24, 0xFA	; 250
    29f8:	93 e4       	ldi	r25, 0x43	; 67
    29fa:	0e 94 cc 06 	call	0xd98	; 0xd98 <Timer0_Delay>
    29fe:	25 ce       	rjmp	.-950    	; 0x264a <main+0x52>
			break;
		case 8:
			car_state=1;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	80 93 7b 01 	sts	0x017B, r24
			_4_motors_control(motor_1,motor_2,motor_3,motor_4 ,g_stop, 0);
    2a06:	80 91 68 01 	lds	r24, 0x0168
    2a0a:	90 91 69 01 	lds	r25, 0x0169
    2a0e:	20 91 6a 01 	lds	r18, 0x016A
    2a12:	30 91 6b 01 	lds	r19, 0x016B
    2a16:	40 91 6c 01 	lds	r20, 0x016C
    2a1a:	50 91 6d 01 	lds	r21, 0x016D
    2a1e:	e0 91 6e 01 	lds	r30, 0x016E
    2a22:	f0 91 6f 01 	lds	r31, 0x016F
    2a26:	b9 01       	movw	r22, r18
    2a28:	9f 01       	movw	r18, r30
    2a2a:	04 e0       	ldi	r16, 0x04	; 4
    2a2c:	ee 24       	eor	r14, r14
    2a2e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_4_motors_control>
			LED_digitalwrite(LED1, Low);
    2a32:	80 91 70 01 	lds	r24, 0x0170
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED2, High);
    2a3c:	80 91 71 01 	lds	r24, 0x0171
    2a40:	61 e0       	ldi	r22, 0x01	; 1
    2a42:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED3, Low);
    2a46:	80 91 72 01 	lds	r24, 0x0172
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED4, Low);
    2a50:	80 91 73 01 	lds	r24, 0x0173
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			Timer0_Delay(500);
    2a5a:	60 e0       	ldi	r22, 0x00	; 0
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	8a ef       	ldi	r24, 0xFA	; 250
    2a60:	93 e4       	ldi	r25, 0x43	; 67
    2a62:	0e 94 cc 06 	call	0xd98	; 0xd98 <Timer0_Delay>
    2a66:	f1 cd       	rjmp	.-1054   	; 0x264a <main+0x52>
			break;
		default:
			//DCmotor_stop(&motor_1);
			car_state=0;
    2a68:	10 92 7b 01 	sts	0x017B, r1
			_4_motors_control(motor_1,motor_2,motor_3,motor_4 ,g_stop, 0);
    2a6c:	80 91 68 01 	lds	r24, 0x0168
    2a70:	90 91 69 01 	lds	r25, 0x0169
    2a74:	20 91 6a 01 	lds	r18, 0x016A
    2a78:	30 91 6b 01 	lds	r19, 0x016B
    2a7c:	40 91 6c 01 	lds	r20, 0x016C
    2a80:	50 91 6d 01 	lds	r21, 0x016D
    2a84:	e0 91 6e 01 	lds	r30, 0x016E
    2a88:	f0 91 6f 01 	lds	r31, 0x016F
    2a8c:	b9 01       	movw	r22, r18
    2a8e:	9f 01       	movw	r18, r30
    2a90:	04 e0       	ldi	r16, 0x04	; 4
    2a92:	ee 24       	eor	r14, r14
    2a94:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_4_motors_control>
			LED_digitalwrite(LED1, Low);
    2a98:	80 91 70 01 	lds	r24, 0x0170
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED2, Low);
    2aa2:	80 91 71 01 	lds	r24, 0x0171
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED3, Low);
    2aac:	80 91 72 01 	lds	r24, 0x0172
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
			LED_digitalwrite(LED4, Low);
    2ab6:	80 91 73 01 	lds	r24, 0x0173
    2aba:	60 e0       	ldi	r22, 0x00	; 0
    2abc:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
    2ac0:	c4 cd       	rjmp	.-1144   	; 0x264a <main+0x52>

00002ac2 <_4_motors_control>:
}



void _4_motors_control(DCmotor_configtype m1,DCmotor_configtype m2,DCmotor_configtype m3,DCmotor_configtype m4,EN_state state,uint8 speed)
{
    2ac2:	ef 92       	push	r14
    2ac4:	0f 93       	push	r16
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	2c 97       	sbiw	r28, 0x0c	; 12
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	7c 83       	std	Y+4, r23	; 0x04
    2ae0:	6b 83       	std	Y+3, r22	; 0x03
    2ae2:	5e 83       	std	Y+6, r21	; 0x06
    2ae4:	4d 83       	std	Y+5, r20	; 0x05
    2ae6:	38 87       	std	Y+8, r19	; 0x08
    2ae8:	2f 83       	std	Y+7, r18	; 0x07
    2aea:	09 87       	std	Y+9, r16	; 0x09
    2aec:	ea 86       	std	Y+10, r14	; 0x0a
	switch(state)
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	28 2f       	mov	r18, r24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	3c 87       	std	Y+12, r19	; 0x0c
    2af6:	2b 87       	std	Y+11, r18	; 0x0b
    2af8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2afa:	9c 85       	ldd	r25, Y+12	; 0x0c
    2afc:	82 30       	cpi	r24, 0x02	; 2
    2afe:	91 05       	cpc	r25, r1
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <_4_motors_control+0x42>
    2b02:	4e c0       	rjmp	.+156    	; 0x2ba0 <_4_motors_control+0xde>
    2b04:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b06:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b08:	23 30       	cpi	r18, 0x03	; 3
    2b0a:	31 05       	cpc	r19, r1
    2b0c:	54 f4       	brge	.+20     	; 0x2b22 <_4_motors_control+0x60>
    2b0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b10:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b12:	00 97       	sbiw	r24, 0x00	; 0
    2b14:	99 f0       	breq	.+38     	; 0x2b3c <_4_motors_control+0x7a>
    2b16:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b18:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b1a:	21 30       	cpi	r18, 0x01	; 1
    2b1c:	31 05       	cpc	r19, r1
    2b1e:	39 f1       	breq	.+78     	; 0x2b6e <_4_motors_control+0xac>
    2b20:	89 c0       	rjmp	.+274    	; 0x2c34 <_4_motors_control+0x172>
    2b22:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b24:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b26:	83 30       	cpi	r24, 0x03	; 3
    2b28:	91 05       	cpc	r25, r1
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <_4_motors_control+0x6c>
    2b2c:	52 c0       	rjmp	.+164    	; 0x2bd2 <_4_motors_control+0x110>
    2b2e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b30:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b32:	24 30       	cpi	r18, 0x04	; 4
    2b34:	31 05       	cpc	r19, r1
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <_4_motors_control+0x78>
    2b38:	65 c0       	rjmp	.+202    	; 0x2c04 <_4_motors_control+0x142>
    2b3a:	7c c0       	rjmp	.+248    	; 0x2c34 <_4_motors_control+0x172>
	{
	case FWD:
		DCmotor_start(&m1, CW,speed);
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	01 96       	adiw	r24, 0x01	; 1
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b44:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m2, CW,speed);
    2b48:	ce 01       	movw	r24, r28
    2b4a:	03 96       	adiw	r24, 0x03	; 3
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b50:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m3, CW,speed);
    2b54:	ce 01       	movw	r24, r28
    2b56:	05 96       	adiw	r24, 0x05	; 5
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b5c:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m4, CW,speed);
    2b60:	ce 01       	movw	r24, r28
    2b62:	07 96       	adiw	r24, 0x07	; 7
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b68:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
    2b6c:	63 c0       	rjmp	.+198    	; 0x2c34 <_4_motors_control+0x172>
		break;
	case BWD:
		DCmotor_start(&m1, ACW,speed);
    2b6e:	ce 01       	movw	r24, r28
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	61 e0       	ldi	r22, 0x01	; 1
    2b74:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b76:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m2, ACW,speed);
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	03 96       	adiw	r24, 0x03	; 3
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b82:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m3, ACW,speed);
    2b86:	ce 01       	movw	r24, r28
    2b88:	05 96       	adiw	r24, 0x05	; 5
    2b8a:	61 e0       	ldi	r22, 0x01	; 1
    2b8c:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b8e:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m4, ACW,speed);
    2b92:	ce 01       	movw	r24, r28
    2b94:	07 96       	adiw	r24, 0x07	; 7
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b9a:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
    2b9e:	4a c0       	rjmp	.+148    	; 0x2c34 <_4_motors_control+0x172>
		break;
	case right:
		DCmotor_start(&m1, CW,speed);
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	60 e0       	ldi	r22, 0x00	; 0
    2ba6:	4a 85       	ldd	r20, Y+10	; 0x0a
    2ba8:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m2, CW,speed);
    2bac:	ce 01       	movw	r24, r28
    2bae:	03 96       	adiw	r24, 0x03	; 3
    2bb0:	60 e0       	ldi	r22, 0x00	; 0
    2bb2:	4a 85       	ldd	r20, Y+10	; 0x0a
    2bb4:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m3, stop,speed);
    2bb8:	ce 01       	movw	r24, r28
    2bba:	05 96       	adiw	r24, 0x05	; 5
    2bbc:	62 e0       	ldi	r22, 0x02	; 2
    2bbe:	4a 85       	ldd	r20, Y+10	; 0x0a
    2bc0:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m4, stop,speed);
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	07 96       	adiw	r24, 0x07	; 7
    2bc8:	62 e0       	ldi	r22, 0x02	; 2
    2bca:	4a 85       	ldd	r20, Y+10	; 0x0a
    2bcc:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
    2bd0:	31 c0       	rjmp	.+98     	; 0x2c34 <_4_motors_control+0x172>
		break;
	case left:
		DCmotor_start(&m3, CW,speed);
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	05 96       	adiw	r24, 0x05	; 5
    2bd6:	60 e0       	ldi	r22, 0x00	; 0
    2bd8:	4a 85       	ldd	r20, Y+10	; 0x0a
    2bda:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m4, CW,speed);
    2bde:	ce 01       	movw	r24, r28
    2be0:	07 96       	adiw	r24, 0x07	; 7
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	4a 85       	ldd	r20, Y+10	; 0x0a
    2be6:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m1, stop,speed);
    2bea:	ce 01       	movw	r24, r28
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	62 e0       	ldi	r22, 0x02	; 2
    2bf0:	4a 85       	ldd	r20, Y+10	; 0x0a
    2bf2:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m2, stop,speed);
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	03 96       	adiw	r24, 0x03	; 3
    2bfa:	62 e0       	ldi	r22, 0x02	; 2
    2bfc:	4a 85       	ldd	r20, Y+10	; 0x0a
    2bfe:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
    2c02:	18 c0       	rjmp	.+48     	; 0x2c34 <_4_motors_control+0x172>
		break;
	case g_stop:
		DCmotor_start(&m1, stop,speed);
    2c04:	ce 01       	movw	r24, r28
    2c06:	01 96       	adiw	r24, 0x01	; 1
    2c08:	62 e0       	ldi	r22, 0x02	; 2
    2c0a:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c0c:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m2, stop,speed);
    2c10:	ce 01       	movw	r24, r28
    2c12:	03 96       	adiw	r24, 0x03	; 3
    2c14:	62 e0       	ldi	r22, 0x02	; 2
    2c16:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c18:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m3, stop,speed);
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	05 96       	adiw	r24, 0x05	; 5
    2c20:	62 e0       	ldi	r22, 0x02	; 2
    2c22:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c24:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		DCmotor_start(&m4, stop,speed);
    2c28:	ce 01       	movw	r24, r28
    2c2a:	07 96       	adiw	r24, 0x07	; 7
    2c2c:	62 e0       	ldi	r22, 0x02	; 2
    2c2e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c30:	0e 94 df 11 	call	0x23be	; 0x23be <DCmotor_start>
		break;
	}
}
    2c34:	2c 96       	adiw	r28, 0x0c	; 12
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	0f 91       	pop	r16
    2c46:	ef 90       	pop	r14
    2c48:	08 95       	ret

00002c4a <stop_car>:


void stop_car (void)
{
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
	car_state=9;
    2c52:	89 e0       	ldi	r24, 0x09	; 9
    2c54:	80 93 7b 01 	sts	0x017B, r24
	DCmotor_stop(&motor_1);
    2c58:	88 e6       	ldi	r24, 0x68	; 104
    2c5a:	91 e0       	ldi	r25, 0x01	; 1
    2c5c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DCmotor_stop>
	LED_digitalwrite(LED1, Low);
    2c60:	80 91 70 01 	lds	r24, 0x0170
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
	LED_digitalwrite(LED2, Low);
    2c6a:	80 91 71 01 	lds	r24, 0x0171
    2c6e:	60 e0       	ldi	r22, 0x00	; 0
    2c70:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
	LED_digitalwrite(LED3, Low);
    2c74:	80 91 72 01 	lds	r24, 0x0172
    2c78:	60 e0       	ldi	r22, 0x00	; 0
    2c7a:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
	LED_digitalwrite(LED4, High);
    2c7e:	80 91 73 01 	lds	r24, 0x0173
    2c82:	61 e0       	ldi	r22, 0x01	; 1
    2c84:	0e 94 5e 11 	call	0x22bc	; 0x22bc <LED_digitalwrite>
}
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <__divmodhi4>:
    2c8e:	97 fb       	bst	r25, 7
    2c90:	09 2e       	mov	r0, r25
    2c92:	07 26       	eor	r0, r23
    2c94:	0a d0       	rcall	.+20     	; 0x2caa <__divmodhi4_neg1>
    2c96:	77 fd       	sbrc	r23, 7
    2c98:	04 d0       	rcall	.+8      	; 0x2ca2 <__divmodhi4_neg2>
    2c9a:	0c d0       	rcall	.+24     	; 0x2cb4 <__udivmodhi4>
    2c9c:	06 d0       	rcall	.+12     	; 0x2caa <__divmodhi4_neg1>
    2c9e:	00 20       	and	r0, r0
    2ca0:	1a f4       	brpl	.+6      	; 0x2ca8 <__divmodhi4_exit>

00002ca2 <__divmodhi4_neg2>:
    2ca2:	70 95       	com	r23
    2ca4:	61 95       	neg	r22
    2ca6:	7f 4f       	sbci	r23, 0xFF	; 255

00002ca8 <__divmodhi4_exit>:
    2ca8:	08 95       	ret

00002caa <__divmodhi4_neg1>:
    2caa:	f6 f7       	brtc	.-4      	; 0x2ca8 <__divmodhi4_exit>
    2cac:	90 95       	com	r25
    2cae:	81 95       	neg	r24
    2cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb2:	08 95       	ret

00002cb4 <__udivmodhi4>:
    2cb4:	aa 1b       	sub	r26, r26
    2cb6:	bb 1b       	sub	r27, r27
    2cb8:	51 e1       	ldi	r21, 0x11	; 17
    2cba:	07 c0       	rjmp	.+14     	; 0x2cca <__udivmodhi4_ep>

00002cbc <__udivmodhi4_loop>:
    2cbc:	aa 1f       	adc	r26, r26
    2cbe:	bb 1f       	adc	r27, r27
    2cc0:	a6 17       	cp	r26, r22
    2cc2:	b7 07       	cpc	r27, r23
    2cc4:	10 f0       	brcs	.+4      	; 0x2cca <__udivmodhi4_ep>
    2cc6:	a6 1b       	sub	r26, r22
    2cc8:	b7 0b       	sbc	r27, r23

00002cca <__udivmodhi4_ep>:
    2cca:	88 1f       	adc	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	5a 95       	dec	r21
    2cd0:	a9 f7       	brne	.-22     	; 0x2cbc <__udivmodhi4_loop>
    2cd2:	80 95       	com	r24
    2cd4:	90 95       	com	r25
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	08 95       	ret

00002cdc <__prologue_saves__>:
    2cdc:	2f 92       	push	r2
    2cde:	3f 92       	push	r3
    2ce0:	4f 92       	push	r4
    2ce2:	5f 92       	push	r5
    2ce4:	6f 92       	push	r6
    2ce6:	7f 92       	push	r7
    2ce8:	8f 92       	push	r8
    2cea:	9f 92       	push	r9
    2cec:	af 92       	push	r10
    2cee:	bf 92       	push	r11
    2cf0:	cf 92       	push	r12
    2cf2:	df 92       	push	r13
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	ca 1b       	sub	r28, r26
    2d06:	db 0b       	sbc	r29, r27
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	de bf       	out	0x3e, r29	; 62
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	cd bf       	out	0x3d, r28	; 61
    2d12:	09 94       	ijmp

00002d14 <__epilogue_restores__>:
    2d14:	2a 88       	ldd	r2, Y+18	; 0x12
    2d16:	39 88       	ldd	r3, Y+17	; 0x11
    2d18:	48 88       	ldd	r4, Y+16	; 0x10
    2d1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d20:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d22:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d24:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d26:	b9 84       	ldd	r11, Y+9	; 0x09
    2d28:	c8 84       	ldd	r12, Y+8	; 0x08
    2d2a:	df 80       	ldd	r13, Y+7	; 0x07
    2d2c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d2e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d30:	0c 81       	ldd	r16, Y+4	; 0x04
    2d32:	1b 81       	ldd	r17, Y+3	; 0x03
    2d34:	aa 81       	ldd	r26, Y+2	; 0x02
    2d36:	b9 81       	ldd	r27, Y+1	; 0x01
    2d38:	ce 0f       	add	r28, r30
    2d3a:	d1 1d       	adc	r29, r1
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	ed 01       	movw	r28, r26
    2d48:	08 95       	ret

00002d4a <_exit>:
    2d4a:	f8 94       	cli

00002d4c <__stop_program>:
    2d4c:	ff cf       	rjmp	.-2      	; 0x2d4c <__stop_program>
