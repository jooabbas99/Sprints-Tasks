
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  00000456  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9b  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078a  00000000  00000000  0000113f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006cf  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b6  00000000  00000000  00002558  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002a0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  74:	0c 94 ef 01 	jmp	0x3de	; 0x3de <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <AppInit>:

#include "application.h"
uint8_t btnState , counter;
ST_led_t led[LED_NO];
void AppInit(){
	led[0].pinNumber = PIN0;
  7c:	e1 e6       	ldi	r30, 0x61	; 97
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	11 82       	std	Z+1, r1	; 0x01
	led[0].portNmber = PORT_A;
  82:	81 e4       	ldi	r24, 0x41	; 65
  84:	80 83       	st	Z, r24
	led[0].ledStatus = LOW;
  86:	12 82       	std	Z+2, r1	; 0x02
	
	led[1].pinNumber = PIN1;
  88:	91 e0       	ldi	r25, 0x01	; 1
  8a:	94 83       	std	Z+4, r25	; 0x04
	led[1].portNmber = PORT_A;
  8c:	83 83       	std	Z+3, r24	; 0x03
	led[1].ledStatus = LOW;
  8e:	15 82       	std	Z+5, r1	; 0x05
	
	led[2].pinNumber = PIN2;
  90:	92 e0       	ldi	r25, 0x02	; 2
  92:	97 83       	std	Z+7, r25	; 0x07
	led[2].portNmber = PORT_A;
  94:	86 83       	std	Z+6, r24	; 0x06
	led[2].ledStatus = LOW;
  96:	10 86       	std	Z+8, r1	; 0x08
	
	led[3].pinNumber = PIN3;
  98:	93 e0       	ldi	r25, 0x03	; 3
  9a:	92 87       	std	Z+10, r25	; 0x0a
	led[3].portNmber = PORT_A;
  9c:	81 87       	std	Z+9, r24	; 0x09
	led[3].ledStatus = LOW;
  9e:	13 86       	std	Z+11, r1	; 0x0b
	
	LED_init(&led[0]);
  a0:	cf 01       	movw	r24, r30
  a2:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_init>
	LED_init(&led[1]);
  a6:	84 e6       	ldi	r24, 0x64	; 100
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_init>
	LED_init(&led[2]);
  ae:	87 e6       	ldi	r24, 0x67	; 103
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_init>
	LED_init(&led[3]);
  b6:	8a e6       	ldi	r24, 0x6A	; 106
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_init>
	BUTTON_init(PORT_B,PIN0);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	82 e4       	ldi	r24, 0x42	; 66
  c2:	0e 94 a7 00 	call	0x14e	; 0x14e <BUTTON_init>
	btnState = 0;
  c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	counter = 0;
  ca:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <counter>
  ce:	08 95       	ret

000000d0 <AppStart>:
}

void AppStart(){
	
	BUTTON_status(PORT_B,PIN0,&btnState);
  d0:	40 e6       	ldi	r20, 0x60	; 96
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	82 e4       	ldi	r24, 0x42	; 66
  d8:	0e 94 ab 00 	call	0x156	; 0x156 <BUTTON_status>
	
	if (btnState == BUTTON_HIGH)
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	a1 f5       	brne	.+104    	; 0x14c <AppStart+0x7c>
	{
		counter ++;
  e4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <counter>
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <counter>
		if (counter <= LED_NO)
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	60 f4       	brcc	.+24     	; 0x10a <AppStart+0x3a>
		{
			LED_on(&led[counter-1]);
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	9c 01       	movw	r18, r24
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	82 0f       	add	r24, r18
  fe:	93 1f       	adc	r25, r19
 100:	8f 59       	subi	r24, 0x9F	; 159
 102:	9f 4f       	sbci	r25, 0xFF	; 255
 104:	0e 94 ba 00 	call	0x174	; 0x174 <LED_on>
 108:	10 c0       	rjmp	.+32     	; 0x12a <AppStart+0x5a>
		}
		else
		{	
			if (counter > 8)
 10a:	89 30       	cpi	r24, 0x09	; 9
 10c:	18 f0       	brcs	.+6      	; 0x114 <AppStart+0x44>
			{
				counter = 0;
 10e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <counter>
 112:	0b c0       	rjmp	.+22     	; 0x12a <AppStart+0x5a>
			}else {
				LED_off(&led[counter-5]);
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	05 97       	sbiw	r24, 0x05	; 5
 118:	9c 01       	movw	r18, r24
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	82 0f       	add	r24, r18
 120:	93 1f       	adc	r25, r19
 122:	8f 59       	subi	r24, 0x9F	; 159
 124:	9f 4f       	sbci	r25, 0xFF	; 255
 126:	0e 94 c7 00 	call	0x18e	; 0x18e <LED_off>
				
			}
			
		}
		BUTTON_status(PORT_B,PIN0,&btnState);
 12a:	40 e6       	ldi	r20, 0x60	; 96
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	82 e4       	ldi	r24, 0x42	; 66
 132:	0e 94 ab 00 	call	0x156	; 0x156 <BUTTON_status>
		while(btnState == HIGH){
 136:	06 c0       	rjmp	.+12     	; 0x144 <AppStart+0x74>
			BUTTON_status(PORT_B,PIN0,&btnState);
 138:	40 e6       	ldi	r20, 0x60	; 96
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	82 e4       	ldi	r24, 0x42	; 66
 140:	0e 94 ab 00 	call	0x156	; 0x156 <BUTTON_status>
				
			}
			
		}
		BUTTON_status(PORT_B,PIN0,&btnState);
		while(btnState == HIGH){
 144:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	b1 f3       	breq	.-20     	; 0x138 <AppStart+0x68>
 14c:	08 95       	ret

0000014e <BUTTON_init>:
#include "button.h"



void BUTTON_init(uint8_t button_port , uint8_t button_pin){
	DIO_init(button_port,button_pin,IN);
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_init>
 154:	08 95       	ret

00000156 <BUTTON_status>:
}
void BUTTON_status(uint8_t button_port , uint8_t button_pin,uint8_t *status){
	DIO_read(button_port,button_pin,status);
 156:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_read>
 15a:	08 95       	ret

0000015c <LED_init>:
 *  Author: youss
 */ 
#include "led.h"


void LED_init(ST_led_t *led){
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	ec 01       	movw	r28, r24
	DIO_init(led->portNmber,led->pinNumber,OUT);
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	69 81       	ldd	r22, Y+1	; 0x01
 166:	88 81       	ld	r24, Y
 168:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_init>
	led->ledStatus = LOW;
 16c:	1a 82       	std	Y+2, r1	; 0x02
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <LED_on>:
void LED_on(ST_led_t *led){
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	DIO_write(led->portNmber,led->pinNumber,HIGH);
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	69 81       	ldd	r22, Y+1	; 0x01
 17e:	88 81       	ld	r24, Y
 180:	0e 94 48 01 	call	0x290	; 0x290 <DIO_write>
	led->ledStatus = HIGH;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	8a 83       	std	Y+2, r24	; 0x02
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <LED_off>:
void LED_off(ST_led_t *led){
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
	DIO_write(led->portNmber,led->pinNumber,LOW);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	69 81       	ldd	r22, Y+1	; 0x01
 198:	88 81       	ld	r24, Y
 19a:	0e 94 48 01 	call	0x290	; 0x290 <DIO_write>
	led->ledStatus = LOW;
 19e:	1a 82       	std	Y+2, r1	; 0x02
	
	
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <main>:
	// DDRA |= (1<<0);
	//DIO_init(PORT_A,PIN4,OUT);
	//DIO_init(PORT_B,PIN3,OUT);
	
	//LED_init(PORT_A,PIN4);
	AppInit();
 1a6:	0e 94 3e 00 	call	0x7c	; 0x7c <AppInit>
		//PORTA |= (1<<0);
		//DIO_write(PORT_A,PIN4,HIGH);
		//DIO_write(PORT_B,PIN3,LOW);
		//LED_on(PORT_A,PIN4);
		
		AppStart();
 1aa:	0e 94 68 00 	call	0xd0	; 0xd0 <AppStart>
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <main+0x4>

000001b0 <DIO_init>:
		break;
		case PORT_C:
		 TOGGLE_BIT(PORTC,pinNumber); 
		break;
		case PORT_D:
		 TOGGLE_BIT(PORTD,pinNumber);
 1b0:	82 34       	cpi	r24, 0x42	; 66
 1b2:	19 f1       	breq	.+70     	; 0x1fa <DIO_init+0x4a>
 1b4:	18 f4       	brcc	.+6      	; 0x1bc <DIO_init+0xc>
 1b6:	81 34       	cpi	r24, 0x41	; 65
 1b8:	39 f0       	breq	.+14     	; 0x1c8 <DIO_init+0x18>
 1ba:	08 95       	ret
 1bc:	83 34       	cpi	r24, 0x43	; 67
 1be:	b1 f1       	breq	.+108    	; 0x22c <DIO_init+0x7c>
 1c0:	84 34       	cpi	r24, 0x44	; 68
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <DIO_init+0x16>
 1c4:	4c c0       	rjmp	.+152    	; 0x25e <DIO_init+0xae>
 1c6:	08 95       	ret
 1c8:	41 11       	cpse	r20, r1
 1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <DIO_init+0x34>
 1cc:	2a b3       	in	r18, 0x1a	; 26
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_init+0x28>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_init+0x24>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	8a bb       	out	0x1a, r24	; 26
 1e2:	08 95       	ret
 1e4:	2a b3       	in	r18, 0x1a	; 26
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_init+0x40>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_init+0x3c>
 1f4:	82 2b       	or	r24, r18
 1f6:	8a bb       	out	0x1a, r24	; 26
 1f8:	08 95       	ret
 1fa:	41 11       	cpse	r20, r1
 1fc:	0c c0       	rjmp	.+24     	; 0x216 <DIO_init+0x66>
 1fe:	27 b3       	in	r18, 0x17	; 23
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_init+0x5a>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_init+0x56>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	87 bb       	out	0x17, r24	; 23
 214:	08 95       	ret
 216:	27 b3       	in	r18, 0x17	; 23
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_init+0x72>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_init+0x6e>
 226:	82 2b       	or	r24, r18
 228:	87 bb       	out	0x17, r24	; 23
 22a:	08 95       	ret
 22c:	41 11       	cpse	r20, r1
 22e:	0c c0       	rjmp	.+24     	; 0x248 <DIO_init+0x98>
 230:	24 b3       	in	r18, 0x14	; 20
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_init+0x8c>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_init+0x88>
 240:	80 95       	com	r24
 242:	82 23       	and	r24, r18
 244:	84 bb       	out	0x14, r24	; 20
 246:	08 95       	ret
 248:	24 b3       	in	r18, 0x14	; 20
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_init+0xa4>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_init+0xa0>
 258:	82 2b       	or	r24, r18
 25a:	84 bb       	out	0x14, r24	; 20
 25c:	08 95       	ret
 25e:	41 11       	cpse	r20, r1
 260:	0c c0       	rjmp	.+24     	; 0x27a <DIO_init+0xca>
 262:	21 b3       	in	r18, 0x11	; 17
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_init+0xbe>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_init+0xba>
 272:	80 95       	com	r24
 274:	82 23       	and	r24, r18
 276:	81 bb       	out	0x11, r24	; 17
 278:	08 95       	ret
 27a:	21 b3       	in	r18, 0x11	; 17
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_init+0xd6>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_init+0xd2>
 28a:	82 2b       	or	r24, r18
 28c:	81 bb       	out	0x11, r24	; 17
 28e:	08 95       	ret

00000290 <DIO_write>:
 290:	82 34       	cpi	r24, 0x42	; 66
 292:	19 f1       	breq	.+70     	; 0x2da <DIO_write+0x4a>
 294:	18 f4       	brcc	.+6      	; 0x29c <DIO_write+0xc>
 296:	81 34       	cpi	r24, 0x41	; 65
 298:	39 f0       	breq	.+14     	; 0x2a8 <DIO_write+0x18>
 29a:	08 95       	ret
 29c:	83 34       	cpi	r24, 0x43	; 67
 29e:	b1 f1       	breq	.+108    	; 0x30c <DIO_write+0x7c>
 2a0:	84 34       	cpi	r24, 0x44	; 68
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_write+0x16>
 2a4:	4c c0       	rjmp	.+152    	; 0x33e <DIO_write+0xae>
 2a6:	08 95       	ret
 2a8:	41 11       	cpse	r20, r1
 2aa:	0c c0       	rjmp	.+24     	; 0x2c4 <DIO_write+0x34>
 2ac:	2b b3       	in	r18, 0x1b	; 27
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_write+0x28>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_write+0x24>
 2bc:	80 95       	com	r24
 2be:	82 23       	and	r24, r18
 2c0:	8b bb       	out	0x1b, r24	; 27
 2c2:	08 95       	ret
 2c4:	2b b3       	in	r18, 0x1b	; 27
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_write+0x40>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_write+0x3c>
 2d4:	82 2b       	or	r24, r18
 2d6:	8b bb       	out	0x1b, r24	; 27
 2d8:	08 95       	ret
 2da:	41 11       	cpse	r20, r1
 2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <DIO_write+0x66>
 2de:	28 b3       	in	r18, 0x18	; 24
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_write+0x5a>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_write+0x56>
 2ee:	80 95       	com	r24
 2f0:	82 23       	and	r24, r18
 2f2:	88 bb       	out	0x18, r24	; 24
 2f4:	08 95       	ret
 2f6:	28 b3       	in	r18, 0x18	; 24
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_write+0x72>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_write+0x6e>
 306:	82 2b       	or	r24, r18
 308:	88 bb       	out	0x18, r24	; 24
 30a:	08 95       	ret
 30c:	41 11       	cpse	r20, r1
 30e:	0c c0       	rjmp	.+24     	; 0x328 <DIO_write+0x98>
 310:	25 b3       	in	r18, 0x15	; 21
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_write+0x8c>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_write+0x88>
 320:	80 95       	com	r24
 322:	82 23       	and	r24, r18
 324:	85 bb       	out	0x15, r24	; 21
 326:	08 95       	ret
 328:	25 b3       	in	r18, 0x15	; 21
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_write+0xa4>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_write+0xa0>
 338:	82 2b       	or	r24, r18
 33a:	85 bb       	out	0x15, r24	; 21
 33c:	08 95       	ret
 33e:	41 11       	cpse	r20, r1
 340:	0c c0       	rjmp	.+24     	; 0x35a <DIO_write+0xca>
 342:	22 b3       	in	r18, 0x12	; 18
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_write+0xbe>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_write+0xba>
 352:	80 95       	com	r24
 354:	82 23       	and	r24, r18
 356:	82 bb       	out	0x12, r24	; 18
 358:	08 95       	ret
 35a:	22 b3       	in	r18, 0x12	; 18
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_write+0xd6>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_write+0xd2>
 36a:	82 2b       	or	r24, r18
 36c:	82 bb       	out	0x12, r24	; 18
 36e:	08 95       	ret

00000370 <DIO_read>:
		break;
	}
}

void DIO_read(uint8_t portNumber,uint8_t pinNumber, uint8_t * data){
	switch(portNumber){
 370:	82 34       	cpi	r24, 0x42	; 66
 372:	a1 f0       	breq	.+40     	; 0x39c <DIO_read+0x2c>
 374:	18 f4       	brcc	.+6      	; 0x37c <DIO_read+0xc>
 376:	81 34       	cpi	r24, 0x41	; 65
 378:	31 f0       	breq	.+12     	; 0x386 <DIO_read+0x16>
 37a:	08 95       	ret
 37c:	83 34       	cpi	r24, 0x43	; 67
 37e:	c9 f0       	breq	.+50     	; 0x3b2 <DIO_read+0x42>
 380:	84 34       	cpi	r24, 0x44	; 68
 382:	11 f1       	breq	.+68     	; 0x3c8 <DIO_read+0x58>
 384:	08 95       	ret
		case PORT_A:
			*data = READ_BIT(PINA,pinNumber);
 386:	89 b3       	in	r24, 0x19	; 25
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_read+0x20>
 38c:	95 95       	asr	r25
 38e:	87 95       	ror	r24
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_read+0x1c>
 394:	81 70       	andi	r24, 0x01	; 1
 396:	fa 01       	movw	r30, r20
 398:	80 83       	st	Z, r24
		break;
 39a:	08 95       	ret
		case PORT_B:
			*data =READ_BIT(PINB,pinNumber);
 39c:	86 b3       	in	r24, 0x16	; 22
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_read+0x36>
 3a2:	95 95       	asr	r25
 3a4:	87 95       	ror	r24
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_read+0x32>
 3aa:	81 70       	andi	r24, 0x01	; 1
 3ac:	fa 01       	movw	r30, r20
 3ae:	80 83       	st	Z, r24
		break;
 3b0:	08 95       	ret
		case PORT_C:
			*data =READ_BIT(PINC,pinNumber);
 3b2:	83 b3       	in	r24, 0x13	; 19
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_read+0x4c>
 3b8:	95 95       	asr	r25
 3ba:	87 95       	ror	r24
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_read+0x48>
 3c0:	81 70       	andi	r24, 0x01	; 1
 3c2:	fa 01       	movw	r30, r20
 3c4:	80 83       	st	Z, r24
		break;
 3c6:	08 95       	ret
		case PORT_D:
			*data =READ_BIT(PIND,pinNumber);
 3c8:	80 b3       	in	r24, 0x10	; 16
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_read+0x62>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_read+0x5e>
 3d6:	81 70       	andi	r24, 0x01	; 1
 3d8:	fa 01       	movw	r30, r20
 3da:	80 83       	st	Z, r24
 3dc:	08 95       	ret

000003de <_exit>:
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
