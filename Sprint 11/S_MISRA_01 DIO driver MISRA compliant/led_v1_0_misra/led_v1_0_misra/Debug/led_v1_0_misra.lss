
led_v1_0_misra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000059e  00000632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800070  00800070  00000642  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000642  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001673  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a66  00000000  00000000  00001e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b64  00000000  00000000  00002899  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00003400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007dd  00000000  00000000  00003584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094a  00000000  00000000  00003d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000046ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  8a:	0c 94 cd 02 	jmp	0x59a	; 0x59a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
enm_button_error_t enm_button_error;     // Button error variable

const uint8 leds_size = GET_ARR_SIZE(leds);  // Size of the LED array

void app_init() {
	btnState = BUTTON_RELEASED;                // Initialize button state as released
  92:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <btnState>
	counter = COUNTER_INIT;                     // Initialize counter variable
  96:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <counter>
	enm_led_error = led_init(&leds[LED_1]);         // Initialize the first LED
  9a:	83 e6       	ldi	r24, 0x63	; 99
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 03 01 	call	0x206	; 0x206 <led_init>
  a2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <enm_led_error>
	enm_led_error = led_init(&leds[LED_2]);         // Initialize the second LED
  a6:	86 e6       	ldi	r24, 0x66	; 102
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 03 01 	call	0x206	; 0x206 <led_init>
  ae:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <enm_led_error>
	enm_led_error = led_init(&leds[LED_3]);         // Initialize the third LED
  b2:	89 e6       	ldi	r24, 0x69	; 105
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 03 01 	call	0x206	; 0x206 <led_init>
  ba:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <enm_led_error>
	enm_led_error = led_init(&leds[LED_4]);         // Initialize the fourth LED
  be:	8c e6       	ldi	r24, 0x6C	; 108
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 03 01 	call	0x206	; 0x206 <led_init>
  c6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <enm_led_error>

	if (enm_led_error != LED_SUCCESS) {
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	19 f0       	breq	.+6      	; 0xd4 <app_init+0x42>
		exit(enm_led_error);                     // Exit if LED initialization fails
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 cd 02 	call	0x59a	; 0x59a <_exit>
	}

	enm_button_error = button_init(button);      // Initialize the button
  d4:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
  d8:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
  dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
  e0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <button_init>
  e4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>

	if (enm_button_error != BUTTON_SUCCESS) {
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	19 f0       	breq	.+6      	; 0xf2 <app_init+0x60>
		exit(enm_button_error);                   // Exit if button initialization fails
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 cd 02 	call	0x59a	; 0x59a <_exit>
  f2:	08 95       	ret

000000f4 <app_start>:
	}
}

void app_start() {
	enm_button_error = button_read(button, &btnState);   // Read the button state
  f4:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
  f8:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
  fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
 100:	42 e7       	ldi	r20, 0x72	; 114
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	0e 94 db 00 	call	0x1b6	; 0x1b6 <button_read>
 108:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>

	if (enm_button_error == BUTTON_SUCCESS) {
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	f1 f5       	brne	.+124    	; 0x18c <app_start+0x98>
		if (btnState == BUTTON_PRESSED) {
 110:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <btnState>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	89 f5       	brne	.+98     	; 0x17a <app_start+0x86>
			counter++;                                 // Increment the counter
 118:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <counter>
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <counter>

			if (counter <= leds_size) {
 122:	85 30       	cpi	r24, 0x05	; 5
 124:	70 f4       	brcc	.+28     	; 0x142 <app_start+0x4e>
				enm_led_error = led_on(&leds[counter-1]);    // Turn on the corresponding LED
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	9c 01       	movw	r18, r24
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	82 0f       	add	r24, r18
 132:	93 1f       	adc	r25, r19
 134:	8d 59       	subi	r24, 0x9D	; 157
 136:	9f 4f       	sbci	r25, 0xFF	; 255
 138:	0e 94 24 01 	call	0x248	; 0x248 <led_on>
 13c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <enm_led_error>
 140:	13 c0       	rjmp	.+38     	; 0x168 <app_start+0x74>
				} else {
				if (counter > (leds_size * 2)) {
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	89 30       	cpi	r24, 0x09	; 9
 146:	91 05       	cpc	r25, r1
 148:	1c f0       	brlt	.+6      	; 0x150 <app_start+0x5c>
					counter = COUNTER_INIT;                     // Reset the counter
 14a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <counter>
 14e:	0c c0       	rjmp	.+24     	; 0x168 <app_start+0x74>
					} else {
					enm_led_error = led_off(&leds[counter-5]);  // Turn off a specific LED
 150:	05 97       	sbiw	r24, 0x05	; 5
 152:	9c 01       	movw	r18, r24
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	82 0f       	add	r24, r18
 15a:	93 1f       	adc	r25, r19
 15c:	8d 59       	subi	r24, 0x9D	; 157
 15e:	9f 4f       	sbci	r25, 0xFF	; 255
 160:	0e 94 3c 01 	call	0x278	; 0x278 <led_off>
 164:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <enm_led_error>
				}
			}

			if (enm_led_error != LED_SUCCESS) {
 168:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <enm_led_error>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	29 f0       	breq	.+10     	; 0x17a <app_start+0x86>
				counter--;                                      // Decrement the counter if LED control fails
 170:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <counter>
 174:	81 50       	subi	r24, 0x01	; 1
 176:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <counter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	81 ee       	ldi	r24, 0xE1	; 225
 17e:	94 e0       	ldi	r25, 0x04	; 4
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <app_start+0x8c>
 188:	00 c0       	rjmp	.+0      	; 0x18a <app_start+0x96>
 18a:	00 00       	nop
 18c:	2f e7       	ldi	r18, 0x7F	; 127
 18e:	88 e3       	ldi	r24, 0x38	; 56
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <app_start+0x9e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <app_start+0xa8>
 19c:	00 00       	nop
 19e:	08 95       	ret

000001a0 <button_init>:
 * Created: 6/6/2023 12:42:15 PM
 *  Author: Youssef Abbas
 */ 
#include "button_interface.h"

enm_button_error_t button_init(str_button_t str_button){
 1a0:	a8 2f       	mov	r26, r24
 1a2:	cb 01       	movw	r24, r22
	enm_button_error_t enm_button_error;
	enm_dio_error_t enm_dio_error;
	enm_button_error = BUTTON_NOT_COMBLETE;
	enm_dio_error = dio_init(str_button.str_dio,DIO_IN);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <dio_init>
	
	if (enm_dio_error != DIO_SUCCESS)
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	11 f0       	breq	.+4      	; 0x1b2 <button_init+0x12>
	{
		enm_button_error = BUTTON_INVALID_CONF;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret
	}else{
		enm_button_error = BUTTON_SUCCESS;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enm_button_error;
}
 1b4:	08 95       	ret

000001b6 <button_read>:
enm_button_error_t button_read(str_button_t str_button,enm_button_status_t *enm_button_status){
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	1f 92       	push	r1
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
 1c6:	36 2f       	mov	r19, r22
 1c8:	27 2f       	mov	r18, r23
 1ca:	18 2f       	mov	r17, r24
 1cc:	7a 01       	movw	r14, r20
		enm_button_error_t enm_button_error;
		enm_dio_error_t enm_dio_error;
		enm_dio_value_t btn_temp;
		enm_button_error = BUTTON_NOT_COMBLETE;
		enm_dio_error = dio_read_pin(str_button.str_dio,&btn_temp);
 1ce:	be 01       	movw	r22, r28
 1d0:	6f 5f       	subi	r22, 0xFF	; 255
 1d2:	7f 4f       	sbci	r23, 0xFF	; 255
 1d4:	83 2f       	mov	r24, r19
 1d6:	92 2f       	mov	r25, r18
 1d8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <dio_read_pin>
		
		if (enm_dio_error != DIO_SUCCESS)
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	59 f4       	brne	.+22     	; 0x1f6 <button_read+0x40>
		{
			enm_button_error = BUTTON_INVALID_CONF;
		}
		else
		{
			if (str_button.enm_button_active == btn_temp)
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	18 13       	cpse	r17, r24
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <button_read+0x38>
			{
				*enm_button_status = BUTTON_PRESSED;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	f7 01       	movw	r30, r14
 1ea:	80 83       	st	Z, r24
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <button_read+0x42>
			}
			else
			{
				*enm_button_status = BUTTON_RELEASED;
 1ee:	f7 01       	movw	r30, r14
 1f0:	10 82       	st	Z, r1
			}
			enm_button_error = BUTTON_SUCCESS;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <button_read+0x42>
		enm_button_error = BUTTON_NOT_COMBLETE;
		enm_dio_error = dio_read_pin(str_button.str_dio,&btn_temp);
		
		if (enm_dio_error != DIO_SUCCESS)
		{
			enm_button_error = BUTTON_INVALID_CONF;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
				*enm_button_status = BUTTON_RELEASED;
			}
			enm_button_error = BUTTON_SUCCESS;
		}
		return enm_button_error;
 1f8:	0f 90       	pop	r0
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	08 95       	ret

00000206 <led_init>:
 *
 * Created: 6/6/2023 12:42:15 PM
 *  Author: Youssef Abbas
 */ 
#include "led_interface.h"
enm_led_error_t led_init(str_led_t* led){
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
	// Rule 18.1, requires that all declarations should be at the top of the function or file scope.
	enm_led_error_t enm_led_error;
	enm_dio_error_t enm_dio_error;
	enm_led_error = LED_NOT_COMBLETE;
	// check if it initialized before 
	if (led->enm_led_status < LED_NOT_INIT)
 20a:	fc 01       	movw	r30, r24
 20c:	22 81       	ldd	r18, Z+2	; 0x02
 20e:	22 30       	cpi	r18, 0x02	; 2
 210:	98 f0       	brcs	.+38     	; 0x238 <led_init+0x32>
 212:	ec 01       	movw	r28, r24
	{
		enm_led_error = LED_ALLREADY_INIT;
	}
	else 
	{
		led->enm_led_status = LED_NOT_INIT;	
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	82 83       	std	Z+2, r24	; 0x02
		enm_dio_error = dio_init(led->str_dio,DIO_OUT);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	80 81       	ld	r24, Z
 21c:	91 81       	ldd	r25, Z+1	; 0x01
 21e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <dio_init>
		// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
		if (enm_dio_error != DIO_SUCCESS)
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	59 f4       	brne	.+22     	; 0x23c <led_init+0x36>
		{
			enm_led_error = LED_INVALID_CONF;
		}
		else
		{
			enm_dio_error = dio_write_pin(led->str_dio,DIO_LOW);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	88 81       	ld	r24, Y
 22a:	99 81       	ldd	r25, Y+1	; 0x01
 22c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <dio_write_pin>
		
			if (enm_dio_error != DIO_SUCCESS)
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	31 f4       	brne	.+12     	; 0x240 <led_init+0x3a>
			{
				enm_led_error = LED_FAILED;
			}else{
				led->enm_led_status = LED_OFF;
 234:	1a 82       	std	Y+2, r1	; 0x02
 236:	05 c0       	rjmp	.+10     	; 0x242 <led_init+0x3c>
	enm_dio_error_t enm_dio_error;
	enm_led_error = LED_NOT_COMBLETE;
	// check if it initialized before 
	if (led->enm_led_status < LED_NOT_INIT)
	{
		enm_led_error = LED_ALLREADY_INIT;
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	03 c0       	rjmp	.+6      	; 0x242 <led_init+0x3c>
		led->enm_led_status = LED_NOT_INIT;	
		enm_dio_error = dio_init(led->str_dio,DIO_OUT);
		// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
		if (enm_dio_error != DIO_SUCCESS)
		{
			enm_led_error = LED_INVALID_CONF;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	01 c0       	rjmp	.+2      	; 0x242 <led_init+0x3c>
		{
			enm_dio_error = dio_write_pin(led->str_dio,DIO_LOW);
		
			if (enm_dio_error != DIO_SUCCESS)
			{
				enm_led_error = LED_FAILED;
 240:	82 e0       	ldi	r24, 0x02	; 2
				enm_led_error = LED_SUCCESS;
			}
		}
	}
	return enm_led_error;
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <led_on>:
enm_led_error_t led_on(str_led_t*led){
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
	// Rule 18.1, requires that all declarations should be at the top of the function or file scope.
	enm_led_error_t enm_led_error;
	enm_dio_error_t enm_dio_error;
	enm_led_error = LED_NOT_COMBLETE;
	// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
	if (led->enm_led_status >= LED_NOT_INIT)
 24c:	fc 01       	movw	r30, r24
 24e:	22 81       	ldd	r18, Z+2	; 0x02
 250:	22 30       	cpi	r18, 0x02	; 2
 252:	20 f0       	brcs	.+8      	; 0x25c <led_on+0x14>
	{
		led->enm_led_status = LED_NOT_INIT;
 254:	22 e0       	ldi	r18, 0x02	; 2
 256:	22 83       	std	Z+2, r18	; 0x02
		enm_led_error = LED_INVALID_CONF;
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0b c0       	rjmp	.+22     	; 0x272 <led_on+0x2a>
 25c:	ec 01       	movw	r28, r24
	}
	else
	{
		enm_dio_error = dio_write_pin(led->str_dio,DIO_HIGH);
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	80 81       	ld	r24, Z
 262:	91 81       	ldd	r25, Z+1	; 0x01
 264:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <dio_write_pin>
		
		if (enm_dio_error != DIO_SUCCESS)
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	11 f4       	brne	.+4      	; 0x270 <led_on+0x28>
		{
			enm_led_error = LED_FAILED;
		}
		else
		{
			led->enm_led_status = LED_ON;
 26c:	8a 83       	std	Y+2, r24	; 0x02
 26e:	01 c0       	rjmp	.+2      	; 0x272 <led_on+0x2a>
	{
		enm_dio_error = dio_write_pin(led->str_dio,DIO_HIGH);
		
		if (enm_dio_error != DIO_SUCCESS)
		{
			enm_led_error = LED_FAILED;
 270:	82 e0       	ldi	r24, 0x02	; 2
			led->enm_led_status = LED_ON;
			enm_led_error = LED_SUCCESS;
		}
	}
	return enm_led_error;
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <led_off>:
enm_led_error_t led_off(str_led_t*led){
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
	// Rule 18.1, requires that all declarations should be at the top of the function or file scope.
	enm_led_error_t enm_led_error;
	enm_dio_error_t enm_dio_error;
	enm_led_error = LED_NOT_COMBLETE;
	// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
	if (led->enm_led_status >= LED_NOT_INIT)
 27c:	fc 01       	movw	r30, r24
 27e:	22 81       	ldd	r18, Z+2	; 0x02
 280:	22 30       	cpi	r18, 0x02	; 2
 282:	20 f0       	brcs	.+8      	; 0x28c <led_off+0x14>
	{
		led->enm_led_status = LED_NOT_INIT;
 284:	22 e0       	ldi	r18, 0x02	; 2
 286:	22 83       	std	Z+2, r18	; 0x02
		enm_led_error = LED_INVALID_CONF;
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0b c0       	rjmp	.+22     	; 0x2a2 <led_off+0x2a>
 28c:	ec 01       	movw	r28, r24
	}
	else
	{
		enm_dio_error = dio_write_pin(led->str_dio,DIO_LOW);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	91 81       	ldd	r25, Z+1	; 0x01
 294:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <dio_write_pin>
		
		if (enm_dio_error != DIO_SUCCESS)
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <led_off+0x28>
		{
			enm_led_error = LED_FAILED;
		}
		else
		{
			led->enm_led_status = LED_OFF;
 29c:	1a 82       	std	Y+2, r1	; 0x02
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <led_off+0x2a>
	{
		enm_dio_error = dio_write_pin(led->str_dio,DIO_LOW);
		
		if (enm_dio_error != DIO_SUCCESS)
		{
			enm_led_error = LED_FAILED;
 2a0:	82 e0       	ldi	r24, 0x02	; 2
			led->enm_led_status = LED_OFF;
			enm_led_error = LED_SUCCESS;
		}
	}
	return enm_led_error;
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <main>:

#include "application/app.h"

int main(void)
{
	app_init();
 2a8:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	    /* Replace with your application code */
    while (1) 
    {
		app_start();
 2ac:	0e 94 7a 00 	call	0xf4	; 0xf4 <app_start>
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac <main+0x4>

000002b2 <dio_init>:
				break;
		}
		
	}
	return enm_dio_error;
}
 2b2:	98 30       	cpi	r25, 0x08	; 8
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <dio_init+0x6>
 2b6:	89 c0       	rjmp	.+274    	; 0x3ca <dio_init+0x118>
 2b8:	85 30       	cpi	r24, 0x05	; 5
 2ba:	08 f0       	brcs	.+2      	; 0x2be <dio_init+0xc>
 2bc:	88 c0       	rjmp	.+272    	; 0x3ce <dio_init+0x11c>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	39 f1       	breq	.+78     	; 0x310 <dio_init+0x5e>
 2c2:	38 f0       	brcs	.+14     	; 0x2d2 <dio_init+0x20>
 2c4:	82 30       	cpi	r24, 0x02	; 2
 2c6:	09 f4       	brne	.+2      	; 0x2ca <dio_init+0x18>
 2c8:	42 c0       	rjmp	.+132    	; 0x34e <dio_init+0x9c>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <dio_init+0x1e>
 2ce:	5e c0       	rjmp	.+188    	; 0x38c <dio_init+0xda>
 2d0:	80 c0       	rjmp	.+256    	; 0x3d2 <dio_init+0x120>
 2d2:	61 11       	cpse	r22, r1
 2d4:	0f c0       	rjmp	.+30     	; 0x2f4 <dio_init+0x42>
 2d6:	4a b3       	in	r20, 0x1a	; 26
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	b9 01       	movw	r22, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <dio_init+0x32>
 2e0:	66 0f       	add	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	9a 95       	dec	r25
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <dio_init+0x2e>
 2e8:	cb 01       	movw	r24, r22
 2ea:	80 95       	com	r24
 2ec:	84 23       	and	r24, r20
 2ee:	8a bb       	out	0x1a, r24	; 26
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	08 95       	ret
 2f4:	4a b3       	in	r20, 0x1a	; 26
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	b9 01       	movw	r22, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <dio_init+0x50>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	9a 95       	dec	r25
 304:	e2 f7       	brpl	.-8      	; 0x2fe <dio_init+0x4c>
 306:	cb 01       	movw	r24, r22
 308:	84 2b       	or	r24, r20
 30a:	8a bb       	out	0x1a, r24	; 26
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	08 95       	ret
 310:	61 11       	cpse	r22, r1
 312:	0f c0       	rjmp	.+30     	; 0x332 <dio_init+0x80>
 314:	47 b3       	in	r20, 0x17	; 23
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	b9 01       	movw	r22, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <dio_init+0x70>
 31e:	66 0f       	add	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	9a 95       	dec	r25
 324:	e2 f7       	brpl	.-8      	; 0x31e <dio_init+0x6c>
 326:	cb 01       	movw	r24, r22
 328:	80 95       	com	r24
 32a:	84 23       	and	r24, r20
 32c:	87 bb       	out	0x17, r24	; 23
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret
 332:	47 b3       	in	r20, 0x17	; 23
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	b9 01       	movw	r22, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <dio_init+0x8e>
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	9a 95       	dec	r25
 342:	e2 f7       	brpl	.-8      	; 0x33c <dio_init+0x8a>
 344:	cb 01       	movw	r24, r22
 346:	84 2b       	or	r24, r20
 348:	87 bb       	out	0x17, r24	; 23
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	08 95       	ret
 34e:	61 11       	cpse	r22, r1
 350:	0f c0       	rjmp	.+30     	; 0x370 <dio_init+0xbe>
 352:	44 b3       	in	r20, 0x14	; 20
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	b9 01       	movw	r22, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <dio_init+0xae>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	9a 95       	dec	r25
 362:	e2 f7       	brpl	.-8      	; 0x35c <dio_init+0xaa>
 364:	cb 01       	movw	r24, r22
 366:	80 95       	com	r24
 368:	84 23       	and	r24, r20
 36a:	84 bb       	out	0x14, r24	; 20
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	08 95       	ret
 370:	44 b3       	in	r20, 0x14	; 20
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <dio_init+0xcc>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	9a 95       	dec	r25
 380:	e2 f7       	brpl	.-8      	; 0x37a <dio_init+0xc8>
 382:	cb 01       	movw	r24, r22
 384:	84 2b       	or	r24, r20
 386:	84 bb       	out	0x14, r24	; 20
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	08 95       	ret
 38c:	61 11       	cpse	r22, r1
 38e:	0f c0       	rjmp	.+30     	; 0x3ae <dio_init+0xfc>
 390:	41 b3       	in	r20, 0x11	; 17
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	b9 01       	movw	r22, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <dio_init+0xec>
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	9a 95       	dec	r25
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <dio_init+0xe8>
 3a2:	cb 01       	movw	r24, r22
 3a4:	80 95       	com	r24
 3a6:	84 23       	and	r24, r20
 3a8:	81 bb       	out	0x11, r24	; 17
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret
 3ae:	41 b3       	in	r20, 0x11	; 17
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <dio_init+0x10a>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	9a 95       	dec	r25
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <dio_init+0x106>
 3c0:	cb 01       	movw	r24, r22
 3c2:	84 2b       	or	r24, r20
 3c4:	81 bb       	out	0x11, r24	; 17
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	08 95       	ret
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	08 95       	ret
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	08 95       	ret
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret

000003d6 <dio_write_pin>:
 3d6:	98 30       	cpi	r25, 0x08	; 8
 3d8:	08 f0       	brcs	.+2      	; 0x3dc <dio_write_pin+0x6>
 3da:	89 c0       	rjmp	.+274    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 3dc:	85 30       	cpi	r24, 0x05	; 5
 3de:	08 f0       	brcs	.+2      	; 0x3e2 <dio_write_pin+0xc>
 3e0:	88 c0       	rjmp	.+272    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	39 f1       	breq	.+78     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3e6:	38 f0       	brcs	.+14     	; 0x3f6 <dio_write_pin+0x20>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	09 f4       	brne	.+2      	; 0x3ee <dio_write_pin+0x18>
 3ec:	42 c0       	rjmp	.+132    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 3ee:	83 30       	cpi	r24, 0x03	; 3
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <dio_write_pin+0x1e>
 3f2:	5e c0       	rjmp	.+188    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 3f4:	80 c0       	rjmp	.+256    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 3f6:	61 11       	cpse	r22, r1
 3f8:	0f c0       	rjmp	.+30     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3fa:	4b b3       	in	r20, 0x1b	; 27
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	b9 01       	movw	r22, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	66 0f       	add	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	9a 95       	dec	r25
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	cb 01       	movw	r24, r22
 40e:	80 95       	com	r24
 410:	84 23       	and	r24, r20
 412:	8b bb       	out	0x1b, r24	; 27
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	08 95       	ret
 418:	4b b3       	in	r20, 0x1b	; 27
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	9a 95       	dec	r25
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	cb 01       	movw	r24, r22
 42c:	84 2b       	or	r24, r20
 42e:	8b bb       	out	0x1b, r24	; 27
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	08 95       	ret
 434:	61 11       	cpse	r22, r1
 436:	0f c0       	rjmp	.+30     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 438:	48 b3       	in	r20, 0x18	; 24
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	b9 01       	movw	r22, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	9a 95       	dec	r25
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	cb 01       	movw	r24, r22
 44c:	80 95       	com	r24
 44e:	84 23       	and	r24, r20
 450:	88 bb       	out	0x18, r24	; 24
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	08 95       	ret
 456:	48 b3       	in	r20, 0x18	; 24
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	b9 01       	movw	r22, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	9a 95       	dec	r25
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	cb 01       	movw	r24, r22
 46a:	84 2b       	or	r24, r20
 46c:	88 bb       	out	0x18, r24	; 24
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	08 95       	ret
 472:	61 11       	cpse	r22, r1
 474:	0f c0       	rjmp	.+30     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 476:	45 b3       	in	r20, 0x15	; 21
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	b9 01       	movw	r22, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	9a 95       	dec	r25
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	cb 01       	movw	r24, r22
 48a:	80 95       	com	r24
 48c:	84 23       	and	r24, r20
 48e:	85 bb       	out	0x15, r24	; 21
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	08 95       	ret
 494:	45 b3       	in	r20, 0x15	; 21
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	b9 01       	movw	r22, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	9a 95       	dec	r25
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	cb 01       	movw	r24, r22
 4a8:	84 2b       	or	r24, r20
 4aa:	85 bb       	out	0x15, r24	; 21
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	08 95       	ret
 4b0:	61 11       	cpse	r22, r1
 4b2:	0f c0       	rjmp	.+30     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4b4:	42 b3       	in	r20, 0x12	; 18
 4b6:	21 e0       	ldi	r18, 0x01	; 1
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	b9 01       	movw	r22, r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	9a 95       	dec	r25
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4c6:	cb 01       	movw	r24, r22
 4c8:	80 95       	com	r24
 4ca:	84 23       	and	r24, r20
 4cc:	82 bb       	out	0x12, r24	; 18
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	08 95       	ret
 4d2:	42 b3       	in	r20, 0x12	; 18
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	b9 01       	movw	r22, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	9a 95       	dec	r25
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4e4:	cb 01       	movw	r24, r22
 4e6:	84 2b       	or	r24, r20
 4e8:	82 bb       	out	0x12, r24	; 18
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	08 95       	ret
 4ee:	83 e0       	ldi	r24, 0x03	; 3
 4f0:	08 95       	ret
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	08 95       	ret
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret

000004fa <dio_read_pin>:
enm_dio_error_t dio_read_pin(str_dio_t dio_pin,uint8 *data){
	// Rule 18.1, requires that all declarations should be at the top of the function or file scope.
	enm_dio_error_t enm_dio_error = DIO_NOT_COMPLETE;
	// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
	// (OP_1 > OP_2) return 0 if it false and 1 if it true
	if ((dio_pin.pin > 7) || (dio_pin.port > 4) )
 4fa:	98 30       	cpi	r25, 0x08	; 8
 4fc:	08 f0       	brcs	.+2      	; 0x500 <dio_read_pin+0x6>
 4fe:	47 c0       	rjmp	.+142    	; 0x58e <dio_read_pin+0x94>
 500:	85 30       	cpi	r24, 0x05	; 5
 502:	08 f0       	brcs	.+2      	; 0x506 <dio_read_pin+0xc>
 504:	46 c0       	rjmp	.+140    	; 0x592 <dio_read_pin+0x98>
		enm_dio_error = DIO_VALUE_ERROR;
	}
	else
	{
		enm_dio_error = DIO_SUCCESS;
		switch(dio_pin.port){
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	a9 f0       	breq	.+42     	; 0x534 <dio_read_pin+0x3a>
 50a:	28 f0       	brcs	.+10     	; 0x516 <dio_read_pin+0x1c>
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	09 f1       	breq	.+66     	; 0x552 <dio_read_pin+0x58>
 510:	83 30       	cpi	r24, 0x03	; 3
 512:	71 f1       	breq	.+92     	; 0x570 <dio_read_pin+0x76>
 514:	40 c0       	rjmp	.+128    	; 0x596 <dio_read_pin+0x9c>
			case DIO_PORTA:
				*data = READ_BIT(DIO_PINA_REG,dio_pin.pin);
 516:	89 b3       	in	r24, 0x19	; 25
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	a9 01       	movw	r20, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <dio_read_pin+0x2a>
 520:	55 95       	asr	r21
 522:	47 95       	ror	r20
 524:	9a 95       	dec	r25
 526:	e2 f7       	brpl	.-8      	; 0x520 <dio_read_pin+0x26>
 528:	ca 01       	movw	r24, r20
 52a:	81 70       	andi	r24, 0x01	; 1
 52c:	fb 01       	movw	r30, r22
 52e:	80 83       	st	Z, r24
	{
		enm_dio_error = DIO_VALUE_ERROR;
	}
	else
	{
		enm_dio_error = DIO_SUCCESS;
 530:	81 e0       	ldi	r24, 0x01	; 1
		switch(dio_pin.port){
			case DIO_PORTA:
				*data = READ_BIT(DIO_PINA_REG,dio_pin.pin);
				break;
 532:	08 95       	ret
			case DIO_PORTB:
				*data =READ_BIT(DIO_PINB_REG,dio_pin.pin);
 534:	86 b3       	in	r24, 0x16	; 22
 536:	28 2f       	mov	r18, r24
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	a9 01       	movw	r20, r18
 53c:	02 c0       	rjmp	.+4      	; 0x542 <dio_read_pin+0x48>
 53e:	55 95       	asr	r21
 540:	47 95       	ror	r20
 542:	9a 95       	dec	r25
 544:	e2 f7       	brpl	.-8      	; 0x53e <dio_read_pin+0x44>
 546:	ca 01       	movw	r24, r20
 548:	81 70       	andi	r24, 0x01	; 1
 54a:	fb 01       	movw	r30, r22
 54c:	80 83       	st	Z, r24
	{
		enm_dio_error = DIO_VALUE_ERROR;
	}
	else
	{
		enm_dio_error = DIO_SUCCESS;
 54e:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
				*data = READ_BIT(DIO_PINA_REG,dio_pin.pin);
				break;
			case DIO_PORTB:
				*data =READ_BIT(DIO_PINB_REG,dio_pin.pin);
				break;
 550:	08 95       	ret
			case DIO_PORTC:
				*data =READ_BIT(DIO_PINC_REG,dio_pin.pin);
 552:	83 b3       	in	r24, 0x13	; 19
 554:	28 2f       	mov	r18, r24
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	a9 01       	movw	r20, r18
 55a:	02 c0       	rjmp	.+4      	; 0x560 <dio_read_pin+0x66>
 55c:	55 95       	asr	r21
 55e:	47 95       	ror	r20
 560:	9a 95       	dec	r25
 562:	e2 f7       	brpl	.-8      	; 0x55c <dio_read_pin+0x62>
 564:	ca 01       	movw	r24, r20
 566:	81 70       	andi	r24, 0x01	; 1
 568:	fb 01       	movw	r30, r22
 56a:	80 83       	st	Z, r24
	{
		enm_dio_error = DIO_VALUE_ERROR;
	}
	else
	{
		enm_dio_error = DIO_SUCCESS;
 56c:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
				*data =READ_BIT(DIO_PINB_REG,dio_pin.pin);
				break;
			case DIO_PORTC:
				*data =READ_BIT(DIO_PINC_REG,dio_pin.pin);
				break;
 56e:	08 95       	ret
			case DIO_PORTD:
				*data =READ_BIT(DIO_PIND_REG,dio_pin.pin);
 570:	80 b3       	in	r24, 0x10	; 16
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	a9 01       	movw	r20, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <dio_read_pin+0x84>
 57a:	55 95       	asr	r21
 57c:	47 95       	ror	r20
 57e:	9a 95       	dec	r25
 580:	e2 f7       	brpl	.-8      	; 0x57a <dio_read_pin+0x80>
 582:	ca 01       	movw	r24, r20
 584:	81 70       	andi	r24, 0x01	; 1
 586:	fb 01       	movw	r30, r22
 588:	80 83       	st	Z, r24
	{
		enm_dio_error = DIO_VALUE_ERROR;
	}
	else
	{
		enm_dio_error = DIO_SUCCESS;
 58a:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
				*data =READ_BIT(DIO_PINC_REG,dio_pin.pin);
				break;
			case DIO_PORTD:
				*data =READ_BIT(DIO_PIND_REG,dio_pin.pin);
				break;
 58c:	08 95       	ret
	enm_dio_error_t enm_dio_error = DIO_NOT_COMPLETE;
	// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
	// (OP_1 > OP_2) return 0 if it false and 1 if it true
	if ((dio_pin.pin > 7) || (dio_pin.port > 4) )
	{
		enm_dio_error = DIO_VALUE_ERROR;
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	08 95       	ret
 592:	83 e0       	ldi	r24, 0x03	; 3
 594:	08 95       	ret
			case DIO_PORTD:
				*data =READ_BIT(DIO_PIND_REG,dio_pin.pin);
				break;
			default:
				// Rule 12.2, which requires that all switch statements should have a default case.
				enm_dio_error = DIO_FAIL;
 596:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
		
	}
	return enm_dio_error;
}
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
