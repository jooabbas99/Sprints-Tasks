
led_v1_0_misra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000562  000005f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  00000606  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000606  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152c  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f7  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a75  00000000  00000000  000026a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  0000311c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078a  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ba  00000000  00000000  00003a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  8a:	0c 94 af 02 	jmp	0x55e	; 0x55e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
extern str_button_t button;
uint8  counter;
enm_button_status_t btnState;
const leds_size = GET_ARR_SIZE(leds);
void app_init(){
	btnState = BUTTON_RELEASED;
  92:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
	counter = COUNTER_INIT;
  96:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <counter>
	led_init(&leds[0]);
  9a:	83 e6       	ldi	r24, 0x63	; 99
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <led_init>
	led_init(&leds[1]);
  a2:	86 e6       	ldi	r24, 0x66	; 102
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <led_init>
	led_init(&leds[2]);
  aa:	89 e6       	ldi	r24, 0x69	; 105
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 e5 00 	call	0x1ca	; 0x1ca <led_init>
	led_init(&leds[3]);
  b2:	8c e6       	ldi	r24, 0x6C	; 108
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <led_init>
	button_init(button);
  ba:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  c6:	0e 94 b2 00 	call	0x164	; 0x164 <button_init>
  ca:	08 95       	ret

000000cc <app_start>:
}
void app_start(){
	button_read(button,&btnState);
  cc:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  d8:	40 e7       	ldi	r20, 0x70	; 112
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	0e 94 bd 00 	call	0x17a	; 0x17a <button_read>
		if (btnState == BUTTON_PRESSED)
  e0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	e9 f5       	brne	.+122    	; 0x162 <app_start+0x96>
		{
			counter ++;
  e8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <counter>
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <counter>
			if (counter <= leds_size)
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	85 30       	cpi	r24, 0x05	; 5
  f6:	91 05       	cpc	r25, r1
  f8:	5c f4       	brge	.+22     	; 0x110 <app_start+0x44>
			{
				led_on(&leds[counter-1]);
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	9c 01       	movw	r18, r24
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	82 0f       	add	r24, r18
 104:	93 1f       	adc	r25, r19
 106:	8d 59       	subi	r24, 0x9D	; 157
 108:	9f 4f       	sbci	r25, 0xFF	; 255
 10a:	0e 94 06 01 	call	0x20c	; 0x20c <led_on>
 10e:	10 c0       	rjmp	.+32     	; 0x130 <app_start+0x64>
			}
			else
			{
				if (counter > leds_size*2)
 110:	89 30       	cpi	r24, 0x09	; 9
 112:	91 05       	cpc	r25, r1
 114:	1c f0       	brlt	.+6      	; 0x11c <app_start+0x50>
				{
					counter = 0;
 116:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <counter>
 11a:	0a c0       	rjmp	.+20     	; 0x130 <app_start+0x64>
				}
				else 
				{
					led_off(&leds[counter-5]);
 11c:	05 97       	sbiw	r24, 0x05	; 5
 11e:	9c 01       	movw	r18, r24
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	8d 59       	subi	r24, 0x9D	; 157
 12a:	9f 4f       	sbci	r25, 0xFF	; 255
 12c:	0e 94 1e 01 	call	0x23c	; 0x23c <led_off>
					
				}
				
			}
			button_read(button,&btnState);
 130:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 134:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 138:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 13c:	40 e7       	ldi	r20, 0x70	; 112
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	0e 94 bd 00 	call	0x17a	; 0x17a <button_read>
			while(btnState == BUTTON_PRESSED){
 144:	0a c0       	rjmp	.+20     	; 0x15a <app_start+0x8e>
				button_read(button,&btnState);
 146:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 152:	40 e7       	ldi	r20, 0x70	; 112
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	0e 94 bd 00 	call	0x17a	; 0x17a <button_read>
					
				}
				
			}
			button_read(button,&btnState);
			while(btnState == BUTTON_PRESSED){
 15a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	91 f3       	breq	.-28     	; 0x146 <app_start+0x7a>
 162:	08 95       	ret

00000164 <button_init>:
 * Created: 6/6/2023 12:42:15 PM
 *  Author: Youssef Abbas
 */ 
#include "button_interface.h"

enm_button_error_t button_init(str_button_t str_button){
 164:	a8 2f       	mov	r26, r24
 166:	cb 01       	movw	r24, r22
	enm_button_error_t enm_button_error;
	enm_dio_error_t enm_dio_error;
	enm_button_error = BUTTON_NOT_COMBLETE;
	enm_dio_error = dio_init(str_button.str_dio,DIO_IN);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	0e 94 3b 01 	call	0x276	; 0x276 <dio_init>
	
	if (enm_dio_error != DIO_SUCCESS)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	11 f0       	breq	.+4      	; 0x176 <button_init+0x12>
	{
		enm_button_error = BUTTON_INVALID_CONF;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
	}else{
		enm_button_error = BUTTON_SUCCESS;
 176:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enm_button_error;
}
 178:	08 95       	ret

0000017a <button_read>:
enm_button_error_t button_read(str_button_t str_button,enm_button_status_t *enm_button_status){
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	1f 92       	push	r1
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	36 2f       	mov	r19, r22
 18c:	27 2f       	mov	r18, r23
 18e:	18 2f       	mov	r17, r24
 190:	7a 01       	movw	r14, r20
		enm_button_error_t enm_button_error;
		enm_dio_error_t enm_dio_error;
		enm_dio_value_t btn_temp;
		enm_button_error = BUTTON_NOT_COMBLETE;
		enm_dio_error = dio_read_pin(str_button.str_dio,&btn_temp);
 192:	be 01       	movw	r22, r28
 194:	6f 5f       	subi	r22, 0xFF	; 255
 196:	7f 4f       	sbci	r23, 0xFF	; 255
 198:	83 2f       	mov	r24, r19
 19a:	92 2f       	mov	r25, r18
 19c:	0e 94 5f 02 	call	0x4be	; 0x4be <dio_read_pin>
		
		if (enm_dio_error != DIO_SUCCESS)
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	59 f4       	brne	.+22     	; 0x1ba <button_read+0x40>
		{
			enm_button_error = BUTTON_INVALID_CONF;
		}
		else
		{
			if (str_button.enm_button_active == btn_temp)
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	18 13       	cpse	r17, r24
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <button_read+0x38>
			{
				*enm_button_status = BUTTON_PRESSED;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	f7 01       	movw	r30, r14
 1ae:	80 83       	st	Z, r24
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <button_read+0x42>
			}
			else
			{
				*enm_button_status = BUTTON_RELEASED;
 1b2:	f7 01       	movw	r30, r14
 1b4:	10 82       	st	Z, r1
			}
			enm_button_error = BUTTON_SUCCESS;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <button_read+0x42>
		enm_button_error = BUTTON_NOT_COMBLETE;
		enm_dio_error = dio_read_pin(str_button.str_dio,&btn_temp);
		
		if (enm_dio_error != DIO_SUCCESS)
		{
			enm_button_error = BUTTON_INVALID_CONF;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
				*enm_button_status = BUTTON_RELEASED;
			}
			enm_button_error = BUTTON_SUCCESS;
		}
		return enm_button_error;
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	08 95       	ret

000001ca <led_init>:
 *
 * Created: 6/6/2023 12:42:15 PM
 *  Author: Youssef Abbas
 */ 
#include "led_interface.h"
enm_led_error_t led_init(str_led_t* led){
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
	// Rule 18.1, requires that all declarations should be at the top of the function or file scope.
	enm_led_error_t enm_led_error;
	enm_dio_error_t enm_dio_error;
	enm_led_error = LED_NOT_COMBLETE;
	// check if it initialized before 
	if (led->enm_led_status < LED_NOT_INIT)
 1ce:	fc 01       	movw	r30, r24
 1d0:	22 81       	ldd	r18, Z+2	; 0x02
 1d2:	22 30       	cpi	r18, 0x02	; 2
 1d4:	98 f0       	brcs	.+38     	; 0x1fc <led_init+0x32>
 1d6:	ec 01       	movw	r28, r24
	{
		enm_led_error = LED_ALLREADY_INIT;
	}
	else 
	{
		led->enm_led_status = LED_NOT_INIT;	
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	82 83       	std	Z+2, r24	; 0x02
		enm_dio_error = dio_init(led->str_dio,DIO_OUT);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	0e 94 3b 01 	call	0x276	; 0x276 <dio_init>
		// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
		if (enm_dio_error != DIO_SUCCESS)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <led_init+0x36>
		{
			enm_led_error = LED_INVALID_CONF;
		}
		else
		{
			enm_dio_error = dio_write_pin(led->str_dio,DIO_LOW);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	88 81       	ld	r24, Y
 1ee:	99 81       	ldd	r25, Y+1	; 0x01
 1f0:	0e 94 cd 01 	call	0x39a	; 0x39a <dio_write_pin>
		
			if (enm_dio_error != DIO_SUCCESS)
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	31 f4       	brne	.+12     	; 0x204 <led_init+0x3a>
			{
				enm_led_error = LED_FAILED;
			}else{
				led->enm_led_status = LED_OFF;
 1f8:	1a 82       	std	Y+2, r1	; 0x02
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <led_init+0x3c>
	enm_dio_error_t enm_dio_error;
	enm_led_error = LED_NOT_COMBLETE;
	// check if it initialized before 
	if (led->enm_led_status < LED_NOT_INIT)
	{
		enm_led_error = LED_ALLREADY_INIT;
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <led_init+0x3c>
		led->enm_led_status = LED_NOT_INIT;	
		enm_dio_error = dio_init(led->str_dio,DIO_OUT);
		// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
		if (enm_dio_error != DIO_SUCCESS)
		{
			enm_led_error = LED_INVALID_CONF;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	01 c0       	rjmp	.+2      	; 0x206 <led_init+0x3c>
		{
			enm_dio_error = dio_write_pin(led->str_dio,DIO_LOW);
		
			if (enm_dio_error != DIO_SUCCESS)
			{
				enm_led_error = LED_FAILED;
 204:	82 e0       	ldi	r24, 0x02	; 2
				enm_led_error = LED_SUCCESS;
			}
		}
	}
	return enm_led_error;
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <led_on>:
enm_led_error_t led_on(str_led_t*led){
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
	// Rule 18.1, requires that all declarations should be at the top of the function or file scope.
	enm_led_error_t enm_led_error;
	enm_dio_error_t enm_dio_error;
	enm_led_error = LED_NOT_COMBLETE;
	// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
	if (led->enm_led_status >= LED_NOT_INIT)
 210:	fc 01       	movw	r30, r24
 212:	22 81       	ldd	r18, Z+2	; 0x02
 214:	22 30       	cpi	r18, 0x02	; 2
 216:	20 f0       	brcs	.+8      	; 0x220 <led_on+0x14>
	{
		led->enm_led_status = LED_NOT_INIT;
 218:	22 e0       	ldi	r18, 0x02	; 2
 21a:	22 83       	std	Z+2, r18	; 0x02
		enm_led_error = LED_INVALID_CONF;
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0b c0       	rjmp	.+22     	; 0x236 <led_on+0x2a>
 220:	ec 01       	movw	r28, r24
	}
	else
	{
		enm_dio_error = dio_write_pin(led->str_dio,DIO_HIGH);
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	80 81       	ld	r24, Z
 226:	91 81       	ldd	r25, Z+1	; 0x01
 228:	0e 94 cd 01 	call	0x39a	; 0x39a <dio_write_pin>
		
		if (enm_dio_error != DIO_SUCCESS)
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	11 f4       	brne	.+4      	; 0x234 <led_on+0x28>
		{
			enm_led_error = LED_FAILED;
		}
		else
		{
			led->enm_led_status = LED_ON;
 230:	8a 83       	std	Y+2, r24	; 0x02
 232:	01 c0       	rjmp	.+2      	; 0x236 <led_on+0x2a>
	{
		enm_dio_error = dio_write_pin(led->str_dio,DIO_HIGH);
		
		if (enm_dio_error != DIO_SUCCESS)
		{
			enm_led_error = LED_FAILED;
 234:	82 e0       	ldi	r24, 0x02	; 2
			led->enm_led_status = LED_ON;
			enm_led_error = LED_SUCCESS;
		}
	}
	return enm_led_error;
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <led_off>:
enm_led_error_t led_off(str_led_t*led){
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
	// Rule 18.1, requires that all declarations should be at the top of the function or file scope.
	enm_led_error_t enm_led_error;
	enm_dio_error_t enm_dio_error;
	enm_led_error = LED_NOT_COMBLETE;
	// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
	if (led->enm_led_status >= LED_NOT_INIT)
 240:	fc 01       	movw	r30, r24
 242:	22 81       	ldd	r18, Z+2	; 0x02
 244:	22 30       	cpi	r18, 0x02	; 2
 246:	20 f0       	brcs	.+8      	; 0x250 <led_off+0x14>
	{
		led->enm_led_status = LED_NOT_INIT;
 248:	22 e0       	ldi	r18, 0x02	; 2
 24a:	22 83       	std	Z+2, r18	; 0x02
		enm_led_error = LED_INVALID_CONF;
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0b c0       	rjmp	.+22     	; 0x266 <led_off+0x2a>
 250:	ec 01       	movw	r28, r24
	}
	else
	{
		enm_dio_error = dio_write_pin(led->str_dio,DIO_LOW);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	91 81       	ldd	r25, Z+1	; 0x01
 258:	0e 94 cd 01 	call	0x39a	; 0x39a <dio_write_pin>
		
		if (enm_dio_error != DIO_SUCCESS)
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	11 f4       	brne	.+4      	; 0x264 <led_off+0x28>
		{
			enm_led_error = LED_FAILED;
		}
		else
		{
			led->enm_led_status = LED_OFF;
 260:	1a 82       	std	Y+2, r1	; 0x02
 262:	01 c0       	rjmp	.+2      	; 0x266 <led_off+0x2a>
	{
		enm_dio_error = dio_write_pin(led->str_dio,DIO_LOW);
		
		if (enm_dio_error != DIO_SUCCESS)
		{
			enm_led_error = LED_FAILED;
 264:	82 e0       	ldi	r24, 0x02	; 2
			led->enm_led_status = LED_OFF;
			enm_led_error = LED_SUCCESS;
		}
	}
	return enm_led_error;
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <main>:

#include "application/app.h"

int main(void)
{
	app_init();
 26c:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	    /* Replace with your application code */
    while (1) 
    {
		app_start();
 270:	0e 94 66 00 	call	0xcc	; 0xcc <app_start>
 274:	fd cf       	rjmp	.-6      	; 0x270 <main+0x4>

00000276 <dio_init>:
				break;
		}
		
	}
	return enm_dio_error;
}
 276:	98 30       	cpi	r25, 0x08	; 8
 278:	08 f0       	brcs	.+2      	; 0x27c <dio_init+0x6>
 27a:	89 c0       	rjmp	.+274    	; 0x38e <dio_init+0x118>
 27c:	85 30       	cpi	r24, 0x05	; 5
 27e:	08 f0       	brcs	.+2      	; 0x282 <dio_init+0xc>
 280:	88 c0       	rjmp	.+272    	; 0x392 <dio_init+0x11c>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	39 f1       	breq	.+78     	; 0x2d4 <dio_init+0x5e>
 286:	38 f0       	brcs	.+14     	; 0x296 <dio_init+0x20>
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	09 f4       	brne	.+2      	; 0x28e <dio_init+0x18>
 28c:	42 c0       	rjmp	.+132    	; 0x312 <dio_init+0x9c>
 28e:	83 30       	cpi	r24, 0x03	; 3
 290:	09 f4       	brne	.+2      	; 0x294 <dio_init+0x1e>
 292:	5e c0       	rjmp	.+188    	; 0x350 <dio_init+0xda>
 294:	80 c0       	rjmp	.+256    	; 0x396 <dio_init+0x120>
 296:	61 11       	cpse	r22, r1
 298:	0f c0       	rjmp	.+30     	; 0x2b8 <dio_init+0x42>
 29a:	4a b3       	in	r20, 0x1a	; 26
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	b9 01       	movw	r22, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <dio_init+0x32>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	9a 95       	dec	r25
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <dio_init+0x2e>
 2ac:	cb 01       	movw	r24, r22
 2ae:	80 95       	com	r24
 2b0:	84 23       	and	r24, r20
 2b2:	8a bb       	out	0x1a, r24	; 26
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 95       	ret
 2b8:	4a b3       	in	r20, 0x1a	; 26
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	b9 01       	movw	r22, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_init+0x50>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	9a 95       	dec	r25
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_init+0x4c>
 2ca:	cb 01       	movw	r24, r22
 2cc:	84 2b       	or	r24, r20
 2ce:	8a bb       	out	0x1a, r24	; 26
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
 2d4:	61 11       	cpse	r22, r1
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <dio_init+0x80>
 2d8:	47 b3       	in	r20, 0x17	; 23
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	b9 01       	movw	r22, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <dio_init+0x70>
 2e2:	66 0f       	add	r22, r22
 2e4:	77 1f       	adc	r23, r23
 2e6:	9a 95       	dec	r25
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <dio_init+0x6c>
 2ea:	cb 01       	movw	r24, r22
 2ec:	80 95       	com	r24
 2ee:	84 23       	and	r24, r20
 2f0:	87 bb       	out	0x17, r24	; 23
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	08 95       	ret
 2f6:	47 b3       	in	r20, 0x17	; 23
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	b9 01       	movw	r22, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <dio_init+0x8e>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	9a 95       	dec	r25
 306:	e2 f7       	brpl	.-8      	; 0x300 <dio_init+0x8a>
 308:	cb 01       	movw	r24, r22
 30a:	84 2b       	or	r24, r20
 30c:	87 bb       	out	0x17, r24	; 23
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	08 95       	ret
 312:	61 11       	cpse	r22, r1
 314:	0f c0       	rjmp	.+30     	; 0x334 <dio_init+0xbe>
 316:	44 b3       	in	r20, 0x14	; 20
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	b9 01       	movw	r22, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <dio_init+0xae>
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	9a 95       	dec	r25
 326:	e2 f7       	brpl	.-8      	; 0x320 <dio_init+0xaa>
 328:	cb 01       	movw	r24, r22
 32a:	80 95       	com	r24
 32c:	84 23       	and	r24, r20
 32e:	84 bb       	out	0x14, r24	; 20
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	08 95       	ret
 334:	44 b3       	in	r20, 0x14	; 20
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	b9 01       	movw	r22, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <dio_init+0xcc>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	9a 95       	dec	r25
 344:	e2 f7       	brpl	.-8      	; 0x33e <dio_init+0xc8>
 346:	cb 01       	movw	r24, r22
 348:	84 2b       	or	r24, r20
 34a:	84 bb       	out	0x14, r24	; 20
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	08 95       	ret
 350:	61 11       	cpse	r22, r1
 352:	0f c0       	rjmp	.+30     	; 0x372 <dio_init+0xfc>
 354:	41 b3       	in	r20, 0x11	; 17
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	b9 01       	movw	r22, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <dio_init+0xec>
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	9a 95       	dec	r25
 364:	e2 f7       	brpl	.-8      	; 0x35e <dio_init+0xe8>
 366:	cb 01       	movw	r24, r22
 368:	80 95       	com	r24
 36a:	84 23       	and	r24, r20
 36c:	81 bb       	out	0x11, r24	; 17
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	08 95       	ret
 372:	41 b3       	in	r20, 0x11	; 17
 374:	21 e0       	ldi	r18, 0x01	; 1
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	b9 01       	movw	r22, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <dio_init+0x10a>
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	9a 95       	dec	r25
 382:	e2 f7       	brpl	.-8      	; 0x37c <dio_init+0x106>
 384:	cb 01       	movw	r24, r22
 386:	84 2b       	or	r24, r20
 388:	81 bb       	out	0x11, r24	; 17
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	08 95       	ret
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	08 95       	ret
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	08 95       	ret
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret

0000039a <dio_write_pin>:
 39a:	98 30       	cpi	r25, 0x08	; 8
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <dio_write_pin+0x6>
 39e:	89 c0       	rjmp	.+274    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 3a0:	85 30       	cpi	r24, 0x05	; 5
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <dio_write_pin+0xc>
 3a4:	88 c0       	rjmp	.+272    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	39 f1       	breq	.+78     	; 0x3f8 <dio_write_pin+0x5e>
 3aa:	38 f0       	brcs	.+14     	; 0x3ba <dio_write_pin+0x20>
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <dio_write_pin+0x18>
 3b0:	42 c0       	rjmp	.+132    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3b2:	83 30       	cpi	r24, 0x03	; 3
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <dio_write_pin+0x1e>
 3b6:	5e c0       	rjmp	.+188    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 3b8:	80 c0       	rjmp	.+256    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 3ba:	61 11       	cpse	r22, r1
 3bc:	0f c0       	rjmp	.+30     	; 0x3dc <dio_write_pin+0x42>
 3be:	4b b3       	in	r20, 0x1b	; 27
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	b9 01       	movw	r22, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <dio_write_pin+0x32>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	9a 95       	dec	r25
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <dio_write_pin+0x2e>
 3d0:	cb 01       	movw	r24, r22
 3d2:	80 95       	com	r24
 3d4:	84 23       	and	r24, r20
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	08 95       	ret
 3dc:	4b b3       	in	r20, 0x1b	; 27
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	b9 01       	movw	r22, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <dio_write_pin+0x50>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	9a 95       	dec	r25
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <dio_write_pin+0x4c>
 3ee:	cb 01       	movw	r24, r22
 3f0:	84 2b       	or	r24, r20
 3f2:	8b bb       	out	0x1b, r24	; 27
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret
 3f8:	61 11       	cpse	r22, r1
 3fa:	0f c0       	rjmp	.+30     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3fc:	48 b3       	in	r20, 0x18	; 24
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	b9 01       	movw	r22, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	9a 95       	dec	r25
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	cb 01       	movw	r24, r22
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	88 bb       	out	0x18, r24	; 24
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	08 95       	ret
 41a:	48 b3       	in	r20, 0x18	; 24
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	9a 95       	dec	r25
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	cb 01       	movw	r24, r22
 42e:	84 2b       	or	r24, r20
 430:	88 bb       	out	0x18, r24	; 24
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	08 95       	ret
 436:	61 11       	cpse	r22, r1
 438:	0f c0       	rjmp	.+30     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 43a:	45 b3       	in	r20, 0x15	; 21
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	b9 01       	movw	r22, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	9a 95       	dec	r25
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	cb 01       	movw	r24, r22
 44e:	80 95       	com	r24
 450:	84 23       	and	r24, r20
 452:	85 bb       	out	0x15, r24	; 21
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	08 95       	ret
 458:	45 b3       	in	r20, 0x15	; 21
 45a:	21 e0       	ldi	r18, 0x01	; 1
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	b9 01       	movw	r22, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	9a 95       	dec	r25
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	cb 01       	movw	r24, r22
 46c:	84 2b       	or	r24, r20
 46e:	85 bb       	out	0x15, r24	; 21
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	08 95       	ret
 474:	61 11       	cpse	r22, r1
 476:	0f c0       	rjmp	.+30     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 478:	42 b3       	in	r20, 0x12	; 18
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	b9 01       	movw	r22, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	9a 95       	dec	r25
 488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 48a:	cb 01       	movw	r24, r22
 48c:	80 95       	com	r24
 48e:	84 23       	and	r24, r20
 490:	82 bb       	out	0x12, r24	; 18
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	08 95       	ret
 496:	42 b3       	in	r20, 0x12	; 18
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	b9 01       	movw	r22, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	9a 95       	dec	r25
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a8:	cb 01       	movw	r24, r22
 4aa:	84 2b       	or	r24, r20
 4ac:	82 bb       	out	0x12, r24	; 18
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	08 95       	ret
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	08 95       	ret
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	08 95       	ret

000004be <dio_read_pin>:
enm_dio_error_t dio_read_pin(str_dio_t dio_pin,uint8 *data){
	// Rule 18.1, requires that all declarations should be at the top of the function or file scope.
	enm_dio_error_t enm_dio_error = DIO_NOT_COMPLETE;
	// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
	// (OP_1 > OP_2) return 0 if it false and 1 if it true
	if ((dio_pin.pin > 7) || (dio_pin.port > 4) )
 4be:	98 30       	cpi	r25, 0x08	; 8
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <dio_read_pin+0x6>
 4c2:	47 c0       	rjmp	.+142    	; 0x552 <dio_read_pin+0x94>
 4c4:	85 30       	cpi	r24, 0x05	; 5
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <dio_read_pin+0xc>
 4c8:	46 c0       	rjmp	.+140    	; 0x556 <dio_read_pin+0x98>
		enm_dio_error = DIO_VALUE_ERROR;
	}
	else
	{
		enm_dio_error = DIO_SUCCESS;
		switch(dio_pin.port){
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	a9 f0       	breq	.+42     	; 0x4f8 <dio_read_pin+0x3a>
 4ce:	28 f0       	brcs	.+10     	; 0x4da <dio_read_pin+0x1c>
 4d0:	82 30       	cpi	r24, 0x02	; 2
 4d2:	09 f1       	breq	.+66     	; 0x516 <dio_read_pin+0x58>
 4d4:	83 30       	cpi	r24, 0x03	; 3
 4d6:	71 f1       	breq	.+92     	; 0x534 <dio_read_pin+0x76>
 4d8:	40 c0       	rjmp	.+128    	; 0x55a <dio_read_pin+0x9c>
			case DIO_PORTA:
				*data = READ_BIT(DIO_PINA_REG,dio_pin.pin);
 4da:	89 b3       	in	r24, 0x19	; 25
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	a9 01       	movw	r20, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <dio_read_pin+0x2a>
 4e4:	55 95       	asr	r21
 4e6:	47 95       	ror	r20
 4e8:	9a 95       	dec	r25
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <dio_read_pin+0x26>
 4ec:	ca 01       	movw	r24, r20
 4ee:	81 70       	andi	r24, 0x01	; 1
 4f0:	fb 01       	movw	r30, r22
 4f2:	80 83       	st	Z, r24
	{
		enm_dio_error = DIO_VALUE_ERROR;
	}
	else
	{
		enm_dio_error = DIO_SUCCESS;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
		switch(dio_pin.port){
			case DIO_PORTA:
				*data = READ_BIT(DIO_PINA_REG,dio_pin.pin);
				break;
 4f6:	08 95       	ret
			case DIO_PORTB:
				*data =READ_BIT(DIO_PINB_REG,dio_pin.pin);
 4f8:	86 b3       	in	r24, 0x16	; 22
 4fa:	28 2f       	mov	r18, r24
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	a9 01       	movw	r20, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <dio_read_pin+0x48>
 502:	55 95       	asr	r21
 504:	47 95       	ror	r20
 506:	9a 95       	dec	r25
 508:	e2 f7       	brpl	.-8      	; 0x502 <dio_read_pin+0x44>
 50a:	ca 01       	movw	r24, r20
 50c:	81 70       	andi	r24, 0x01	; 1
 50e:	fb 01       	movw	r30, r22
 510:	80 83       	st	Z, r24
	{
		enm_dio_error = DIO_VALUE_ERROR;
	}
	else
	{
		enm_dio_error = DIO_SUCCESS;
 512:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
				*data = READ_BIT(DIO_PINA_REG,dio_pin.pin);
				break;
			case DIO_PORTB:
				*data =READ_BIT(DIO_PINB_REG,dio_pin.pin);
				break;
 514:	08 95       	ret
			case DIO_PORTC:
				*data =READ_BIT(DIO_PINC_REG,dio_pin.pin);
 516:	83 b3       	in	r24, 0x13	; 19
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	a9 01       	movw	r20, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <dio_read_pin+0x66>
 520:	55 95       	asr	r21
 522:	47 95       	ror	r20
 524:	9a 95       	dec	r25
 526:	e2 f7       	brpl	.-8      	; 0x520 <dio_read_pin+0x62>
 528:	ca 01       	movw	r24, r20
 52a:	81 70       	andi	r24, 0x01	; 1
 52c:	fb 01       	movw	r30, r22
 52e:	80 83       	st	Z, r24
	{
		enm_dio_error = DIO_VALUE_ERROR;
	}
	else
	{
		enm_dio_error = DIO_SUCCESS;
 530:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
				*data =READ_BIT(DIO_PINB_REG,dio_pin.pin);
				break;
			case DIO_PORTC:
				*data =READ_BIT(DIO_PINC_REG,dio_pin.pin);
				break;
 532:	08 95       	ret
			case DIO_PORTD:
				*data =READ_BIT(DIO_PIND_REG,dio_pin.pin);
 534:	80 b3       	in	r24, 0x10	; 16
 536:	28 2f       	mov	r18, r24
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	a9 01       	movw	r20, r18
 53c:	02 c0       	rjmp	.+4      	; 0x542 <dio_read_pin+0x84>
 53e:	55 95       	asr	r21
 540:	47 95       	ror	r20
 542:	9a 95       	dec	r25
 544:	e2 f7       	brpl	.-8      	; 0x53e <dio_read_pin+0x80>
 546:	ca 01       	movw	r24, r20
 548:	81 70       	andi	r24, 0x01	; 1
 54a:	fb 01       	movw	r30, r22
 54c:	80 83       	st	Z, r24
	{
		enm_dio_error = DIO_VALUE_ERROR;
	}
	else
	{
		enm_dio_error = DIO_SUCCESS;
 54e:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
				*data =READ_BIT(DIO_PINC_REG,dio_pin.pin);
				break;
			case DIO_PORTD:
				*data =READ_BIT(DIO_PIND_REG,dio_pin.pin);
				break;
 550:	08 95       	ret
	enm_dio_error_t enm_dio_error = DIO_NOT_COMPLETE;
	// Rule 10.1, requires that all operands of logical and relational operators should have a Boolean type.
	// (OP_1 > OP_2) return 0 if it false and 1 if it true
	if ((dio_pin.pin > 7) || (dio_pin.port > 4) )
	{
		enm_dio_error = DIO_VALUE_ERROR;
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	08 95       	ret
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	08 95       	ret
			case DIO_PORTD:
				*data =READ_BIT(DIO_PIND_REG,dio_pin.pin);
				break;
			default:
				// Rule 12.2, which requires that all switch statements should have a default case.
				enm_dio_error = DIO_FAIL;
 55a:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
		
	}
	return enm_dio_error;
}
 55c:	08 95       	ret

0000055e <_exit>:
 55e:	f8 94       	cli

00000560 <__stop_program>:
 560:	ff cf       	rjmp	.-2      	; 0x560 <__stop_program>
